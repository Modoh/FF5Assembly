;FF5 Relocatable C2 Bank Battle Assembly Code
;Assembles in Asar 1.81

;by Modoh (Modohhh@gmail.com)
;https://github.com/Modoh/FF5Assembly

;The foundation of this effort was built on disassembly and documents by InstructrTrepe, everything8215, Squall_FF8 and samurai goroh
;As well as any other contributors to the FF5 Modding Wiki https://www.ff6hacking.com/ff5wiki/index.php/Main_Page

hirom

;FF5 C2 bank sets DBR to $7E and D to $0000
bank $7E
dpbase $0000
optimize dp always
optimize address mirrors
namespace nested on

incsrc "settings.asm"
incsrc "macros.asm"
incsrc "ff5_structures.asm"	;defines and structures used by FF5, labeled
incsrc "outsidec2.asm"		;labels for code called outside C2 bank

;clean the rom area this applies to first, for easier testing
org $C20000	
pad $C2A000

;battle starts by jumping to the start of the C2 bank
org $C20000
StartC2:
	JMP +									;C2/0000: 4C 03 00     JMP $0003	
+	PHP 									;C2/0003: 08           PHP 		
	REP #$30	;16 bit A X Y						;C2/0004: C2 30        REP #$30
	PHB 									;C2/0006: 8B           PHB 
	PHD									;C2/0007: 0B           PHD
	PHA 									;C2/0008: 48           PHA 		
	PHX 									;C2/0009: DA           PHX 		
	PHY 									;C2/000A: 5A           PHY 		
	LDA #$0000								;C2/000B: A9 00 00     LDA #$0000	
	SEP #$20	;8 bit A						;C2/000E: E2 20        SEP #$20		
	REP #$10	;16 bit X Y, again					;C2/0010: C2 10        REP #$10		
	JSR SetupRegisters							;C2/0012: 20 53 00     JSR $0053	
	REP #$20								;C2/0015: C2 20        REP #$20		
	CLC 									;C2/0017: 18           CLC 		
	LDA FieldData.Battles							;C2/0018: AD C0 09     LDA $09C0	
	ADC #$0001								;C2/001B: 69 01 00     ADC #$0001	
	BCC +									;C2/001E: 90 03        BCC $0023	
	LDA #$FFFF	;cap at 65535						;C2/0020: A9 FF FF     LDA #$FFFF
+	STA FieldData.Battles							;C2/0023: 8D C0 09     STA $09C0	
	TDC 									;C2/0026: 7B           TDC 		
	SEP #$20								;C2/0027: E2 20        SEP #$20		
	STZ ResetBattle								;C2/0029: 9C D8 7C     STZ $7CD8	
															
.StartBattle
	JSR StartBattle								;C2/002C: 20 E0 4C     JSR $4CE0	
	LDA #$00								;C2/002F: A9 00        LDA #$00		
	STA $002100	;Screen On						;C2/0031: 8F 00 21 00  STA $002100	
	STA $00420C	;Disable HDMA Channels					;C2/0035: 8F 0C 42 00  STA $00420C	
	STA $00420B	;Disable DMA Channels					;C2/0039: 8F 0B 42 00  STA $00420B	
	STA $004200	;Disable NMI and Auto-Joypad Read			;C2/003D: 8F 00 42 00  STA $004200	
	LDA ResetBattle								;C2/0041: AD D8 7C     LDA $7CD8	
	BNE .StartBattle	;start battle again if it ended with reset	;C2/0044: D0 E6        BNE $002C	
															
	SEI 		;Disable Interrupts					;C2/0046: 78           SEI 		
	JSR SetupRegisters							;C2/0047: 20 53 00     JSR $0053	
	REP #$30								;C2/004A: C2 30        REP #$30		
	PLY 									;C2/004C: 7A           PLY 		
	PLX 									;C2/004D: FA           PLX 
	PLA 									;C2/004E: 68           PLA 
	PLD 									;C2/004F: 2B           PLD 
	PLB 									;C2/0050: AB           PLB 
	PLP 									;C2/0051: 28           PLP 
	RTL									;C2/0052: 6B           RTL		

%org($C20053) 
SetupRegisters:
	LDA #$00							;C2/0053: A9 00		LDA #$00	
	PHA								;C2/0055: 48		PHA		
	PLB		;DBR = $00					;C2/0056: AB		PLB		
	STA $4200	;Disable NMI and Auto-Joypad Read		;C2/0057: 8D 00 42     	STA $4200	
	LDX #$0000							;C2/005A: A2 00 00     	LDX #$0000	
	PHX 								;C2/005D: DA           	PHX 		
	PLD 		;D register $0000				;C2/005E: 2B           	PLD 		
	LDA #$80							;C2/005F: A9 80    	LDA #$80	
	STA $2100	;Screen Off					;C2/0061: 8D 00 21     	STA $2100	
	LDA #$7E							;C2/0064: A9 7E     	LDA #$7E	
	PHA								;C2/0066: 48		PHA		
	PLB 		;DBR = $7E					;C2/0067: AB           	PLB 		
	RTS 								;C2/0068: 60           	RTS 		

%org($C20069)
;calls a routine in the C1 bank
;index of the routine to call in A
;$00: open menu
;$01: close menu
;$02: init battle graphics 
;$03: wait one frame	
;$05: item/magic menu?
;$06: item/magic menu? (called after $05)
;$07: condemn death animation
;$09: display regen/poison damage
;$0A: execute graphics script (often message boxes)
;$0B:
;$0C: escape?
;$0D: victory?
;$0E: battle end?
CallC1:
	JSL Graphics_C1							;C2/0069: 22 00 00 C1  JSL $C10000
	RTS 								;C2/006D: 60           RTS 

%org($C2006E)
;calls music routine in C4 bank
MusicChange:
	INC.w MusicChanged						;C2/006E: EE B3 DB     INC $DBB3		
	STA MusicData							;C2/0071: 8D 00 1D     STA $1D00
	JSL MusicChange_C4						;C2/0074: 22 04 00 C4  JSL $C40004
	STZ.w MusicChanged						;C2/0078: 9C B3 DB     STZ $DBB3
	RTS 								;C2/007B: 60           RTS 


%org($C2007C)
;generates a random number between X and A, inclusive
Random_X_A:
	SEP #$10								;C2/007C: E2 10        SEP #$10		
	STX $3C									;C2/007E: 86 3C        STX $3C		
	CPX #$FF								;C2/0080: E0 FF        CPX #$FF		
	BNE +									;C2/0082: D0 02        BNE $0086	
	BRA .Finish								;C2/0084: 80 41        BRA $00C7	
+	CMP #00									;C2/0086: C9 00        CMP #00		
	BEQ .Finish								;C2/0088: F0 3D        BEQ $00C7	
	CMP $3C									;C2/008A: C5 3C        CMP $3C		
	BEQ .Finish								;C2/008C: F0 39        BEQ $00C7	
	PHA 									;C2/008E: 48           PHA 		
	TDC 									;C2/008F: 7B           TDC 		
	TAX 									;C2/0090: AA           TAX 		
	LDA RNGPointer								;C2/0091: AD 55 7C     LDA $7C55	
	EOR #01									;C2/0094: 49 01	       EOR #01		
	STA RNGPointer								;C2/0096: 8D 55 7C     STA $7C55	
	TAX 									;C2/0099: AA           TAX 		
	LDA $3A,X								;C2/009A: B5 3A        LDA $3A,X	
	TAX 									;C2/009C: AA           TAX 		
	PLA 									;C2/009D: 68           PLA 		
	SEC 									;C2/009E: 38           SEC 		
	SBC $3C									;C2/009F: E5 3C        SBC $3C		
	CMP #$FF								;C2/00A1: C9 FF        CMP #$FF		
	BNE +	 								;C2/00A3: D0 06        BNE $00AB  	
	LDA ROMRNG,X    							;C2/00A5: BF C0 FE C0  LDA $C0FEC0,X    
	BRA .Finish								;C2/00A9: 80 1C        BRA $00C7	
+								
	INC 									;C2/00AB: 1A           INC 		
	STA Divisor								;C2/00AC: 8D B9 7C     STA $7CB9	
	STZ Divisor+1								;C2/00AF: 9C BA 7C     STZ $7CBA	
	LDA ROMRNG,X								;C2/00B2: BF C0 FE C0  LDA $C0FEC0,X	
	TAX 									;C2/00B6: AA           TAX 		
	STX Dividend								;C2/00B7: 8E B7 7C     STX $7CB7	
	REP #$10								;C2/00BA: C2 10        REP #$10		
	JSR Division								;C2/00BC: 20 0C 01     JSR $010C	
	SEP #$10								;C2/00BF: E2 10        SEP #$10		
	CLC 									;C2/00C1: 18           CLC 
	LDA Remainder 								;C2/00C2: AD BD 7C     LDA $7CBD 	
	ADC $3C									;C2/00C5: 65 3C        ADC $3C		
.Finish								
	PHA									;C2/00C7: 48           PHA		
	LDA RNGPointer								;C2/00C8: AD 55 7C     LDA $7C55	
	TAX 									;C2/00CB: AA           TAX 		
	INC $3A,X								;C2/00CC: F6 3A        INC $3A,X	
	REP #$10								;C2/00CE: C2 10        REP #$10		
	PLA 									;C2/00D0: 68           PLA 		
	RTS 									;C2/00D1: 60           RTS 		

%org($C200D2)
;Multiply $2A by $2C and store in $2E.  Maximum multiplication = 2 x 10^10
Multiply_16bit:
	REP #$20							;C2/00D2: C2 20        REP #$20
	LDX #$0010							;C2/00D4: A2 10 00     LDX #$0010
	STZ $2E								;C2/00D7: 64 2E        STZ $2E
	STZ $30								;C2/00D9: 64 30        STZ $30
-
	ROR $2C								;C2/00DB: 66 2C        ROR $2C
	BCC +								;C2/00DD: 90 07        BCC $00E6
	CLC 								;C2/00DF: 18           CLC 
	LDA $2A								;C2/00E0: A5 2A        LDA $2A
	ADC $30								;C2/00E2: 65 30        ADC $30
	STA $30								;C2/00E4: 85 30        STA $30
+
	ROR $30								;C2/00E6: 66 30        ROR $30
	ROR $2E								;C2/00E8: 66 2E        ROR $2E
	DEX 								;C2/00EA: CA           DEX 
	BNE -								;C2/00EB: D0 EE        BNE $00DB
	TDC 								;C2/00ED: 7B           TDC 
	SEP #$20							;C2/00EE: E2 20        SEP #$20
	RTS 								;C2/00F0: 60           RTS 

%org($C200F1)
;Multiply $24 by $25 and store in $26
;uses SNES hardware multiplier
Multiply_8bit:
	LDA $24								;C2/00F1: A5 24        LDA $24
	STA $004202							;C2/00F3: 8F 02 42 00  STA $004202
	LDA $25								;C2/00F7: A5 25        LDA $25
	STA $004203							;C2/00F9: 8F 03 42 00  STA $004203
	REP #$20							;C2/00FD: C2 20        REP #$20
	NOP 	;NOPs while waiting for HW multiplier to finish		;C2/00FF: EA           NOP 		
	NOP 								;C2/0100: EA           NOP 
	NOP 								;C2/0101: EA           NOP 
	LDA $004216							;C2/0102: AF 16 42 00  LDA $004216
	STA $26								;C2/0106: 85 26        STA $26
	TDC 								;C2/0108: 7B           TDC 
	SEP #$20							;C2/0109: E2 20        SEP #$20
	RTS 								;C2/010B: 60           RTS 

%org($C2010C)
;Divide $7CB7 by $7CB9: result in $7CBB, remainder in $7CBD)
;16 bit
Division:
	REP #$20								;C2/010C: C2 20        REP #$20		
	STZ Quotient								;C2/010E: 9C BB 7C     STZ $7CBB	
	STZ Remainder								;C2/0111: 9C BD 7C     STZ $7CBD	
	LDA Dividend								;C2/0114: AD B7 7C     LDA $7CB7	
	BEQ .Finish								;C2/0117: F0 2B        BEQ $0144	
	LDA Divisor								;C2/0119: AD B9 7C     LDA $7CB9	
	BEQ .Finish								;C2/011C: F0 26        BEQ $0144	
	CLC 									;C2/011E: 18           CLC 		
	LDX #$0010								;C2/011F: A2 10 00     LDX #$0010	
-										
	ROL Dividend								;C2/0122: 2E B7 7C     ROL $7CB7	
	ROL Remainder								;C2/0125: 2E BD 7C     ROL $7CBD	
	SEC 									;C2/0128: 38           SEC 		
	LDA Remainder								;C2/0129: AD BD 7C     LDA $7CBD	
	SBC Divisor								;C2/012C: ED B9 7C     SBC $7CB9	
	STA Remainder								;C2/012F: 8D BD 7C     STA $7CBD	
	BCS +									;C2/0132: B0 0A        BCS $013E	
	LDA Remainder								;C2/0134: AD BD 7C     LDA $7CBD	
	ADC Divisor								;C2/0137: 6D B9 7C     ADC $7CB9	
	STA Remainder								;C2/013A: 8D BD 7C     STA $7CBD	
	CLC									;C2/013D: 18           CLC		
+									
	ROL Quotient								;C2/013E: 2E BB 7C     ROL $7CBB	
	DEX 									;C2/0141: CA           DEX 		
	BNE -									;C2/0142: D0 DE        BNE $0122	
.Finish											;:				
	TDC 									;C2/0144: 7B           TDC 		
	SEP #$20								;C2/0145: E2 20        SEP #$20		
	RTS 									;C2/0147: 60           RTS 

if !_StaticMode 
;only include this if we're trying to be as close to the original rom as possible

%org($C20148)
;A block of JIS japenese text is here, which isn't the encoding the game uses for text 
; this is a hidden programmer message and isn't used in-game
	db $20,$20,$20,$20,$20,$BA,$C9,$20					;C2/0148: .byte $20,$20,$20,$20,$20,$BA,$C9,$20
	db $BB,$B8,$CB,$DD,$20,$A6,$20,$BB					;C2/0150: .byte $BB,$B8,$CB,$DD,$20,$A6,$20,$BB
	db $B2,$B1,$B2,$C5,$D9,$20,$B5,$C4					;C2/0158: .byte $B2,$B1,$B2,$C5,$D9,$20,$B5,$C4
	db $B3,$C4,$20,$CB,$B8,$DE,$C1,$20					;C2/0160: .byte $B3,$C4,$20,$CB,$B8,$DE,$C1,$20
	db $C0,$B6,$C9,$D8,$20,$C6,$20,$BB					;C2/0168: .byte $C0,$B6,$C9,$D8,$20,$C6,$20,$BB
	db $BB,$B9,$DE,$D9,$20,$20,$20,$C8					;C2/0170: .byte $BB,$B9,$DE,$D9,$20,$20,$20,$C8
	db $B6,$DE,$DC,$B8,$CA,$DE,$20,$BF					;C2/0178: .byte $B6,$DE,$DC,$B8,$CA,$DE,$20,$BF
	db $C9,$20,$C0,$CF,$BC,$B2,$20,$C9					;C2/0180: .byte $C9,$20,$C0,$CF,$BC,$B2,$20,$C9
	db $20,$D4,$BD,$D7,$B6,$20,$C5,$D7					;C2/0188: .byte $20,$D4,$BD,$D7,$B6,$20,$C5,$D7
	db $DD,$20,$BA,$C4,$20,$A6,$20,$20					;C2/0190: .byte $DD,$20,$BA,$C4,$20,$A6,$20,$20
	db $20,$31,$39,$39,$32,$20,$32,$2E					;C2/0198: .byte $20,$31,$39,$39,$32,$20,$32,$2E
	db $31,$33,$20,$CB,$B8,$DE,$C1,$20					;C2/01A0: .byte $31,$33,$20,$CB,$B8,$DE,$C1,$20
	db $B6,$C2,$CB,$BB,$20,$20,$20,$20					;C2/01A8: .byte $B6,$C2,$CB,$BB,$20,$20,$20,$20
	db $20									;C2/01B0: .byte $20

;kono sakuhin wo saiainaru otouto higuchi takanori ni sasageru
;negawakuba sono tamashii no yasuraka naran koto wo
;1992 2.13 higuchi katsuhisa

;Translation (though note that I don't speak Japanese):

;I devote this work to my beloved younger brother Takanori Higuchi
;I pray that his soul rests in peace
;1992 2.13 Katsuhisa Higuchi

;Katsuhisa Higuchi is one of the FF5 battle programmers
endif

%org($C201B1)
;Multiplication by 256, 128, 64, 32, 16, 8, 4 or 2 via shifts
ShiftMultiply:
.256 
	ASL						;C2/01B1: 0A           ASL  (Multiply by 256)
.128
	ASL						;C2/01B2: 0A           ASL  (Multiply by 128)
.64
	ASL						;C2/01B3: 0A           ASL  (Multiply by 64)
.32
	ASL						;C2/01B4: 0A           ASL  (Multiply by 32)
.16
	ASL						;C2/01B5: 0A           ASL  (Multiply by 16)
.8
	ASL						;C2/01B6: 0A           ASL  (Multiply by 8)
.4
	ASL						;C2/01B7: 0A           ASL  (Multiply by 4)
.2
	ASL						;C2/01B8: 0A           ASL  (Multiply by 2)
	RTS						;C2/01B9: 60           RTS 

%org($C201BA)
;Division by 256, 128, 64, 32, 16, 8, 4 or 2 via shifts
ShiftDivide:
.256
	LSR						;C2/01BA: 4A           LSR  (Divide by 256)
.128
	LSR						;C2/01BB: 4A           LSR  (Divide by 128)
.64
	LSR						;C2/01BC: 4A           LSR  (Divide by 64)
.32
	LSR						;C2/01BD: 4A           LSR  (Divide by 32)
.16
	LSR						;C2/01BE: 4A           LSR  (Divide by 16)
.8
	LSR						;C2/01BF: 4A           LSR  (Divide by 8)
.4
	LSR						;C2/01C0: 4A           LSR  (Divide by 4)
.2
	LSR						;C2/01C1: 4A           LSR  (Divide by 2)
	RTS						;C2/01C2: 60           RTS 

%org($C201C3)
;Count number of set bits in 8-bit accumulator, store in X
CountSetBits:
	LDX #$0000					;C2/01C3: A2 00 00     LDX #$0000
	LDY #$0008					;C2/01C6: A0 08 00     LDY #$0008
-	ASL 						;C2/01C9: 0A           ASL 
	BCC +						;C2/01CA: 90 01        BCC $01CD
	INX 						;C2/01CC: E8           INX 
+	DEY 						;C2/01CD: 88           DEY 
	BNE -						;C2/01CE: D0 F9        BNE $01C9
	RTS 						;C2/01D0: 60           RTS 

%org($C201D1)
;Uses a rom table to clear a single bit in A determined by X
ClearBit_X:
	AND ROMBitUnset,X				;C2/01D1: 3F DE EC D0  AND $D0ECDE,X
	RTS						;C2/01D5: 60           RTS 

%org($C201D6)
;Uses a rom table to set a single bit in A determined by X
SetBit_X:
	ORA ROMBitSet,X					;C2/01D6: 1F E6 EC D0  ORA $D0ECE6,X
	RTS 						;C2/01DA: 60           RTS 

%org($C201DB)
;Uses a rom table to select a single bit from A determined by X
SelectBit_X:
	AND ROMBitSet,X					;C2/01DB: 3F E6 EC D0  AND $D0ECE6,X
	RTS 						;C2/01DF: 60           RTS 

%org($C201E0)
;X = X + 128
;Primarily used to iterate through character structures with that size
NextCharOffset:
	REP #$20				;C2/01E0: C2 20        REP #$20
	CLC 					;C2/01E2: 18           CLC 
	TXA 					;C2/01E3: 8A           TXA 
	ADC #$0080				;C2/01E4: 69 80 00     ADC #$0080
	TAX 					;C2/01E7: AA           TAX 
	TDC 					;C2/01E8: 7B           TDC 
	SEP #$20				;C2/01E9: E2 20        SEP #$20
	RTS 					;C2/01EB: 60           RTS 

%org($C201EC)
;$32 = A * 128
;CalculateCharOffset(A): X = $32 = attacker/target offset A*128
CalculateCharOffset:
	REP #$20				;C2/01EC: C2 20        REP #$20
	JSR ShiftMultiply_128			;C2/01EE: 20 B2 01     JSR $01B2		
	TAX 					;C2/01F1: AA           TAX 
	TDC 					;C2/01F2: 7B           TDC 
	SEP #$20				;C2/01F3: E2 20        SEP #$20
	STX AttackerOffset			;C2/01F5: 86 32        STX $32		
	RTS 					;C2/01F7: 60           RTS 

%org($C201F8)
;Y = $34 = A * 650
;offset into CharSpells struct for current character
CalculateSpellOffset:
	ASL 						;C2/01F8: 0A           ASL 
	TAX 						;C2/01F9: AA           TAX 
	REP #$20					;C2/01FA: C2 20        REP #$20
	LDA ROMTimes650w,X				;C2/01FC: BF 59 ED D0  LDA $D0ED59,X
	STA SpellOffset					;C2/0200: 85 34        STA $34
	TAY 						;C2/0202: A8           TAY 
	TDC 						;C2/0203: 7B           TDC 
	SEP #$20					;C2/0204: E2 20        SEP #$20
	RTS 						;C2/0206: 60           RTS 
	
%org($C20207)
;Get Timer Offset from ROM (A: Participant index): Y = $36 = timer offset
GetTimerOffset:
	PHX						;C2/0207: DA           PHX
	ASL						;C2/0208: 0A           ASL
	TAX 						;C2/0209: AA           TAX 
	REP #$20					;C2/020A: C2 20        REP #$20
	LDA ROMTimes11w,X	;from ROM		;C2/020C: BF 61 ED D0  LDA $D0ED61,X   
	STA TimerOffset					;C2/0210: 85 36        STA $36
	TAY 						;C2/0212: A8           TAY 
	TDC 						;C2/0213: 7B           TDC 
	SEP #$20					;C2/0214: E2 20        SEP #$20
	PLX 						;C2/0216: FA           PLX 
	RTS 						;C2/0217: 60           RTS 

%org($C20218)
;Wipes structures related to pending animations, message boxes, and damage displays
WipeDisplayStructures:
	LDX #$0090								;C2/0218: A2 90 00     LDX #$0090

.WipeAnimBlocks		;wipes Anim structure and blocking information after it, $3BCC-$3C5B
	STZ ActionAnim.Flags,X							;C2/021B: 9E CC 3B     STZ $3BCC,X
	DEX 									;C2/021E: CA           DEX 
	BPL .WipeAnimBlocks							;C2/021F: 10 FA        BPL $021B

	TXA 		;A now $FF						;C2/0221: 8A           TXA 
	LDX #$037F								;C2/0222: A2 7F 03     LDX #$037F
.WipeGFXQueueDamage	;wipes GFXQueue structure and DisplayDamage after it with $FF, $384C-$3BCB
	STA !GFXQueue,X								;C2/0225: 9D 4C 38     STA $384C,X
	DEX 									;C2/0228: CA           DEX 
	BPL .WipeGFXQueueDamage							;C2/0229: 10 FA        BPL $0225

	LDX #$005F								;C2/022B: A2 5F 00     LDX #$005F
.WipeMessagesTimers	;wipes Message Boxes and Timer structures after them with $FF, $3C5F-$3E8D
	STA MessageBoxes,X							;C2/022E: 9D 5F 3C     STA $3C5F,X
	DEX 									;C2/0231: CA           DEX 
	BPL .WipeMessagesTimers							;C2/0232: 10 FA        BPL $022E
	
	TDC 									;C2/0234: 7B           TDC 
	LDX #$000F								;C2/0235: A2 0F 00     LDX #$000F
.WipeReflectCounters	;wipes $7B49-7B58
	STZ CounterReflecteeTable,X						;C2/0238: 9E 49 7B     STZ $7B49,X
	DEX 									;C2/023B: CA           DEX 
	BPL .WipeReflectCounters						;C2/023C: 10 FA        BPL $0238
	
	LDX #$002F								;C2/023E: A2 2F 00     LDX #$002F
.WipeMessageBoxData	;wipes numbers used for message boxes, $3CBF-$3CEE
	STZ MessageBoxData,X							;C2/0241: 9E BF 3C     STZ $3CBF,X
	DEX 									;C2/0244: CA           DEX 
	BPL .WipeMessageBoxData							;C2/0245: 10 FA        BPL $0241
	
	RTS 									;C2/0247: 60           RTS 

%org($C20248)
;Recalculate Stats+Level w/Song(X: Character Offset)
CopyStatsWithBonuses:
	PHX        								;C2/0248: DA           PHX             
	PHY        								;C2/0249: 5A           PHY             
	TDC        								;C2/024A: 7B           TDC             
	TAY        								;C2/024B: A8           TAY             

.AddCopyStats			;adds/copies Str/Agi/Vit/Mag
	CLC									;C2/024C: 18           CLC
	LDA CharStruct.EquippedStr,X						;C2/024D: BD 28 20     LDA $2028,X     
	ADC CharStruct.BonusStr,X						;C2/0250: 7D 74 20     ADC $2074,X     
	CMP #$64		;100						;C2/0253: C9 64        CMP #$64
	BCC +									;C2/0255: 90 02        BCC $0259
	LDA #$63   		;cap at 99					;C2/0257: A9 63        LDA #$63        
+	STA Strength,Y								;C2/0259: 99 E1 7B     STA $7BE1,Y     
	INX									;C2/025C: E8           INX
	INY									;C2/025D: C8           INY
	CPY #$0004 								;C2/025E: C0 04 00     CPY #$0004      
	BNE .AddCopyStats							;C2/0261: D0 E9        BNE $024C

	PLY									;C2/0263: 7A           PLY
	PLX 									;C2/0264: FA           PLX 
	CLC 									;C2/0265: 18           CLC 
	LDA CharStruct.Level,X							;C2/0266: BD 02 20     LDA $2002,X     
	ADC CharStruct.BonusLevel,X						;C2/0269: 7D 78 20     ADC $2078,X     
	CMP #$64		;100						;C2/026C: C9 64        CMP #$64
	BCC +									;C2/026E: 90 02        BCC $0272
	LDA #$63   		;cap at 99					;C2/0270: A9 63        LDA #$63        
+	STA Level  								;C2/0272: 8D E5 7B     STA $7BE5       
	RTS 									;C2/0275: 60           RTS 

%org($C20276)
;Params: 	A = character index
;		$3C5D (TempDisplayDamage) = displayed damage
CopyDisplayDamage:
	TAX 								;C2/0276: AA           TAX 
	LDA ROMCombatantReorder,X	;party members after monsters	;C2/0277: BF 79 ED D0  LDA $D0ED79,X
	ASL 								;C2/027B: 0A           ASL 
	TAX 								;C2/027C: AA           TAX 
	LDA TempDisplayDamage						;C2/027D: AD 5D 3C     LDA $3C5D
	STA DisplayDamage,X						;C2/0280: 9D 4C 3A     STA $3A4C,X
	LDA TempDisplayDamage+1						;C2/0283: AD 5E 3C     LDA $3C5E
	STA DisplayDamage+1,X						;C2/0286: 9D 4D 3A     STA $3A4D,X
	RTS 								;C2/0289: 60           RTS 

%org($C2028A)
%sub(WipeActionData)
WipeActionData:
	STZ.w TargetIndex						;C2/028A: 9C 48 00     STZ $0048
	LDX #$0133							;C2/028D: A2 33 01     LDX #$0133
-	STZ $79F9,X	;clears memory $79F9 - $7B2C			;C2/0290: 9E F9 79     STZ $79F9,X
	DEX 								;C2/0293: CA           DEX 
	BPL -								;C2/0294: 10 FA        BPL $0290
	TXA 		;now $FF					;C2/0296: 8A           TXA 
	LDX #$0010							;C2/0297: A2 10 00     LDX #$0010
-	STA $7B2D,X	;sets memory $7B2D - $7B3D to $FF		;C2/029A: 9D 2D 7B     STA $7B2D,X
	DEX 								;C2/029D: CA           DEX 
	BPL -								;C2/029E: 10 FA        BPL $029A
	TDC 								;C2/02A0: 7B           TDC 
	RTS 								;C2/02A1: 60           RTS 
%endsub()

%org($C202A2)
;(Random number from 0..99)
Random_0_99:
	TDC 									;C2/02A2: 7B           TDC 		
	TAX 									;C2/02A3: AA           TAX 		
	LDA #$63								;C2/02A4: A9 63        LDA #$63		
	JMP Random_X_A								;C2/02A6: 4C 7C 00     JMP $007C 	

%org($C202A9)
;combines MonsterTargets and PartyTargets into a combined target bitmask PPPPMMMM MMMM0000 to match normal index order
BuildTargetBitmask:
	LDA MonsterTargets						;C2/02A9: A5 65        LDA $65
	PHA 								;C2/02AB: 48           PHA 
	AND #$F0							;C2/02AC: 29 F0        AND #$F0
	LSR 								;C2/02AE: 4A           LSR 
	LSR 								;C2/02AF: 4A           LSR 
	LSR 								;C2/02B0: 4A           LSR 
	LSR 								;C2/02B1: 4A           LSR 
	ORA PartyTargets						;C2/02B2: 05 66        ORA $66
	STA TempTargetBitmask						;C2/02B4: 8D 20 27     STA $2720
	PLA 								;C2/02B7: 68           PLA 
	AND #$0F							;C2/02B8: 29 0F        AND #$0F
	ASL 								;C2/02BA: 0A           ASL 
	ASL 								;C2/02BB: 0A           ASL 
	ASL 								;C2/02BC: 0A           ASL 
	ASL 								;C2/02BD: 0A           ASL 
	STA TempTargetBitmask+1						;C2/02BE: 8D 21 27     STA $2721
	RTS 								;C2/02C1: 60           RTS 

%org($C202C2)
;returns with number of targets minus 1 in A and $2620 (TempTargetting) 
;notably, 0 if single target
CheckMultiTarget:
	LDA MonsterTargets						;C2/02C2: A5 65        LDA $65
	ORA PartyTargets						;C2/02C4: 05 66        ORA $66
	JSR CountSetBits						;C2/02C6: 20 C3 01     JSR $01C3    
	DEX 								;C2/02C9: CA           DEX 
	TXA 								;C2/02CA: 8A           TXA 
	STA TempTargetting						;C2/02CB: 8D A0 26     STA $26A0
	RTS 								;C2/02CE: 60           RTS 

%org($C202CF)
RemoveInactiveTargets:
	STZ NoValidTargets						;C2/02CF: 9C 29 7C     STZ $7C29
	TDC 								;C2/02D2: 7B           TDC 
	TAX 								;C2/02D3: AA           TAX 
	STX $0E								;C2/02D4: 86 0E        STX $0E

.Loop
	LDA ActiveParticipants,X					;C2/02D6: BD C2 3E     LDA $3EC2,X
	BEQ .Inactive							;C2/02D9: F0 10        BEQ $02EB
	LDY $0E								;C2/02DB: A4 0E        LDY $0E
	LDA CharStruct.Status1,Y					;C2/02DD: B9 1A 20     LDA $201A,Y
	AND #$C0	;dead/stone					;C2/02E0: 29 C0        AND #$C0
	BNE .Inactive							;C2/02E2: D0 07        BNE $02EB
	LDA CharStruct.Status4,Y					;C2/02E4: B9 1D 20     LDA $201D,Y
	AND #$81	;erased/hiding					;C2/02E7: 29 81        AND #$81
	BEQ .Next							;C2/02E9: F0 1C        BEQ $0307

.Inactive
	PHX 								;C2/02EB: DA           PHX 
	CPX #$0004	;monster check					;C2/02EC: E0 04 00     CPX #$0004
	BCS .Monster							;C2/02EF: B0 09        BCS $02FA
	LDA PartyTargets						;C2/02F1: A5 66        LDA $66
	JSR ClearBit_X     						;C2/02F3: 20 D1 01     JSR $01D1    
	STA PartyTargets						;C2/02F6: 85 66        STA $66
	BRA .NextPLX							;C2/02F8: 80 0C        BRA $0306
.Monster
	TXA 								;C2/02FA: 8A           TXA 
	SEC 								;C2/02FB: 38           SEC 
	SBC #$04	;monster index					;C2/02FC: E9 04        SBC #$04
	TAX 								;C2/02FE: AA           TAX 
	LDA MonsterTargets						;C2/02FF: A5 65        LDA $65
	JSR ClearBit_X     						;C2/0301: 20 D1 01     JSR $01D1    
	STA MonsterTargets						;C2/0304: 85 65        STA $65

.NextPLX
	PLX 								;C2/0306: FA           PLX 
.Next
	REP #$20							;C2/0307: C2 20        REP #$20
	CLC 								;C2/0309: 18           CLC 
	LDA $0E								;C2/030A: A5 0E        LDA $0E
	ADC #$0080	;next CharStruct offset				;C2/030C: 69 80 00     ADC #$0080
	STA $0E								;C2/030F: 85 0E        STA $0E
	TDC 								;C2/0311: 7B           TDC 
	SEP #$20							;C2/0312: E2 20        SEP #$20
	INX 								;C2/0314: E8           INX 
	CPX #$000C	;12 battle participants				;C2/0315: E0 0C 00     CPX #$000C
	BNE .Loop							;C2/0318: D0 BC        BNE $02D6
	LDA PartyTargets						;C2/031A: A5 66        LDA $66
	ORA MonsterTargets						;C2/031C: 05 65        ORA $65
	BNE .Ret							;C2/031E: D0 03        BNE $0323
	INC NoValidTargets						;C2/0320: EE 29 7C     INC $7C29
.Ret	RTS 								;C2/0323: 60           RTS 

%org($C20324)
;Copies magic data for spell in A from ROM to AttackInfo (offset Y)
CopyROMMagicInfo:
	REP #$20								;C2/0324: C2 20        REP #$20		
	JSR ShiftMultiply_8	;Size of Magic Data				;C2/0326: 20 B6 01     JSR $01B6	
	TAX 									;C2/0329: AA           TAX 		
	TDC 									;C2/032A: 7B           TDC 		
	SEP #$20								;C2/032B: E2 20        SEP #$20		
	STZ $3D									;C2/032D: 64 3D        STZ $3D		
.CopyFirst5                                                                                                            
	LDA !ROMMagicInfo,X							;C2/032F: BF 80 0B D1  LDA $D10B80,X	
	STA !AttackInfo,Y							;C2/0333: 99 FC 79     STA $79FC,Y	
	INX 									;C2/0336: E8           INX 		
	INY 									;C2/0337: C8           INY 		
	INC $3D									;C2/0338: E6 3D        INC $3D		
	LDA $3D									;C2/033A: A5 3D        LDA $3D		
	CMP #$05								;C2/033C: C9 05        CMP #$05	
	BNE .CopyFirst5								;C2/033E: D0 EF        BNE $032F	
	INY 			;AttackInfo has 4 bytes that 			;C2/0340: C8           INY 		
	INY 			;don't apply to magic				;C2/0341: C8           INY 		
	INY 									;C2/0342: C8           INY 		
	INY 									;C2/0343: C8           INY 		
.CopyLast3
	LDA !ROMMagicInfo,X							;C2/0344: BF 80 0B D1  LDA $D10B80,X	
	STA !AttackInfo,Y							;C2/0348: 99 FC 79     STA $79FC,Y	
	INX 									;C2/034B: E8           INX 		
	INY 									;C2/034C: C8           INY 		
	INC $3D									;C2/034D: E6 3D        INC $3D		
	LDA $3D									;C2/034F: A5 3D        LDA $3D		
	CMP #$08								;C2/0351: C9 08        CMP #$08	
	BNE .CopyLast3								;C2/0353: D0 EF        BNE $0344	
	RTS 									;C2/0355: 60           RTS 

%org($C20356)
;Advances the current message box offets to the next set of messgae boxes
;(for multi-commands like x-magic)
NextMessageBoxSet:
	CLC 								;C2/0356: 18           CLC 
	LDA MessageBoxOffset						;C2/0357: AD EF 3C     LDA $3CEF
	ADC #$18		;+24, next message box set		;C2/035A: 69 18        ADC #$18
	STA MessageBoxOffset						;C2/035C: 8D EF 3C     STA $3CEF
	CLC 								;C2/035F: 18           CLC 
	LDA MessageBoxDataOffset					;C2/0360: AD F0 3C     LDA $3CF0
	ADC #$0C		;+12, next message box data set		;C2/0363: 69 0C        ADC #$0C
	STA MessageBoxDataOffset					;C2/0365: 8D F0 3C     STA $3CF0
	RTS 								;C2/0368: 60           RTS 

%org($C20369)
;(Y:index into in-battle inventory)
;(Returns A: bitmask depending on equipment type and some character properties)
; format seems to be 2 bits per character, 00 for usable and 10 for not
%sub(GetItemUsableY)
GetItemUsableY:
	LDA Temp,Y								;C2/0369: B9 20 26     LDA $2620,Y	
	BPL +									;C2/036C: 10 05        BPL $0373	
	LDA #$AA		;usable for none				;C2/036E: A9 AA        LDA #$AA		
	JMP .Ret								;C2/0370: 4C F9 03     JMP $03F9	

+	AND #$40		;Consumable					;C2/0373: 29 40        AND #$40		
	BEQ .Equipment								;C2/0375: F0 0F        BEQ $0386	
	LDA InventoryFlags,Y							;C2/0377: B9 34 2B     LDA $2B34,Y	
	AND #$20								;C2/037A: 29 20        AND #$20		
	BEQ .RetZero								;C2/037C: F0 04        BEQ $0382	
	LDA #$AA		;usable for none				;C2/037E: A9 AA        LDA #$AA
	BRA .Ret								;C2/0380: 80 77        BRA $03F9	

.RetZero								
	LDA #$00		;usable for all					;C2/0382: A9 00        LDA #$00		
	BRA .Ret								;C2/0384: 80 73        BRA $03F9	

.Equipment		
	LDA Temp,Y								;C2/0386: B9 20 26     LDA $2620,Y	
	ASL 									;C2/0389: 0A           ASL 		
	ASL 									;C2/038A: 0A           ASL 		
	TAX 									;C2/038B: AA           TAX 		
	TDC 									;C2/038C: 7B           TDC 		
	TAY 									;C2/038D: A8           TAY 		
										;:					
-	LDA !ROMItemEquippable,X						;C2/038E: BF 80 24 D1  LDA $D12480,X	
	STA !TempEquippable,Y							;C2/0392: 99 20 27     STA $2720,Y	
	INX 									;C2/0395: E8           INX 		
	INY 									;C2/0396: C8           INY 		
	CPY #$0004								;C2/0397: C0 04 00     CPY #$0004	
	BNE -									;C2/039A: D0 F2        BNE $038E	
										;.					
	TDC									;C2/039C: 7B           TDC		
	TAX 									;C2/039D: AA           TAX 		
	TAY 									;C2/039E: A8           TAY 		
	LDA #$AA								;C2/039F: A9 AA        LDA #$AA		
	STA $0E									;C2/03A1: 85 0E        STA $0E		
										;:					
.DetermineEquippableLoop
	LDA CharEquippable.Weapons,X						;C2/03A3: BD 99 41     LDA $4199,X	
	AND TempEquippable.Weapons,Y						;C2/03A6: 39 20 27     AND $2720,Y	
	BNE .Match								;C2/03A9: D0 18        BNE $03C3
	LDA CharEquippable.Weapons+1,X						;C2/03AB: BD 9A 41     LDA $419A,X
	AND TempEquippable.Weapons+1,Y						;C2/03AE: 39 21 27     AND $2721,Y
	BNE .Match								;C2/03B1: D0 10        BNE $03C3
	LDA CharEquippable.Armor,X						;C2/03B3: BD 9B 41     LDA $419B,X
	AND TempEquippable.Armor,Y						;C2/03B6: 39 22 27     AND $2722,Y
	BNE .Match								;C2/03B9: D0 08        BNE $03C3
	LDA CharEquippable.Armor+1,X						;C2/03BB: BD 9C 41     LDA $419C,X
	AND TempEquippable.Armor+1,Y						;C2/03BE: 39 23 27     AND $2723,Y
	BEQ .NextChar								;C2/03C1: F0 2B        BEQ $03EE
										
.Match
	TXA									;C2/03C3: 8A           TXA		
	LSR 									;C2/03C4: 4A           LSR 
	LSR 									;C2/03C5: 4A           LSR 		
	BNE .Check1								;C2/03C6: D0 08        BNE $03D0	
										;.					
	LDA $0E									;C2/03C8: A5 0E        LDA $0E		
	AND #$7F		;clear first character bit			;C2/03CA: 29 7F        AND #$7F		
	STA $0E									;C2/03CC: 85 0E        STA $0E		
	BRA .NextChar								;C2/03CE: 80 1E        BRA $03EE	

.Check1								
	CMP #$01								;C2/03D0: C9 01        CMP #$01		
	BNE .Check2								;C2/03D2: D0 08        BNE $03DC	
	LDA $0E									;C2/03D4: A5 0E        LDA $0E		
	AND #$DF		;clear second character bit			;C2/03D6: 29 DF        AND #$DF		
	STA $0E									;C2/03D8: 85 0E        STA $0E
	BRA .NextChar								;C2/03DA: 80 12        BRA $03EE
.Check2								
	CMP #$02								;C2/03DC: C9 02        CMP #$02		
	BNE .Other       							;C2/03DE: D0 08        BNE $03E8       
	LDA $0E          							;C2/03E0: A5 0E        LDA $0E         
	AND #$F7         	;clear third character bit			;C2/03E2: 29 F7        AND #$F7        
	STA $0E									;C2/03E4: 85 0E        STA $0E
	BRA .NextChar								;C2/03E6: 80 06        BRA $03EE
.Other								
	LDA $0E									;C2/03E8: A5 0E        LDA $0E		
	AND #$FD		;clear fourth character bit			;C2/03EA: 29 FD        AND #$FD		
	STA $0E          							;C2/03EC: 85 0E        STA $0E         

.NextChar
	INX 									;C2/03EE: E8           INX 
	INX 									;C2/03EF: E8           INX 
	INX 									;C2/03F0: E8           INX 
	INX 									;C2/03F1: E8           INX 
	CPX #$0010			;4 bytes * 4 characters			;C2/03F2: E0 10 00     CPX #$0010
	BNE .DetermineEquippableLoop						;C2/03F5: D0 AC        BNE $03A3

	LDA $0E									;C2/03F7: A5 0E        LDA $0E
.Ret	RTS 									;C2/03F9: 60           RTS 
%endsub()

%org($C203FA)
;(sets up equipment type, targetting, and usable bytes for one item in battle inventory)
;(A: item#)
;(Y: inventory offset to write data about item)
;Returns with EquipmentType low bytes in Temp ($2620), $40 there if it's a consumable, $80 if unusable
SetupInventoryInfo:
	BEQ .ItemZero								;C2/03FA: F0 31        BEQ $042D	
	CMP #$E0								;C2/03FC: C9 E0        CMP #$E0		
	BCS .Consumable		;>$E0 is consumable				;C2/03FE: B0 71        BCS $0471	
	CMP #$80								;C2/0400: C9 80        CMP #$80		
	BCC .Weapon		;<$80 is a weapon				;C2/0402: 90 35        BCC $0439	

.Armor				;otherwise it's armor
	SEC 									;C2/0404: 38           SEC 		
	SBC #$80		;remove the armor offset			;C2/0405: E9 80        SBC #$80		
	REP #$20								;C2/0407: C2 20        REP #$20		
	ASL 									;C2/0409: 0A           ASL 		
	ASL 									;C2/040A: 0A           ASL 		
	STA $0E									;C2/040B: 85 0E        STA $0E		
	ASL 									;C2/040D: 0A           ASL 		
	CLC 									;C2/040E: 18           CLC 		
	ADC $0E			;armor *12 (size of equipment struct)		;C2/040F: 65 0E        ADC $0E		
	TAX 									;C2/0411: AA           TAX 		
	TDC 									;C2/0412: 7B           TDC 		
	SEP #$20								;C2/0413: E2 20        SEP #$20		
	LDA !ROMArmor.Targetting,X						;C2/0415: BF 00 06 D1  LDA $D10600,X	
	AND #$08		;target enemy?					;C2/0419: 29 08        AND #$08		
	BEQ .ItemZero								;C2/041B: F0 10        BEQ $042D	
	LDA !ROMArmor.EquipmentType,X						;C2/041D: BF 02 06 D1  LDA $D10602,X	
	AND #$3F		;mask to equip info				;C2/0421: 29 3F        AND #$3F		
	STA Temp,Y								;C2/0423: 99 20 26     STA $2620,Y	
	LDA #$5A								;C2/0426: A9 5A        LDA #$5A
	STA InventoryFlags,Y							;C2/0428: 99 34 2B     STA $2B34,Y	
	BRA .Ret 								;C2/042B: 80 63        BRA $0490	
	
.ItemZero	;or armor targettng bit 08h
	LDA #$80		;not usable					;C2/042D: A9 80        LDA #$80
	STA Temp,Y								;C2/042F: 99 20 26     STA $2620,Y	
	LDA #$5A								;C2/0432: A9 5A        LDA #$5A
	STA InventoryFlags,Y							;C2/0434: 99 34 2B     STA $2B34,Y	
	BRA .Ret								;C2/0437: 80 57        BRA $0490	

.Weapon
	REP #$20								;C2/0439: C2 20        REP #$20		
	ASL 									;C2/043B: 0A           ASL 		
	ASL             							;C2/043C: 0A           ASL             
	STA $0E         							;C2/043D: 85 0E        STA $0E         
	ASL             							;C2/043F: 0A           ASL             
	CLC             							;C2/0440: 18           CLC             
	ADC $0E         	;weapon *12					;C2/0441: 65 0E        ADC $0E         
	TAX             							;C2/0443: AA           TAX             
	TDC             							;C2/0444: 7B           TDC             
	SEP #$20        							;C2/0445: E2 20        SEP #$20        
	LDA !ROMWeapons.DoubleGrip,X						;C2/0447: BF 04 00 D1  LDA $D10004,X	
	AND #$80								;C2/044B: 29 80        AND #$80		
	JSR ShiftDivide_32	;shift to 04h bit				;C2/044D: 20 BD 01     JSR $01BD	
	STA InventoryFlags,Y							;C2/0450: 99 34 2B     STA $2B34,Y	
	LDA !ROMWeapons.Targetting,X						;C2/0453: BF 00 00 D1  LDA $D10000,X	
	STA InventoryTargetting,Y						;C2/0457: 99 34 2A     STA $2A34,Y	
	LDA !ROMWeapons.EquipmentType,X						;C2/045A: BF 02 00 D1  LDA $D10002,X	
	PHA 									;C2/045E: 48           PHA 		
	AND #$C0		;flag bits from equipment type(? and throwable)	;C2/045F: 29 C0        AND #$C0		
	ORA #$1A		;set some more bits (??)			;C2/0461: 09 1A        ORA #$1A		
	ORA InventoryFlags,Y	;keep existing bits (double grip)		;C2/0463: 19 34 2B     ORA $2B34,Y	
	STA InventoryFlags,Y							;C2/0466: 99 34 2B     STA $2B34,Y	
	PLA 									;C2/0469: 68           PLA 		
	AND #$3F		;mask to just equip info			;C2/046A: 29 3F        AND #$3F		
	STA Temp,Y								;C2/046C: 99 20 26     STA $2620,Y	
	BRA .Ret								;C2/046F: 80 1F        BRA $0490	

.Consumable								
	SEC 									;C2/0471: 38           SEC 		
	SBC #$E0								;C2/0472: E9 E0        SBC #$E0		
	REP #$20								;C2/0474: C2 20        REP #$20		
	ASL 									;C2/0476: 0A           ASL 		
	ASL 									;C2/0477: 0A           ASL 
	ASL 									;C2/0478: 0A           ASL 		
	TAX 									;C2/0479: AA           TAX 		
	TDC 									;C2/047A: 7B           TDC 		
	SEP #$20								;C2/047B: E2 20        SEP #$20		
	LDA ROMConsumables.Targetting,X						;C2/047D: BF 80 0A D1  LDA $D10A80,X	
	STA InventoryTargetting,Y						;C2/0481: 99 34 2A     STA $2A34,Y	
	LDA ROMConsumables.Misc,X						;C2/0484: BF 82 0A D1  LDA $D10A82,X	
	STA InventoryFlags,Y							;C2/0488: 99 34 2B     STA $2B34,Y	
	LDA #$40		;consumable					;C2/048B: A9 40        LDA #$40		
	STA Temp,Y								;C2/048D: 99 20 26     STA $2620,Y	

.Ret 	RTS 									;C2/0490: 60           RTS 

%org($C20491)
;Utility routine used for the +% HP/MP passives on level up
;inputs: 
;$2E: 4 byte multiply result (value * percentage)
;$08: 2 byte base value
;$0A: 2 byte cap (generally 999 or 9999)
;output:
;$08: 2 byte value (value*percentage/100)+Base, capped
%sub(ApplyPercentage)
ApplyPercentage:
	LDX #$000F								;C2/0491: A2 0F 00     LDX #$000F
-	STZ $0E,X		;clear $0E-1D					;C2/0494: 74 0E        STZ $0E,X
	DEX 									;C2/0496: CA           DEX 
	BPL -									;C2/0497: 10 FB        BPL $0494
	LDX #$0064		;100						;C2/0499: A2 64 00     LDX #$0064
	STX $12									;C2/049C: 86 12        STX $12
	LDX $2E			;previous multiply result (low bytes)		;C2/049E: A6 2E        LDX $2E
	STX $0E									;C2/04A0: 86 0E        STX $0E
	LDA $30			;(high bytes)					;C2/04A2: A5 30        LDA $30
	STA $10									;C2/04A4: 85 10        STA $10

;32 bit division routine
;Dividend: 	$0E-11
;Divisor: 	$12-15
;Quotient: 	$16-19
;Remainder: 	$1A-1C
	REP #$20								;C2/04A6: C2 20        REP #$20
	CLC 									;C2/04A8: 18           CLC 
	LDX #$0020								;C2/04A9: A2 20 00     LDX #$0020
-	ROL $0E									;C2/04AC: 26 0E        ROL $0E
	ROL $10									;C2/04AE: 26 10        ROL $10
	ROL $1A									;C2/04B0: 26 1A        ROL $1A
	ROL $1C									;C2/04B2: 26 1C        ROL $1C
	SEC 									;C2/04B4: 38           SEC 
	LDA $1A									;C2/04B5: A5 1A        LDA $1A
	SBC $12									;C2/04B7: E5 12        SBC $12
	STA $1A									;C2/04B9: 85 1A        STA $1A
	LDA $1C									;C2/04BB: A5 1C        LDA $1C
	SBC $14									;C2/04BD: E5 14        SBC $14
	STA $1C									;C2/04BF: 85 1C        STA $1C
	BCS +									;C2/04C1: B0 0D        BCS $04D0
	LDA $1A									;C2/04C3: A5 1A        LDA $1A
	ADC $12									;C2/04C5: 65 12        ADC $12
	STA $1A									;C2/04C7: 85 1A        STA $1A
	LDA $1C									;C2/04C9: A5 1C        LDA $1C
	ADC $14									;C2/04CB: 65 14        ADC $14
	STA $1C									;C2/04CD: 85 1C        STA $1C
	CLC 									;C2/04CF: 18           CLC 
+	ROL $16									;C2/04D0: 26 16        ROL $16
	ROL $18									;C2/04D2: 26 18        ROL $18
	DEX 									;C2/04D4: CA           DEX 
	BNE -									;C2/04D5: D0 D5        BNE $04AC
	TDC 									;C2/04D7: 7B           TDC 
	SEP #$20								;C2/04D8: E2 20        SEP #$20
;division ends here

	CLC 									;C2/04DA: 18           CLC 
	LDA $16		;quotient, input/100					;C2/04DB: A5 16        LDA $16
	ADC $08		;base value						;C2/04DD: 65 08        ADC $08
	STA $08		;adjusted value						;C2/04DF: 85 08        STA $08
	LDA $17		;high byte of above					;C2/04E1: A5 17        LDA $17
	ADC $09									;C2/04E3: 65 09        ADC $09
	STA $09									;C2/04E5: 85 09        STA $09
	SEC 		;checks against 9999					;C2/04E7: 38           SEC 
	LDA $08									;C2/04E8: A5 08        LDA $08
	SBC $0A		;9999 low byte						;C2/04EA: E5 0A        SBC $0A
	LDA $09									;C2/04EC: A5 09        LDA $09
	SBC $0B		;9999 high byte						;C2/04EE: E5 0B        SBC $0B
	BCC .Ret								;C2/04F0: 90 08        BCC $04FA
	LDA $0A		;caps at 9999						;C2/04F2: A5 0A        LDA $0A
	STA $08									;C2/04F4: 85 08        STA $08
	LDA $0B									;C2/04F6: A5 0B        LDA $0B
	STA $09									;C2/04F8: 85 09        STA $09
.Ret	RTS 									;C2/04FA: 60           RTS 
%endsub()

%org($C204FB)
;used by defend and guard
NoActionAbility:
	JSR GFXCmdAbilityAnim  							;C2/04FB: 20 E1 16     JSR $16E1       
	LDA ProcSequence							;C2/04FE: AD FA 79     LDA $79FA
	TAX 									;C2/0501: AA           TAX 
	STZ AtkType,X								;C2/0502: 9E 2D 7B     STZ $7B2D,X
	STZ MultiTarget,X							;C2/0505: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X							;C2/0508: 9E CC 7A     STZ $7ACC,X
	INC UnknownReaction							;C2/050B: EE FB 7B     INC $7BFB
	JMP FinishCommandNullTargets						;C2/050E: 4C 50 17     JMP $1750

;Note about commands:
;Most of FF5 uses a command value between $01-$56, which matches the slots on the combat menu
;this is then mapped to command table values $00-$34 via a rom table
;most of the time the difference is just -1, but all magic types map to $2B 
;everything after $2B shifts down accordingly

%org($C20511)
;Command $01 (Other) and $24 (Dummy01)
CommandTable00:
CommandTable23:
	LDA AttackerIndex     						;C2/0511: A5 47        LDA $47        
	CMP #$04		;monster check				;C2/0513: C9 04        CMP #$04
	BCC .Party							;C2/0515: 90 24        BCC $053B
.Monster	
	SEC 								;C2/0517: 38           SEC 
	SBC #$04		;now monster index			;C2/0518: E9 04        SBC #$04
	ASL 								;C2/051A: 0A           ASL 
	TAX 								;C2/051B: AA           TAX 
	LDA ROMTimes100w,X	;*100					;C2/051C: BF 95 EE D0  LDA $D0EE95,X
	STA $0E								;C2/0520: 85 0E        STA $0E
	LDA ROMTimes100w+1,X						;C2/0522: BF 96 EE D0  LDA $D0EE96,X
	STA $0F								;C2/0526: 85 0F        STA $0F
	TDC 								;C2/0528: 7B           TDC 
	TAY 								;C2/0529: A8           TAY 
	LDX $0E								;C2/052A: A6 0E        LDX $0E
.CopyGFXQueue		;copy 100 bytes from monster ai to GFXQueue
	LDA !MonsterAIScript,X						;C2/052C: BD 67 43     LDA $4367,X
	STA !GFXQueue,Y							;C2/052F: 99 4C 38     STA $384C,Y
	INX 								;C2/0532: E8           INX 
	INY 								;C2/0533: C8           INY 
	CPY #$0064							;C2/0534: C0 64 00     CPY #$0064
	BNE .CopyGFXQueue						;C2/0537: D0 F3        BNE $052C
	BRA .Continue							;C2/0539: 80 12        BRA $054D
.Party
	JSR FindOpenGFXQueueSlot   ;next slot in X			;C2/053B: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/053E: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Cmd,X						;C2/0541: 9E 4D 38     STZ $384D,X
	STZ GFXQueue.Type,X						;C2/0544: 9E 4E 38     STZ $384E,X
	STZ GFXQueue.Data1,X						;C2/0547: 9E 4F 38     STZ $384F,X
	STZ GFXQueue.Data2,X						;C2/054A: 9E 50 38     STZ $3850,X
.Continue
	LDA ProcSequence						;C2/054D: AD FA 79     LDA $79FA
	TAX 								;C2/0550: AA           TAX 
	LDA #$7E							;C2/0551: A9 7E        LDA #$7E
	STA AtkType,X							;C2/0553: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/0556: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0559: 9E CC 7A     STZ $7ACC,X
	INC UnknownReaction						;C2/055C: EE FB 7B     INC $7BFB
	LDA ProcSequence						;C2/055F: AD FA 79     LDA $79FA
	ASL 								;C2/0562: 0A           ASL 
	TAX 								;C2/0563: AA           TAX 
	LDA #$80		;first party member 			;C2/0564: A9 80        LDA #$80
	STA CommandTargetBitmask,X					;C2/0566: 9D DC 7A     STA $7ADC,X
	STZ CommandTargetBitmask+1,X					;C2/0569: 9E DD 7A     STZ $7ADD,X
	INC ProcSequence						;C2/056C: EE FA 79     INC $79FA
	RTS 								;C2/056F: 60           RTS 


%org($C20570)
;Command $02 (Item) and $20 (Drink)
ItemCommand:
CommandTable01:
CommandTable1F:
	STZ SelectedItem						;C2/0570: 9C 62 7C     STZ $7C62
	JSR SelectCurrentProcSequence	;$0C = ProcSequence*12		;C2/0573: 20 23 99     JSR $9923
	JSR GetTargets							;C2/0576: 20 5F 17     JSR $175F
	LDX AttackerOffset						;C2/0579: A6 32        LDX $32        
	LDA CharStruct.ActionFlag,X					;C2/057B: BD 56 20     LDA $2056,X
	AND #$10	;weapon used as item				;C2/057E: 29 10        AND #$10
	BEQ +								;C2/0580: F0 03        BEQ $0585
	JMP WeaponItem							;C2/0582: 4C 32 06     JMP $0632
+	LDA CharStruct.SelectedItem,X					;C2/0585: BD 5A 20     LDA $205A,X
	CMP #$EF	;magic lamp					;C2/0588: C9 EF        CMP #$EF
	BNE .ConsumableItem						;C2/058A: D0 06        BNE $0592
	JSR PrepMagicLamp						;C2/058C: 20 67 07     JSR $0767
	JMP ConjureCommand_MagicLamp	;finishes up in Conjure routine	;C2/058F: 4C 43 0E     JMP $0E43

.ConsumableItem	
	STA TempSpell							;C2/0592: 8D 22 27     STA $2722
	SEC 								;C2/0595: 38           SEC 
	SBC #$E0	;now consumable item index			;C2/0596: E9 E0        SBC #$E0
	REP #$20							;C2/0598: C2 20        REP #$20
	JSR ShiftMultiply_8     					;C2/059A: 20 B6 01     JSR $01B6      
	TAX 								;C2/059D: AA           TAX 
	TDC 								;C2/059E: 7B           TDC 
	SEP #$20							;C2/059F: E2 20        SEP #$20
	LDY $0C		;ProcSequence*12				;C2/05A1: A4 0C        LDY $0C
	STZ $0A								;C2/05A3: 64 0A        STZ $0A
-	LDA !ROMConsumables,X 						;C2/05A5: BF 80 0A D1  LDA $D10A80,X  
	STA !AttackInfo,Y						;C2/05A9: 99 FC 79     STA $79FC,Y
	INX 								;C2/05AC: E8           INX 
	INY 								;C2/05AD: C8           INY 
	INC $0A								;C2/05AE: E6 0A        INC $0A
	LDA $0A								;C2/05B0: A5 0A        LDA $0A
	CMP #$05      	;copy 5 bytes					;C2/05B2: C9 05        CMP #$05       
	BNE -								;C2/05B4: D0 EF        BNE $05A5
	INY           	;skip 4 in Attackinfo				;C2/05B6: C8           INY            
	INY 								;C2/05B7: C8           INY 
	INY 								;C2/05B8: C8           INY 
	INY 								;C2/05B9: C8           INY 
-	LDA !ROMConsumables,X 						;C2/05BA: BF 80 0A D1  LDA $D10A80,X  
	STA !AttackInfo,Y						;C2/05BE: 99 FC 79     STA $79FC,Y
	INX 								;C2/05C1: E8           INX 
	INY 								;C2/05C2: C8           INY 
	INC $0A								;C2/05C3: E6 0A        INC $0A
	LDA $0A								;C2/05C5: A5 0A        LDA $0A
	CMP #$08      	;copy remaining 3 bytes				;C2/05C7: C9 08        CMP #$08       
	BNE -								;C2/05C9: D0 EF        BNE $05BA
	JSR CheckMultiTarget						;C2/05CB: 20 C2 02     JSR $02C2
	BNE .TargetOK							;C2/05CE: D0 13        BNE $05E3
	LDY $0C		;ProcSequence*12				;C2/05D0: A4 0C        LDY $0C
	LDA AttackInfo.MagicAtkType,Y					;C2/05D2: B9 00 7A     LDA $7A00,Y
	BPL .CheckRetarget						;C2/05D5: 10 09        BPL $05E0
	LDA ProcSequence						;C2/05D7: AD FA 79     LDA $79FA
	TAX 								;C2/05DA: AA           TAX 
	INC HitsInactive,X	;can hit dead targets			;C2/05DB: FE EB 7B     INC $7BEB,X
	BRA .TargetOK							;C2/05DE: 80 03        BRA $05E3
.CheckRetarget
	JSR CheckRetarget   						;C2/05E0: 20 FE 4A     JSR $4AFE      
.TargetOK
	JSR BuildTargetBitmask						;C2/05E3: 20 A9 02     JSR $02A9
	LDA TempSpell							;C2/05E6: AD 22 27     LDA $2722
	STA Temp+1							;C2/05E9: 8D 21 26     STA $2621
	LDA #$04							;C2/05EC: A9 04        LDA #$04
	STA Temp							;C2/05EE: 8D 20 26     STA $2620
	JSR GFXCmdAttackNameFromTemp					;C2/05F1: 20 2F 99     JSR $992F
	JSR FindOpenGFXQueueSlot					;C2/05F4: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/05F7: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/05FA: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/05FC: 9D 4D 38     STA $384D,X
	LDA #$09		;command 9: item use			;C2/05FF: A9 09        LDA #$09
	STA GFXQueue.Type,X						;C2/0601: 9D 4E 38     STA $384E,X
	LDA TempSpell							;C2/0604: AD 22 27     LDA $2722
	STA GFXQueue.Data1,X						;C2/0607: 9D 4F 38     STA $384F,X
	STZ GFXQueue.Data2,X						;C2/060A: 9E 50 38     STZ $3850,X
	LDY $0C		;ProcSequence*12				;C2/060D: A4 0C        LDY $0C
	LDA ProcSequence						;C2/060F: AD FA 79     LDA $79FA
	TAX 								;C2/0612: AA           TAX 
	LDA AttackInfo.MagicAtkType,Y					;C2/0613: B9 00 7A     LDA $7A00,Y
	AND #$7F							;C2/0616: 29 7F        AND #$7F
	STA AtkType,X							;C2/0618: 9D 2D 7B     STA $7B2D,X
	LDA TempTargetting						;C2/061B: AD A0 26     LDA $26A0
	STA MultiTarget,X						;C2/061E: 9D 1C 7B     STA $7B1C,X
	BEQ .Single							;C2/0621: F0 05        BEQ $0628
	INC MultiTarget,X	;now proper number of targets if >1	;C2/0623: FE 1C 7B     INC $7B1C,X
	LDA #$80							;C2/0626: A9 80        LDA #$80
.Single	STA TargetType,X						;C2/0628: 9D CC 7A     STA $7ACC,X
	JSR FinishCommand						;C2/062B: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/062E: 20 E3 98     JSR $98E3
	RTS 								;C2/0631: 60           RTS 

%org($C20632)
WeaponItem:
	STZ TempHand							;C2/0632: 64 45        STZ $45
	LDA AttackerIndex						;C2/0634: A5 47        LDA $47        
	TAX 								;C2/0636: AA           TAX 
	LDA ROMTimes84,X	;size of one character's gear offset	;C2/0637: BF 85 ED D0  LDA $D0ED85,X
	TAY 								;C2/063B: A8           TAY 
	LDX AttackerOffset						;C2/063C: A6 32        LDX $32        
	LDA CharStruct.SelectedItem,X					;C2/063E: BD 5A 20     LDA $205A,X
	BNE .Left							;C2/0641: D0 0F        BNE $0652
	LDA CharStruct.RHWeapon,X					;C2/0643: BD 13 20     LDA $2013,X
	STA CharStruct.SelectedItem,X					;C2/0646: 9D 5A 20     STA $205A,X
	STA SelectedItem						;C2/0649: 8D 62 7C     STA $7C62
	TAX 								;C2/064C: AA           TAX 
	LDA RHWeapon.ItemMagic,Y					;C2/064D: B9 8B 40     LDA $408B,Y
	BRA .ItemReady							;C2/0650: 80 0F        BRA $0661
.Left	INC TempHand							;C2/0652: E6 45        INC $45
	LDA CharStruct.LHWeapon,X					;C2/0654: BD 14 20     LDA $2014,X
	STA CharStruct.SelectedItem,X					;C2/0657: 9D 5A 20     STA $205A,X
	STA SelectedItem						;C2/065A: 8D 62 7C     STA $7C62
	TAX 								;C2/065D: AA           TAX 
	LDA LHWeapon.ItemMagic,Y					;C2/065E: B9 97 40     LDA $4097,Y
.ItemReady
	STA TempItemMagic						;C2/0661: 85 46        STA $46
	AND #$7F							;C2/0663: 29 7F        AND #$7F
	TXY 		;Y is now selected item				;C2/0665: 9B           TXY 
	PHA 								;C2/0666: 48           PHA 
	PHA 								;C2/0667: 48           PHA 
	LDA ProcSequence						;C2/0668: AD FA 79     LDA $79FA
	TAX 								;C2/066B: AA           TAX 
	PLA 								;C2/066C: 68           PLA 
	STA AtkType,X							;C2/066D: 9D 2D 7B     STA $7B2D,X
	TYA 								;C2/0670: 98           TYA 
	STA Temp+1	;selected item					;C2/0671: 8D 21 26     STA $2621
	LDA #$04							;C2/0674: A9 04        LDA #$04
	STA Temp							;C2/0676: 8D 20 26     STA $2620
	JSR GFXCmdAttackNameFromTemp					;C2/0679: 20 2F 99     JSR $992F
	LDA ProcSequence 						;C2/067C: AD FA 79     LDA $79FA
	TAX 								;C2/067F: AA           TAX 
	LDA AtkType,X							;C2/0680: BD 2D 7B     LDA $7B2D,X
	LDY $0C		;ProcSequence*12				;C2/0683: A4 0C        LDY $0C
	JSR CopyROMMagicInfo      						;C2/0685: 20 24 03     JSR $0324      
	JSR CheckMultiTarget						;C2/0688: 20 C2 02     JSR $02C2
	BNE .TargetOK							;C2/068B: D0 13        BNE $06A0
	LDY $0C								;C2/068D: A4 0C        LDY $0C
	LDA AttackInfo.MagicAtkType,Y					;C2/068F: B9 00 7A     LDA $7A00,Y
	BPL .DontRetarget						;C2/0692: 10 09        BPL $069D
	LDA ProcSequence 						;C2/0694: AD FA 79     LDA $79FA
	TAX 								;C2/0697: AA           TAX 
	INC HitsInactive,X						;C2/0698: FE EB 7B     INC $7BEB,X
	BRA .TargetOK							;C2/069B: 80 03        BRA $06A0
.DontRetarget
	JSR CheckRetarget       					;C2/069D: 20 FE 4A     JSR $4AFE      
.TargetOK
	JSR BuildTargetBitmask						;C2/06A0: 20 A9 02     JSR $02A9
	JSR FindOpenGFXQueueSlot   					;C2/06A3: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/06A6: 9E 4C 38     STZ $384C,X
	LDA #$FC	;exec graphics command				;C2/06A9: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/06AB: 9D 4D 38     STA $384D,X
	LDA #$0A	;command 10: weapon used as item		;C2/06AE: A9 0A        LDA #$0A
	STA GFXQueue.Type,X						;C2/06B0: 9D 4E 38     STA $384E,X
	PLA 								;C2/06B3: 68           PLA 
	STA GFXQueue.Data1,X						;C2/06B4: 9D 4F 38     STA $384F,X
	STZ GFXQueue.Data2,X						;C2/06B7: 9E 50 38     STZ $3850,X
	LDA ProcSequence 						;C2/06BA: AD FA 79     LDA $79FA
	TAX 								;C2/06BD: AA           TAX 
	LDA AtkType,X							;C2/06BE: BD 2D 7B     LDA $7B2D,X
	BPL +								;C2/06C1: 10 03        BPL $06C6
	TDC 								;C2/06C3: 7B           TDC 
	BRA ++								;C2/06C4: 80 07        BRA $06CD
+	LDY $0C								;C2/06C6: A4 0C        LDY $0C
	LDA AttackInfo.MagicAtkType,Y					;C2/06C8: B9 00 7A     LDA $7A00,Y
	AND #$7F							;C2/06CB: 29 7F        AND #$7F
++	STA AtkType,X							;C2/06CD: 9D 2D 7B     STA $7B2D,X
	LDA TempTargetting						;C2/06D0: AD A0 26     LDA $26A0
	STA MultiTarget,X						;C2/06D3: 9D 1C 7B     STA $7B1C,X
	BEQ +								;C2/06D6: F0 05        BEQ $06DD
	INC MultiTarget,X						;C2/06D8: FE 1C 7B     INC $7B1C,X
	LDA #$80							;C2/06DB: A9 80        LDA #$80
+	STA TargetType,X						;C2/06DD: 9D CC 7A     STA $7ACC,X
	JSR FinishCommand						;C2/06E0: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/06E3: 20 E3 98     JSR $98E3
	LDA TempItemMagic						;C2/06E6: A5 46        LDA $46
	BPL .Ret							;C2/06E8: 10 7C        BPL $0766
.BreakOnUse	;80h indicates item should now break
	LDA AttackerIndex						;C2/06EA: A5 47        LDA $47        
	JSR ShiftMultiply_4      					;C2/06EC: 20 B7 01     JSR $01B7      
	STA $0E								;C2/06EF: 85 0E        STA $0E
	ASL 								;C2/06F1: 0A           ASL 
	CLC 								;C2/06F2: 18           CLC 
	ADC $0E								;C2/06F3: 65 0E        ADC $0E
	TAY 		;Attacker index *12				;C2/06F5: A8           TAY 
	LDA TempHand							;C2/06F6: A5 45        LDA $45
	BNE .Left2							;C2/06F8: D0 1B        BNE $0715
	TDC 								;C2/06FA: 7B           TDC 
	STA HandItems.ID,Y						;C2/06FB: 99 AC 37     STA $37AC,Y
	STA HandItems.Level,Y						;C2/06FE: 99 AE 37     STA $37AE,Y
	STA HandItems.MP,Y						;C2/0701: 99 B0 37     STA $37B0,Y
	LDA #$38							;C2/0704: A9 38        LDA #$38
	STA HandItems.Targetting,Y					;C2/0706: 99 B2 37     STA $37B2,Y
	LDA #$5A							;C2/0709: A9 5A        LDA #$5A
	STA HandItems.Flags,Y						;C2/070B: 99 B4 37     STA $37B4,Y
	LDA #$AA							;C2/070E: A9 AA        LDA #$AA
	STA HandItems.Usable,Y						;C2/0710: 99 B6 37     STA $37B6,Y
	BRA .DoneHandItems						;C2/0713: 80 19        BRA $072E
.Left2	TDC 								;C2/0715: 7B           TDC 
	STA HandItems.ID+1,Y						;C2/0716: 99 AD 37     STA $37AD,Y
	STA HandItems.Level+1,Y						;C2/0719: 99 AF 37     STA $37AF,Y
	STA HandItems.MP+1,Y						;C2/071C: 99 B1 37     STA $37B1,Y
	LDA #$38							;C2/071F: A9 38        LDA #$38
	STA HandItems.Targetting+1,Y					;C2/0721: 99 B3 37     STA $37B3,Y
	LDA #$5A							;C2/0724: A9 5A        LDA #$5A
	STA HandItems.Flags+1,Y						;C2/0726: 99 B5 37     STA $37B5,Y
	LDA #$AA							;C2/0729: A9 AA        LDA #$AA
	STA HandItems.Usable+1,Y					;C2/072B: 99 B7 37     STA $37B7,Y
.DoneHandItems
	LDA MessageBoxOffset						;C2/072E: AD EF 3C     LDA $3CEF
	TAY 								;C2/0731: A8           TAY 
	LDA #$50	;item shattered message				;C2/0732: A9 50        LDA #$50
	STA MessageBoxes,Y						;C2/0734: 99 5F 3C     STA $3C5F,Y
	LDA MessageBoxOffset						;C2/0737: AD EF 3C     LDA $3CEF
	STA $0E								;C2/073A: 85 0E        STA $0E
	ASL 								;C2/073C: 0A           ASL 
	CLC 								;C2/073D: 18           CLC 
	ADC $0E								;C2/073E: 65 0E        ADC $0E
	TAX 		;message box index *3				;C2/0740: AA           TAX 
	LDA SelectedItem						;C2/0741: AD 62 7C     LDA $7C62
	STA MessageBoxData.0,X						;C2/0744: 9D BF 3C     STA $3CBF,X
	STZ MessageBoxData.1,X						;C2/0747: 9E C0 3C     STZ $3CC0,X
	STZ MessageBoxData.2,X						;C2/074A: 9E C1 3C     STZ $3CC1,X
	JSR GFXCmdMessage						;C2/074D: 20 4C 99     JSR $994C
	LDA DisplayInfo.CurrentChar					;C2/0750: AD CC 41     LDA $41CC
	PHA 								;C2/0753: 48           PHA 
	LDA AttackerIndex						;C2/0754: A5 47        LDA $47        
	STA DisplayInfo.CurrentChar					;C2/0756: 8D CC 41     STA $41CC
	STA CurrentChar							;C2/0759: 8D 7B 7B     STA $7B7B
	JSR ReplaceHands						;C2/075C: 20 3A 9F     JSR $9F3A
	PLA 								;C2/075F: 68           PLA 
	STA DisplayInfo.CurrentChar					;C2/0760: 8D CC 41     STA $41CC
	JSR ApplyGear      						;C2/0763: 20 6F 9A     JSR $9A6F      
.Ret	RTS 								;C2/0766: 60           RTS 

%org($C20767)
PrepMagicLamp:
	LDA BattleData.MagicLamp					;C2/0767: AD 74 7C     LDA $7C74      
	CMP #$0D	;<13, normal					;C2/076A: C9 0D        CMP #$0D
	BCC .Continue							;C2/076C: 90 0A        BCC $0778
	CMP #$20	;>=32, egg chop					;C2/076E: C9 20        CMP #$20
	BCS .EggChop							;C2/0770: B0 04        BCS $0776
	LDA #$0D	;chocobo					;C2/0772: A9 0D        LDA #$0D
	BRA .Continue							;C2/0774: 80 02        BRA $0778
.EggChop	
	LDA #$0E	;egg chop					;C2/0776: A9 0E        LDA #$0E
.Continue
	TAX 								;C2/0778: AA           TAX 
	LDA ROMMagicLamp,X						;C2/0779: BF E7 EE D0  LDA $D0EEE7,X
	STA TempSpell							;C2/077D: 8D 22 27     STA $2722
	STZ TempIsEffect						;C2/0780: 9C 23 27     STZ $2723
	CLC 								;C2/0783: 18           CLC 
	LDA BattleData.MagicLamp					;C2/0784: AD 74 7C     LDA $7C74
	ADC #$01							;C2/0787: 69 01        ADC #$01
	BCC +								;C2/0789: 90 02        BCC $078D
	LDA #$FF	;cap at 255 uses				;C2/078B: A9 FF        LDA #$FF
+	STA BattleData.MagicLamp					;C2/078D: 8D 74 7C     STA $7C74
	RTS 								;C2/0790: 60           RTS 

%org($C20791)
;Command $03 (Row)
CommandTable02:
	LDA #$03	;row ability					;C2/0791: A9 03        LDA #$03
	JSR CopyAbilityInfo						;C2/0793: 20 AA 16     JSR $16AA
	INC UnknownReaction						;C2/0796: EE FB 7B     INC $7BFB
	LDA #$02							;C2/0799: A9 02        LDA #$02
	JSR GFXCmdAbilityAnim						;C2/079B: 20 E1 16     JSR $16E1        
	JSR MagicAtkTypeSingleTarget					;C2/079E: 20 05 17     JSR $1705
	JMP FinishCommandNullTargets					;C2/07A1: 4C 50 17     JMP $1750

%org($C207A4)
;Command $04 (Defend)
CommandTable03:
	LDA #$03							;C2/07A4: A9 03        LDA #$03
	JMP NoActionAbility						;C2/07A6: 4C FB 04     JMP $04FB

%org($C207A9)
;Command $06 (Guard)
CommandTable05:
	LDA #$05							;C2/07A9: A9 05        LDA #$05
	JMP NoActionAbility						;C2/07AB: 4C FB 04     JMP $04FB

%org($C207AE)
;Command $07 (Kick)
CommandTable06:
	LDA #$07	;kick ability					;C2/07AE: A9 07        LDA #$07
	JSR CopyAbilityInfo						;C2/07B0: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/07B3: 20 5F 17     JSR $175F
	JSR BuildTargetBitmask						;C2/07B6: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/07B9: 20 C2 02     JSR $02C2
	LDA #$07	;kick ability name				;C2/07BC: A9 07        LDA #$07
	JSR GFXCmdAttackNameA						;C2/07BE: 20 FA 16     JSR $16FA
	LDA #$06	;kick anim					;C2/07C1: A9 06        LDA #$06
	JSR GFXCmdAbilityAnim						;C2/07C3: 20 E1 16     JSR $16E1     
	JSR MagicAtkTypeMultiTarget					;C2/07C6: 20 1A 17     JSR $171A
	JSR FinishCommand						;C2/07C9: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/07CC: 4C E3 98     JMP $98E3

%org($C207CF)
;Command $08 (BuildUp/Focus)
CommandTable07:
	LDA #$08	;ability name					;C2/07CF: A9 08        LDA #$08	
	JSR GFXCmdAttackNameA						;C2/07D1: 20 FA 16     JSR $16FA
	LDA #$07	;ability anim					;C2/07D4: A9 07        LDA #$07
	JSR GFXCmdAbilityAnim     					;C2/07D6: 20 E1 16     JSR $16E1     
	LDA ProcSequence						;C2/07D9: AD FA 79     LDA $79FA
	TAX 								;C2/07DC: AA           TAX 
	STZ AtkType,X							;C2/07DD: 9E 2D 7B     STZ $7B2D,X
	STZ MultiTarget,X						;C2/07E0: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/07E3: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommandNullTargets					;C2/07E6: 20 50 17     JSR $1750
	LDX AttackerOffset						;C2/07E9: A6 32        LDX $32       
	LDA #$4E	;Command, maps to CommandTable2C/SimpleFight	;C2/07EB: A9 4E        LDA #$4E
	STA CharStruct.Command,X					;C2/07ED: 9D 57 20     STA $2057,X
	LDA #$10	;double M					;C2/07F0: A9 10        LDA #$10
	STA CharStruct.DamageMod,X					;C2/07F2: 9D 1F 20     STA $201F,X
	LDA #$4E							;C2/07F5: A9 4E        LDA #$4E
	TAX 								;C2/07F7: AA           TAX 
	LDA ROMCommandDelay,X						;C2/07F8: BF A0 5D D1  LDA $D15DA0,X
	PHA 								;C2/07FC: 48           PHA 
	LDA AttackerIndex       					;C2/07FD: A5 47        LDA $47       
	JSR GetTimerOffset    						;C2/07FF: 20 07 02     JSR $0207     
	LDX AttackerOffset						;C2/0802: A6 32        LDX $32
	PLA 								;C2/0804: 68           PLA 
	JSR HasteSlowMod						;C2/0805: 20 63 61     JSR $6163
	STA CurrentTimer.ATB,Y						;C2/0808: 99 7F 3D     STA $3D7F,Y
	LDA #$41	;waiting for delayed action			;C2/080B: A9 41        LDA #$41
	STA EnableTimer.ATB,Y						;C2/080D: 99 FB 3C     STA $3CFB,Y
	INC DelayedFight						;C2/0810: EE FC 7B     INC $7BFC
	RTS 								;C2/0813: 60           RTS 

%org($C20814)
;Command $4E (Simple Fight)  
;No procs, used by Capture/BuildUp/etc.
SimpleFight:
CommandTable2C:
	JSR GetTargets    						;C2/0814: 20 5F 17     JSR $175F      
	JSR CheckRetarget    						;C2/0817: 20 FE 4A     JSR $4AFE      
	LDX AttackerOffset						;C2/081A: A6 32        LDX $32        
	LDA PartyTargets						;C2/081C: A5 66        LDA $66
	STA CharStruct.PartyTargets,X  					;C2/081E: 9D 59 20     STA $2059,X    
	LDA MonsterTargets						;C2/0821: A5 65        LDA $65
	STA CharStruct.MonsterTargets,X					;C2/0823: 9D 58 20     STA $2058,X
	JSR BuildTargetBitmask    					;C2/0826: 20 A9 02     JSR $02A9      
	LDA AttackerIndex						;C2/0829: A5 47        LDA $47        
	TAX 								;C2/082B: AA           TAX 
	LDA ROMTimes84,X	;size of combined gear stats struct	;C2/082C: BF 85 ED D0  LDA $D0ED85,X  
	TAX 								;C2/0830: AA           TAX 
	STX $0E			;gear stats offset			;C2/0831: 86 0E        STX $0E
	LDX AttackerOffset     						;C2/0833: A6 32        LDX $32        
	LDA CharStruct.RHWeapon,X					;C2/0835: BD 13 20     LDA $2013,X    
	BNE .RH								;C2/0838: D0 03        BNE $083D
	JMP .LH   							;C2/083A: 4C 9D 08     JMP $089D      
.RH
	JSR SelectCurrentProcSequence					;C2/083D: 20 23 99     JSR $9923
	STY $14			;AttackInfo Offset			;C2/0840: 84 14        STY $14
	STZ $12			;loop index				;C2/0842: 64 12        STZ $12
	LDX $0E			;gear stats offset			;C2/0844: A6 0E        LDX $0E
-	LDA !RHWeapon,X  						;C2/0846: BD 85 40     LDA $4085,X    
	STA !AttackInfo,Y						;C2/0849: 99 FC 79     STA $79FC,Y
	INX 								;C2/084C: E8           INX 
	INY 								;C2/084D: C8           INY 
	INC $12								;C2/084E: E6 12        INC $12
	LDA $12								;C2/0850: A5 12        LDA $12
	CMP #$0C		;copy 12 bytes weapon data		;C2/0852: C9 0C        CMP #$0C
	BNE -								;C2/0854: D0 F0        BNE $0846

	LDX $0E			;gear stats offset			;C2/0856: A6 0E        LDX $0E
	LDA RHWeapon.Properties,X 					;C2/0858: BD 8A 40     LDA $408A,X    
	AND #$04		;magic sword ok				;C2/085B: 29 04        AND #$04
	BNE ..MSword							;C2/085D: D0 03        BNE $0862
	TDC 								;C2/085F: 7B           TDC 
	BRA ..DoneMSword						;C2/0860: 80 07        BRA $0869
..MSword
	LDX AttackerOffset						;C2/0862: A6 32        LDX $32        
	LDA CharStruct.MSwordAnim,X					;C2/0864: BD 7A 20     LDA $207A,X    
	AND #$7F		;clear high bit for right hand		;C2/0867: 29 7F        AND #$7F
..DoneMSword
	PHA 								;C2/0869: 48           PHA 
	JSR FindOpenGFXQueueSlot   					;C2/086A: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/086D: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/0870: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/0872: 9D 4D 38     STA $384D,X
	LDA #$01		;ability/command animation		;C2/0875: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/0877: 9D 4E 38     STA $384E,X
	LDA #$04		;fight					;C2/087A: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/087C: 9D 4F 38     STA $384F,X
	PLA 			;magic sword anim			;C2/087F: 68           PLA 
	STA GFXQueue.Data2,X						;C2/0880: 9D 50 38     STA $3850,X
	LDX $0E								;C2/0883: A6 0E        LDX $0E
	LDA RHWeapon.AtkType,X 						;C2/0885: BD 8D 40     LDA $408D,X    
	PHA 								;C2/0888: 48           PHA 
	LDA ProcSequence						;C2/0889: AD FA 79     LDA $79FA
	TAX 								;C2/088C: AA           TAX 
	PLA 								;C2/088D: 68           PLA 
	STA AtkType,X							;C2/088E: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/0891: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0894: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommand						;C2/0897: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/089A: 20 E3 98     JSR $98E3
.LH
	LDX AttackerOffset						;C2/089D: A6 32        LDX $32          
	LDA CharStruct.LHWeapon,X					;C2/089F: BD 14 20     LDA $2014,X    
	BNE +								;C2/08A2: D0 01        BNE $08A5
	RTS 			;no weapons (not even fists)		;C2/08A4: 60           RTS 
+	JSR SelectCurrentProcSequence					;C2/08A5: 20 23 99     JSR $9923
	STY $12			;AttackInfo Offset			;C2/08A8: 84 12        STY $12
	STZ $14			;loop index				;C2/08AA: 64 14        STZ $14
	LDX $0E			;gear stats offset			;C2/08AC: A6 0E        LDX $0E
-	LDA !LHWeapon,X  						;C2/08AE: BD 91 40     LDA $4091,X    
	STA !AttackInfo,Y						;C2/08B1: 99 FC 79     STA $79FC,Y
	INX 								;C2/08B4: E8           INX 
	INY 								;C2/08B5: C8           INY 
	INC $14								;C2/08B6: E6 14        INC $14
	LDA $14								;C2/08B8: A5 14        LDA $14
	CMP #$0C		;copy 12 bytes weapon data		;C2/08BA: C9 0C        CMP #$0C
	BNE -								;C2/08BC: D0 F0        BNE $08AE

	LDX $0E			;gear stats offset			;C2/08BE: A6 0E        LDX $0E
	LDA ProcSequence    						;C2/08C0: AD FA 79     LDA $79FA      
	TAY 								;C2/08C3: A8           TAY 
	LDA LHWeapon.AtkType,X						;C2/08C4: BD 99 40     LDA $4099,X
	STA AtkType,Y							;C2/08C7: 99 2D 7B     STA $7B2D,Y
	JSR FindOpenGFXQueueSlot   					;C2/08CA: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/08CD: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/08D0: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/08D2: 9D 4D 38     STA $384D,X
	LDA #$01		;ability/command animation		;C2/08D5: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/08D7: 9D 4E 38     STA $384E,X
	LDA #$04		;fight					;C2/08DA: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/08DC: 9D 4F 38     STA $384F,X
	STX $08			;GFXQueue offset			;C2/08DF: 86 08        STX $08
	LDX $0E			;gear stats offset			;C2/08E1: A6 0E        LDX $0E
	LDA LHWeapon.Properties,X					;C2/08E3: BD 96 40     LDA $4096,X
	AND #$04		;magic sword ok				;C2/08E6: 29 04        AND #$04
	BNE ..MSword							;C2/08E8: D0 04        BNE $08EE
	LDA #$80		;left hand				;C2/08EA: A9 80        LDA #$80
	BRA ..DoneMSword						;C2/08EC: 80 07        BRA $08F5
..MSword
	LDX AttackerOffset						;C2/08EE: A6 32        LDX $32        
	LDA CharStruct.MSwordAnim,X					;C2/08F0: BD 7A 20     LDA $207A,X
	ORA #$80		;left hand				;C2/08F3: 09 80        ORA #$80
..DoneMSword
	LDX $08			;GFXQueue offset			;C2/08F5: A6 08        LDX $08
	STA GFXQueue.Data2,X	;magic sword anim			;C2/08F7: 9D 50 38     STA $3850,X
	LDA ProcSequence						;C2/08FA: AD FA 79     LDA $79FA
	TAX 								;C2/08FD: AA           TAX 
	STZ MultiTarget,X						;C2/08FE: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0901: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommand						;C2/0904: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/0907: 20 E3 98     JSR $98E3
	RTS 								;C2/090A: 60           RTS 

%org($C2090B)
;Command $09 (Mantra)
CommandTable08:
	 LDA #$09	;mantra ability					;C2/090B: A9 09        LDA #$09
	 JSR CopyAbilityInfo						;C2/090D: 20 AA 16     JSR $16AA
	 LDA #$09	;ability name					;C2/0910: A9 09        LDA #$09
	 JSR GFXCmdAttackNameA						;C2/0912: 20 FA 16     JSR $16FA
	 LDA #$08	;ability anim					;C2/0915: A9 08        LDA #$08
	 JSR GFXCmdAbilityAnim     					;C2/0917: 20 E1 16     JSR $16E1     
	 JSR MagicAtkTypeSingleTarget					;C2/091A: 20 05 17     JSR $1705
	 JSR FinishCommandNullTargets					;C2/091D: 20 50 17     JSR $1750
	 LDA ProcSequence	;a second effect?			;C2/0920: AD FA 79     LDA $79FA
	 TAX 								;C2/0923: AA           TAX 
	 STZ AtkType,X		;no attack type				;C2/0924: 9E 2D 7B     STZ $7B2D,X
	 STZ MultiTarget,X						;C2/0927: 9E 1C 7B     STZ $7B1C,X
	 STZ TargetType,X						;C2/092A: 9E CC 7A     STZ $7ACC,X
	 JSR FinishCommandNullTargets					;C2/092D: 20 50 17     JSR $1750
	 JMP GFXCmdDamageNumbers     					;C2/0930: 4C E3 98     JMP $98E3     

%org($C20933)
;Command $0A (Escape/Flee)
CommandTable09:
	 LDA #$0A	;escape ability					;C2/0933: A9 0A        LDA #$0A
	 JSR CopyAbilityInfo						;C2/0935: 20 AA 16     JSR $16AA     
	 INC UnknownReaction    					;C2/0938: EE FB 7B     INC $7BFB     
	 LDA #$0A	;ability name					;C2/093B: A9 0A        LDA #$0A
	 JSR GFXCmdAttackNameA    					;C2/093D: 20 FA 16     JSR $16FA     
	 LDA #$09	;ability anim					;C2/0940: A9 09        LDA #$09
	 JSR GFXCmdAbilityAnim						;C2/0942: 20 E1 16     JSR $16E1     
	 JSR MagicAtkTypeSingleTarget					;C2/0945: 20 05 17     JSR $1705
	 JSR FinishCommandNullTargets					;C2/0948: 20 50 17     JSR $1750
	 JMP GFXCmdMessage						;C2/094B: 4C 4C 99     JMP $994C

%org($C2094E)
;Command $0B (Steal)
CommandTable0A:
	 LDA #$0B	;steal ability					;C2/094E: A9 0B        LDA #$0B
	 JSR CopyAbilityInfo						;C2/0950: 20 AA 16     JSR $16AA
	 JSR GetTargets							;C2/0953: 20 5F 17     JSR $175F
	 JSR CheckRetarget     						;C2/0956: 20 FE 4A     JSR $4AFE     
	 JSR BuildTargetBitmask						;C2/0959: 20 A9 02     JSR $02A9
	 LDA #$0B	;name						;C2/095C: A9 0B        LDA #$0B
	 JSR GFXCmdAttackNameA						;C2/095E: 20 FA 16     JSR $16FA
	 LDA #$0A	;anim						;C2/0961: A9 0A        LDA #$0A
	 JSR GFXCmdAbilityAnim    					;C2/0963: 20 E1 16     JSR $16E1     
	 JSR MagicAtkTypeSingleTarget					;C2/0966: 20 05 17     JSR $1705
	 JSR FinishCommand						;C2/0969: 20 35 17     JSR $1735
	 JMP GFXCmdMessage						;C2/096C: 4C 4C 99     JMP $994C

%org($C2096F)
;Command $0C (Capture/Mug)
CommandTable0B:
	 STZ ProcSequence	;overwriting entire sequence		;C2/096F: 9C FA 79     STZ $79FA
	 STZ NextGFXQueueSlot						;C2/0972: 9C F9 79     STZ $79F9
	 LDA #$0C		;ability name				;C2/0975: A9 0C        LDA #$0C
	 JSR GFXCmdAttackNameA						;C2/0977: 20 FA 16     JSR $16FA
	 JSR SimpleFight						;C2/097A: 20 14 08     JSR $0814
	 LDA #$0B		;steal ability				;C2/097D: A9 0B        LDA #$0B
	 JSR CopyAbilityInfo						;C2/097F: 20 AA 16     JSR $16AA
	 LDA #$0A		;steal anim				;C2/0982: A9 0A        LDA #$0A
	 JSR GFXCmdAbilityAnim  					;C2/0984: 20 E1 16     JSR $16E1     
	 JSR MagicAtkTypeSingleTarget					;C2/0987: 20 05 17     JSR $1705
	 JSR FinishCommand						;C2/098A: 20 35 17     JSR $1735
	 JMP GFXCmdMessage						;C2/098D: 4C 4C 99     JMP $994C

%org($C20990)
;Command $0D (Jump)
CommandTable0C:
JumpCommand:
	 LDA #$0D	;jump ability name				;C2/0990: A9 0D        LDA #$0D
	 JSR GFXCmdAttackNameA						;C2/0992: 20 FA 16     JSR $16FA
.Anim			;routine is called here by command $52
	 LDA #$0C	;jump ability anim (launch)			;C2/0995: A9 0C        LDA #$0C
	 JSR GFXCmdAbilityAnim    					;C2/0997: 20 E1 16     JSR $16E1     
	 LDA ProcSequence						;C2/099A: AD FA 79     LDA $79FA
	 TAX 								;C2/099D: AA           TAX 
	 STZ AtkType,X							;C2/099E: 9E 2D 7B     STZ $7B2D,X
	 STZ MultiTarget,X						;C2/09A1: 9E 1C 7B     STZ $7B1C,X
	 STZ TargetType,X						;C2/09A4: 9E CC 7A     STZ $7ACC,X
	 JSR FinishCommandNullTargets					;C2/09A7: 20 50 17     JSR $1750
	 INC UnknownReaction						;C2/09AA: EE FB 7B     INC $7BFB
	 LDX AttackerOffset						;C2/09AD: A6 32        LDX $32       
	 LDA #$4F	;jump landing command, maps to CommandTable2D	;C2/09AF: A9 4F        LDA #$4F
	 STA CharStruct.Command,X					;C2/09B1: 9D 57 20     STA $2057,X   
	 LDA #$10	;jumping					;C2/09B4: A9 10        LDA #$10
	 STA CharStruct.CmdStatus,X					;C2/09B6: 9D 1E 20     STA $201E,X   
	 LDA #$80	;auto hit					;C2/09B9: A9 80        LDA #$80
	 STA CharStruct.DamageMod,X					;C2/09BB: 9D 1F 20     STA $201F,X   
	 LDA #$4F	;jump landing command				;C2/09BE: A9 4F        LDA #$4F
	 TAX 								;C2/09C0: AA           TAX 
	 LDA ROMCommandDelay,X						;C2/09C1: BF A0 5D D1  LDA $D15DA0,X
	 PHA 								;C2/09C5: 48           PHA 
	 LDA AttackerIndex						;C2/09C6: A5 47        LDA $47       
	 JSR GetTimerOffset     					;C2/09C8: 20 07 02     JSR $0207     
	 LDX AttackerOffset						;C2/09CB: A6 32        LDX $32       
	 PLA 								;C2/09CD: 68           PLA 
	 JSR HasteSlowMod						;C2/09CE: 20 63 61     JSR $6163
	 STA CurrentTimer.ATB,Y						;C2/09D1: 99 7F 3D     STA $3D7F,Y
	 LDA #$41	;queued action					;C2/09D4: A9 41        LDA #$41
	 STA EnableTimer.ATB,Y						;C2/09D6: 99 FB 3C     STA $3CFB,Y
	 INC DelayedFight						;C2/09D9: EE FC 7B     INC $7BFC
	 RTS 								;C2/09DC: 60           RTS 

%org($C209DD)
;Command $4F (landing from Jump)
CommandTable2D:
	LDA #$2D	;jump landing anim				;C2/09DD: A9 2D        LDA #$2D
	JSR GFXCmdAbilityAnim   					;C2/09DF: 20 E1 16     JSR $16E1     
	JSR GetTargets							;C2/09E2: 20 5F 17     JSR $175F
	JSR CheckRetarget    						;C2/09E5: 20 FE 4A     JSR $4AFE     
	LDX AttackerOffset						;C2/09E8: A6 32        LDX $32       
	LDA PartyTargets						;C2/09EA: A5 66        LDA $66
	STA CharStruct.PartyTargets,X					;C2/09EC: 9D 59 20     STA $2059,X
	LDA MonsterTargets						;C2/09EF: A5 65        LDA $65
	STA CharStruct.MonsterTargets,X					;C2/09F1: 9D 58 20     STA $2058,X
	JSR BuildTargetBitmask						;C2/09F4: 20 A9 02     JSR $02A9
	LDA AttackerIndex						;C2/09F7: A5 47        LDA $47       
	TAX 								;C2/09F9: AA           TAX 
	LDA ROMTimes84,X	;size of combined gearstats struct	;C2/09FA: BF 85 ED D0  LDA $D0ED85,X
	TAX 								;C2/09FE: AA           TAX 
	STX $0E			;gear stats offset			;C2/09FF: 86 0E        STX $0E
	LDX AttackerOffset     						;C2/0A01: A6 32        LDX $32       
	LDA CharStruct.RHWeapon,X					;C2/0A03: BD 13 20     LDA $2013,X
	BNE .RH								;C2/0A06: D0 03        BNE $0A0B
	JMP .LH								;C2/0A08: 4C 3C 0A     JMP $0A3C

.RH	JSR SelectCurrentProcSequence					;C2/0A0B: 20 23 99     JSR $9923
	STZ $12								;C2/0A0E: 64 12        STZ $12
	LDX $0E								;C2/0A10: A6 0E        LDX $0E
-	LDA !RHWeapon,X  						;C2/0A12: BD 85 40     LDA $4085,X   
	STA !AttackInfo,Y						;C2/0A15: 99 FC 79     STA $79FC,Y
	INX 								;C2/0A18: E8           INX 
	INY 								;C2/0A19: C8           INY 
	INC $12								;C2/0A1A: E6 12        INC $12
	LDA $12								;C2/0A1C: A5 12        LDA $12
	CMP #$0C		;copy 12 bytes weapon data		;C2/0A1E: C9 0C        CMP #$0C
	BNE -								;C2/0A20: D0 F0        BNE $0A12
	LDX $0E			;gear stats offset			;C2/0A22: A6 0E        LDX $0E
	LDA RHWeapon.AtkType,X						;C2/0A24: BD 8D 40     LDA $408D,X
	PHA 								;C2/0A27: 48           PHA 
	LDA ProcSequence						;C2/0A28: AD FA 79     LDA $79FA
	TAX 								;C2/0A2B: AA           TAX 
	PLA 								;C2/0A2C: 68           PLA 
	STA AtkType,X							;C2/0A2D: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/0A30: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0A33: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommand						;C2/0A36: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/0A39: 20 E3 98     JSR $98E3

.LH	LDX AttackerOffset						;C2/0A3C: A6 32        LDX $32       
	LDA CharStruct.LHWeapon,X					;C2/0A3E: BD 14 20     LDA $2014,X
	BNE +								;C2/0A41: D0 03        BNE $0A46
	JMP .Finish							;C2/0A43: 4C 79 0A     JMP $0A79
+	JSR SelectCurrentProcSequence					;C2/0A46: 20 23 99     JSR $9923
	STZ $12								;C2/0A49: 64 12        STZ $12
	LDX $0E			;gear stats offset			;C2/0A4B: A6 0E        LDX $0E
-	LDA !LHWeapon,X  						;C2/0A4D: BD 91 40     LDA $4091,X   
	STA !AttackInfo,Y						;C2/0A50: 99 FC 79     STA $79FC,Y
	INX 								;C2/0A53: E8           INX 
	INY 								;C2/0A54: C8           INY 
	INC $12								;C2/0A55: E6 12        INC $12
	LDA $12								;C2/0A57: A5 12        LDA $12
	CMP #$0C		;copy 12 bytes weapon data		;C2/0A59: C9 0C        CMP #$0C
	BNE -								;C2/0A5B: D0 F0        BNE $0A4D
	LDX $0E			;gear stats offset			;C2/0A5D: A6 0E        LDX $0E
	LDA ProcSequence						;C2/0A5F: AD FA 79     LDA $79FA
	TAY 								;C2/0A62: A8           TAY 
	LDA LHWeapon.AtkType,X						;C2/0A63: BD 99 40     LDA $4099,X
	STA AtkType,Y							;C2/0A66: 99 2D 7B     STA $7B2D,Y
	LDA ProcSequence						;C2/0A69: AD FA 79     LDA $79FA
	TAX 								;C2/0A6C: AA           TAX 
	STZ MultiTarget,X						;C2/0A6D: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0A70: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommand						;C2/0A73: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/0A76: 20 E3 98     JSR $98E3
.Finish	INC UnknownReaction						;C2/0A79: EE FB 7B     INC $7BFB
	RTS 								;C2/0A7C: 60           RTS 

%org($C20A7D)
;Command $50 (forced Jump landing, via Interceptor Rocket)
CommandTable2E:
	LDA #$50		;jump intercepted			;C2/0A7D: A9 50        LDA #$50
	JSR CopyAbilityInfo						;C2/0A7F: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/0A82: 20 5F 17     JSR $175F
	JSR CheckRetarget						;C2/0A85: 20 FE 4A     JSR $4AFE     
	STZ MonsterTargets						;C2/0A88: 64 65        STZ $65
	LDA AttackerIndex						;C2/0A8A: A5 47        LDA $47       
	TAX 								;C2/0A8C: AA           TAX 
	TDC 								;C2/0A8D: 7B           TDC 
	JSR SetBit_X							;C2/0A8E: 20 D6 01     JSR $01D6     
	STA PartyTargets	;target self				;C2/0A91: 85 66        STA $66
	JSR BuildTargetBitmask						;C2/0A93: 20 A9 02     JSR $02A9
	INC UnknownReaction						;C2/0A96: EE FB 7B     INC $7BFB
	LDA #$2E		;jump intercepted anim			;C2/0A99: A9 2E        LDA #$2E
	JSR GFXCmdAbilityAnim						;C2/0A9B: 20 E1 16     JSR $16E1     
	JSR MagicAtkTypeSingleTarget					;C2/0A9E: 20 05 17     JSR $1705
	JMP FinishCommand						;C2/0AA1: 4C 35 17     JMP $1735

%org($C20AA4)
;Command $0E (Dragon Sword)
CommandTable0D:
	JSR GetTargets							;C2/0AA4: 20 5F 17     JSR $175F
	JSR CheckRetarget						;C2/0AA7: 20 FE 4A     JSR $4AFE      
	JSR BuildTargetBitmask						;C2/0AAA: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/0AAD: 20 C2 02     JSR $02C2
	LDA #$0E		;ability name				;C2/0AB0: A9 0E        LDA #$0E
	JSR GFXCmdAttackNameA						;C2/0AB2: 20 FA 16     JSR $16FA
	LDA #$0D		;ability anim				;C2/0AB5: A9 0D        LDA #$0D
	JSR GFXCmdAbilityAnim 						;C2/0AB7: 20 E1 16     JSR $16E1      
	JSR SelectCurrentProcSequence					;C2/0ABA: 20 23 99     JSR $9923
	LDA #$71		;dragon sword hp drain			;C2/0ABD: A9 71        LDA #$71
	JSR CopyROMMagicInfo   						;C2/0ABF: 20 24 03     JSR $0324      
	JSR MagicAtkTypeSingleTarget					;C2/0AC2: 20 05 17     JSR $1705
	JSR FinishCommand						;C2/0AC5: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers  					;C2/0AC8: 20 E3 98     JSR $98E3      
	JSR SelectCurrentProcSequence					;C2/0ACB: 20 23 99     JSR $9923
	LDA #$72		;dragon sword mp drain			;C2/0ACE: A9 72        LDA #$72
	JSR CopyROMMagicInfo   						;C2/0AD0: 20 24 03     JSR $0324      
	JSR MagicAtkTypeSingleTarget					;C2/0AD3: 20 05 17     JSR $1705
	JSR FinishCommand						;C2/0AD6: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers  					;C2/0AD9: 4C E3 98     JMP $98E3

%org($C20ADC)
;Command $0F (Smoke)
CommandTable0E:
	LDA #$0F		;smoke ability				;C2/0ADC: A9 0F        LDA #$0F
	JSR CopyAbilityInfo						;C2/0ADE: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/0AE1: 20 5F 17     JSR $175F
	JSR BuildTargetBitmask						;C2/0AE4: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/0AE7: 20 C2 02     JSR $02C2
	LDA #$0F		;ability name				;C2/0AEA: A9 0F        LDA #$0F
	JSR GFXCmdAttackNameA						;C2/0AEC: 20 FA 16     JSR $16FA
	LDA #$0E		;ability anim				;C2/0AEF: A9 0E        LDA #$0E
	JSR GFXCmdAbilityAnim						;C2/0AF1: 20 E1 16     JSR $16E1
	JSR MagicAtkTypeMultiTarget					;C2/0AF4: 20 1A 17     JSR $171A
	JMP FinishCommand						;C2/0AF7: 4C 35 17     JMP $1735

%org($C20AFA)
;Command $10 (Image)
CommandTable0F:
	LDA #$10		;image ability				;C2/0AFA: A9 10        LDA #$10
	JSR CopyAbilityInfo						;C2/0AFC: 20 AA 16     JSR $16AA
	LDA #$10		;ability name				;C2/0AFF: A9 10        LDA #$10
	JSR GFXCmdAttackNameA						;C2/0B01: 20 FA 16     JSR $16FA
	LDA #$0F		;ability anim				;C2/0B04: A9 0F        LDA #$0F
	JSR GFXCmdAbilityAnim						;C2/0B06: 20 E1 16     JSR $16E1      
	JSR MagicAtkTypeSingleTarget					;C2/0B09: 20 05 17     JSR $1705
	JMP FinishCommandNullTargets					;C2/0B0C: 4C 50 17     JMP $1750
	
%org($C20B0F)
;Command $11 (Throw)
%sub(CommandTable10)
CommandTable10:
	LDX AttackerOffset						;C2/0B0F: A6 32        LDX $32        
	LDA CharStruct.SelectedItem,X					;C2/0B11: BD 5A 20     LDA $205A,X
	BPL .Weapon		;otherwise, a scroll			;C2/0B14: 10 38        BPL $0B4E
	TDC 								;C2/0B16: 7B           TDC 
	TAX 								;C2/0B17: AA           TAX 
	STZ $0E			;target bits				;C2/0B18: 64 0E        STZ $0E

.TargetActiveMonsters
	LDA ActiveParticipants+4,X					;C2/0B1A: BD C6 3E     LDA $3EC6,X
	BEQ .Next							;C2/0B1D: F0 07        BEQ $0B26
	LDA $0E								;C2/0B1F: A5 0E        LDA $0E
	JSR SetBit_X  		;add as target if active		;C2/0B21: 20 D6 01     JSR $01D6      
	STA $0E								;C2/0B24: 85 0E        STA $0E
.Next	INX 								;C2/0B26: E8           INX 
	CPX #$0008		;8 monsters				;C2/0B27: E0 08 00     CPX #$0008
	BNE .TargetActiveMonsters					;C2/0B2A: D0 EE        BNE $0B1A

	LDX AttackerOffset						;C2/0B2C: A6 32        LDX $32        
	LDA $0E			;target bits				;C2/0B2E: A5 0E        LDA $0E
	STA CharStruct.MonsterTargets,X					;C2/0B30: 9D 58 20     STA $2058,X
	LDA EncounterIndex+1						;C2/0B33: AD F1 04     LDA $04F1
	BEQ .ItemFlag							;C2/0B36: F0 0E        BEQ $0B46
	LDA EncounterIndex						;C2/0B38: AD F0 04     LDA $04F0
	CMP #$BF		;sandworm fight				;C2/0B3B: C9 BF        CMP #$BF
	BNE .ItemFlag							;C2/0B3D: D0 07        BNE $0B46
	LDA $0E								;C2/0B3F: A5 0E        LDA $0E
	AND #$FC		;exclude "real" sandworm 		;C2/0B41: 29 FC        AND #$FC
	STA CharStruct.MonsterTargets,X					;C2/0B43: 9D 58 20     STA $2058,X
.ItemFlag
	LDA #$40		;item 					;C2/0B46: A9 40        LDA #$40
	STA CharStruct.ActionFlag,X					;C2/0B48: 9D 56 20     STA $2056,X
	JMP ItemCommand							;C2/0B4B: 4C 70 05     JMP $0570
.Weapon
	LDA #$11		;throw ability				;C2/0B4E: A9 11        LDA #$11
	JSR CopyAbilityInfo						;C2/0B50: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/0B53: 20 5F 17     JSR $175F
	JSR CheckRetarget   						;C2/0B56: 20 FE 4A     JSR $4AFE      
	JSR BuildTargetBitmask						;C2/0B59: 20 A9 02     JSR $02A9
	LDA #$11		;ability name				;C2/0B5C: A9 11        LDA #$11
	JSR GFXCmdAttackNameA						;C2/0B5E: 20 FA 16     JSR $16FA
	LDA #$10		;ability anim				;C2/0B61: A9 10        LDA #$10
	JSR GFXCmdAbilityAnim  						;C2/0B63: 20 E1 16     JSR $16E1      
	JSR MagicAtkTypeSingleTarget					;C2/0B66: 20 05 17     JSR $1705
	JSR FinishCommand						;C2/0B69: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/0B6C: 4C E3 98     JMP $98E3
%endsub()

%org($C20B6F)
SwordSlapCommand:
;Command $12 (Sword Slap)
;sets a variable which is never checked then issues a regular fight command
CommandTable11:
	LDA #$12		;ability name				;C2/0B6F: A9 12        LDA #$12
	JSR GFXCmdAttackNameA						;C2/0B71: 20 FA 16     JSR $16FA  
	INC SwordSlap		;not checked anywhere			;C2/0B74: EE FD 7B     INC $7BFD  
	JMP FightCommand						;C2/0B77: 4C FF 45     JMP $45FF 

%org($C20B7A)
;Command $13 (Gil Toss)
CommandTable12:
	LDA #$13		;gil toss ability			;C2/0B7A: A9 13        LDA #$13
	JSR CopyAbilityInfo						;C2/0B7C: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/0B7F: 20 5F 17     JSR $175F
	JSR BuildTargetBitmask						;C2/0B82: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/0B85: 20 C2 02     JSR $02C2
	LDA #$13		;ability name				;C2/0B88: A9 13        LDA #$13
	JSR GFXCmdAttackNameA						;C2/0B8A: 20 FA 16     JSR $16FA
	LDA #$12		;ability anim				;C2/0B8D: A9 12        LDA #$12
	JSR GFXCmdAbilityAnim						;C2/0B8F: 20 E1 16     JSR $16E1       
	JSR MagicAtkTypeMultiTarget					;C2/0B92: 20 1A 17     JSR $171A
	JSR FinishCommand						;C2/0B95: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/0B98: 4C E3 98     JMP $98E3

%org($C20B9B)
;Command $14 (Slash)
CommandTable13:
	LDA #$14	;slash ability					;C2/0B9B: A9 14        LDA #$14
	JSR CopyAbilityInfo						;C2/0B9D: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/0BA0: 20 5F 17     JSR $175F
	JSR BuildTargetBitmask						;C2/0BA3: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/0BA6: 20 C2 02     JSR $02C2
	INC UnknownReaction						;C2/0BA9: EE FB 7B     INC $7BFB
	LDA #$14	;ability name					;C2/0BAC: A9 14        LDA #$14
	JSR GFXCmdAttackNameA						;C2/0BAE: 20 FA 16     JSR $16FA
	LDA #$13	;ability anim					;C2/0BB1: A9 13        LDA #$13
	JSR GFXCmdAbilityAnim						;C2/0BB3: 20 E1 16     JSR $16E1       
	JSR MagicAtkTypeMultiTarget					;C2/0BB6: 20 1A 17     JSR $171A
	JSR FinishCommand						;C2/0BB9: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/0BBC: 4C E3 98     JMP $98E3

%org($C20BBF)
;Command $15 (Animals)
%sub(CommandTable14)
CommandTable14:
	TDC 								;C2/0BBF: 7B           TDC 
	TAX 								;C2/0BC0: AA           TAX 
	LDA Level   							;C2/0BC1: AD E5 7B     LDA $7BE5      
	JSR Random_X_A		;0..Level				;C2/0BC4: 20 7C 00     JSR $007C      
	BNE +								;C2/0BC7: D0 03        BNE $0BCC
	TDC 		;0 mystidian rabbit				;C2/0BC9: 7B           TDC 
	BRA .Chosen							;C2/0BCA: 80 3A        BRA $0C06
+	CMP #$05							;C2/0BCC: C9 05        CMP #$05
	BCS +								;C2/0BCE: B0 04        BCS $0BD4
	LDA #$01	;<5 squirrel					;C2/0BD0: A9 01        LDA #$01
	BRA .Chosen							;C2/0BD2: 80 32        BRA $0C06
+	CMP #$0A							;C2/0BD4: C9 0A        CMP #$0A
	BCS +								;C2/0BD6: B0 04        BCS $0BDC
	LDA #$02	;<10 bee swarm					;C2/0BD8: A9 02        LDA #$02
	BRA .Chosen							;C2/0BDA: 80 2A        BRA $0C06
+	CMP #$14							;C2/0BDC: C9 14        CMP #$14
	BCS +								;C2/0BDE: B0 04        BCS $0BE4
	LDA #$03	;<20 nightingale				;C2/0BE0: A9 03        LDA #$03
	BRA .Chosen							;C2/0BE2: 80 22        BRA $0C06
+	CMP #$1E							;C2/0BE4: C9 1E        CMP #$1E
	BCS +								;C2/0BE6: B0 04        BCS $0BEC
	LDA #$04	;<30 momonga					;C2/0BE8: A9 04        LDA #$04
	BRA .Chosen							;C2/0BEA: 80 1A        BRA $0C06
+	CMP #$28							;C2/0BEC: C9 28        CMP #$28
	BCS +								;C2/0BEE: B0 04        BCS $0BF4
	LDA #$05	;<40 falcon					;C2/0BF0: A9 05        LDA #$05
	BRA .Chosen							;C2/0BF2: 80 12        BRA $0C06
+	CMP #$32     							;C2/0BF4: C9 32        CMP #$32       
	BCS +								;C2/0BF6: B0 04        BCS $0BFC
	LDA #$06	;<50 skunk					;C2/0BF8: A9 06        LDA #$06
	BRA .Chosen							;C2/0BFA: 80 0A        BRA $0C06
+	CMP #$3C							;C2/0BFC: C9 3C        CMP #$3C
	BCS +								;C2/0BFE: B0 04        BCS $0C04
	LDA #$07	;<60 wild boar					;C2/0C00: A9 07        LDA #$07
	BRA .Chosen							;C2/0C02: 80 02        BRA $0C06
+	LDA #$08	;otherwise unicorn				;C2/0C04: A9 08        LDA #$08
.Chosen
	STA TempSpell    						;C2/0C06: 8D 22 27     STA $2722      
	REP #$20							;C2/0C09: C2 20        REP #$20
	JSR ShiftMultiply_8						;C2/0C0B: 20 B6 01     JSR $01B6      
	TAX 								;C2/0C0E: AA           TAX 
	TDC 								;C2/0C0F: 7B           TDC 
	SEP #$20							;C2/0C10: E2 20        SEP #$20
	TDC 								;C2/0C12: 7B           TDC 
	TAY 								;C2/0C13: A8           TAY 
-	LDA !ROMEffectInfo,X						;C2/0C14: BF B1 6A D1  LDA $D16AB1,X
	STA Temp,Y							;C2/0C18: 99 20 26     STA $2620,Y
	INX 								;C2/0C1B: E8           INX 
	INY 								;C2/0C1C: C8           INY 
	CPY #$0008	;copy 8 bytes magic info			;C2/0C1D: C0 08 00     CPY #$0008
	BNE -								;C2/0C20: D0 F2        BNE $0C14
	STZ PartyTargets						;C2/0C22: 64 66        STZ $66
	STZ MonsterTargets						;C2/0C24: 64 65        STZ $65
	LDA Temp	;targetting byte in magic info			;C2/0C26: AD 20 26     LDA $2620
	BNE .Targetting							;C2/0C29: D0 0B        BNE $0C36
	LDA AttackerIndex 						;C2/0C2B: A5 47        LDA $47        
	TAX 								;C2/0C2D: AA           TAX 
	TDC 								;C2/0C2E: 7B           TDC 
	JSR SetBit_X    						;C2/0C2F: 20 D6 01     JSR $01D6      
	STA PartyTargets	;default to targetting self		;C2/0C32: 85 66        STA $66
	BRA .TargetSet							;C2/0C34: 80 25        BRA $0C5B
.Targetting
	AND #$08		;target enemy				;C2/0C36: 29 08        AND #$08
	BNE .TargetEnemy						;C2/0C38: D0 06        BNE $0C40
	LDA #$F0							;C2/0C3A: A9 F0        LDA #$F0
	STA PartyTargets	;entire party				;C2/0C3C: 85 66        STA $66
	BRA .TargetSet							;C2/0C3E: 80 1B        BRA $0C5B
.TargetEnemy
	LDA Temp							;C2/0C40: AD 20 26     LDA $2620
	AND #$40		;hits all targets			;C2/0C43: 29 40        AND #$40
	BNE .TargetAll							;C2/0C45: D0 10        BNE $0C57
	TDC 								;C2/0C47: 7B           TDC 
	TAX 								;C2/0C48: AA           TAX 
	LDA #$07							;C2/0C49: A9 07        LDA #$07
	JSR Random_X_A    	;0..7 random monster			;C2/0C4B: 20 7C 00     JSR $007C      
	TAX 								;C2/0C4E: AA           TAX 
	TDC 								;C2/0C4F: 7B           TDC 
	JSR SetBit_X    						;C2/0C50: 20 D6 01     JSR $01D6      
	STA MonsterTargets						;C2/0C53: 85 65        STA $65
	BRA .TargetSet							;C2/0C55: 80 04        BRA $0C5B
.TargetAll
	LDA #$FF							;C2/0C57: A9 FF        LDA #$FF
	STA MonsterTargets						;C2/0C59: 85 65        STA $65
.TargetSet
	STZ TempAttachedSpell	;CastSpell routine params		;C2/0C5B: 64 20        STZ $20
	STZ TempSkipNaming						;C2/0C5D: 64 21        STZ $21
	LDA #$01		;animals are effect magic		;C2/0C5F: A9 01        LDA #$01
	STA TempIsEffect						;C2/0C61: 8D 23 27     STA $2723
	JMP CastSpell							;C2/0C64: 4C E1 5C     JMP $5CE1
%endsub()

%org($C20C67)
;Command $16 (Aim)
CommandTable15:
	LDA #$16		;ability name				;C2/0C67: A9 16        LDA #$16
	JSR GFXCmdAttackNameA						;C2/0C69: 20 FA 16     JSR $16FA
	JMP FightCommand						;C2/0C6C: 4C FF 45     JMP $45FF

%org($C20C6F)
;Command $17 (X-Fight)
%sub(CommandTable16)
CommandTable16:
	LDA #$17		;ability name				;C2/0C6F: A9 17        LDA #$17
	JSR GFXCmdAttackNameA						;C2/0C71: 20 FA 16     JSR $16FA
	STZ $22			;index for attack loop			;C2/0C74: 64 22        STZ $22
.AttackLoop
	TDC 								;C2/0C76: 7B           TDC 
	TAX 								;C2/0C77: AA           TAX 
	LDA #$07							;C2/0C78: A9 07        LDA #$07
	JSR Random_X_A 		;0..7 random monster			;C2/0C7A: 20 7C 00     JSR $007C      
	TAX 								;C2/0C7D: AA           TAX 
	TDC 								;C2/0C7E: 7B           TDC 
	JSR SetBit_X							;C2/0C7F: 20 D6 01     JSR $01D6      
	LDX AttackerOffset						;C2/0C82: A6 32        LDX $32        
	STA CharStruct.MonsterTargets,X					;C2/0C84: 9D 58 20     STA $2058,X
	STZ CharStruct.PartyTargets,X					;C2/0C87: 9E 59 20     STZ $2059,X
	LDX AttackerOffset						;C2/0C8A: A6 32        LDX $32        
	LDA CharStruct.MonsterTargets,X					;C2/0C8C: BD 58 20     LDA $2058,X
	STA MonsterTargets						;C2/0C8F: 85 65        STA $65
	LDA CharStruct.PartyTargets,X					;C2/0C91: BD 59 20     LDA $2059,X
	STA PartyTargets						;C2/0C94: 85 66        STA $66
	JSR CheckRetarget						;C2/0C96: 20 FE 4A     JSR $4AFE      
	LDX AttackerOffset      					;C2/0C99: A6 32        LDX $32        
	LDA PartyTargets						;C2/0C9B: A5 66        LDA $66
	STA CharStruct.PartyTargets,X					;C2/0C9D: 9D 59 20     STA $2059,X
	LDA MonsterTargets						;C2/0CA0: A5 65        LDA $65
	STA CharStruct.MonsterTargets,X					;C2/0CA2: 9D 58 20     STA $2058,X
	PHA 								;C2/0CA5: 48           PHA 
	AND #$F0							;C2/0CA6: 29 F0        AND #$F0
	LSR 								;C2/0CA8: 4A           LSR 
	LSR 								;C2/0CA9: 4A           LSR 
	LSR 								;C2/0CAA: 4A           LSR 
	LSR 								;C2/0CAB: 4A           LSR 
	ORA CharStruct.PartyTargets,X					;C2/0CAC: 1D 59 20     ORA $2059,X
	STA TempTargetBitmask						;C2/0CAF: 8D 20 27     STA $2720
	PLA 								;C2/0CB2: 68           PLA 
	AND #$0F							;C2/0CB3: 29 0F        AND #$0F
	ASL 								;C2/0CB5: 0A           ASL 
	ASL 								;C2/0CB6: 0A           ASL 
	ASL 								;C2/0CB7: 0A           ASL 
	ASL 								;C2/0CB8: 0A           ASL 
	STA TempTargetBitmask+1						;C2/0CB9: 8D 21 27     STA $2721
	LDA AttackerIndex						;C2/0CBC: A5 47        LDA $47        
	TAX 								;C2/0CBE: AA           TAX 
	LDA ROMTimes84,X	;combined size of gearstats structs	;C2/0CBF: BF 85 ED D0  LDA $D0ED85,X
	TAX 								;C2/0CC3: AA           TAX 
	STX $0E			;gearstats offset			;C2/0CC4: 86 0E        STX $0E
	LDX AttackerOffset						;C2/0CC6: A6 32        LDX $32        
	LDA CharStruct.RHWeapon,X					;C2/0CC8: BD 13 20     LDA $2013,X
	BNE .RH								;C2/0CCB: D0 03        BNE $0CD0
	JMP .LH								;C2/0CCD: 4C 2C 0D     JMP $0D2C

.RH	JSR SelectCurrentProcSequence					;C2/0CD0: 20 23 99     JSR $9923
	STY $14			;AttackInfo offset			;C2/0CD3: 84 14        STY $14
	STZ $12								;C2/0CD5: 64 12        STZ $12
	LDX $0E			;gearstats offset			;C2/0CD7: A6 0E        LDX $0E
-	LDA !RHWeapon,X							;C2/0CD9: BD 85 40     LDA $4085,X    
	STA !AttackInfo,Y						;C2/0CDC: 99 FC 79     STA $79FC,Y
	INX 								;C2/0CDF: E8           INX 
	INY 								;C2/0CE0: C8           INY 
	INC $12								;C2/0CE1: E6 12        INC $12
	LDA $12								;C2/0CE3: A5 12        LDA $12
	CMP #$0C		;copy 12 bytes weapon data		;C2/0CE5: C9 0C        CMP #$0C
	BNE -								;C2/0CE7: D0 F0        BNE $0CD9
	JSR FindOpenGFXQueueSlot    					;C2/0CE9: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/0CEC: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/0CEF: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/0CF1: 9D 4D 38     STA $384D,X
	LDA #$01		;ability/command anim			;C2/0CF4: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/0CF6: 9D 4E 38     STA $384E,X
	LDA #$04		;fight					;C2/0CF9: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/0CFB: 9D 4F 38     STA $384F,X
	STZ GFXQueue.Data2,X	;right hand, no msword anim		;C2/0CFE: 9E 50 38     STZ $3850,X
	LDX $0E			;gearstats offset			;C2/0D01: A6 0E        LDX $0E
	LDA RHWeapon.AtkType,X						;C2/0D03: BD 8D 40     LDA $408D,X
	PHA 								;C2/0D06: 48           PHA 
	LDA ProcSequence						;C2/0D07: AD FA 79     LDA $79FA
	TAX 								;C2/0D0A: AA           TAX 
	PLA 								;C2/0D0B: 68           PLA 
	STA AtkType,X							;C2/0D0C: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/0D0F: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0D12: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/0D15: AD FA 79     LDA $79FA
	ASL 								;C2/0D18: 0A           ASL 
	TAX 								;C2/0D19: AA           TAX 
	LDA TempTargetBitmask						;C2/0D1A: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/0D1D: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1						;C2/0D20: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/0D23: 9D DD 7A     STA $7ADD,X
	INC ProcSequence						;C2/0D26: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/0D29: 20 E3 98     JSR $98E3

.LH	LDX AttackerOffset						;C2/0D2C: A6 32        LDX $32        
	LDA CharStruct.LHWeapon,X					;C2/0D2E: BD 14 20     LDA $2014,X
	BNE +								;C2/0D31: D0 03        BNE $0D36
	JMP .Finish							;C2/0D33: 4C 96 0D     JMP $0D96
+	JSR SelectCurrentProcSequence					;C2/0D36: 20 23 99     JSR $9923
	STY $12								;C2/0D39: 84 12        STY $12
	STZ $14								;C2/0D3B: 64 14        STZ $14
	LDX $0E		;gearstats offset				;C2/0D3D: A6 0E        LDX $0E
-	LDA !LHWeapon,X   						;C2/0D3F: BD 91 40     LDA $4091,X    
	STA !AttackInfo,Y						;C2/0D42: 99 FC 79     STA $79FC,Y
	INX 								;C2/0D45: E8           INX 
	INY 								;C2/0D46: C8           INY 
	INC $14								;C2/0D47: E6 14        INC $14
	LDA $14								;C2/0D49: A5 14        LDA $14
	CMP #$0C	;copy 12 bytes weapon data			;C2/0D4B: C9 0C        CMP #$0C
	BNE -								;C2/0D4D: D0 F0        BNE $0D3F
	LDX $0E		;gearstats offset				;C2/0D4F: A6 0E        LDX $0E
	LDA ProcSequence						;C2/0D51: AD FA 79     LDA $79FA
	TAY 								;C2/0D54: A8           TAY 
	LDA LHWeapon.AtkType,X						;C2/0D55: BD 99 40     LDA $4099,X
	STA AtkType,Y							;C2/0D58: 99 2D 7B     STA $7B2D,Y
	JSR FindOpenGFXQueueSlot					;C2/0D5B: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/0D5E: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/0D61: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/0D63: 9D 4D 38     STA $384D,X
	LDA #$01		;ability/command anim			;C2/0D66: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/0D68: 9D 4E 38     STA $384E,X
	LDA #$04		;fight					;C2/0D6B: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/0D6D: 9D 4F 38     STA $384F,X
	LDA #$80		;left hand, no msword anim		;C2/0D70: A9 80        LDA #$80
	STA GFXQueue.Data2,X						;C2/0D72: 9D 50 38     STA $3850,X
	LDA ProcSequence						;C2/0D75: AD FA 79     LDA $79FA
	TAX 								;C2/0D78: AA           TAX 
	STZ MultiTarget,X						;C2/0D79: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0D7C: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/0D7F: AD FA 79     LDA $79FA
	ASL 								;C2/0D82: 0A           ASL 
	TAX 								;C2/0D83: AA           TAX 
	LDA TempTargetBitmask						;C2/0D84: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/0D87: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1						;C2/0D8A: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/0D8D: 9D DD 7A     STA $7ADD,X
	INC ProcSequence						;C2/0D90: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/0D93: 20 E3 98     JSR $98E3
.Finish	INC $22			;attack loop index			;C2/0D96: E6 22        INC $22
	LDA $22								;C2/0D98: A5 22        LDA $22
	CMP #$04		;4 attacks				;C2/0D9A: C9 04        CMP #$04
	BEQ .Ret							;C2/0D9C: F0 03        BEQ $0DA1
	JMP .AttackLoop							;C2/0D9E: 4C 76 0C     JMP $0C76
.Ret	RTS 								;C2/0DA1: 60           RTS 
%endsub()

%org($C20DA2)
;Command $19 (Observe)
CommandTable18:
	LDA #$19		;observe ability			;C2/0DA2: A9 19        LDA #$19
	JSR CopyAbilityInfo						;C2/0DA4: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/0DA7: 20 5F 17     JSR $175F
	JSR CheckRetarget   						;C2/0DAA: 20 FE 4A     JSR $4AFE      
	JSR BuildTargetBitmask						;C2/0DAD: 20 A9 02     JSR $02A9
	LDA #$19		;ability name				;C2/0DB0: A9 19        LDA #$19
	JSR GFXCmdAttackNameA						;C2/0DB2: 20 FA 16     JSR $16FA
	LDA #$18		;ability anim				;C2/0DB5: A9 18        LDA #$18
	JSR GFXCmdAbilityAnim						;C2/0DB7: 20 E1 16     JSR $16E1      
	JSR MagicAtkTypeSingleTarget					;C2/0DBA: 20 05 17     JSR $1705
	JSR FinishCommand						;C2/0DBD: 20 35 17     JSR $1735
	JMP GFXCmdMessage						;C2/0DC0: 4C 4C 99     JMP $994C

%org($C20DC3)
;Command $1A (Analyze)
CommandTable19:
	LDA #$1A		;observe ability				;C2/0DC3: A9 1A        LDA #$1A
	JSR CopyAbilityInfo							;C2/0DC5: 20 AA 16     JSR $16AA
	JSR GetTargets								;C2/0DC8: 20 5F 17     JSR $175F
	JSR CheckRetarget  							;C2/0DCB: 20 FE 4A     JSR $4AFE         
	JSR BuildTargetBitmask							;C2/0DCE: 20 A9 02     JSR $02A9
	LDA #$1A		;ability name					;C2/0DD1: A9 1A        LDA #$1A
	JSR GFXCmdAttackNameA							;C2/0DD3: 20 FA 16     JSR $16FA
	LDA #$19		;ability anim					;C2/0DD6: A9 19        LDA #$19
	JSR GFXCmdAbilityAnim							;C2/0DD8: 20 E1 16     JSR $16E1         
	JSR MagicAtkTypeSingleTarget						;C2/0DDB: 20 05 17     JSR $1705
	JSR FinishCommand							;C2/0DDE: 20 35 17     JSR $1735
	JMP GFXCmdMessage							;C2/0DE1: 4C 4C 99     JMP $994C

%org($C20DE4)
;Command $18 (Conjure)
CommandTable17:
ConjureCommand:
	LDA MagicBits+10	;2nd byte of summons			;C2/0DE4: AD 5A 09     LDA $095A
	AND #$FE		;last bit is a song			;C2/0DE7: 29 FE        AND #$FE
	ORA MagicBits+9		;1st byte of summons			;C2/0DE9: 0D 59 09     ORA $0959
	BNE .PickRandomSummon						;C2/0DEC: D0 2B        BNE $0E19

;no summons known
	LDA #$18							;C2/0DEE: A9 18        LDA #$18
	JSR GFXCmdAttackNameA						;C2/0DF0: 20 FA 16     JSR $16FA
	LDA MessageBoxOffset						;C2/0DF3: AD EF 3C     LDA $3CEF
	TAX 								;C2/0DF6: AA           TAX 
	LDA #$1D		;message				;C2/0DF7: A9 1D        LDA #$1D
	STA MessageBoxes,X						;C2/0DF9: 9D 5F 3C     STA $3C5F,X
	LDA ProcSequence						;C2/0DFC: AD FA 79     LDA $79FA
	TAX 								;C2/0DFF: AA           TAX 
	LDA #$7E		;always miss				;C2/0E00: A9 7E        LDA #$7E
	STA AtkType,X							;C2/0E02: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/0E05: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/0E08: 9E CC 7A     STZ $7ACC,X
	LDA #$0D		;ability animation			;C2/0E0B: A9 0D        LDA #$0D
	JSR GFXCmdAbilityAnim						;C2/0E0D: 20 E1 16     JSR $16E1       
	JSR FinishCommandNullTargets					;C2/0E10: 20 50 17     JSR $1750
	JSR GFXCmdMessage						;C2/0E13: 20 4C 99     JSR $994C
	JMP .Ret							;C2/0E16: 4C DF 0E     JMP $0EDF

.PickRandomSummon
	TDC 								;C2/0E19: 7B           TDC 
	TAX 								;C2/0E1A: AA           TAX 
	STX $0E								;C2/0E1B: 86 0E        STX $0E
	LDA #$0E							;C2/0E1D: A9 0E        LDA #$0E
	JSR Random_X_A    	;0..14					;C2/0E1F: 20 7C 00     JSR $007C       
	CLC 								;C2/0E22: 18           CLC 
	ADC #$48		;offset of first summon			;C2/0E23: 69 48        ADC #$48
	STA TempSpell							;C2/0E25: 8D 22 27     STA $2722
	STZ TempIsEffect						;C2/0E28: 9C 23 27     STZ $2723
	LSR 								;C2/0E2B: 4A           LSR 
	ROR $0E								;C2/0E2C: 66 0E        ROR $0E
	LSR 								;C2/0E2E: 4A           LSR 
	ROR $0E								;C2/0E2F: 66 0E        ROR $0E
	LSR 								;C2/0E31: 4A           LSR 
	ROR $0E								;C2/0E32: 66 0E        ROR $0E
	TAY 			;MagicBits offset			;C2/0E34: A8           TAY 
	LDA $0E								;C2/0E35: A5 0E        LDA $0E
	JSR ShiftDivide_32    						;C2/0E37: 20 BD 01     JSR $01BD      
	TAX 			;MagicBits spell			;C2/0E3A: AA           TAX 
	LDA MagicBits,Y							;C2/0E3B: B9 50 09     LDA $0950,Y    
	JSR SelectBit_X    						;C2/0E3E: 20 DB 01     JSR $01DB      
	BEQ .PickRandomSummon	;don't know this one, try again		;C2/0E41: F0 D6        BEQ $0E19

.MagicLamp			;Magic Lamp use jumps in here
	STZ PartyTargets						;C2/0E43: 64 66        STZ $66
	STZ MonsterTargets						;C2/0E45: 64 65        STZ $65
	LDA TempSpell							;C2/0E47: AD 22 27     LDA $2722
	REP #$20							;C2/0E4A: C2 20        REP #$20
	JSR ShiftMultiply_8   						;C2/0E4C: 20 B6 01     JSR $01B6      
	TAX 								;C2/0E4F: AA           TAX 
	TDC 								;C2/0E50: 7B           TDC 
	SEP #$20							;C2/0E51: E2 20        SEP #$20
	TDC 								;C2/0E53: 7B           TDC 
	TAY 								;C2/0E54: A8           TAY 
-	LDA !ROMMagicInfo,X						;C2/0E55: BF 80 0B D1  LDA $D10B80,X  
	STA Temp,Y							;C2/0E59: 99 20 26     STA $2620,Y
	INX 								;C2/0E5C: E8           INX 
	INY 								;C2/0E5D: C8           INY 
	CPY #$0008		;copy 8 bytes magic data		;C2/0E5E: C0 08 00     CPY #$0008
	BNE -								;C2/0E61: D0 F2        BNE $0E55
	LDA Temp		;targetting				;C2/0E63: AD 20 26     LDA $2620
	BNE .FindTargets						;C2/0E66: D0 0B        BNE $0E73

;no targetting data, target self
	LDA AttackerIndex						;C2/0E68: A5 47        LDA $47        
	TAX 								;C2/0E6A: AA           TAX 
	TDC 								;C2/0E6B: 7B           TDC 
	JSR SetBit_X      						;C2/0E6C: 20 D6 01     JSR $01D6      
	STA PartyTargets						;C2/0E6F: 85 66        STA $66
	BRA .TargetSet							;C2/0E71: 80 4C        BRA $0EBF

.FindTargets
	AND #$40		;hits all				;C2/0E73: 29 40        AND #$40
	BNE .TargetAll							;C2/0E75: D0 37        BNE $0EAE
	LDA Temp		;targetting				;C2/0E77: AD 20 26     LDA $2620
	AND #$08		;enemy by default			;C2/0E7A: 29 08        AND #$08
	BNE .SingleEnemy						;C2/0E7C: D0 20        BNE $0E9E

.SingleAlly			;hardcoded for phoenix, targets first dead ally
	TDC 								;C2/0E7E: 7B           TDC 
	TAX 								;C2/0E7F: AA           TAX 
	TAY 								;C2/0E80: A8           TAY 
-	LDA CharStruct.Status1,X					;C2/0E81: BD 1A 20     LDA $201A,X
	AND #$80		;dead					;C2/0E84: 29 80        AND #$80
	BNE .DeadAlly							;C2/0E86: D0 0D        BNE $0E95
	JSR NextCharOffset    						;C2/0E88: 20 E0 01     JSR $01E0      
	INY 								;C2/0E8B: C8           INY 
	CPY #$0004		;4 chars				;C2/0E8C: C0 04 00     CPY #$0004
	BNE -								;C2/0E8F: D0 F0        BNE $0E81
	LDA #$80		;defaults to first member if none dead	;C2/0E91: A9 80        LDA #$80
	BRA .SetAlly							;C2/0E93: 80 05        BRA $0E9A

.DeadAlly
	TYX 								;C2/0E95: BB           TYX 
	TDC 								;C2/0E96: 7B           TDC 
	JSR SetBit_X   							;C2/0E97: 20 D6 01     JSR $01D6      
.SetAlly	
	STA PartyTargets	;target single dead ally		;C2/0E9A: 85 66        STA $66
	BRA .TargetSet							;C2/0E9C: 80 21        BRA $0EBF

.SingleEnemy
	TDC 								;C2/0E9E: 7B           TDC 
	TAX 								;C2/0E9F: AA           TAX 
	LDA #$07							;C2/0EA0: A9 07        LDA #$07
	JSR Random_X_A 		;0..7 random monster			;C2/0EA2: 20 7C 00     JSR $007C      
	TAX 								;C2/0EA5: AA           TAX 
	TDC 								;C2/0EA6: 7B           TDC 
	JSR SetBit_X    						;C2/0EA7: 20 D6 01     JSR $01D6      
	STA MonsterTargets						;C2/0EAA: 85 65        STA $65
	BRA .TargetSet							;C2/0EAC: 80 11        BRA $0EBF

.TargetAll
	LDA Temp		;targetting				;C2/0EAE: AD 20 26     LDA $2620
	AND #$08		;enemy by default			;C2/0EB1: 29 08        AND #$08
	BNE .AllEnemy							;C2/0EB3: D0 06        BNE $0EBB
	LDA #$F0							;C2/0EB5: A9 F0        LDA #$F0
	STA PartyTargets	;all allies				;C2/0EB7: 85 66        STA $66
	BRA .TargetSet							;C2/0EB9: 80 04        BRA $0EBF

.AllEnemy
	LDA #$FF							;C2/0EBB: A9 FF        LDA #$FF
	STA MonsterTargets	;all enemies				;C2/0EBD: 85 65        STA $65

.TargetSet
	STZ TempAttachedSpell	;params for CastSpell			;C2/0EBF: 64 20        STZ $20
	STZ TempSkipNaming						;C2/0EC1: 64 21        STZ $21
	JSR CastSpell							;C2/0EC3: 20 E1 5C     JSR $5CE1
	LDA TempAttachedSpell						;C2/0EC6: A5 20        LDA $20
	BEQ .Ret							;C2/0EC8: F0 15        BEQ $0EDF
	LDA TempAttachedSpell	;second spell, for phoenix summon	;C2/0ECA: A5 20        LDA $20
	STA TempSpell							;C2/0ECC: 8D 22 27     STA $2722
	STZ TempIsEffect						;C2/0ECF: 9C 23 27     STZ $2723
	LDA TempMonsterTargets						;C2/0ED2: A5 23        LDA $23
	STA MonsterTargets						;C2/0ED4: 85 65        STA $65
	LDA TempPartyTargets						;C2/0ED6: A5 22        LDA $22
	STA PartyTargets						;C2/0ED8: 85 66        STA $66
	INC TempSkipNaming	;2nd spell has no label and diff anim	;C2/0EDA: E6 21        INC $21
	JSR CastSpell							;C2/0EDC: 20 E1 5C     JSR $5CE1
.Ret	RTS 								;C2/0EDF: 60           RTS 

%org($C20EE0)
;Command $1B (Tame)
CommandTable1A:
	LDA #$1B		;tame ability					;C2/0EE0: A9 1B        LDA #$1B
	JSR CopyAbilityInfo							;C2/0EE2: 20 AA 16     JSR $16AA
	JSR GetTargets								;C2/0EE5: 20 5F 17     JSR $175F
	JSR CheckRetarget							;C2/0EE8: 20 FE 4A     JSR $4AFE     
	JSR BuildTargetBitmask							;C2/0EEB: 20 A9 02     JSR $02A9
	LDA #$1B		;ability name					;C2/0EEE: A9 1B        LDA #$1B
	JSR GFXCmdAttackNameA							;C2/0EF0: 20 FA 16     JSR $16FA
	LDA #$1A		;ability anim					;C2/0EF3: A9 1A        LDA #$1A
	JSR GFXCmdAbilityAnim							;C2/0EF5: 20 E1 16     JSR $16E1     
	JSR MagicAtkTypeSingleTarget						;C2/0EF8: 20 05 17     JSR $1705
	JMP FinishCommand							;C2/0EFB: 4C 35 17     JMP $1735
	
%org($C20EFE)
;Command $1C (Control)
CommandTable1B:
	LDA #$1C		;control ability				;C2/0EFE: A9 1C        LDA #$1C
	JSR CopyAbilityInfo							;C2/0F00: 20 AA 16     JSR $16AA
	JSR GetTargets								;C2/0F03: 20 5F 17     JSR $175F
	JSR CheckRetarget							;C2/0F06: 20 FE 4A     JSR $4AFE
	JSR BuildTargetBitmask							;C2/0F09: 20 A9 02     JSR $02A9
	LDA #$1C		;ability name					;C2/0F0C: A9 1C        LDA #$1C
	JSR GFXCmdAttackNameA							;C2/0F0E: 20 FA 16     JSR $16FA
	LDA #$1B		;ability anim					;C2/0F11: A9 1B        LDA #$1B
	JSR GFXCmdAbilityAnim							;C2/0F13: 20 E1 16     JSR $16E1     
	JSR MagicAtkTypeSingleTarget						;C2/0F16: 20 05 17     JSR $1705
	JSR FinishCommand							;C2/0F19: 20 35 17     JSR $1735
	JMP GFXCmdMessage							;C2/0F1C: 4C 4C 99     JMP $994C

%org($C20F1F)
;Command $1D (Catch)
CommandTable1C:
	LDA #$1D		;catch ability					;C2/0F1F: A9 1D        LDA #$1D
	JSR CopyAbilityInfo							;C2/0F21: 20 AA 16     JSR $16AA
	JSR GetTargets								;C2/0F24: 20 5F 17     JSR $175F
	JSR CheckRetarget							;C2/0F27: 20 FE 4A     JSR $4AFE     
	JSR BuildTargetBitmask							;C2/0F2A: 20 A9 02     JSR $02A9
	LDA #$1D		;ability name					;C2/0F2D: A9 1D        LDA #$1D
	JSR GFXCmdAttackNameA							;C2/0F2F: 20 FA 16     JSR $16FA
	LDA #$1C		;ability anim					;C2/0F32: A9 1C        LDA #$1C
	JSR GFXCmdAbilityAnim							;C2/0F34: 20 E1 16     JSR $16E1     
	JSR MagicAtkTypeSingleTarget						;C2/0F37: 20 05 17     JSR $1705
	JSR FinishCommand							;C2/0F3A: 20 35 17     JSR $1735
	JMP GFXCmdMessage							;C2/0F3D: 4C 4C 99     JMP $994C

%org($C20F40)
;Command $1E (Release)
CommandTable1D:
	LDX AttackerOffset						;C2/0F40: A6 32        LDX $32         
	LDA CharStruct.CaughtMonster,X					;C2/0F42: BD 15 20     LDA $2015,X
	STA ReleasedMonsterID						;C2/0F45: 8D 4B 7C     STA $7C4B
	PHA 								;C2/0F48: 48           PHA 
	LDA #$FF		;no monster caught			;C2/0F49: A9 FF        LDA #$FF
	STA CharStruct.CaughtMonster,X					;C2/0F4B: 9D 15 20     STA $2015,X
	PLA 								;C2/0F4E: 68           PLA 
	TAX 								;C2/0F4F: AA           TAX 
	LDA ROMMonsterReleaseActions,X					;C2/0F50: BF 00 86 D0  LDA $D08600,X
	STA TempSpell							;C2/0F54: 8D 22 27     STA $2722
	REP #$20							;C2/0F57: C2 20        REP #$20
	JSR ShiftMultiply_8						;C2/0F59: 20 B6 01     JSR $01B6       
	TAX 								;C2/0F5C: AA           TAX 
	TDC 								;C2/0F5D: 7B           TDC 
	SEP #$20							;C2/0F5E: E2 20        SEP #$20
	TDC 								;C2/0F60: 7B           TDC 
	TAY 								;C2/0F61: A8           TAY 
-	LDA !ROMMagicInfo,X						;C2/0F62: BF 80 0B D1  LDA $D10B80,X
	STA !TempMagicInfo,Y						;C2/0F66: 99 2A 26     STA $262A,Y
	INX 								;C2/0F69: E8           INX 
	INY 								;C2/0F6A: C8           INY 
	CPY #$0008		;8 bytes magic data			;C2/0F6B: C0 08 00     CPY #$0008
	BNE -								;C2/0F6E: D0 F2        BNE $0F62
	JSR SelectCurrentProcSequence					;C2/0F70: 20 23 99     JSR $9923
	TDC 								;C2/0F73: 7B           TDC 
	TAX 								;C2/0F74: AA           TAX 
-	LDA !TempMagicInfo,X						;C2/0F75: BD 2A 26     LDA $262A,X
	STA !AttackInfo,Y						;C2/0F78: 99 FC 79     STA $79FC,Y
	INX 								;C2/0F7B: E8           INX 
	INY 								;C2/0F7C: C8           INY 
	CPX #$0005		;copy first 5 bytes			;C2/0F7D: E0 05 00     CPX #$0005
	BNE -								;C2/0F80: D0 F3        BNE $0F75
	INY 			;increment dest pointer by 4		;C2/0F82: C8           INY 
	INY 								;C2/0F83: C8           INY 
	INY 								;C2/0F84: C8           INY 
	INY 								;C2/0F85: C8           INY 
-	LDA !TempMagicInfo,X						;C2/0F86: BD 2A 26     LDA $262A,X
	STA !AttackInfo,Y						;C2/0F89: 99 FC 79     STA $79FC,Y
	INX 								;C2/0F8C: E8           INX 
	INY 								;C2/0F8D: C8           INY 
	CPX #$0008		;then copy remaining 3 bytes		;C2/0F8E: E0 08 00     CPX #$0008
	BNE -								;C2/0F91: D0 F3        BNE $0F86
	STZ MonsterTargets						;C2/0F93: 64 65        STZ $65
	STZ PartyTargets						;C2/0F95: 64 66        STZ $66
	LDA TempMagicInfo.Targetting					;C2/0F97: AD 2A 26     LDA $262A
	BNE .Targetting							;C2/0F9A: D0 0B        BNE $0FA7
	LDA AttackerIndex						;C2/0F9C: A5 47        LDA $47         
	TAX 								;C2/0F9E: AA           TAX 
	TDC 								;C2/0F9F: 7B           TDC 
	JSR SetBit_X  							;C2/0FA0: 20 D6 01     JSR $01D6       
	STA PartyTargets	;default to attacker if no targetting	;C2/0FA3: 85 66        STA $66
	BRA .TargetSet							;C2/0FA5: 80 40        BRA $0FE7
.Targetting
	AND #$40		;all targets				;C2/0FA7: 29 40        AND #$40
	BNE .TargetAll							;C2/0FA9: D0 2B        BNE $0FD6
	LDA TempMagicInfo.Targetting					;C2/0FAB: AD 2A 26     LDA $262A
	AND #$08		;enemy by default			;C2/0FAE: 29 08        AND #$08
	BNE .TargetEnemy						;C2/0FB0: D0 14        BNE $0FC6
.TargetParty
	TDC 								;C2/0FB2: 7B           TDC 
	TAX 								;C2/0FB3: AA           TAX 
	LDA #$03							;C2/0FB4: A9 03        LDA #$03
	JSR Random_X_A		;0..3 random party			;C2/0FB6: 20 7C 00     JSR $007C       
	CMP AttackerIndex						;C2/0FB9: C5 47        CMP $47         
	BEQ .TargetParty	;pick again if attacker chosen		;C2/0FBB: F0 F5        BEQ $0FB2
	TAX 								;C2/0FBD: AA           TAX 
	TDC 								;C2/0FBE: 7B           TDC 
	JSR SetBit_X        						;C2/0FBF: 20 D6 01     JSR $01D6       
	STA PartyTargets						;C2/0FC2: 85 66        STA $66
	BRA .TargetSet							;C2/0FC4: 80 21        BRA $0FE7
.TargetEnemy
	TDC 								;C2/0FC6: 7B           TDC 
	TAX 								;C2/0FC7: AA           TAX 
	LDA #$07							;C2/0FC8: A9 07        LDA #$07
	JSR Random_X_A	      	;0..7 random monster			;C2/0FCA: 20 7C 00     JSR $007C       
	TAX 								;C2/0FCD: AA           TAX 
	TDC 								;C2/0FCE: 7B           TDC 
	JSR SetBit_X      						;C2/0FCF: 20 D6 01     JSR $01D6       
	STA MonsterTargets						;C2/0FD2: 85 65        STA $65
	BRA .TargetSet							;C2/0FD4: 80 11        BRA $0FE7
.TargetAll
	LDA TempMagicInfo.Targetting					;C2/0FD6: AD 2A 26     LDA $262A
	AND #$08		;enemy by default			;C2/0FD9: 29 08        AND #$08
	BNE .TargetAllEnemy						;C2/0FDB: D0 06        BNE $0FE3
	LDA #$F0							;C2/0FDD: A9 F0        LDA #$F0
	STA PartyTargets						;C2/0FDF: 85 66        STA $66
	BRA .TargetSet							;C2/0FE1: 80 04        BRA $0FE7
.TargetAllEnemy
	LDA #$FF							;C2/0FE3: A9 FF        LDA #$FF
	STA MonsterTargets						;C2/0FE5: 85 65        STA $65
.TargetSet
	JSR CheckMultiTarget						;C2/0FE7: 20 C2 02     JSR $02C2
	BNE .Multi							;C2/0FEA: D0 13        BNE $0FFF
	LDA TempMagicInfo.AtkType					;C2/0FEC: AD 2E 26     LDA $262E
	BPL .CheckRetarget						;C2/0FEF: 10 09        BPL $0FFA
	LDA ProcSequence						;C2/0FF1: AD FA 79     LDA $79FA
	TAX 								;C2/0FF4: AA           TAX 
	INC HitsInactive,X						;C2/0FF5: FE EB 7B     INC $7BEB,X
	BRA .TargetOK							;C2/0FF8: 80 0B        BRA $1005
.CheckRetarget
	JSR CheckRetarget						;C2/0FFA: 20 FE 4A     JSR $4AFE       
	BRA .TargetOK							;C2/0FFD: 80 06        BRA $1005
.Multi
	JSR RemoveInactiveTargets					;C2/0FFF: 20 CF 02     JSR $02CF
	JSR CheckMultiTarget						;C2/1002: 20 C2 02     JSR $02C2
.TargetOK
	JSR BuildTargetBitmask						;C2/1005: 20 A9 02     JSR $02A9
	LDA TempSpell							;C2/1008: AD 22 27     LDA $2722
	STA Temp+1		;attack id				;C2/100B: 8D 21 26     STA $2621
	STZ Temp		;string table 0				;C2/100E: 9C 20 26     STZ $2620
	JSR GFXCmdAttackNameFromTemp					;C2/1011: 20 2F 99     JSR $992F
	JSR FindOpenGFXQueueSlot     					;C2/1014: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/1017: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Data2,X						;C2/101A: 9E 50 38     STZ $3850,X
	LDA #$FC		;exec graphics command			;C2/101D: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/101F: 9D 4D 38     STA $384D,X
	LDA #$00		;attack animation			;C2/1022: A9 00        LDA #$00
	STA GFXQueue.Type,X						;C2/1024: 9D 4E 38     STA $384E,X
	LDA Temp+1		;attack id				;C2/1027: AD 21 26     LDA $2621
	STA GFXQueue.Data1,X						;C2/102A: 9D 4F 38     STA $384F,X
	LDA ProcSequence						;C2/102D: AD FA 79     LDA $79FA
	TAX 								;C2/1030: AA           TAX 
	LDA TempMagicInfo.AtkType					;C2/1031: AD 2E 26     LDA $262E
	AND #$7F		;remove flag bit			;C2/1034: 29 7F        AND #$7F
	STA AtkType,X							;C2/1036: 9D 2D 7B     STA $7B2D,X
	LDA TempTargetting	;number of targets minus 1		;C2/1039: AD A0 26     LDA $26A0
	STA MultiTarget,X						;C2/103C: 9D 1C 7B     STA $7B1C,X
	BEQ +								;C2/103F: F0 05        BEQ $1046
	INC MultiTarget,X	;number of targets (but 1 target -> 0)	;C2/1041: FE 1C 7B     INC $7B1C,X
	LDA #$80		;multi target				;C2/1044: A9 80        LDA #$80
+	STA TargetType,X						;C2/1046: 9D CC 7A     STA $7ACC,X
	LDA ProcSequence						;C2/1049: AD FA 79     LDA $79FA
	ASL 								;C2/104C: 0A           ASL 
	TAX 								;C2/104D: AA           TAX 
	LDA TempTargetBitmask						;C2/104E: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/1051: 9D DC 7A     STA $7ADC,X
	STA TargetBitmask,X						;C2/1054: 9D FC 7A     STA $7AFC,X
	LDA TempTargetBitmask+1						;C2/1057: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/105A: 9D DD 7A     STA $7ADD,X
	STA TargetBitmask+1,X						;C2/105D: 9D FD 7A     STA $7AFD,X
	INC ProcSequence						;C2/1060: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/1063: 20 E3 98     JSR $98E3
	LDA AttackerIndex						;C2/1066: A5 47        LDA $47         
	STA $24								;C2/1068: 85 24        STA $24
	LDA #$14							;C2/106A: A9 14        LDA #$14
	STA $25								;C2/106C: 85 25        STA $25
	JSR Multiply_8bit     	;Index * 20, size of CharCommands	;C2/106E: 20 F1 00     JSR $00F1       
	TDC 								;C2/1071: 7B           TDC 
	TAY 								;C2/1072: A8           TAY 
	LDX $26			;CharCommands offset			;C2/1073: A6 26        LDX $26
.FindCmd
	LDA CharCommands.ID,X						;C2/1075: BD 5C 37     LDA $375C,X     
	CMP #$1E		;release				;C2/1078: C9 1E        CMP #$1E
	BEQ .Found     							;C2/107A: F0 09        BEQ $1085       
	INX 								;C2/107C: E8           INX 
	INY 								;C2/107D: C8           INY 
	CPY #$0004		;4 command slots			;C2/107E: C0 04 00     CPY #$0004
	BNE .FindCmd							;C2/1081: D0 F2        BNE $1075
	BEQ .CopyStats							;C2/1083: F0 0E        BEQ $1093
.Found
	LDA #$1D		;catch					;C2/1085: A9 1D        LDA #$1D
	STA CharCommands.ID,X    					;C2/1087: 9D 5C 37     STA $375C,X     
	LDA #$28		;target selectable + enemy default	;C2/108A: A9 28        LDA #$28
	STA CharCommands.Targetting,X					;C2/108C: 9D 68 37     STA $3768,X
	INX 								;C2/108F: E8           INX 
	INY 								;C2/1090: C8           INY 
	BRA .FindCmd		;keep going, could have multiple copies	;C2/1091: 80 E2        BRA $1075

.CopyStats	;backs up attacker's stats so it can load monster stats instead, they will be restored later
	LDX AttackerOffset						;C2/1093: A6 32        LDX $32         
	LDA CharStruct.Level,X						;C2/1095: BD 02 20     LDA $2002,X     
	STA SavedCharStats.Level					;C2/1098: 8D 00 26     STA $2600
	LDA CharStruct.MonsterAttack,X    				;C2/109B: BD 44 20     LDA $2044,X     
	STA SavedCharStats.MonsterAttack				;C2/109E: 8D 01 26     STA $2601
	LDA CharStruct.MonsterM,X    					;C2/10A1: BD 62 20     LDA $2062,X     
	STA SavedCharStats.MonsterM					;C2/10A4: 8D 02 26     STA $2602
	LDA CharStruct.EquippedMag,X    				;C2/10A7: BD 2B 20     LDA $202B,X     
	STA SavedCharStats.EquippedMag					;C2/10AA: 8D 03 26     STA $2603
	LDA CharStruct.CharRow,X					;C2/10AD: BD 00 20     LDA $2000,X
	STA SavedCharStats.CharRow					;C2/10B0: 8D 04 26     STA $2604

	TDC 								;C2/10B3: 7B           TDC 
	TAY 								;C2/10B4: A8           TAY 
.CopyStatus
	LDA CharStruct.Status1,X					;C2/10B5: BD 1A 20     LDA $201A,X
	STA SavedCharStats.Status1,Y					;C2/10B8: 99 05 26     STA $2605,Y
	STZ CharStruct.Status1,X	;clear status for released mon	;C2/10BB: 9E 1A 20     STZ $201A,X
	INX 								;C2/10BE: E8           INX 
	INY 								;C2/10BF: C8           INY 
	CPY #$0009		;9 bytes of status/passives		;C2/10C0: C0 09 00     CPY #$0009
	BNE .CopyStatus							;C2/10C3: D0 F0        BNE $10B5

	TDC 								;C2/10C5: 7B           TDC 
	TAY 								;C2/10C6: A8           TAY 
	LDX AttackerOffset       					;C2/10C7: A6 32        LDX $32         
.CopyMSword
	LDA CharStruct.MSwordElemental1,X				;C2/10C9: BD 50 20     LDA $2050,X
	STA SavedCharStats.MSwordElemental1,Y				;C2/10CC: 99 0E 26     STA $260E,Y
	STZ CharStruct.MSwordElemental1,X	;clear all msword	;C2/10CF: 9E 50 20     STZ $2050,X
	INX 								;C2/10D2: E8           INX 
	INY 								;C2/10D3: C8           INY 
	CPY #$0006		;6 bytes msword elements/status		;C2/10D4: C0 06 00     CPY #$0006
	BNE .CopyMSword							;C2/10D7: D0 F0        BNE $10C9

	TDC 								;C2/10D9: 7B           TDC 
	TAY 								;C2/10DA: A8           TAY 
	LDX AttackerOffset       					;C2/10DB: A6 32        LDX $32         
.CopyMisc
	LDA CharStruct.AlwaysStatus1,X    				;C2/10DD: BD 70 20     LDA $2070,X     
	STA SavedCharStats.AlwaysStatus1,Y				;C2/10E0: 99 14 26     STA $2614,Y
	STZ CharStruct.AlwaysStatus1,X					;C2/10E3: 9E 70 20     STZ $2070,X
	INX 								;C2/10E6: E8           INX 
	INY 								;C2/10E7: C8           INY 
	CPY #$000B		;11 bytes always status/bonuses/etc	;C2/10E8: C0 0B 00     CPY #$000B
	BNE .CopyMisc							;C2/10EB: D0 F0        BNE $10DD

	LDA ReleasedMonsterID						;C2/10ED: AD 4B 7C     LDA $7C4B
	REP #$20							;C2/10F0: C2 20        REP #$20
	JSR ShiftMultiply_32						;C2/10F2: 20 B4 01     JSR $01B4       
	TAX 								;C2/10F5: AA           TAX 
	TDC 								;C2/10F6: 7B           TDC 
	SEP #$20							;C2/10F7: E2 20        SEP #$20
	LDY AttackerOffset						;C2/10F9: A4 32        LDY $32         
	LDA CharStruct.CharRow,Y					;C2/10FB: B9 00 20     LDA $2000,Y
	AND #$7F		;always front row			;C2/10FE: 29 7F        AND #$7F
	STA CharStruct.CharRow,Y					;C2/1100: 99 00 20     STA $2000,Y
	LDA ROMMonsterStats.Level,X					;C2/1103: BF 1F 00 D0  LDA $D0001F,X
	STA CharStruct.Level,Y						;C2/1107: 99 02 20     STA $2002,Y
	LDA ROMMonsterStats.AttackPower,X				;C2/110A: BF 01 00 D0  LDA $D00001,X
	STA CharStruct.MonsterAttack,Y					;C2/110E: 99 44 20     STA $2044,Y
	LDA ROMMonsterStats.AttackMult,X				;C2/1111: BF 02 00 D0  LDA $D00002,X
	STA CharStruct.MonsterM,Y					;C2/1115: 99 62 20     STA $2062,Y
	LDA ROMMonsterStats.MagicPower,X				;C2/1118: BF 05 00 D0  LDA $D00005,X
	STA CharStruct.EquippedMag,Y					;C2/111C: 99 2B 20     STA $202B,Y
	LDA #$01							;C2/111F: A9 01        LDA #$01
	STA WasMonsterReleased	;causes stats to be restored later	;C2/1121: 8D 4F 7C     STA $7C4F
	RTS 								;C2/1124: 60           RTS 

%org($C21125)
;Command $1F(Combine/Mix)
CommandTable1E:
	LDX AttackerOffset						;C2/1125: A6 32        LDX $32         
	LDA CharStruct.MonsterTargets,X					;C2/1127: BD 58 20     LDA $2058,X
	STA MonsterTargets						;C2/112A: 85 65        STA $65
	LDA CharStruct.PartyTargets,X					;C2/112C: BD 59 20     LDA $2059,X
	STA PartyTargets						;C2/112F: 85 66        STA $66
	LDA CharStruct.SelectedItem,X					;C2/1131: BD 5A 20     LDA $205A,X
	SEC 								;C2/1134: 38           SEC 
	SBC #$E0	;remove consumable item offset from item id	;C2/1135: E9 E0        SBC #$E0
	TAX 								;C2/1137: AA           TAX 
	STX $0E		;first item consumable index			;C2/1138: 86 0E        STX $0E
	LDX AttackerOffset	     					;C2/113A: A6 32        LDX $32         
	LDA CharStruct.SecondSelectedItem,X				;C2/113C: BD 5F 20     LDA $205F,X
	SEC 								;C2/113F: 38           SEC 
	SBC #$E0	;remove consumable item offset from item id	;C2/1140: E9 E0        SBC #$E0
	STA $24								;C2/1142: 85 24        STA $24
	LDA #$0C							;C2/1144: A9 0C        LDA #$0C
	STA $25								;C2/1146: 85 25        STA $25
	JSR Multiply_8bit    	;item*12				;C2/1148: 20 F1 00     JSR $00F1       
	REP #$20							;C2/114B: C2 20        REP #$20
	CLC 								;C2/114D: 18           CLC 
	LDA $26			;second item * 12			;C2/114E: A5 26        LDA $26
	ADC $0E			;+ first item				;C2/1150: 65 0E        ADC $0E
	TAX 								;C2/1152: AA           TAX 
	TDC 								;C2/1153: 7B           TDC 
	SEP #$20							;C2/1154: E2 20        SEP #$20
	LDA ROMCombineSpells,X						;C2/1156: BF F9 6E D1  LDA $D16EF9,X
	STA TempSpell							;C2/115A: 8D 22 27     STA $2722
	STZ TempAttachedSpell						;C2/115D: 64 20        STZ $20
	STZ TempSkipNaming						;C2/115F: 64 21        STZ $21
	LDA #$01							;C2/1161: A9 01        LDA #$01
	STA TempIsEffect						;C2/1163: 8D 23 27     STA $2723
	JMP CastSpell							;C2/1166: 4C E1 5C     JMP $5CE1

%org($C21169)
;Command $21 (Pray/Recover)
CommandTable20:
	LDA #$21		;recover ability			;C2/1169: A9 21        LDA #$21
	JSR CopyAbilityInfo						;C2/116B: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/116E: 20 5F 17     JSR $175F
	JSR BuildTargetBitmask						;C2/1171: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/1174: 20 C2 02     JSR $02C2
	LDA #$21		;ability name				;C2/1177: A9 21        LDA #$21
	JSR GFXCmdAttackNameA						;C2/1179: 20 FA 16     JSR $16FA
	LDA #$20		;ability anim				;C2/117C: A9 20        LDA #$20
	JSR GFXCmdAbilityAnim						;C2/117E: 20 E1 16     JSR $16E1
	JSR MagicAtkTypeMultiTarget					;C2/1181: 20 1A 17     JSR $171A
	JSR FinishCommand						;C2/1184: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/1187: 4C E3 98     JMP $98E3       

%org($C2118A)
;Command $22 (Revive)
CommandTable21:
	LDA #$22		;revive ability				;C2/118A: A9 22        LDA #$22
	JSR CopyAbilityInfo						;C2/118C: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/118F: 20 5F 17     JSR $175F
	JSR BuildTargetBitmask						;C2/1192: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/1195: 20 C2 02     JSR $02C2
	LDA ProcSequence						;C2/1198: AD FA 79     LDA $79FA
	TAX 								;C2/119B: AA           TAX 
	INC HitsInactive,X						;C2/119C: FE EB 7B     INC $7BEB,X
	LDA #$22		;ability name				;C2/119F: A9 22        LDA #$22
	JSR GFXCmdAttackNameA						;C2/11A1: 20 FA 16     JSR $16FA
	LDA #$21		;ability anim				;C2/11A4: A9 21        LDA #$21
	JSR GFXCmdAbilityAnim						;C2/11A6: 20 E1 16     JSR $16E1
	JSR MagicAtkTypeMultiTarget					;C2/11A9: 20 1A 17     JSR $171A
	JSR FinishCommand						;C2/11AC: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/11AF: 4C E3 98     JMP $98E3

%org($C211B2)
;Command $23 (Gaia/Terrain)
CommandTable22:
	TDC 								;C2/11B2: 7B           TDC 
	TAX 								;C2/11B3: AA           TAX 
	LDA Level    							;C2/11B4: AD E5 7B     LDA $7BE5       
	JSR Random_X_A 	;0..Level					;C2/11B7: 20 7C 00     JSR $007C       
	CMP #$0B							;C2/11BA: C9 0B        CMP #$0B
	BCS +								;C2/11BC: B0 03        BCS $11C1
	TDC          	;<11, 0						;C2/11BE: 7B           TDC             
	BRA .Chosen							;C2/11BF: 80 12        BRA $11D3
+	CMP #$15							;C2/11C1: C9 15        CMP #$15
	BCS +								;C2/11C3: B0 04        BCS $11C9
	LDA #$01     	;<21, 1						;C2/11C5: A9 01        LDA #$01        
	BRA .Chosen							;C2/11C7: 80 0A        BRA $11D3
+	CMP #$33							;C2/11C9: C9 33        CMP #$33
	BCS +								;C2/11CB: B0 04        BCS $11D1
	LDA #$02     	;<50, 2						;C2/11CD: A9 02        LDA #$02        
	BRA .Chosen							;C2/11CF: 80 02        BRA $11D3
+	LDA #$03     	;otherwise 3					;C2/11D1: A9 03        LDA #$03        
.Chosen
	STA $0E		;terrain spell slot 0-3				;C2/11D3: 85 0E        STA $0E
	LDA TerrainType    						;C2/11D5: AD F2 04     LDA $04F2       
	JSR ShiftMultiply_4    						;C2/11D8: 20 B7 01     JSR $01B7       
	CLC 								;C2/11DB: 18           CLC 
	ADC $0E								;C2/11DC: 65 0E        ADC $0E
	TAX 								;C2/11DE: AA           TAX 
	LDA ROMTerrainSpells,X						;C2/11DF: BF F9 6D D1  LDA $D16DF9,X   
	STA TempSpell							;C2/11E3: 8D 22 27     STA $2722
	LDA TempSpell	;pointless load?				;C2/11E6: AD 22 27     LDA $2722
	REP #$20							;C2/11E9: C2 20        REP #$20
	JSR ShiftMultiply_8    						;C2/11EB: 20 B6 01     JSR $01B6       
	TAX 								;C2/11EE: AA           TAX 
	TDC 								;C2/11EF: 7B           TDC 
	SEP #$20							;C2/11F0: E2 20        SEP #$20
	TDC 								;C2/11F2: 7B           TDC 
	TAY 								;C2/11F3: A8           TAY 
-	LDA !ROMEffectInfo,X						;C2/11F4: BF B1 6A D1  LDA $D16AB1,X   
	STA Temp,Y							;C2/11F8: 99 20 26     STA $2620,Y
	INX 								;C2/11FB: E8           INX 
	INY 								;C2/11FC: C8           INY 
	CPY #$0008	;copy 8 bytes spell data			;C2/11FD: C0 08 00     CPY #$0008
	BNE -								;C2/1200: D0 F2        BNE $11F4
	STZ PartyTargets						;C2/1202: 64 66        STZ $66
	STZ MonsterTargets						;C2/1204: 64 65        STZ $65
	LDA Temp		;targetting byte			;C2/1206: AD 20 26     LDA $2620
	BNE .Targetting							;C2/1209: D0 0B        BNE $1216
	LDA AttackerIndex	;default to attacker			;C2/120B: A5 47        LDA $47         
	TAX 								;C2/120D: AA           TAX 
	TDC 								;C2/120E: 7B           TDC 
	JSR SetBit_X  							;C2/120F: 20 D6 01     JSR $01D6       
	STA PartyTargets						;C2/1212: 85 66        STA $66
	BRA .TargetSet							;C2/1214: 80 3C        BRA $1252
.Targetting
	AND #$08	;target enemy by default			;C2/1216: 29 08        AND #$08
	BNE .TargetEnemy						;C2/1218: D0 1D        BNE $1237
	LDA Temp							;C2/121A: AD 20 26     LDA $2620
	AND #$40	;target all					;C2/121D: 29 40        AND #$40
	BNE .TargetAllParty						;C2/121F: D0 10        BNE $1231
	TDC 								;C2/1221: 7B           TDC 
	TAX 								;C2/1222: AA           TAX 
	LDA #$03							;C2/1223: A9 03        LDA #$03
	JSR Random_X_A 	;0..3 random party				;C2/1225: 20 7C 00     JSR $007C       
	TAX 								;C2/1228: AA           TAX 
	TDC 								;C2/1229: 7B           TDC 
	JSR SetBit_X   							;C2/122A: 20 D6 01     JSR $01D6       
	STA PartyTargets						;C2/122D: 85 66        STA $66
	BRA .TargetSet							;C2/122F: 80 21        BRA $1252
.TargetAllParty
	LDA #$F0							;C2/1231: A9 F0        LDA #$F0
	STA PartyTargets						;C2/1233: 85 66        STA $66
	BRA .TargetSet							;C2/1235: 80 1B        BRA $1252
.TargetEnemy
	LDA Temp							;C2/1237: AD 20 26     LDA $2620
	AND #$40	;target all					;C2/123A: 29 40        AND #$40
	BNE .TargetAllEnemy						;C2/123C: D0 10        BNE $124E
	TDC 								;C2/123E: 7B           TDC 
	TAX 								;C2/123F: AA           TAX 
	LDA #$07	;0..7 random monster				;C2/1240: A9 07        LDA #$07
	JSR Random_X_A							;C2/1242: 20 7C 00     JSR $007C       
	TAX 								;C2/1245: AA           TAX 
	TDC 								;C2/1246: 7B           TDC 
	JSR SetBit_X   							;C2/1247: 20 D6 01     JSR $01D6       
	STA MonsterTargets						;C2/124A: 85 65        STA $65
	BRA .TargetSet							;C2/124C: 80 04        BRA $1252
.TargetAllEnemy
	LDA #$FF							;C2/124E: A9 FF        LDA #$FF
	STA MonsterTargets						;C2/1250: 85 65        STA $65
.TargetSet
	STZ TempAttachedSpell						;C2/1252: 64 20        STZ $20
	STZ TempSkipNaming						;C2/1254: 64 21        STZ $21
	LDA #$01							;C2/1256: A9 01        LDA #$01
	STA TempIsEffect						;C2/1258: 8D 23 27     STA $2723
	JMP CastSpell							;C2/125B: 4C E1 5C     JMP $5CE1

%org($C2125E)
;Command $25 (Hide)
CommandTable24:
	LDX AttackerOffset						;C2/125E: A6 32        LDX $32         
	LDA CharStruct.Status4,X					;C2/1260: BD 1D 20     LDA $201D,X
	ORA #$01	;hidden						;C2/1263: 09 01        ORA #$01
	STA CharStruct.Status4,X					;C2/1265: 9D 1D 20     STA $201D,X
	LDA #$25	;hide ability name				;C2/1268: A9 25        LDA #$25
	JSR GFXCmdAttackNameA						;C2/126A: 20 FA 16     JSR $16FA
	LDA #$24	;hide ability anim				;C2/126D: A9 24        LDA #$24
	JSR GFXCmdAbilityAnim						;C2/126F: 20 E1 16     JSR $16E1
	LDA ProcSequence						;C2/1272: AD FA 79     LDA $79FA
	TAX 								;C2/1275: AA           TAX 
	STZ AtkType,X							;C2/1276: 9E 2D 7B     STZ $7B2D,X
	STZ MultiTarget,X						;C2/1279: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/127C: 9E CC 7A     STZ $7ACC,X
	INC UnknownReaction						;C2/127F: EE FB 7B     INC $7BFB
	JSR FinishCommandNullTargets					;C2/1282: 20 50 17     JSR $1750
	LDA AttackerIndex						;C2/1285: A5 47        LDA $47         
	STA $24								;C2/1287: 85 24        STA $24
	LDA #$14	;20, size of CharCommands struct		;C2/1289: A9 14        LDA #$14
	STA $25								;C2/128B: 85 25        STA $25
	JSR Multiply_8bit    						;C2/128D: 20 F1 00     JSR $00F1       
	TDC 								;C2/1290: 7B           TDC 
	TAY 								;C2/1291: A8           TAY 
	LDX $26								;C2/1292: A6 26        LDX $26
.FindHideCommands
	LDA CharCommands.ID,X						;C2/1294: BD 5C 37     LDA $375C,X
	CMP #$25	;hide command					;C2/1297: C9 25        CMP #$25
	BEQ .Found							;C2/1299: F0 09        BEQ $12A4
	INX 								;C2/129B: E8           INX 
	INY 								;C2/129C: C8           INY 
	CPY #$0004	;4 command slots				;C2/129D: C0 04 00     CPY #$0004
	BNE .FindHideCommands						;C2/12A0: D0 F2        BNE $1294
	BEQ .Ret							;C2/12A2: F0 0E        BEQ $12B2
.Found	LDA #$26	;show command					;C2/12A4: A9 26        LDA #$26
	STA CharCommands.ID,X						;C2/12A6: 9D 5C 37     STA $375C,X
	LDA #$08	;target enemy?					;C2/12A9: A9 08        LDA #$08
	STA CharCommands.Targetting,X					;C2/12AB: 9D 68 37     STA $3768,X
	INX 								;C2/12AE: E8           INX 
	INY 								;C2/12AF: C8           INY 
	BRA .FindHideCommands						;C2/12B0: 80 E2        BRA $1294
.Ret	RTS 								;C2/12B2: 60           RTS 

%org($C212B3)
;Command $26 (Show)
CommandTable25:
	LDX AttackerOffset     						;C2/12B3: A6 32        LDX $32         
	LDA CharStruct.Status4,X					;C2/12B5: BD 1D 20     LDA $201D,X
	AND #$FE	;clear hidden					;C2/12B8: 29 FE        AND #$FE
	STA CharStruct.Status4,X					;C2/12BA: 9D 1D 20     STA $201D,X
	LDA #$26	;show ability name				;C2/12BD: A9 26        LDA #$26
	JSR GFXCmdAttackNameA						;C2/12BF: 20 FA 16     JSR $16FA
	LDA #$25	;show ability anim				;C2/12C2: A9 25        LDA #$25
	JSR GFXCmdAbilityAnim						;C2/12C4: 20 E1 16     JSR $16E1
	LDA ProcSequence						;C2/12C7: AD FA 79     LDA $79FA
	TAX 								;C2/12CA: AA           TAX 
	STZ AtkType,X							;C2/12CB: 9E 2D 7B     STZ $7B2D,X
	STZ MultiTarget,X						;C2/12CE: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/12D1: 9E CC 7A     STZ $7ACC,X
	INC UnknownReaction						;C2/12D4: EE FB 7B     INC $7BFB
	JSR FinishCommandNullTargets					;C2/12D7: 20 50 17     JSR $1750
	LDA AttackerIndex      						;C2/12DA: A5 47        LDA $47         
	STA $24								;C2/12DC: 85 24        STA $24
	LDA #$14	;20, size of CharCommands struct		;C2/12DE: A9 14        LDA #$14
	STA $25								;C2/12E0: 85 25        STA $25
	JSR Multiply_8bit     						;C2/12E2: 20 F1 00     JSR $00F1       
	TDC 								;C2/12E5: 7B           TDC 
	TAY 								;C2/12E6: A8           TAY 
	LDX $26								;C2/12E7: A6 26        LDX $26
.FindShowCommands
	LDA CharCommands.ID,X						;C2/12E9: BD 5C 37     LDA $375C,X
	CMP #$26	;show command					;C2/12EC: C9 26        CMP #$26
	BEQ .Found							;C2/12EE: F0 09        BEQ $12F9
	INX 								;C2/12F0: E8           INX 
	INY 								;C2/12F1: C8           INY 
	CPY #$0004	;4 command slots				;C2/12F2: C0 04 00     CPY #$0004
	BNE .FindShowCommands						;C2/12F5: D0 F2        BNE $12E9
	BEQ .Ret							;C2/12F7: F0 0C        BEQ $1305
.Found
	LDA #$25							;C2/12F9: A9 25        LDA #$25
	STA CharCommands.ID,X						;C2/12FB: 9D 5C 37     STA $375C,X
	STZ CharCommands.Targetting,X					;C2/12FE: 9E 68 37     STZ $3768,X
	INX 								;C2/1301: E8           INX 
	INY 								;C2/1302: C8           INY 
	BRA .FindShowCommands						;C2/1303: 80 E4        BRA $12E9
.Ret	RTS 								;C2/1305: 60           RTS 

%org($C21306)
;Command $29 (Flirt)
CommandTable28:
	LDA #$29	;flirt ability					;C2/1306: A9 29        LDA #$29
	JSR CopyAbilityInfo						;C2/1308: 20 AA 16     JSR $16AA
	JSR GetTargets							;C2/130B: 20 5F 17     JSR $175F
	JSR CheckRetarget  						;C2/130E: 20 FE 4A     JSR $4AFE       
	JSR BuildTargetBitmask						;C2/1311: 20 A9 02     JSR $02A9
	LDA #$29	;ability name					;C2/1314: A9 29        LDA #$29
	JSR GFXCmdAttackNameA						;C2/1316: 20 FA 16     JSR $16FA
	LDA #$28	;ability anim					;C2/1319: A9 28        LDA #$28
	JSR GFXCmdAbilityAnim						;C2/131B: 20 E1 16     JSR $16E1
	JSR MagicAtkTypeSingleTarget					;C2/131E: 20 05 17     JSR $1705
	JSR FinishCommand						;C2/1321: 20 35 17     JSR $1735
	JSR GFXCmdDamageNumbers						;C2/1324: 20 E3 98     JSR $98E3
	LDA MessageBoxOffset						;C2/1327: AD EF 3C     LDA $3CEF
	TAX 								;C2/132A: AA           TAX 
	LDA #$27	;message					;C2/132B: A9 27        LDA #$27
	STA MessageBoxes,X						;C2/132D: 9D 5F 3C     STA $3C5F,X
	JMP GFXCmdMessage						;C2/1330: 4C 4C 99     JMP $994C

%org($C21333)
;Command $2A (Dance)
CommandTable29:
	STZ ProcSequence	;reset command sequence (no procs)	;C2/1333: 9C FA 79     STZ $79FA
	STZ NextGFXQueueSlot						;C2/1336: 9C F9 79     STZ $79F9
	TDC 								;C2/1339: 7B           TDC 
	TAX 								;C2/133A: AA           TAX 
	LDA #$03							;C2/133B: A9 03        LDA #$03
	JSR Random_X_A		;0..3 random dance			;C2/133D: 20 7C 00     JSR $007C       
	STA TempDance							;C2/1340: 8D 33 27     STA $2733
	LDX AttackerOffset						;C2/1343: A6 32        LDX $32         
	LDA CharStruct.ArmorProperties,X				;C2/1345: BD 39 20     LDA $2039,X
	AND #$04		;sword dance up				;C2/1348: 29 04        AND #$04
	BEQ .DanceCheck							;C2/134A: F0 17        BEQ $1363
	JSR Random_0_99     						;C2/134C: 20 A2 02     JSR $02A2       
	LSR 								;C2/134F: 4A           LSR 
	BCS .NotSwordDance	;50% chance of sword dance		;C2/1350: B0 07        BCS $1359
	LDA #$03		;sword dance				;C2/1352: A9 03        LDA #$03
	STA TempDance							;C2/1354: 8D 33 27     STA $2733
	BRA .DanceCheck							;C2/1357: 80 0A        BRA $1363
.NotSwordDance
	JSR Random_0_99							;C2/1359: 20 A2 02     JSR $02A2       
	LSR 								;C2/135C: 4A           LSR 
	STZ TempDance							;C2/135D: 9C 33 27     STZ $2733
	ROL TempDance		;50% chance of 0 or 1			;C2/1360: 2E 33 27     ROL $2733
.DanceCheck
	LDA TempDance							;C2/1363: AD 33 27     LDA $2733
	CMP #$03		;sword dance				;C2/1366: C9 03        CMP #$03
	BEQ .SwordDance							;C2/1368: F0 32        BEQ $139C
	JSR GetTargets							;C2/136A: 20 5F 17     JSR $175F
	JSR CheckRetarget     						;C2/136D: 20 FE 4A     JSR $4AFE       
	JSR BuildTargetBitmask						;C2/1370: 20 A9 02     JSR $02A9
	JSR CheckMultiTarget						;C2/1373: 20 C2 02     JSR $02C2
	CLC 								;C2/1376: 18           CLC 
	LDA TempDance							;C2/1377: AD 33 27     LDA $2733
	ADC #$79		;offset to dance strings		;C2/137A: 69 79        ADC #$79
	STA Temp+1		;string id / ability id			;C2/137C: 8D 21 26     STA $2621
	STZ Temp		;string table				;C2/137F: 9C 20 26     STZ $2620
	JSR GFXCmdAttackNameFromTemp					;C2/1382: 20 2F 99     JSR $992F
	LDA #$29		;dance anim				;C2/1385: A9 29        LDA #$29
	JSR GFXCmdAbilityAnim						;C2/1387: 20 E1 16     JSR $16E1
	JSR SelectCurrentProcSequence					;C2/138A: 20 23 99     JSR $9923
	LDA Temp+1		;ability id				;C2/138D: AD 21 26     LDA $2621
	JSR CopyROMMagicInfo						;C2/1390: 20 24 03     JSR $0324       
	JSR MagicAtkTypeSingleTarget					;C2/1393: 20 05 17     JSR $1705
	JSR FinishCommand						;C2/1396: 20 35 17     JSR $1735
	JMP GFXCmdDamageNumbers						;C2/1399: 4C E3 98     JMP $98E3

.SwordDance
	LDA #$7D		;sword dance ability			;C2/139C: A9 7D        LDA #$7D
	STA Temp+1		;string id / ability id			;C2/139E: 8D 21 26     STA $2621
	STZ Temp		;string table				;C2/13A1: 9C 20 26     STZ $2620
	JSR GFXCmdAttackNameFromTemp					;C2/13A4: 20 2F 99     JSR $992F
	LDA #$29		;dance anim				;C2/13A7: A9 29        LDA #$29
	JSR GFXCmdAbilityAnim						;C2/13A9: 20 E1 16     JSR $16E1
	LDA ProcSequence						;C2/13AC: AD FA 79     LDA $79FA
	TAX 								;C2/13AF: AA           TAX 
	LDA #$7F		;do nothing				;C2/13B0: A9 7F        LDA #$7F
	STA AtkType,X							;C2/13B2: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/13B5: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/13B8: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommandNullTargets					;C2/13BB: 20 50 17     JSR $1750
	JSR GFXCmdDamageNumbers						;C2/13BE: 20 E3 98     JSR $98E3
	LDX AttackerOffset						;C2/13C1: A6 32        LDX $32         
	LDA CharStruct.DamageMod,X					;C2/13C3: BD 1F 20     LDA $201F,X
	ORA #$D0		;auto hit, damage*2, M*2		;C2/13C6: 09 D0        ORA #$D0
	STA CharStruct.DamageMod,X					;C2/13C8: 9D 1F 20     STA $201F,X
	JMP SimpleFight							;C2/13CB: 4C 14 08     JMP $0814

%org($C213CE)
;Command $2B (Mimic)
CommandTable2A:
	TDC 								;C2/13CE: 7B           TDC 
	TAY 								;C2/13CF: A8           TAY 
	LDX AttackerOffset						;C2/13D0: A6 32        LDX $32         
-	LDA !SavedActionMimic,Y						;C2/13D2: B9 D4 41     LDA $41D4,Y
	STA CharStruct.ActionFlag,X					;C2/13D5: 9D 56 20     STA $2056,X
	INX 								;C2/13D8: E8           INX 
	INY 								;C2/13D9: C8           INY 
	CPY #$000A	;copy 10 bytes action data			;C2/13DA: C0 0A 00     CPY #$000A
	BNE -								;C2/13DD: D0 F3        BNE $13D2

	LDX AttackerOffset						;C2/13DF: A6 32        LDX $32         
	LDA CharStruct.ActionFlag,X					;C2/13E1: BD 56 20     LDA $2056,X
	AND #$FE	;clear "costs mp" bit				;C2/13E4: 29 FE        AND #$FE
	STA CharStruct.ActionFlag,X					;C2/13E6: 9D 56 20     STA $2056,X
	LDA CharStruct.Command,X					;C2/13E9: BD 57 20     LDA $2057,X
	JMP DispatchCommand_CommandReady				;C2/13EC: 4C D5 49     JMP $49D5

%org($C213EF)
;Command $51
;Flirt Throbbing
;(null command with a message)
CommandTable2F:
	JSR FindOpenGFXQueueSlot   					;C2/13EF: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/13F2: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Cmd,X						;C2/13F5: 9E 4D 38     STZ $384D,X
	STZ GFXQueue.Type,X						;C2/13F8: 9E 4E 38     STZ $384E,X
	STZ GFXQueue.Data1,X						;C2/13FB: 9E 4F 38     STZ $384F,X
	STZ GFXQueue.Data2,X						;C2/13FE: 9E 50 38     STZ $3850,X
	LDA ProcSequence						;C2/1401: AD FA 79     LDA $79FA
	TAX 								;C2/1404: AA           TAX 
	STZ AtkType,X							;C2/1405: 9E 2D 7B     STZ $7B2D,X
	STZ MultiTarget,X						;C2/1408: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/140B: 9E CC 7A     STZ $7ACC,X
	JSR FinishCommandNullTargets					;C2/140E: 20 50 17     JSR $1750
	LDA MessageBoxOffset						;C2/1411: AD EF 3C     LDA $3CEF
	TAX 								;C2/1414: AA           TAX 
	LDA #$28	;message to display				;C2/1415: A9 28        LDA #$28
	STA MessageBoxes,X						;C2/1417: 9D 5F 3C     STA $3C5F,X
	JMP GFXCmdMessage						;C2/141A: 4C 4C 99     JMP $994C

%org($C2141D)
;Command $52 
;Jump with a different name
CommandTable30:
	LDA #$52	;command name					;C2/141D: A9 52        LDA #$52
	JSR GFXCmdAttackNameA						;C2/141F: 20 FA 16     JSR $16FA
	JMP JumpCommand_Anim						;C2/1422: 4C 95 09     JMP $0995

%org($C21425)
;Command $53
;Handles weapons that cast effect spells
;Wind Slash by default, but can be called mid-routine for other effects like Earthquake
%sub(CommandTable31)
CommandTable31:
	LDA #$4B	;wind slash spell effect			;C2/1425: A9 4B        LDA #$4B
	STA TempEffect							;C2/1427: 8D 33 27     STA $2733
WeaponEffectCommand:	;called here for other weapon effects
	STZ $0E		;hand						;C2/142A: 64 0E        STZ $0E
	STZ NextGFXQueueSlot						;C2/142C: 9C F9 79     STZ $79F9
	LDX AttackerOffset      					;C2/142F: A6 32        LDX $32         
	LDA CharStruct.RHWeapon,X					;C2/1431: BD 13 20     LDA $2013,X
	BNE +								;C2/1434: D0 04        BNE $143A
	LDA #$80	;left hand					;C2/1436: A9 80        LDA #$80
	STA $0E								;C2/1438: 85 0E        STA $0E
+	JSR FindOpenGFXQueueSlot   					;C2/143A: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag						;C2/143D: 9C 4C 38     STZ $384C
	LDA #$FC	;exec graphics command				;C2/1440: A9 FC        LDA #$FC
	STA GFXQueue.Cmd						;C2/1442: 8D 4D 38     STA $384D
	LDA #$01	;ability/command anim				;C2/1445: A9 01        LDA #$01
	STA GFXQueue.Type						;C2/1447: 8D 4E 38     STA $384E
	LDA #$04	;fight						;C2/144A: A9 04        LDA #$04
	STA GFXQueue.Data1						;C2/144C: 8D 4F 38     STA $384F
	LDA $0E		;hand (0 for RH, 80 for LH)			;C2/144F: A5 0E        LDA $0E
	STA GFXQueue.Data2						;C2/1451: 8D 50 38     STA $3850
	LDA #$7E	;always miss					;C2/1454: A9 7E        LDA #$7E
	STA AtkType							;C2/1456: 8D 2D 7B     STA $7B2D
	STZ MultiTarget							;C2/1459: 9C 1C 7B     STZ $7B1C
	STZ TargetType							;C2/145C: 9C CC 7A     STZ $7ACC
	STZ CommandTargetBitmask					;C2/145F: 9C DC 7A     STZ $7ADC
	STZ CommandTargetBitmask+1					;C2/1462: 9C DD 7A     STZ $7ADD
	INC ProcSequence						;C2/1465: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/1468: 20 E3 98     JSR $98E3
	LDA #$FF							;C2/146B: A9 FF        LDA #$FF
	STA.w MonsterTargets						;C2/146D: 8D 65 00     STA $0065
	STZ.w PartyTargets						;C2/1470: 9C 66 00     STZ $0066
	LDA TempEffect							;C2/1473: AD 33 27     LDA $2733
	STA TempSpell							;C2/1476: 8D 22 27     STA $2722
	LDA #$01							;C2/1479: A9 01        LDA #$01
	STA TempIsEffect						;C2/147B: 8D 23 27     STA $2723
	STA TempSkipNaming						;C2/147E: 85 21        STA $21
	STZ TempAttachedSpell						;C2/1480: 64 20        STZ $20
	JSR CastSpell							;C2/1482: 20 E1 5C     JSR $5CE1
	LDX AttackerOffset						;C2/1485: A6 32        LDX $32         
	LDA CharStruct.Command,X					;C2/1487: BD 57 20     LDA $2057,X
	CMP #$0C	;capture/mug					;C2/148A: C9 0C        CMP #$0C
	BNE .Ret	;removes return address from stack for capture	;C2/148C: D0 01        BNE $148F
	PLX 		;likely unreachable since capture cancels procs	;C2/148E: FA           PLX 
.Ret	RTS 								;C2/148F: 60           RTS 
%endsub()

%org($C21490)
;Command $54
;Job-specific attack animation
;likely for credits demo?
CommandTable32:
	LDX AttackerOffset						;C2/1490: A6 32        LDX $32         
	CLC 								;C2/1492: 18           CLC 
	LDA CharStruct.Job,X						;C2/1493: BD 01 20     LDA $2001,X
	ADC #$30							;C2/1496: 69 30        ADC #$30
	JSR GFXCmdAbilityAnim						;C2/1498: 20 E1 16     JSR $16E1
	LDA #$7F	;null attack					;C2/149B: A9 7F        LDA #$7F
	STA AtkType							;C2/149D: 8D 2D 7B     STA $7B2D
	STZ MultiTarget							;C2/14A0: 9C 1C 7B     STZ $7B1C
	STZ TargetType							;C2/14A3: 9C CC 7A     STZ $7ACC
	LDA #$08	;first monster					;C2/14A6: A9 08        LDA #$08
	STA CommandTargetBitmask					;C2/14A8: 8D DC 7A     STA $7ADC
	STA TargetBitmask						;C2/14AB: 8D FC 7A     STA $7AFC
	STZ CommandTargetBitmask+1					;C2/14AE: 9C DD 7A     STZ $7ADD
	STZ TargetBitmask+1						;C2/14B1: 9C FD 7A     STZ $7AFD
	INC UnknownReaction						;C2/14B4: EE FB 7B     INC $7BFB
	RTS 								;C2/14B7: 60           RTS 


%org($C214B8)
;Command $55
;for Double Lance, attacks twice per hand if hand's weapon has this command proc 
CommandTable33:
	STZ ProcSequence	;cancels any other procs		;C2/14B8: 9C FA 79     STZ $79FA
	STZ NextGFXQueueSlot						;C2/14BB: 9C F9 79     STZ $79F9
	LDX AttackerOffset						;C2/14BE: A6 32        LDX $32         
	LDA CharStruct.MonsterTargets,X					;C2/14C0: BD 58 20     LDA $2058,X
	STA MonsterTargets						;C2/14C3: 85 65        STA $65
	LDA CharStruct.PartyTargets,X					;C2/14C5: BD 59 20     LDA $2059,X
	STA PartyTargets						;C2/14C8: 85 66        STA $66
	JSR CheckRetarget      						;C2/14CA: 20 FE 4A     JSR $4AFE       
	LDX AttackerOffset    						;C2/14CD: A6 32        LDX $32         
	LDA PartyTargets						;C2/14CF: A5 66        LDA $66
	STA CharStruct.PartyTargets,X					;C2/14D1: 9D 59 20     STA $2059,X
	LDA MonsterTargets						;C2/14D4: A5 65        LDA $65
	STA CharStruct.MonsterTargets,X					;C2/14D6: 9D 58 20     STA $2058,X
	PHA 								;C2/14D9: 48           PHA 
	AND #$F0							;C2/14DA: 29 F0        AND #$F0
	LSR 								;C2/14DC: 4A           LSR 
	LSR 								;C2/14DD: 4A           LSR 
	LSR 								;C2/14DE: 4A           LSR 
	LSR 								;C2/14DF: 4A           LSR 
	ORA CharStruct.PartyTargets,X					;C2/14E0: 1D 59 20     ORA $2059,X
	STA TempTargetBitmask						;C2/14E3: 8D 20 27     STA $2720
	PLA 								;C2/14E6: 68           PLA 
	AND #$0F							;C2/14E7: 29 0F        AND #$0F
	ASL 								;C2/14E9: 0A           ASL 
	ASL 								;C2/14EA: 0A           ASL 
	ASL 								;C2/14EB: 0A           ASL 
	ASL 								;C2/14EC: 0A           ASL 
	STA TempTargetBitmask+1						;C2/14ED: 8D 21 27     STA $2721
	LDA AttackerIndex						;C2/14F0: A5 47        LDA $47         
	TAX 								;C2/14F2: AA           TAX 
	LDA ROMTimes84,X	;size of one character's gear structs	;C2/14F3: BF 85 ED D0  LDA $D0ED85,X
	TAX 								;C2/14F7: AA           TAX 
	STX $0E			;GearStruct offset			;C2/14F8: 86 0E        STX $0E
	LDX AttackerOffset						;C2/14FA: A6 32        LDX $32         
	LDA CharStruct.RHWeapon,X					;C2/14FC: BD 13 20     LDA $2013,X
	BNE .RH								;C2/14FF: D0 03        BNE $1504
	JMP .LH								;C2/1501: 4C C9 15     JMP $15C9

.RH	JSR SelectCurrentProcSequence					;C2/1504: 20 23 99     JSR $9923
	STY $14								;C2/1507: 84 14        STY $14
	STZ $12								;C2/1509: 64 12        STZ $12
	LDX $0E								;C2/150B: A6 0E        LDX $0E
-	LDA !RHWeapon,X							;C2/150D: BD 85 40     LDA $4085,X
	STA !AttackInfo,Y						;C2/1510: 99 FC 79     STA $79FC,Y
	INX 								;C2/1513: E8           INX 
	INY 								;C2/1514: C8           INY 
	INC $12								;C2/1515: E6 12        INC $12
	LDA $12								;C2/1517: A5 12        LDA $12
	CMP #$0C		;copy 12 bytes weapon data		;C2/1519: C9 0C        CMP #$0C
	BNE -								;C2/151B: D0 F0        BNE $150D

	JSR FindOpenGFXQueueSlot					;C2/151D: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/1520: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/1523: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/1525: 9D 4D 38     STA $384D,X
	LDA #$01		;ability/command animation		;C2/1528: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/152A: 9D 4E 38     STA $384E,X
	LDA #$04		;fight					;C2/152D: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/152F: 9D 4F 38     STA $384F,X
	STZ GFXQueue.Data2,X	;right hand, no msword			;C2/1532: 9E 50 38     STZ $3850,X
	LDX $0E			;GearStruct offset			;C2/1535: A6 0E        LDX $0E
	LDA RHWeapon.AtkType,X						;C2/1537: BD 8D 40     LDA $408D,X
	PHA 								;C2/153A: 48           PHA 
	LDA ProcSequence						;C2/153B: AD FA 79     LDA $79FA
	TAX 								;C2/153E: AA           TAX 
	PLA 								;C2/153F: 68           PLA 
	STA AtkType,X							;C2/1540: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/1543: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/1546: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/1549: AD FA 79     LDA $79FA
	ASL 								;C2/154C: 0A           ASL 
	TAX 								;C2/154D: AA           TAX 
	LDA TempTargetBitmask						;C2/154E: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/1551: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1						;C2/1554: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/1557: 9D DD 7A     STA $7ADD,X
	INC ProcSequence						;C2/155A: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/155D: 20 E3 98     JSR $98E3
	JSR SelectCurrentProcSequence					;C2/1560: 20 23 99     JSR $9923
	STY $14								;C2/1563: 84 14        STY $14
	STZ $12								;C2/1565: 64 12        STZ $12
	LDX $0E			;GearStruct offset			;C2/1567: A6 0E        LDX $0E
	LDA RHWeapon.Properties,X					;C2/1569: BD 8A 40     LDA $408A,X
	AND #$02		;command instead of attack		;C2/156C: 29 02        AND #$02
	BEQ .LH								;C2/156E: F0 59        BEQ $15C9
	LDA RHWeapon.Param3,X						;C2/1570: BD 90 40     LDA $4090,X
	CMP #$55		;this command				;C2/1573: C9 55        CMP #$55
	BNE .LH								;C2/1575: D0 52        BNE $15C9
-	LDA !RHWeapon,X							;C2/1577: BD 85 40     LDA $4085,X
	STA !AttackInfo,Y						;C2/157A: 99 FC 79     STA $79FC,Y
	INX 								;C2/157D: E8           INX 
	INY 								;C2/157E: C8           INY 
	INC $12								;C2/157F: E6 12        INC $12
	LDA $12								;C2/1581: A5 12        LDA $12
	CMP #$0C		;copy 12 bytes data for 2nd attack	;C2/1583: C9 0C        CMP #$0C
	BNE -								;C2/1585: D0 F0        BNE $1577
	LDA #$80							;C2/1587: A9 80        LDA #$80
	STA ActionAnimShift	;flag for later anim manipulation	;C2/1589: 8D 9B 7C     STA $7C9B
	JSR FindOpenGFXQueueSlot     					;C2/158C: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/158F: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Cmd,X						;C2/1592: 9E 4D 38     STZ $384D,X
	STZ GFXQueue.Type,X						;C2/1595: 9E 4E 38     STZ $384E,X
	STZ GFXQueue.Data1,X						;C2/1598: 9E 4F 38     STZ $384F,X
	STZ GFXQueue.Data2,X						;C2/159B: 9E 50 38     STZ $3850,X
	LDX $0E			;GearStruct offset			;C2/159E: A6 0E        LDX $0E
	LDA RHWeapon.AtkType,X						;C2/15A0: BD 8D 40     LDA $408D,X
	PHA 								;C2/15A3: 48           PHA 
	LDA ProcSequence						;C2/15A4: AD FA 79     LDA $79FA
	TAX 								;C2/15A7: AA           TAX 
	PLA 								;C2/15A8: 68           PLA 
	STA AtkType,X							;C2/15A9: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/15AC: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/15AF: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/15B2: AD FA 79     LDA $79FA
	ASL 								;C2/15B5: 0A           ASL 
	TAX 								;C2/15B6: AA           TAX 
	LDA TempTargetBitmask						;C2/15B7: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/15BA: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1						;C2/15BD: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/15C0: 9D DD 7A     STA $7ADD,X
	INC ProcSequence						;C2/15C3: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/15C6: 20 E3 98     JSR $98E3

.LH	LDX AttackerOffset						;C2/15C9: A6 32        LDX $32         
	LDA CharStruct.LHWeapon,X					;C2/15CB: BD 14 20     LDA $2014,X
	BNE +								;C2/15CE: D0 03        BNE $15D3
	JMP .Ret							;C2/15D0: 4C A1 16     JMP $16A1
+	JSR SelectCurrentProcSequence					;C2/15D3: 20 23 99     JSR $9923
	STY $12								;C2/15D6: 84 12        STY $12
	STZ $14								;C2/15D8: 64 14        STZ $14
	LDX $0E			;GearStruct offset			;C2/15DA: A6 0E        LDX $0E
-	LDA !LHWeapon,X							;C2/15DC: BD 91 40     LDA $4091,X
	STA !AttackInfo,Y						;C2/15DF: 99 FC 79     STA $79FC,Y
	INX 								;C2/15E2: E8           INX 
	INY 								;C2/15E3: C8           INY 
	INC $14								;C2/15E4: E6 14        INC $14
	LDA $14								;C2/15E6: A5 14        LDA $14
	CMP #$0C		;copy 12 bytes weapon data		;C2/15E8: C9 0C        CMP #$0C
	BNE -								;C2/15EA: D0 F0        BNE $15DC
	LDX $0E			;GearStruct offset			;C2/15EC: A6 0E        LDX $0E
	LDA ProcSequence						;C2/15EE: AD FA 79     LDA $79FA
	TAY 								;C2/15F1: A8           TAY 
	LDA LHWeapon.AtkType,X						;C2/15F2: BD 99 40     LDA $4099,X
	STA AtkType,Y							;C2/15F5: 99 2D 7B     STA $7B2D,Y
	JSR FindOpenGFXQueueSlot      					;C2/15F8: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/15FB: 9E 4C 38     STZ $384C,X
	LDA #$FC		;exec graphics command			;C2/15FE: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/1600: 9D 4D 38     STA $384D,X
	LDA #$01		;command/ability anim			;C2/1603: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/1605: 9D 4E 38     STA $384E,X
	LDA #$04		;fight					;C2/1608: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/160A: 9D 4F 38     STA $384F,X
	LDA #$80		;left hand, no msword			;C2/160D: A9 80        LDA #$80
	STA GFXQueue.Data2,X						;C2/160F: 9D 50 38     STA $3850,X
	LDA ProcSequence						;C2/1612: AD FA 79     LDA $79FA
	TAX 								;C2/1615: AA           TAX 
	STZ MultiTarget,X						;C2/1616: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/1619: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/161C: AD FA 79     LDA $79FA
	ASL 								;C2/161F: 0A           ASL 
	TAX 								;C2/1620: AA           TAX 
	LDA TempTargetBitmask						;C2/1621: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/1624: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1						;C2/1627: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/162A: 9D DD 7A     STA $7ADD,X
	INC ProcSequence						;C2/162D: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/1630: 20 E3 98     JSR $98E3
	JSR SelectCurrentProcSequence					;C2/1633: 20 23 99     JSR $9923
	STY $12								;C2/1636: 84 12        STY $12
	STZ $14								;C2/1638: 64 14        STZ $14
	LDX $0E								;C2/163A: A6 0E        LDX $0E
	LDA LHWeapon.Properties,X					;C2/163C: BD 96 40     LDA $4096,X
	AND #$02		;command instead of attack		;C2/163F: 29 02        AND #$02
	BEQ .Ret							;C2/1641: F0 5E        BEQ $16A1
	LDA LHWeapon.Param3,X						;C2/1643: BD 9C 40     LDA $409C,X
	CMP #$55		;this command				;C2/1646: C9 55        CMP #$55
	BNE .Ret							;C2/1648: D0 57        BNE $16A1
-	LDA !LHWeapon,X							;C2/164A: BD 91 40     LDA $4091,X
	STA !AttackInfo,Y						;C2/164D: 99 FC 79     STA $79FC,Y
	INX 								;C2/1650: E8           INX 
	INY 								;C2/1651: C8           INY 
	INC $14								;C2/1652: E6 14        INC $14
	LDA $14								;C2/1654: A5 14        LDA $14
	CMP #$0C		;copy 12 bytes weapon data for 2nd atk	;C2/1656: C9 0C        CMP #$0C
	BNE -								;C2/1658: D0 F0        BNE $164A
	LDA ActionAnimShift						;C2/165A: AD 9B 7C     LDA $7C9B
	ORA #$40							;C2/165D: 09 40        ORA #$40
	STA ActionAnimShift						;C2/165F: 8D 9B 7C     STA $7C9B
	LDX $0E								;C2/1662: A6 0E        LDX $0E
	LDA ProcSequence						;C2/1664: AD FA 79     LDA $79FA
	TAY 								;C2/1667: A8           TAY 
	LDA LHWeapon.AtkType,X						;C2/1668: BD 99 40     LDA $4099,X
	STA AtkType,Y							;C2/166B: 99 2D 7B     STA $7B2D,Y
	JSR FindOpenGFXQueueSlot     					;C2/166E: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/1671: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Cmd,X						;C2/1674: 9E 4D 38     STZ $384D,X
	STZ GFXQueue.Type,X						;C2/1677: 9E 4E 38     STZ $384E,X
	STZ GFXQueue.Data1,X						;C2/167A: 9E 4F 38     STZ $384F,X
	STZ GFXQueue.Data2,X						;C2/167D: 9E 50 38     STZ $3850,X
	LDA ProcSequence						;C2/1680: AD FA 79     LDA $79FA
	TAX 								;C2/1683: AA           TAX 
	STZ MultiTarget,X						;C2/1684: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/1687: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/168A: AD FA 79     LDA $79FA
	ASL 								;C2/168D: 0A           ASL 
	TAX 								;C2/168E: AA           TAX 
	LDA TempTargetBitmask						;C2/168F: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/1692: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1						;C2/1695: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/1698: 9D DD 7A     STA $7ADD,X
	INC ProcSequence						;C2/169B: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers						;C2/169E: 20 E3 98     JSR $98E3
.Ret	RTS 								;C2/16A1: 60           RTS 

%org($C216A2)
;Command $56
;Earthquake weapon effect
CommandTable34:
	LDA #$4A	;earthquake					;C2/16A2: A9 4A        LDA #$4A
	STA TempEffect							;C2/16A4: 8D 33 27     STA $2733
	JMP WeaponEffectCommand						;C2/16A7: 4C 2A 14     JMP $142A

%org($C216AA)
CopyAbilityInfo:
	PHA 								;C2/16AA: 48           PHA 
	JSR SelectCurrentProcSequence					;C2/16AB: 20 23 99     JSR $9923      
	PLA 								;C2/16AE: 68           PLA 
	REP #$20							;C2/16AF: C2 20        REP #$20
	JSR ShiftMultiply_8     					;C2/16B1: 20 B6 01     JSR $01B6      
	TAX 								;C2/16B4: AA           TAX 
	TDC 								;C2/16B5: 7B           TDC 
	SEP #$20							;C2/16B6: E2 20        SEP #$20
	STZ $0A								;C2/16B8: 64 0A        STZ $0A
-	LDA !ROMAbilityInfo,X  						;C2/16BA: BF E0 59 D1  LDA $D159E0,X  
	STA !AttackInfo,Y						;C2/16BE: 99 FC 79     STA $79FC,Y
	INX 								;C2/16C1: E8           INX 
	INY 								;C2/16C2: C8           INY 
	INC $0A								;C2/16C3: E6 0A        INC $0A
	LDA $0A								;C2/16C5: A5 0A        LDA $0A
	CMP #$05     ;copy first 5 bytes				;C2/16C7: C9 05        CMP #$05       
	BNE -								;C2/16C9: D0 EF        BNE $16BA
	INY          ;skip 4 on destination				;C2/16CB: C8           INY            
	INY 								;C2/16CC: C8           INY 
	INY 								;C2/16CD: C8           INY 
	INY 								;C2/16CE: C8           INY 
-	LDA !ROMAbilityInfo,X  						;C2/16CF: BF E0 59 D1  LDA $D159E0,X  
	STA !AttackInfo,Y						;C2/16D3: 99 FC 79     STA $79FC,Y
	INX 								;C2/16D6: E8           INX 
	INY 								;C2/16D7: C8           INY 
	INC $0A								;C2/16D8: E6 0A        INC $0A
	LDA $0A								;C2/16DA: A5 0A        LDA $0A
	CMP #$08      ;copy remaining 3 bytes				;C2/16DC: C9 08        CMP #$08       
	BNE -								;C2/16DE: D0 EF        BNE $16CF
	RTS 								;C2/16E0: 60           RTS 


%org($C216E1)
;Displays an ability or command animation
;creates Action $00,FC,01,<A>,00
%sub(GFXCmdAbilityAnim)
GFXCmdAbilityAnim:
	PHA 								;C2/16E1: 48           PHA 
	JSR FindOpenGFXQueueSlot					;C2/16E2: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/16E5: 9E 4C 38     STZ $384C,X
	LDA #$FC	;exec graphics command				;C2/16E8: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/16EA: 9D 4D 38     STA $384D,X
	LDA #$01	;ability/command anim				;C2/16ED: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/16EF: 9D 4E 38     STA $384E,X
	PLA 								;C2/16F2: 68           PLA 
	STA GFXQueue.Data1,X						;C2/16F3: 9D 4F 38     STA $384F,X
	STZ GFXQueue.Data2,X 						;C2/16F6: 9E 50 38     STZ $3850,X    
	RTS 								;C2/16F9: 60           RTS 
%endsub()

%org($C216FA)
;Displays an Attack name from String Table 1
;creates Action $00,FC,04,01,<A>
GFXCmdAttackNameA:
	STA Temp+1							;C2/16FA: 8D 21 26     STA $2621
	LDA #$01							;C2/16FD: A9 01        LDA #$01
	STA Temp							;C2/16FF: 8D 20 26     STA $2620
	JMP GFXCmdAttackNameFromTemp					;C2/1702: 4C 2F 99     JMP $992F

%org($C21705)
MagicAtkTypeSingleTarget:
	LDA ProcSequence						;C2/1705: AD FA 79     LDA $79FA
	TAX 								;C2/1708: AA           TAX 
	LDY $0C								;C2/1709: A4 0C        LDY $0C
	LDA AttackInfo.MagicAtkType,Y					;C2/170B: B9 00 7A     LDA $7A00,Y
	AND #$7F							;C2/170E: 29 7F        AND #$7F
	STA AtkType,X							;C2/1710: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X						;C2/1713: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/1716: 9E CC 7A     STZ $7ACC,X
	RTS 								;C2/1719: 60           RTS 

%org($C2171A)
MagicAtkTypeMultiTarget:
	LDA ProcSequence						;C2/171A: AD FA 79     LDA $79FA
	TAX 								;C2/171D: AA           TAX 
	LDY $0C								;C2/171E: A4 0C        LDY $0C
	LDA AttackInfo.MagicAtkType,Y					;C2/1720: B9 00 7A     LDA $7A00,Y
	AND #$7F							;C2/1723: 29 7F        AND #$7F
	STA AtkType,X							;C2/1725: 9D 2D 7B     STA $7B2D,X
	LDA TempTargetting						;C2/1728: AD A0 26     LDA $26A0
	INC 	;unconditional, so always considered multitarget	;C2/172B: 1A           INC 
	STA MultiTarget,X						;C2/172C: 9D 1C 7B     STA $7B1C,X
	LDA #$80	;multi target					;C2/172F: A9 80        LDA #$80
	STA TargetType,X						;C2/1731: 9D CC 7A     STA $7ACC,X
	RTS 								;C2/1734: 60           RTS 

%org($C21735)
;copies command targetting to final locations and advances ProcSequence
FinishCommand:
	LDA ProcSequence						;C2/1735: AD FA 79     LDA $79FA
	ASL 								;C2/1738: 0A           ASL 
	TAX 								;C2/1739: AA           TAX 
	LDA TempTargetBitmask						;C2/173A: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/173D: 9D DC 7A     STA $7ADC,X
	STA TargetBitmask,X						;C2/1740: 9D FC 7A     STA $7AFC,X
	LDA TempTargetBitmask+1						;C2/1743: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/1746: 9D DD 7A     STA $7ADD,X
	STA TargetBitmask+1,X						;C2/1749: 9D FD 7A     STA $7AFD,X
	INC ProcSequence						;C2/174C: EE FA 79     INC $79FA
	RTS 								;C2/174F: 60           RTS 

%org($C21750)
;wipes command targetting and advances ProcSequence
FinishCommandNullTargets:
	LDA ProcSequence						;C2/1750: AD FA 79     LDA $79FA
	ASL 								;C2/1753: 0A           ASL 
	TAX 								;C2/1754: AA           TAX 
	STZ CommandTargetBitmask,X					;C2/1755: 9E DC 7A     STZ $7ADC,X
	STZ CommandTargetBitmask+1,X					;C2/1758: 9E DD 7A     STZ $7ADD,X
	INC ProcSequence						;C2/175B: EE FA 79     INC $79FA
	RTS 								;C2/175E: 60           RTS 

%org($C2175F)
GetTargets:
	LDX AttackerOffset						;C2/175F: A6 32        LDX $32
	LDA CharStruct.PartyTargets,X 					;C2/1761: BD 59 20     LDA $2059,X    
	STA PartyTargets						;C2/1764: 85 66        STA $66
	LDA CharStruct.MonsterTargets,X					;C2/1766: BD 58 20     LDA $2058,X    
	STA MonsterTargets						;C2/1769: 85 65        STA $65
	RTS 								;C2/176B: 60           RTS 


%org($C2176C)
HandleATBMenu:
	LDA MenuData.MenuOpen						;C2/176C: AD BE 41     LDA $41BE
	BNE .MenuOpen							;C2/176F: D0 03        BNE $1774
	JMP .MenuClosed							;C2/1771: 4C 49 18     JMP $1849

.MenuOpen	;checks if current display info for status/mp matches what's in CharStruct
	LDA DisplayInfo.CurrentChar					;C2/1774: AD CC 41     LDA $41CC
	STA CurrentChar							;C2/1777: 8D 7B 7B     STA $7B7B
	JSR CalculateCharOffset						;C2/177A: 20 EC 01     JSR $01EC
	REP #$20							;C2/177D: C2 20        REP #$20
	LDA CharStruct.Status1,X	;includes status 2		;C2/177F: BD 1A 20     LDA $201A,X
	CMP DisplayInfo.Status1						;C2/1782: CD CE 41     CMP $41CE
	BNE .Differs							;C2/1785: D0 15        BNE $179C
	LDA CharStruct.Status3,X	;includes status 4		;C2/1787: BD 1C 20     LDA $201C,X
	CMP DisplayInfo.Status3						;C2/178A: CD D0 41     CMP $41D0
	BNE .Differs							;C2/178D: D0 0D        BNE $179C
	LDA CharStruct.CurMP,X						;C2/178F: BD 0A 20     LDA $200A,X
	CMP DisplayInfo.CurMP						;C2/1792: CD D2 41     CMP $41D2
	BNE .Differs							;C2/1795: D0 05        BNE $179C
	TDC 								;C2/1797: 7B           TDC 
	SEP #$20							;C2/1798: E2 20        SEP #$20
	BRA .Matches							;C2/179A: 80 62        BRA $17FE

.Differs	;disable commands as needed, and update displayinfo for menu
	TDC 								;C2/179C: 7B           TDC 
	SEP #$20							;C2/179D: E2 20        SEP #$20
	JSR CheckDisablingStatus					;C2/179F: 20 74 1C     JSR $1C74
	BNE .Disabled							;C2/17A2: D0 2D        BNE $17D1
	JSR DisableCommandsMagic					;C2/17A4: 20 B3 1C     JSR $1CB3
	JSR ApplyBerserkStatus						;C2/17A7: 20 9A 1C     JSR $1C9A
	BNE .Disabled							;C2/17AA: D0 25        BNE $17D1
	LDA #$05		;C1 routine				;C2/17AC: A9 05        LDA #$05
	JSR CallC1							;C2/17AE: 20 69 00     JSR $0069
	LDA #$06		;C1 routine				;C2/17B1: A9 06        LDA #$06
	JSR CallC1							;C2/17B3: 20 69 00     JSR $0069
	REP #$20							;C2/17B6: C2 20        REP #$20
	LDX AttackerOffset						;C2/17B8: A6 32        LDX $32
	LDA CharStruct.Status1,X					;C2/17BA: BD 1A 20     LDA $201A,X
	STA DisplayInfo.Status1						;C2/17BD: 8D CE 41     STA $41CE
	LDA CharStruct.Status3,X					;C2/17C0: BD 1C 20     LDA $201C,X
	STA DisplayInfo.Status3						;C2/17C3: 8D D0 41     STA $41D0
	LDA CharStruct.CurMP,X						;C2/17C6: BD 0A 20     LDA $200A,X
	STA DisplayInfo.CurMP						;C2/17C9: 8D D2 41     STA $41D2
	TDC 								;C2/17CC: 7B           TDC 
	SEP #$20							;C2/17CD: E2 20        SEP #$20
	BRA .Matches							;C2/17CF: 80 2D        BRA $17FE

.Disabled	;if character has become disabled while their menu is open, close the menu
	LDA DisplayInfo.CurrentChar					;C2/17D1: AD CC 41     LDA $41CC
	STA MenuCurrentChar						;C2/17D4: 85 70        STA $70
	LDA GearChanged							;C2/17D6: AD 7D 7B     LDA $7B7D
	BEQ +								;C2/17D9: F0 09        BEQ $17E4
	STZ GearChanged							;C2/17DB: 9C 7D 7B     STZ $7B7D
	JSR ReplaceHands						;C2/17DE: 20 3A 9F     JSR $9F3A
	JSR ApplyGear							;C2/17E1: 20 6F 9A     JSR $9A6F
+	LDA DisplayInfo.CurrentChar					;C2/17E4: AD CC 41     LDA $41CC
	STA MenuCurrentChar						;C2/17E7: 85 70        STA $70
	LDA MenuDataC1.MenuOpen						;C2/17E9: AD B0 41     LDA $41B0
	BEQ .WaitMenu							;C2/17EC: F0 05        BEQ $17F3
	LDA #$01	;C1 routine: close menu				;C2/17EE: A9 01        LDA #$01
	JSR CallC1							;C2/17F0: 20 69 00     JSR $0069
.WaitMenu
	LDA MenuDataC1.MenuOpen						;C2/17F3: AD B0 41     LDA $41B0
	BNE .WaitMenu	;ends up 0 eventually? via interrupts?		;C2/17F6: D0 FB        BNE $17F3
	LDA #$FF							;C2/17F8: A9 FF        LDA #$FF
	STA DisplayInfo.CurrentChar					;C2/17FA: 8D CC 41     STA $41CC
	RTS 								;C2/17FD: 60           RTS 

.Matches	;data either already matched or has been updated
	LDA ControllingA						;C2/17FE: AD 42 7C     LDA $7C42
	BEQ .Ret							;C2/1801: F0 45        BEQ $1848
	LDA DisplayInfo.CurrentChar					;C2/1803: AD CC 41     LDA $41CC
	TAX 								;C2/1806: AA           TAX 
	LDA ControlTarget,X						;C2/1807: BD 3A 7C     LDA $7C3A,X
	BEQ +								;C2/180A: F0 06        BEQ $1812
	TAX 								;C2/180C: AA           TAX 
	LDA ActiveParticipants,X					;C2/180D: BD C2 3E     LDA $3EC2,X
	BNE .Ret							;C2/1810: D0 36        BNE $1848
+	LDA DisplayInfo.CurrentChar					;C2/1812: AD CC 41     LDA $41CC
	STA MenuCurrentChar						;C2/1815: 85 70        STA $70
	LDA MenuDataC1.MenuOpen						;C2/1817: AD B0 41     LDA $41B0
	BEQ .WaitMenu2							;C2/181A: F0 05        BEQ $1821
	LDA #$01	;C1 routine: close menu				;C2/181C: A9 01        LDA #$01
	JSR CallC1							;C2/181E: 20 69 00     JSR $0069
.WaitMenu2
	LDA MenuDataC1.MenuOpen						;C2/1821: AD B0 41     LDA $41B0
	BNE .WaitMenu2	;ends up 0 eventually? via interrupts?		;C2/1824: D0 FB        BNE $1821
	LDA #$80							;C2/1826: A9 80        LDA #$80
	STA MenuData.ActionFlag          				;C2/1828: 8D BF 41     STA $41BF
	STZ MenuData.Command             				;C2/182B: 9C C0 41     STZ $41C0
	STZ MenuData.MonsterTargets      				;C2/182E: 9C C2 41     STZ $41C2
	STZ MenuData.PartyTargets        				;C2/1831: 9C C3 41     STZ $41C3
	STZ MenuData.SelectedItem        				;C2/1834: 9C C4 41     STZ $41C4
	STZ MenuData.SecondActionFlag    				;C2/1837: 9C C6 41     STZ $41C6
	STZ MenuData.SecondCommand       				;C2/183A: 9C C7 41     STZ $41C7
	STZ MenuData.SecondMonsterTargets				;C2/183D: 9C C9 41     STZ $41C9
	STZ MenuData.SecondPartyTargets  				;C2/1840: 9C CA 41     STZ $41CA
	STZ MenuData.SecondSelectedItem  				;C2/1843: 9C CB 41     STZ $41CB
	BRA .MenuClosed							;C2/1846: 80 01        BRA $1849

.Ret	RTS 								;C2/1848: 60           RTS 

.MenuClosed								;
	LDA DisplayInfo.CurrentChar					;C2/1849: AD CC 41     LDA $41CC
	CMP #$FF							;C2/184C: C9 FF        CMP #$FF
	BEQ .NoCurrentChar						;C2/184E: F0 03        BEQ $1853
	JMP .ProcessMenuCommand						;C2/1850: 4C FF 18     JMP $18FF

.NoCurrentChar
	LDA ATBReadyQueue						;C2/1853: AD A9 41     LDA $41A9
	CMP #$FF							;C2/1856: C9 FF        CMP #$FF
	BNE .NextReadyATB						;C2/1858: D0 01        BNE $185B
	RTS		;no one else in queue either			;C2/185A: 60           RTS

.NextReadyATB	;there's a character in the queue with ATB ready
	PHA 								;C2/185B: 48           PHA 
	TDC 								;C2/185C: 7B           TDC 
	TAX 								;C2/185D: AA           TAX 
.AdvanceQueue	;advances all the queue elements up by one, there's a terminator $FF in the 5th slot
	LDA ATBReadyQueue+1,X						;C2/185E: BD AA 41     LDA $41AA,X
	STA ATBReadyQueue,X						;C2/1861: 9D A9 41     STA $41A9,X
	INX 								;C2/1864: E8           INX 
	CPX #$0004							;C2/1865: E0 04 00     CPX #$0004
	BNE .AdvanceQueue						;C2/1868: D0 F4        BNE $185E

	DEC ATBReadyCount						;C2/186A: CE AE 41     DEC $41AE
	PLA 								;C2/186D: 68           PLA 
	STA MenuCurrentChar						;C2/186E: 85 70        STA $70
	STA DisplayInfo.CurrentChar					;C2/1870: 8D CC 41     STA $41CC
	JSR CalculateCharOffset	  					;C2/1873: 20 EC 01     JSR $01EC      
	LDA QuickTurns							;C2/1876: AD 51 7C     LDA $7C51
	BEQ .DontStopTime  						;C2/1879: F0 1A        BEQ $1895      
	LDA DisplayInfo.CurrentChar					;C2/187B: AD CC 41     LDA $41CC
	CMP QuickCharIndex						;C2/187E: CD B6 7C     CMP $7CB6
	BEQ .DontStopTime  						;C2/1881: F0 12        BEQ $1895      
	JSR GetTimerOffset  	;sets Y to Timer offset			;C2/1883: 20 07 02     JSR $0207      
	LDA CurrentTimer.ATB,Y						;C2/1886: B9 7F 3D     LDA $3D7F,Y
	BNE .FinishEarly	;check if frozen char's ATB is ready	;C2/1889: D0 0F        BNE $189A
	LDA #$01		;increase ATB to 1 (no longer ready)	;C2/188B: A9 01        LDA #$01
	STA CurrentTimer.ATB,Y						;C2/188D: 99 7F 3D     STA $3D7F,Y
	STA EnableTimer.ATB,Y						;C2/1890: 99 FB 3C     STA $3CFB,Y
	BRA .FinishEarly						;C2/1893: 80 05        BRA $189A

.DontStopTime
	JSR CheckDisablingStatus  					;C2/1895: 20 74 1C     JSR $1C74      
	BEQ .NotDisabled						;C2/1898: F0 06        BEQ $18A0
.FinishEarly
	LDA #$FF							;C2/189A: A9 FF        LDA #$FF
	STA DisplayInfo.CurrentChar					;C2/189C: 8D CC 41     STA $41CC
	RTS								;C2/189F: 60           RTS

.NotDisabled	;character's turn has just come up
	STZ MenuCurrentChar+1						;C2/18A0: 64 71        STZ $71
	JSR ApplyBerserkStatus						;C2/18A2: 20 9A 1C     JSR $1C9A
	BNE .FinishEarly						;C2/18A5: D0 F3        BNE $189A
	JSR DisableCommandsMagic					;C2/18A7: 20 B3 1C     JSR $1CB3
	LDA #$01							;C2/18AA: A9 01        LDA #$01
	STA ATBWaiting							;C2/18AC: 8D D4 3E     STA $3ED4
	LDA ATBWaitTime  						;C2/18AF: AD D6 3E     LDA $3ED6      
	STA ATBWaitLeft							;C2/18B2: 8D D5 3E     STA $3ED5
	REP #$20							;C2/18B5: C2 20        REP #$20
	LDX AttackerOffset						;C2/18B7: A6 32        LDX $32        
	LDA CharStruct.Status1,X	;includes 2			;C2/18B9: BD 1A 20     LDA $201A,X
	STA DisplayInfo.Status1						;C2/18BC: 8D CE 41     STA $41CE
	LDA CharStruct.Status3,X	;includes 4			;C2/18BF: BD 1C 20     LDA $201C,X
	STA DisplayInfo.Status3						;C2/18C2: 8D D0 41     STA $41D0
	LDA CharStruct.CurMP,X						;C2/18C5: BD 0A 20     LDA $200A,X
	STA DisplayInfo.CurMP						;C2/18C8: 8D D2 41     STA $41D2
	STZ CharStruct.CmdStatus,X	;also damagemod			;C2/18CB: 9E 1E 20     STZ $201E,X
	TDC 								;C2/18CE: 7B           TDC 
	SEP #$20							;C2/18CF: E2 20        SEP #$20
	JSR CheckControlTargetActive					;C2/18D1: 20 0B 19     JSR $190B
	LDA #$01							;C2/18D4: A9 01        LDA #$01
	STA FleeTickerActive	;can't start running until first atb	;C2/18D6: 8D 4E 7C     STA $7C4E
	LDA EncounterInfo.IntroFX					;C2/18D9: AD EF 3E     LDA $3EEF
	BPL .NoCredits							;C2/18DC: 10 04        BPL $18E2
	STZ MenuData.MenuOpen						;C2/18DE: 9C BE 41     STZ $41BE
	RTS								;C2/18E1: 60           RTS
.NoCredits
	LDA DisplayInfo.CurrentChar					;C2/18E2: AD CC 41     LDA $41CC
	JSR GetTimerOffset	;Y = Timer offset			;C2/18E5: 20 07 02     JSR $0207      
	LDA EnableTimer.ATB,Y						;C2/18E8: B9 FB 3C     LDA $3CFB,Y
	BEQ .TimerOff							;C2/18EB: F0 08        BEQ $18F5
	LDA #$FF							;C2/18ED: A9 FF        LDA #$FF
	STA DisplayInfo.CurrentChar					;C2/18EF: 8D CC 41     STA $41CC
	JMP .NoCurrentChar						;C2/18F2: 4C 53 18     JMP $1853
.TimerOff
	TDC 								;C2/18F5: 7B           TDC 
	JSR CallC1 	;C1 routine $00: open menu			;C2/18F6: 20 69 00     JSR $0069      
.WaitMenu3
	LDA MenuDataC1.MenuOpen						;C2/18F9: AD B0 41     LDA $41B0
	BEQ .WaitMenu3							;C2/18FC: F0 FB        BEQ $18F9
	RTS								;C2/18FE: 60           RTS

.ProcessMenuCommand
	STZ ATBWaiting							;C2/18FF: 9C D4 3E     STZ $3ED4
	JSR ProcessMenuCommandData					;C2/1902: 20 26 19     JSR $1926
	LDA #$FF	;no current char				;C2/1905: A9 FF        LDA #$FF
	STA DisplayInfo.CurrentChar					;C2/1907: 8D CC 41     STA $41CC
	RTS 								;C2/190A: 60           RTS 

%org($C2190B)
;Sets ControllingA and B variables to 1 if control target is valid and active, 0 otherwise
;logic is a bit strange but doesn't seem like they can ever be set to different values
CheckControlTargetActive:
	STZ ControllingA						;C2/190B: 9C 42 7C     STZ $7C42
	LDA DisplayInfo.CurrentChar					;C2/190E: AD CC 41     LDA $41CC
	TAX 								;C2/1911: AA           TAX 
	LDA ControlTarget,X						;C2/1912: BD 3A 7C     LDA $7C3A,X
	BEQ .Finish							;C2/1915: F0 0B        BEQ $1922
	TAY 								;C2/1917: A8           TAY 
	LDA ActiveParticipants,Y					;C2/1918: B9 C2 3E     LDA $3EC2,Y
	BEQ .Finish							;C2/191B: F0 05        BEQ $1922
	LDA #$01							;C2/191D: A9 01        LDA #$01
	STA ControllingA						;C2/191F: 8D 42 7C     STA $7C42
.Finish	STA ControllingB						;C2/1922: 8D 4D 7C     STA $7C4D
	RTS 								;C2/1925: 60           RTS 

%org($C21926)
;copies command data from MenuData struct into CharStruct, and performs any other necessary processing
;also handles gear changes, removing control when needed, consuming items when used, and action delays
%sub(ProcessMenuCommandData)
ProcessMenuCommandData:
	LDA EncounterInfo.IntroFX					;C2/1926: AD EF 3E     LDA $3EEF
	BPL +		;check for credits demo				;C2/1929: 10 03        BPL $192E
	JSR SetupCreditsDemo						;C2/192B: 20 51 1C     JSR $1C51

+	LDA DisplayInfo.CurrentChar  					;C2/192E: AD CC 41     LDA $41CC      
	STA CurrentChar							;C2/1931: 8D 7B 7B     STA $7B7B
	LDA GearChanged							;C2/1934: AD 7D 7B     LDA $7B7D
	BEQ +								;C2/1937: F0 09        BEQ $1942
	STZ GearChanged							;C2/1939: 9C 7D 7B     STZ $7B7D
	JSR ReplaceHands						;C2/193C: 20 3A 9F     JSR $9F3A
	JSR ApplyGear    						;C2/193F: 20 6F 9A     JSR $9A6F      

+	LDA DisplayInfo.CurrentChar					;C2/1942: AD CC 41     LDA $41CC
	JSR CalculateCharOffset						;C2/1945: 20 EC 01     JSR $01EC      
	LDA CharStruct.Status1,X					;C2/1948: BD 1A 20     LDA $201A,X
	AND #$C0	;dead/stone					;C2/194B: 29 C0        AND #$C0
	BNE .ClearControl						;C2/194D: D0 18        BNE $1967
	LDA CharStruct.Status2,X					;C2/194F: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/1952: 1D 71 20     ORA $2071,X
	AND #$78	;sleep/para/charm/berserk			;C2/1955: 29 78        AND #$78
	BNE .ClearControl						;C2/1957: D0 0E        BNE $1967
	LDA CharStruct.Status3,X					;C2/1959: BD 1C 20     LDA $201C,X
	AND #$10	;stop						;C2/195C: 29 10        AND #$10
	BNE .ClearControl						;C2/195E: D0 07        BNE $1967
	LDA CharStruct.Status4,X					;C2/1960: BD 1D 20     LDA $201D,X
	AND #$80	;erased						;C2/1963: 29 80        AND #$80
	BEQ +								;C2/1965: F0 09        BEQ $1970
.ClearControl
	LDA DisplayInfo.CurrentChar					;C2/1967: AD CC 41     LDA $41CC
	TAX 								;C2/196A: AA           TAX 
	STZ ControlTarget,X						;C2/196B: 9E 3A 7C     STZ $7C3A,X
	BRA .ClearMenuData						;C2/196E: 80 53        BRA $19C3

+	LDA DisplayInfo.CurrentChar					;C2/1970: AD CC 41     LDA $41CC
	CMP MenuData.CurrentChar					;C2/1973: CD C1 41     CMP $41C1
	BEQ +								;C2/1976: F0 0C        BEQ $1984
	LDA EncounterInfo.IntroFX					;C2/1978: AD EF 3E     LDA $3EEF
	BMI +		;branch if credits fight			;C2/197B: 30 07        BMI $1984
	LDA #$0D	;C1 Routine 	 				;C2/197D: A9 0D        LDA #$0D
	JSR CallC1    							;C2/197F: 20 69 00     JSR $0069      
.WaitForever
	BRA .WaitForever	;infinite loop? 			;C2/1982: 80 FE        BRA $1982
+	LDA DisplayInfo.CurrentChar					;C2/1984: AD CC 41     LDA $41CC
	TAX 								;C2/1987: AA           TAX 
	LDA ControlTarget,X						;C2/1988: BD 3A 7C     LDA $7C3A,X
	BEQ .NoControlTarget						;C2/198B: F0 58        BEQ $19E5
	TAY 								;C2/198D: A8           TAY 
	LDA ActiveParticipants,Y					;C2/198E: B9 C2 3E     LDA $3EC2,Y
	BEQ .ClearMenuData						;C2/1991: F0 30        BEQ $19C3
	INC ControlCommand,X						;C2/1993: FE 3E 7C     INC $7C3E,X
	SEC 								;C2/1996: 38           SEC 
	LDA ControlTarget,X						;C2/1997: BD 3A 7C     LDA $7C3A,X
	SBC #$04							;C2/199A: E9 04        SBC #$04
	STA $0E		;monster index of control target		;C2/199C: 85 0E        STA $0E
	TAY 								;C2/199E: A8           TAY 
	LDA DisplayInfo.CurrentChar					;C2/199F: AD CC 41     LDA $41CC
	TAX 								;C2/19A2: AA           TAX 
	CLC 								;C2/19A3: 18           CLC 
	LDA ROMTimes20,X	;size of CharControl struct		;C2/19A4: BF DB EE D0  LDA $D0EEDB,X  
	ADC MenuData.SelectedItem	;action 0-3			;C2/19A8: 6D C4 41     ADC $41C4      
	TAX 								;C2/19AB: AA           TAX 
	LDA CharControl.Actions,X  					;C2/19AC: BD DC 37     LDA $37DC,X    
	STA MonsterControlActions,Y					;C2/19AF: 99 43 7C     STA $7C43,Y
	SEC 								;C2/19B2: 38           SEC 
	LDA $0E								;C2/19B3: A5 0E        LDA $0E
	ASL 								;C2/19B5: 0A           ASL 
	TAX 								;C2/19B6: AA           TAX 
	LDA MenuData.PartyTargets					;C2/19B7: AD C3 41     LDA $41C3
	STA ForcedTarget.Party,X					;C2/19BA: 9D 2A 7C     STA $7C2A,X
	LDA MenuData.MonsterTargets					;C2/19BD: AD C2 41     LDA $41C2
	STA ForcedTarget.Monster,X					;C2/19C0: 9D 2B 7C     STA $7C2B,X

.ClearMenuData
        LDA #$80                                                        ;C2/19C3: A9 80        LDA #$80
        STA MenuData.ActionFlag                                         ;C2/19C5: 8D BF 41     STA $41BF
        STZ MenuData.Command                                            ;C2/19C8: 9C C0 41     STZ $41C0
        STZ MenuData.MonsterTargets                                     ;C2/19CB: 9C C2 41     STZ $41C2
        STZ MenuData.PartyTargets                                       ;C2/19CE: 9C C3 41     STZ $41C3
        STZ MenuData.SelectedItem                                       ;C2/19D1: 9C C4 41     STZ $41C4
        STZ MenuData.SecondActionFlag                                   ;C2/19D4: 9C C6 41     STZ $41C6
        STZ MenuData.SecondCommand                                      ;C2/19D7: 9C C7 41     STZ $41C7
        STZ MenuData.SecondMonsterTargets                               ;C2/19DA: 9C C9 41     STZ $41C9
        STZ MenuData.SecondPartyTargets                                 ;C2/19DD: 9C CA 41     STZ $41CA
        STZ MenuData.SecondSelectedItem                                 ;C2/19E0: 9C CB 41     STZ $41CB
        BRA .CopyCommands                                               ;C2/19E3: 80 05        BRA $19EA

.NoControlTarget
	LDA ControllingB						;C2/19E5: AD 4D 7C     LDA $7C4D
	BNE .ClearMenuData	;controlling with no target		;C2/19E8: D0 D9        BNE $19C3

.CopyCommands
	LDA DisplayInfo.CurrentChar					;C2/19EA: AD CC 41     LDA $41CC      
	TAX 								;C2/19ED: AA           TAX 
	STX $2A								;C2/19EE: 86 2A        STX $2A
	LDX #$028A   	;650, size of CharSpells struct			;C2/19F0: A2 8A 02     LDX #$028A     
	STX $2C								;C2/19F3: 86 2C        STX $2C
	JSR Multiply_16bit	;not using the rom *650 table?		;C2/19F5: 20 D2 00     JSR $00D2      
	REP #$20							;C2/19F8: C2 20        REP #$20
	CLC 								;C2/19FA: 18           CLC 
	LDA $2E		;CurrentChar * 650				;C2/19FB: A5 2E        LDA $2E
	ADC #$2D34   	;CharSpells struct location			;C2/19FD: 69 34 2D     ADC #$2D34     
	STA TempSpellOffset						;C2/1A00: 85 45        STA $45
	TDC 								;C2/1A02: 7B           TDC 
	SEP #$20							;C2/1A03: E2 20        SEP #$20
	LDX AttackerOffset   						;C2/1A05: A6 32        LDX $32        
	LDA CharStruct.Status2,X					;C2/1A07: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/1A0A: 1D 71 20     ORA $2071,X
	AND #$18	;charm/berserk					;C2/1A0D: 29 18        AND #$18
	BNE .CheckCommand						;C2/1A0F: D0 64        BNE $1A75
	LDA MenuData.Command						;C2/1A11: AD C0 41     LDA $41C0      
	STA CharStruct.Command,X					;C2/1A14: 9D 57 20     STA $2057,X
	LDA MenuData.MonsterTargets					;C2/1A17: AD C2 41     LDA $41C2      
	STA CharStruct.MonsterTargets,X					;C2/1A1A: 9D 58 20     STA $2058,X
	LDA MenuData.PartyTargets					;C2/1A1D: AD C3 41     LDA $41C3      
	STA CharStruct.PartyTargets,X					;C2/1A20: 9D 59 20     STA $2059,X
	LDA MenuData.SelectedItem					;C2/1A23: AD C4 41     LDA $41C4      
	STA CharStruct.SelectedItem,X					;C2/1A26: 9D 5A 20     STA $205A,X
	LDA MenuData.ActionFlag						;C2/1A29: AD BF 41     LDA $41BF      
	STA CharStruct.ActionFlag,X					;C2/1A2C: 9D 56 20     STA $2056,X
	AND #$20	;magic						;C2/1A2F: 29 20        AND #$20
	BEQ .NotXMagic							;C2/1A31: F0 33        BEQ $1A66
	LDA MenuData.SelectedItem					;C2/1A33: AD C4 41     LDA $41C4
	TAY 								;C2/1A36: A8           TAY 
	LDA (TempSpellOffset),Y						;C2/1A37: B1 45        LDA ($45),Y
	STA CharStruct.SelectedItem,X					;C2/1A39: 9D 5A 20     STA $205A,X
	LDA MenuData.ActionFlag						;C2/1A3C: AD BF 41     LDA $41BF
	AND #$08	;x-magic					;C2/1A3F: 29 08        AND #$08
	BEQ .NotXMagic							;C2/1A41: F0 23        BEQ $1A66
	LDA MenuData.SecondCommand					;C2/1A43: AD C7 41     LDA $41C7
	STA CharStruct.SecondCommand,X					;C2/1A46: 9D 5C 20     STA $205C,X
	LDA MenuData.SecondMonsterTargets				;C2/1A49: AD C9 41     LDA $41C9
	STA CharStruct.SecondMonsterTargets,X				;C2/1A4C: 9D 5D 20     STA $205D,X
	LDA MenuData.SecondPartyTargets					;C2/1A4F: AD CA 41     LDA $41CA
	STA CharStruct.SecondPartyTargets,X				;C2/1A52: 9D 5E 20     STA $205E,X
	LDA MenuData.SecondSelectedItem					;C2/1A55: AD CB 41     LDA $41CB
	TAY 								;C2/1A58: A8           TAY 
	LDA (TempSpellOffset),Y						;C2/1A59: B1 45        LDA ($45),Y
	STA CharStruct.SecondSelectedItem,X				;C2/1A5B: 9D 5F 20     STA $205F,X
	LDA MenuData.SecondActionFlag					;C2/1A5E: AD C6 41     LDA $41C6
	STA CharStruct.SecondActionFlag,X				;C2/1A61: 9D 5B 20     STA $205B,X
	BRA .CheckCommand						;C2/1A64: 80 0F        BRA $1A75
.NotXMagic
	STZ CharStruct.SecondCommand,X					;C2/1A66: 9E 5C 20     STZ $205C,X
	STZ CharStruct.SecondMonsterTargets,X				;C2/1A69: 9E 5D 20     STZ $205D,X
	STZ CharStruct.SecondMonsterTargets,X				;C2/1A6C: 9E 5D 20     STZ $205D,X
	STZ CharStruct.SecondSelectedItem,X				;C2/1A6F: 9E 5F 20     STZ $205F,X
	STZ CharStruct.SecondActionFlag,X				;C2/1A72: 9E 5B 20     STZ $205B,X

.CheckCommand
	LDA MenuData.Command						;C2/1A75: AD C0 41     LDA $41C0      
	STA $24								;C2/1A78: 85 24        STA $24
	LDA #$08							;C2/1A7A: A9 08        LDA #$08
	STA $25								;C2/1A7C: 85 25        STA $25
	JSR Multiply_8bit    						;C2/1A7E: 20 F1 00     JSR $00F1      
	LDX $26		;command * 8 					;C2/1A81: A6 26        LDX $26
	LDY AttackerOffset      					;C2/1A83: A4 32        LDY $32        
	LDA ROMAbilityInfo.CmdStatus,X					;C2/1A85: BF E2 59 D1  LDA $D159E2,X  
	STA CharStruct.CmdStatus,Y					;C2/1A89: 99 1E 20     STA $201E,Y
	LDA ROMAbilityInfo.DamageMod,X					;C2/1A8C: BF E3 59 D1  LDA $D159E3,X  
	STA CharStruct.DamageMod,Y					;C2/1A90: 99 1F 20     STA $201F,Y
	LDA MenuData.Command						;C2/1A93: AD C0 41     LDA $41C0
	CMP #$2C	;first magic command				;C2/1A96: C9 2C        CMP #$2C
	BCC .NotMagicCommand    					;C2/1A98: 90 0C        BCC $1AA6      
	CMP #$4E	;after last magic command			;C2/1A9A: C9 4E        CMP #$4E
	BCS .NotMagicCommand						;C2/1A9C: B0 08        BCS $1AA6
	LDA CharStruct.ActionFlag,Y					;C2/1A9E: B9 56 20     LDA $2056,Y
	ORA #$01     	;costs MP					;C2/1AA1: 09 01        ORA #$01       
	STA CharStruct.ActionFlag,Y					;C2/1AA3: 99 56 20     STA $2056,Y
.NotMagicCommand
	LDA MenuData.Command						;C2/1AA6: AD C0 41     LDA $41C0
	TAX 								;C2/1AA9: AA           TAX 
	LDA ROMCommandDelay,X						;C2/1AAA: BF A0 5D D1  LDA $D15DA0,X
	BMI .CalculateDelay						;C2/1AAE: 30 36        BMI $1AE6
	PHA 								;C2/1AB0: 48           PHA 
	LDA MenuData.Command						;C2/1AB1: AD C0 41     LDA $41C0
	CMP #$11	;throw						;C2/1AB4: C9 11        CMP #$11
	BEQ .Item							;C2/1AB6: F0 19        BEQ $1AD1
	CMP #$20	;drink						;C2/1AB8: C9 20        CMP #$20
	BEQ .Item							;C2/1ABA: F0 15        BEQ $1AD1
	CMP #$1F	;mix						;C2/1ABC: C9 1F        CMP #$1F
	BNE .NotItem							;C2/1ABE: D0 22        BNE $1AE2
.Mix	
	LDA MenuData.SecondSelectedItem					;C2/1AC0: AD CB 41     LDA $41CB
	PHA 								;C2/1AC3: 48           PHA 
	TAX 								;C2/1AC4: AA           TAX 
	LDA InventoryItems,X						;C2/1AC5: BD 34 27     LDA $2734,X
	LDX AttackerOffset						;C2/1AC8: A6 32        LDX $32        
	STA CharStruct.SecondSelectedItem,X				;C2/1ACA: 9D 5F 20     STA $205F,X
	PLA 								;C2/1ACD: 68           PLA 
	JSR ConsumeItem							;C2/1ACE: 20 36 1C     JSR $1C36
.Item
	LDA MenuData.SelectedItem					;C2/1AD1: AD C4 41     LDA $41C4
	PHA 								;C2/1AD4: 48           PHA 
	TAX 								;C2/1AD5: AA           TAX 
	LDA InventoryItems,X						;C2/1AD6: BD 34 27     LDA $2734,X
	LDX AttackerOffset						;C2/1AD9: A6 32        LDX $32        
	STA CharStruct.SelectedItem,X					;C2/1ADB: 9D 5A 20     STA $205A,X
	PLA 								;C2/1ADE: 68           PLA 
	JSR ConsumeItem							;C2/1ADF: 20 36 1C     JSR $1C36
.NotItem
	PLA 								;C2/1AE2: 68           PLA 
	JMP .Finish							;C2/1AE3: 4C F7 1B     JMP $1BF7

.CalculateDelay	
	LDA MenuData.ActionFlag						;C2/1AE6: AD BF 41     LDA $41BF
	AND #$08	;XMagic						;C2/1AE9: 29 08        AND #$08
	BEQ +								;C2/1AEB: F0 03        BEQ $1AF0
	JMP .MagicDelay							;C2/1AED: 4C 7C 1B     JMP $1B7C
+	LDA MenuData.ActionFlag						;C2/1AF0: AD BF 41     LDA $41BF
	AND #$40	;Item						;C2/1AF3: 29 40        AND #$40
	BNE .ItemDelay							;C2/1AF5: D0 52        BNE $1B49
	LDA MenuData.ActionFlag						;C2/1AF7: AD BF 41     LDA $41BF
	AND #$20	;Magic						;C2/1AFA: 29 20        AND #$20
	BEQ +								;C2/1AFC: F0 03        BEQ $1B01
	JMP .MagicDelay							;C2/1AFE: 4C 7C 1B     JMP $1B7C
+	LDA MenuData.ActionFlag						;C2/1B01: AD BF 41     LDA $41BF
	AND #$10	;Weapon used as item				;C2/1B04: 29 10        AND #$10
	BEQ .WeaponAttackDelay						;C2/1B06: F0 03        BEQ $1B0B
	JMP .WeaponUseDelay						;C2/1B08: 4C BE 1B     JMP $1BBE

.WeaponAttackDelay	;despite the calculation, I don't think any weapons have delay values
	STZ $0E								;C2/1B0B: 64 0E        STZ $0E
	LDA DisplayInfo.CurrentChar					;C2/1B0D: AD CC 41     LDA $41CC      
	STA $24								;C2/1B10: 85 24        STA $24
	LDA #$54     ;84, size of GearStats struct			;C2/1B12: A9 54        LDA #$54       
	STA $25								;C2/1B14: 85 25        STA $25
	JSR Multiply_8bit						;C2/1B16: 20 F1 00     JSR $00F1      
	LDY $26								;C2/1B19: A4 26        LDY $26
	LDX AttackerOffset						;C2/1B1B: A6 32        LDX $32        
	LDA CharStruct.RHWeapon,X					;C2/1B1D: BD 13 20     LDA $2013,X
	BEQ +								;C2/1B20: F0 0C        BEQ $1B2E
	LDA RHWeapon.Targetting,Y					;C2/1B22: B9 85 40     LDA $4085,Y
	AND #$03	;delay bits (delay/10)				;C2/1B25: 29 03        AND #$03
	TAX 								;C2/1B27: AA           TAX 
	LDA ROMTimes10,X						;C2/1B28: BF EE EC D0  LDA $D0ECEE,X
	STA $0E		;attack delay					;C2/1B2C: 85 0E        STA $0E
+	LDX AttackerOffset      					;C2/1B2E: A6 32        LDX $32        
	LDA CharStruct.LHWeapon,X					;C2/1B30: BD 14 20     LDA $2014,X
	BEQ +								;C2/1B33: F0 0F        BEQ $1B44
	LDA !LHWeapon,Y							;C2/1B35: B9 91 40     LDA $4091,Y
	AND #$03	;delay bits (delay/10)				;C2/1B38: 29 03        AND #$03
	TAX 								;C2/1B3A: AA           TAX 
	CLC 								;C2/1B3B: 18           CLC 
	LDA ROMTimes10,X						;C2/1B3C: BF EE EC D0  LDA $D0ECEE,X
	ADC $0E		;add other weapon's delay			;C2/1B40: 65 0E        ADC $0E
	STA $0E								;C2/1B42: 85 0E        STA $0E
+	LDA $0E		;attack delay					;C2/1B44: A5 0E        LDA $0E
	JMP .Finish							;C2/1B46: 4C F7 1B     JMP $1BF7
.ItemDelay 
	LDA MenuData.SelectedItem					;C2/1B49: AD C4 41     LDA $41C4
	TAX 								;C2/1B4C: AA           TAX 
	LDA InventoryItems,X						;C2/1B4D: BD 34 27     LDA $2734,X
	LDX AttackerOffset						;C2/1B50: A6 32        LDX $32        
	STA CharStruct.SelectedItem,X					;C2/1B52: 9D 5A 20     STA $205A,X
	SEC 								;C2/1B55: 38           SEC 
	SBC #$E0	;consumable item offset				;C2/1B56: E9 E0        SBC #$E0
	REP #$20							;C2/1B58: C2 20        REP #$20
	JSR ShiftMultiply_8    						;C2/1B5A: 20 B6 01     JSR $01B6      
	TAX 								;C2/1B5D: AA           TAX 
	TDC 								;C2/1B5E: 7B           TDC 
	SEP #$20							;C2/1B5F: E2 20        SEP #$20
	LDA ROMConsumables.Misc,X					;C2/1B61: BF 82 0A D1  LDA $D10A82,X
	AND #$08							;C2/1B65: 29 08        AND #$08
	BNE +								;C2/1B67: D0 06        BNE $1B6F
	LDA MenuData.SelectedItem					;C2/1B69: AD C4 41     LDA $41C4
	JSR ConsumeItem							;C2/1B6C: 20 36 1C     JSR $1C36
+	LDA ROMConsumables.Targetting,X					;C2/1B6F: BF 80 0A D1  LDA $D10A80,X
	AND #$03	;delay bits (delay/10)				;C2/1B73: 29 03        AND #$03
	TAX 								;C2/1B75: AA           TAX 
	LDA ROMTimes10,X						;C2/1B76: BF EE EC D0  LDA $D0ECEE,X
	BRA .Finish							;C2/1B7A: 80 7B        BRA $1BF7
.MagicDelay	
	STZ $0E								;C2/1B7C: 64 0E        STZ $0E
	LDA MenuData.SelectedItem					;C2/1B7E: AD C4 41     LDA $41C4
	REP #$20							;C2/1B81: C2 20        REP #$20
	JSR ShiftMultiply_8    	  					;C2/1B83: 20 B6 01     JSR $01B6      
	TAX 								;C2/1B86: AA           TAX 
	TDC 								;C2/1B87: 7B           TDC 
	SEP #$20							;C2/1B88: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/1B8A: BF 80 0B D1  LDA $D10B80,X
	AND #$03	;delay bits (delay/10)				;C2/1B8E: 29 03        AND #$03
	TAX 								;C2/1B90: AA           TAX 
	LDA ROMTimes10,X						;C2/1B91: BF EE EC D0  LDA $D0ECEE,X
	STA $0E		;attack delay					;C2/1B95: 85 0E        STA $0E
	LDA MenuData.ActionFlag						;C2/1B97: AD BF 41     LDA $41BF
	AND #$08	;X-Magic					;C2/1B9A: 29 08        AND #$08
	BEQ .FinishMagic							;C2/1B9C: F0 1C        BEQ $1B
	LDA MenuData.SecondSelectedItem					;C2/1B9E: AD CB 41     LDA $41CB
	REP #$20							;C2/1BA1: C2 20        REP #$20
	JSR ShiftMultiply_8   						;C2/1BA3: 20 B6 01     JSR $01B6      
	TAX 								;C2/1BA6: AA           TAX 
	TDC 								;C2/1BA7: 7B           TDC 
	SEP #$20							;C2/1BA8: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/1BAA: BF 80 0B D1  LDA $D10B80,X
	AND #$03	;delay bits (delay/10)				;C2/1BAE: 29 03        AND #$03
	TAX 								;C2/1BB0: AA           TAX 
	CLC 								;C2/1BB1: 18           CLC 
	LDA ROMTimes10,X						;C2/1BB2: BF EE EC D0  LDA $D0ECEE,X
	ADC $0E		;add other spell's delay			;C2/1BB6: 65 0E        ADC $0E
	STA $0E								;C2/1BB8: 85 0E        STA $0E
.FinishMagic
	LDA $0E		;attack delay					;C2/1BBA: A5 0E        LDA $0E
	BRA .Finish							;C2/1BBC: 80 39        BRA $1BF7
.WeaponUseDelay
	LDA DisplayInfo.CurrentChar					;C2/1BBE: AD CC 41     LDA $41CC      
	STA $24								;C2/1BC1: 85 24        STA $24
	LDA #$54     	;84, size of GearStats struct			;C2/1BC3: A9 54        LDA #$54       
	STA $25								;C2/1BC5: 85 25        STA $25
	JSR Multiply_8bit    						;C2/1BC7: 20 F1 00     JSR $00F1      
	LDY $26								;C2/1BCA: A4 26        LDY $26
	LDA MenuData.SelectedItem					;C2/1BCC: AD C4 41     LDA $41C4
	BEQ +								;C2/1BCF: F0 0B        BEQ $1BDC
	REP #$20							;C2/1BD1: C2 20        REP #$20
	TYA 								;C2/1BD3: 98           TYA 
	CLC 								;C2/1BD4: 18           CLC 
	ADC #$000C	;shifts offset from RHWeapon to LHWeapon	;C2/1BD5: 69 0C 00     ADC #$000C
	TAY 								;C2/1BD8: A8           TAY 
	TDC 								;C2/1BD9: 7B           TDC 
	SEP #$20							;C2/1BDA: E2 20        SEP #$20
+	LDA RHWeapon.ItemMagic,Y	;could be LHWeapon		;C2/1BDC: B9 8B 40     LDA $408B,Y
	AND #$7F	;weapon magic to cast				;C2/1BDF: 29 7F        AND #$7F
	BEQ .Finish							;C2/1BE1: F0 14        BEQ $1BF7
	REP #$20							;C2/1BE3: C2 20        REP #$20
	JSR ShiftMultiply_8    						;C2/1BE5: 20 B6 01     JSR $01B6      
	TAX 								;C2/1BE8: AA           TAX 
	TDC 								;C2/1BE9: 7B           TDC 
	SEP #$20							;C2/1BEA: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/1BEC: BF 80 0B D1  LDA $D10B80,X
	AND #$03	;delay bits (delay/10)				;C2/1BF0: 29 03        AND #$03
	TAX 								;C2/1BF2: AA           TAX 
	LDA ROMTimes10,X						;C2/1BF3: BF EE EC D0  LDA $D0ECEE,X
.Finish		
	PHA 								;C2/1BF7: 48           PHA 
	LDA DisplayInfo.CurrentChar					;C2/1BF8: AD CC 41     LDA $41CC
	JSR GetTimerOffset	;Y and $36 = timer offset  		;C2/1BFB: 20 07 02     JSR $0207      
	LDX AttackerOffset						;C2/1BFE: A6 32        LDX $32        
	PLA 								;C2/1C00: 68           PLA 
	JSR HasteSlowMod	;adjusts delay				;C2/1C01: 20 63 61     JSR $6163
	STA CurrentTimer.ATB,Y	;time until action fires		;C2/1C04: 99 7F 3D     STA $3D7F,Y
	LDA #$41		;flag indicating a queued action	;C2/1C07: A9 41        LDA #$41
	STA EnableTimer.ATB,Y						;C2/1C09: 99 FB 3C     STA $3CFB,Y
	LDA #$80		;physical/other				;C2/1C0C: A9 80        LDA #$80
	STA MenuData.ActionFlag						;C2/1C0E: 8D BF 41     STA $41BF
	STZ MenuData.Command						;C2/1C11: 9C C0 41     STZ $41C0
	STZ MenuData.CurrentChar					;C2/1C14: 9C C1 41     STZ $41C1
	STZ MenuData.MonsterTargets					;C2/1C17: 9C C2 41     STZ $41C2
	STZ MenuData.PartyTargets					;C2/1C1A: 9C C3 41     STZ $41C3
	STZ MenuData.SelectedItem					;C2/1C1D: 9C C4 41     STZ $41C4
	STZ MenuData.7							;C2/1C20: 9C C5 41     STZ $41C5
	STZ MenuData.SecondActionFlag					;C2/1C23: 9C C6 41     STZ $41C6
	STZ MenuData.SecondCommand					;C2/1C26: 9C C7 41     STZ $41C7
	STZ MenuData.10							;C2/1C29: 9C C8 41     STZ $41C8
	STZ MenuData.SecondMonsterTargets				;C2/1C2C: 9C C9 41     STZ $41C9
	STZ MenuData.SecondPartyTargets					;C2/1C2F: 9C CA 41     STZ $41CA
	STZ MenuData.SecondSelectedItem					;C2/1C32: 9C CB 41     STZ $41CB
	RTS 								;C2/1C35: 60           RTS 
%endsub()

%org($C21C36)
;subtracts 1 from item quantity of item in A
;blanks out inventory slot if qty is now 0
ConsumeItem:
	TAX 								;C2/1C36: AA           TAX 
	LDA InventoryQuantities,X					;C2/1C37: BD 34 28     LDA $2834,X
	DEC 								;C2/1C3A: 3A           DEC 
	STA InventoryQuantities,X					;C2/1C3B: 9D 34 28     STA $2834,X
	BNE .Ret							;C2/1C3E: D0 10        BNE $1C50
	STZ InventoryItems,X						;C2/1C40: 9E 34 27     STZ $2734,X
	STZ InventoryTargetting,X					;C2/1C43: 9E 34 2A     STZ $2A34,X
	LDA #$5A							;C2/1C46: A9 5A        LDA #$5A
	STA InventoryFlags,X						;C2/1C48: 9D 34 2B     STA $2B34,X
	LDA #$AA							;C2/1C4B: A9 AA        LDA #$AA
	STA InventoryUsable,X						;C2/1C4D: 9D 34 2C     STA $2C34,X
.Ret	RTS 								;C2/1C50: 60           RTS 

%org($C21C51)
;initializes some values when a battle during the credits happens
;this range is used by C1 graphics code but unsure what it does
SetupCreditsDemo:
	LDA #$80	;physical/other					;C2/1C51: A9 80        LDA #$80
	STA MenuData.ActionFlag						;C2/1C53: 8D BF 41     STA $41BF
	STA MenuData.MonsterTargets					;C2/1C56: 8D C2 41     STA $41C2
	LDA #$54	;job-specific animation (credits)		;C2/1C59: A9 54        LDA #$54
	STA MenuData.Command						;C2/1C5B: 8D C0 41     STA $41C0
	STZ MenuData.PartyTargets					;C2/1C5E: 9C C3 41     STZ $41C3
	STZ MenuData.SelectedItem					;C2/1C61: 9C C4 41     STZ $41C4
	STZ MenuData.SecondActionFlag					;C2/1C64: 9C C6 41     STZ $41C6
	STZ MenuData.SecondCommand					;C2/1C67: 9C C7 41     STZ $41C7
	STZ MenuData.SecondMonsterTargets				;C2/1C6A: 9C C9 41     STZ $41C9
	STZ MenuData.SecondPartyTargets					;C2/1C6D: 9C CA 41     STZ $41CA
	STZ MenuData.SecondSelectedItem					;C2/1C70: 9C CB 41     STZ $41CB
	RTS 								;C2/1C73: 60           RTS 

%org($C21C74)
;returns >0 if character has a status that prevents them from taking Action
CheckDisablingStatus:
	LDX AttackerOffset						;C2/1C74: A6 32        LDX $32
	LDA CharStruct.Status1,X					;C2/1C76: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/1C79: 1D 70 20     ORA $2070,X
	AND #$C2   	;dead/stone/zombie				;C2/1C7C: 29 C2        AND #$C2     
	BNE .Ret							;C2/1C7E: D0 19        BNE $1C99
	LDA CharStruct.Status2,X					;C2/1C80: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/1C83: 1D 71 20     ORA $2071,X
	AND #$78   	;sleep/para/Charm/Berserk			;C2/1C86: 29 78        AND #$78     
	BNE .Ret							;C2/1C88: D0 0F        BNE $1C99
	LDA CharStruct.Status3,X					;C2/1C8A: BD 1C 20     LDA $201C,X
	AND #$10   	;stop						;C2/1C8D: 29 10        AND #$10     
	BNE .Ret							;C2/1C8F: D0 08        BNE $1C99
	LDA CharStruct.Status4,X					;C2/1C91: BD 1D 20     LDA $201D,X
	AND #$84   	;erased/singing					;C2/1C94: 29 84        AND #$84     
	BNE .Ret							;C2/1C96: D0 01        BNE $1C99
	TDC								;C2/1C98: 7B           TDC
.Ret	RTS								;C2/1C99: 60           RTS

%org($C21C9A)
;Make Berserk ability have Berserk Status
ApplyBerserkStatus:
	LDX AttackerOffset						;C2/1C9A: A6 32        LDX $32
	LDA CharStruct.Passives2,X					;C2/1C9C: BD 21 20     LDA $2021,X
	AND #$08   	;berserk					;C2/1C9F: 29 08        AND #$08     
	BEQ .Finish							;C2/1CA1: F0 05        BEQ $1CA8
	LDA EncounterInfo.IntroFX					;C2/1CA3: AD EF 3E     LDA $3EEF
	BPL .NotCredits							;C2/1CA6: 10 02        BPL $1CAA
.Finish	TDC 								;C2/1CA8: 7B           TDC 
	RTS 								;C2/1CA9: 60           RTS 
									;
.NotCredits
	LDA CharStruct.AlwaysStatus2,X					;C2/1CAA: BD 71 20     LDA $2071,X
	ORA #$08   	;berserk					;C2/1CAD: 09 08        ORA #$08     
	STA CharStruct.AlwaysStatus2,X					;C2/1CAF: 9D 71 20     STA $2071,X
	RTS 								;C2/1CB2: 60           RTS 

%org($C21CB3)
;Disables Magic and Commands when Status or MP prevents their use
DisableCommandsMagic:
	TDC 								;C2/1CB3: 7B           TDC 
	TAX 								;C2/1CB4: AA           TAX 
	STX $16								;C2/1CB5: 86 16        STX $16
	LDA Void							;C2/1CB7: AD E6 7B     LDA $7BE6
	AND #$40     	;void						;C2/1CBA: 29 40        AND #$40     
	BEQ +								;C2/1CBC: F0 05        BEQ $1CC3
	LDX #$0080							;C2/1CBE: A2 80 00     LDX #$0080
	STX $16		;disables magic					;C2/1CC1: 86 16        STX $16
+	LDA DisplayInfo.CurrentChar					;C2/1CC3: AD CC 41     LDA $41CC
	JSR CalculateSpellOffset	;sets Y				;C2/1CC6: 20 F8 01     JSR $01F8
	REP #$20							;C2/1CC9: C2 20        REP #$20
	TDC 								;C2/1CCB: 7B           TDC 
	STA $12								;C2/1CCC: 85 12        STA $12
	STA $14								;C2/1CCE: 85 14        STA $14
	LDX AttackerOffset						;C2/1CD0: A6 32        LDX $32
	LDA CharStruct.CurMP,X						;C2/1CD2: BD 0A 20     LDA $200A,X
	STA $0E		;current mp					;C2/1CD5: 85 0E        STA $0E
	LDA CharStruct.Status3,X					;C2/1CD7: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/1CDA: 1D 72 20     ORA $2072,X
	STA $22		;status 3/4					;C2/1CDD: 85 22        STA $22
	LDA CharStruct.Status1,X					;C2/1CDF: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/1CE2: 1D 70 20     ORA $2070,X
	STA $10		;status 1/2					;C2/1CE5: 85 10        STA $10
	AND #$0400	;mute						;C2/1CE7: 29 00 04     AND #$0400
	BEQ +								;C2/1CEA: F0 05        BEQ $1CF1
	LDA #$0080							;C2/1CEC: A9 80 00     LDA #$0080
	STA $12		;disables magic					;C2/1CEF: 85 12        STA $12
+	LDA CharStruct.Status1,X					;C2/1CF1: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/1CF4: 1D 70 20     ORA $2070,X
	AND #$0020	;toad						;C2/1CF7: 29 20 00     AND #$0020
	BEQ +								;C2/1CFA: F0 05        BEQ $1D01
	LDA #$0080							;C2/1CFC: A9 80 00     LDA #$0080
	STA $14		;disables magic					;C2/1CFF: 85 14        STA $14
+	TDC 								;C2/1D01: 7B           TDC 
	TAX 								;C2/1D02: AA           TAX 

.DisableSpells
	LDA CharSpells.Flags,Y						;C2/1D03: B9 3C 2F     LDA $2F3C,Y
	AND #$0001	;skip mp/status checks				;C2/1D06: 29 01 00     AND #$0001
	BNE .NextSpell							;C2/1D09: D0 57        BNE $1D62
	LDA CharSpells.MP,Y						;C2/1D0B: B9 38 2E     LDA $2E38,Y
	AND #$00FF	;clear high part since it's an 8 bit field	;C2/1D0E: 29 FF 00     AND #$00FF
	CMP $0E		;current mp					;C2/1D11: C5 0E        CMP $0E
	BEQ .CheckStatus						;C2/1D13: F0 0D        BEQ $1D22
	BCC .CheckStatus						;C2/1D15: 90 0B        BCC $1D22
	LDA CharSpells.Flags,Y						;C2/1D17: B9 3C 2F     LDA $2F3C,Y
	ORA #$0080							;C2/1D1A: 09 80 00     ORA #$0080
	STA CharSpells.Flags,Y						;C2/1D1D: 99 3C 2F     STA $2F3C,Y
	BRA .NextSpell							;C2/1D20: 80 40        BRA $1D62
.CheckStatus
	LDA CharSpells.Flags,Y						;C2/1D22: B9 3C 2F     LDA $2F3C,Y
	AND #$FF7F	;clear bit 80h in flags, disabled bit?		;C2/1D25: 29 7F FF     AND #$FF7F
	STA CharSpells.Flags,Y						;C2/1D28: 99 3C 2F     STA $2F3C,Y
	LDA CharSpells.ID,Y						;C2/1D2B: B9 34 2D     LDA $2D34,Y
	AND #$00FF							;C2/1D2E: 29 FF 00     AND #$00FF
	CMP #$0080	;blue magic					;C2/1D31: C9 80 00     CMP #$0080
	BCS .NextSpell							;C2/1D34: B0 2C        BCS $1D62
	LDA CharSpells.Flags,Y						;C2/1D36: B9 3C 2F     LDA $2F3C,Y
	ORA $12		;from mute					;C2/1D39: 05 12        ORA $12
	ORA $14		;from toad					;C2/1D3B: 05 14        ORA $14
	ORA $16		;from void					;C2/1D3D: 05 16        ORA $16
	STA CharSpells.Flags,Y						;C2/1D3F: 99 3C 2F     STA $2F3C,Y
	LDA $16								;C2/1D42: A5 16        LDA $16
	BNE .NextSpell							;C2/1D44: D0 1C        BNE $1D62
	LDA $12								;C2/1D46: A5 12        LDA $12
	BNE .NextSpell							;C2/1D48: D0 18        BNE $1D62
	LDA $14								;C2/1D4A: A5 14        LDA $14
	BEQ .NextSpell							;C2/1D4C: F0 14        BEQ $1D62
	LDA CharSpells.ID,Y						;C2/1D4E: B9 34 2D     LDA $2D34,Y
	AND #$00FF							;C2/1D51: 29 FF 00     AND #$00FF
	CMP #$0029	;toad spell					;C2/1D54: C9 29 00     CMP #$0029
	BNE .NextSpell							;C2/1D57: D0 09        BNE $1D62
	LDA CharSpells.Flags,Y						;C2/1D59: B9 3C 2F     LDA $2F3C,Y
	AND #$FF7F	;re-enable toad spell if toad status		;C2/1D5C: 29 7F FF     AND #$FF7F
	STA CharSpells.Flags,Y						;C2/1D5F: 99 3C 2F     STA $2F3C,Y
.NextSpell
	INY 								;C2/1D62: C8           INY 
	INX 								;C2/1D63: E8           INX 
	CPX #$0082	;130 spell slots				;C2/1D64: E0 82 00     CPX #$0082
	BNE .DisableSpells						;C2/1D67: D0 9A        BNE $1D03


	TDC 								;C2/1D69: 7B           TDC 
	SEP #$20							;C2/1D6A: E2 20        SEP #$20
	LDA DisplayInfo.CurrentChar					;C2/1D6C: AD CC 41     LDA $41CC
	STA $24								;C2/1D6F: 85 24        STA $24
	LDA #$14	;20, size of CharCommands struct		;C2/1D71: A9 14        LDA #$14
	STA $25								;C2/1D73: 85 25        STA $25
	JSR Multiply_8bit						;C2/1D75: 20 F1 00     JSR $00F1
	TDC 								;C2/1D78: 7B           TDC 
	TAX 								;C2/1D79: AA           TAX 
	STX $0E								;C2/1D7A: 86 0E        STX $0E
	LDY $26								;C2/1D7C: A4 26        LDY $26
	REP #$20							;C2/1D7E: C2 20        REP #$20
.DisableCommands
	LDA CharCommands.ID,Y						;C2/1D80: B9 5C 37     LDA $375C,Y
	AND #$00FF							;C2/1D83: 29 FF 00     AND #$00FF
	STA $12		;command id					;C2/1D86: 85 12        STA $12
	BEQ .DisableCommand						;C2/1D88: F0 18        BEQ $1DA2
	ASL 								;C2/1D8A: 0A           ASL 
	TAX 								;C2/1D8B: AA           TAX 
	LDA ROMStatusDisableCommands,X					;C2/1D8C: BF E0 5C D1  LDA $D15CE0,X
	AND $10		;status 1/2					;C2/1D90: 25 10        AND $10
	BNE .DisableCommand						;C2/1D92: D0 0E        BNE $1DA2
	LDA $12		;command id					;C2/1D94: A5 12        LDA $12
	CMP #$0026	;show command					;C2/1D96: C9 26 00     CMP #$0026
	BEQ .EnableCommand						;C2/1D99: F0 12        BEQ $1DAD
	LDA $22		;status 3/4					;C2/1D9B: A5 22        LDA $22
	AND #$0100	;hidden						;C2/1D9D: 29 00 01     AND #$0100
	BEQ .EnableCommand						;C2/1DA0: F0 0B        BEQ $1DAD
.DisableCommand
	LDA CharCommands.Flags,Y					;C2/1DA2: B9 6C 37     LDA $376C,Y
	ORA #$0080	;disabled					;C2/1DA5: 09 80 00     ORA #$0080
	STA CharCommands.Flags,Y					;C2/1DA8: 99 6C 37     STA $376C,Y
	BRA .NextCommand						;C2/1DAB: 80 09        BRA $1DB6
.EnableCommand
	LDA CharCommands.Flags,Y					;C2/1DAD: B9 6C 37     LDA $376C,Y
	AND #$FF7F	;enabled					;C2/1DB0: 29 7F FF     AND #$FF7F
	STA CharCommands.Flags,Y					;C2/1DB3: 99 6C 37     STA $376C,Y
.NextCommand
	INY 								;C2/1DB6: C8           INY 
	INC $0E		;character index				;C2/1DB7: E6 0E        INC $0E
	LDA $0E								;C2/1DB9: A5 0E        LDA $0E
	CMP #$0004	;4 commands per character			;C2/1DBB: C9 04 00     CMP #$0004
	BNE .DisableCommands						;C2/1DBE: D0 C0        BNE $1D80
	TDC 								;C2/1DC0: 7B           TDC 
	SEP #$20							;C2/1DC1: E2 20        SEP #$20
	RTS 								;C2/1DC3: 60           RTS 

%org($C21DC4)
;Manage the ATB timer used for zombie/charm/berserk party members
;and set up their action when it is ready
%sub(HandleUncontrolledParty)
HandleUncontrolledParty:
	TDC 								;C2/1DC4: 7B           TDC 
	TAX         							;C2/1DC5: AA           TAX              
	STX $3D		;char index, used in subroutines also		;C2/1DC6: 86 3D        STX $3D
	STX $3F		;char offset					;C2/1DC8: 86 3F        STX $3F
.Loop
	LDX $3D								;C2/1DCA: A6 3D        LDX $3D
	LDA UncontrolledATB,X						;C2/1DCC: BD 04 7C     LDA $7C04,X
	BEQ .ActionReady						;C2/1DCF: F0 1A        BEQ $1DEB
	LDX $3F								;C2/1DD1: A6 3F        LDX $3F
	LDA CharStruct.Status3,X 					;C2/1DD3: BD 1C 20     LDA $201C,X      
	AND #$10	;stop						;C2/1DD6: 29 10        AND #$10
	BNE .Next   							;C2/1DD8: D0 43        BNE $1E1D        
	LDA CharStruct.Status2,X 					;C2/1DDA: BD 1B 20     LDA $201B,X      
	ORA CharStruct.AlwaysStatus2,X					;C2/1DDD: 1D 71 20     ORA $2071,X
	AND #$60	;sleep/paralyze					;C2/1DE0: 29 60        AND #$60
	BNE .Next   							;C2/1DE2: D0 39        BNE $1E1D        
	LDX $3D								;C2/1DE4: A6 3D        LDX $3D
	DEC UncontrolledATB,X						;C2/1DE6: DE 04 7C     DEC $7C04,X
	BRA .Next							;C2/1DE9: 80 32        BRA $1E1D

.ActionReady
	LDX $3F		;char offset					;C2/1DEB: A6 3F        LDX $3F
	LDA #$01							;C2/1DED: A9 01        LDA #$01
	STA CharStruct.CmdCancelled,X					;C2/1DEF: 9D 61 20     STA $2061,X
	LDA CharStruct.Status1,X 					;C2/1DF2: BD 1A 20     LDA $201A,X      
	ORA CharStruct.AlwaysStatus1,X					;C2/1DF5: 1D 70 20     ORA $2070,X
	AND #$02	;zombie						;C2/1DF8: 29 02        AND #$02
	BEQ +   							;C2/1DFA: F0 05        BEQ $1E01        
	JSR ZombieAction						;C2/1DFC: 20 2F 1E     JSR $1E2F
	BRA .Next							;C2/1DFF: 80 1C        BRA $1E1D
+	LDA CharStruct.Status2,X					;C2/1E01: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/1E04: 1D 71 20     ORA $2071,X
	AND #$10	;charm						;C2/1E07: 29 10        AND #$10
	BEQ +								;C2/1E09: F0 05        BEQ $1E10
	JSR CharmAction							;C2/1E0B: 20 62 1E     JSR $1E62
	BRA .Next							;C2/1E0E: 80 0D        BRA $1E1D
+	LDA CharStruct.Status2,X					;C2/1E10: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/1E13: 1D 71 20     ORA $2071,X
	AND #$08	;berserk					;C2/1E16: 29 08        AND #$08
	BEQ .Next							;C2/1E18: F0 03        BEQ $1E1D
	JSR BerserkAction						;C2/1E1A: 20 80 1F     JSR $1F80
.Next
	LDX $3F		;char offset					;C2/1E1D: A6 3F        LDX $3F
	JSR NextCharOffset   						;C2/1E1F: 20 E0 01     JSR $01E0       
	STX $3F								;C2/1E22: 86 3F        STX $3F
	INC $003D	;char index					;C2/1E24: EE 3D 00     INC $003D
	LDA $003D							;C2/1E27: AD 3D 00     LDA $003D
	CMP #$04	;4 characters					;C2/1E2A: C9 04        CMP #$04
	BNE .Loop							;C2/1E2C: D0 9C        BNE $1DCA
	RTS 								;C2/1E2E: 60           RTS 
%endsub()

%org($C21E2F)
;Param X = Char Offset, $3D = Char index
;sets up a fight command targetting a random party member
%sub(ZombieAction)
ZombieAction:
	LDA #$80							;C2/1E2F: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/1E31: 9D 56 20     STA $2056,X     
	LDA #$05	;fight						;C2/1E34: A9 05        LDA #$05
	STA CharStruct.Command,X					;C2/1E36: 9D 57 20     STA $2057,X     
	STZ CharStruct.MonsterTargets,X					;C2/1E39: 9E 58 20     STZ $2058,X
	STZ CharStruct.SelectedItem,X					;C2/1E3C: 9E 5A 20     STZ $205A,X
	STZ CharStruct.SecondActionFlag,X				;C2/1E3F: 9E 5B 20     STZ $205B,X
	STZ CharStruct.SecondCommand,X					;C2/1E42: 9E 5C 20     STZ $205C,X
	STZ CharStruct.SecondMonsterTargets,X				;C2/1E45: 9E 5D 20     STZ $205D,X
	STZ CharStruct.SecondPartyTargets,X				;C2/1E48: 9E 5E 20     STZ $205E,X
	STZ CharStruct.SecondSelectedItem,X				;C2/1E4B: 9E 5F 20     STZ $205F,X
	PHX 								;C2/1E4E: DA           PHX 
	TDC 								;C2/1E4F: 7B           TDC 
	TAX 								;C2/1E50: AA           TAX 
	LDA #$03							;C2/1E51: A9 03        LDA #$03
	JSR Random_X_A  ;0..3						;C2/1E53: 20 7C 00     JSR $007C       
	TAX 								;C2/1E56: AA           TAX 
	TDC 								;C2/1E57: 7B           TDC 
	JSR SetBit_X  							;C2/1E58: 20 D6 01     JSR $01D6       
	PLX 								;C2/1E5B: FA           PLX 
	STA CharStruct.PartyTargets,X	;fight random party member	;C2/1E5C: 9D 59 20     STA $2059,X     
	JMP QueueUncontrolledAction					;C2/1E5F: 4C B3 1F     JMP $1FB3
%endsub()

%org($C21E62)
;Param X = Char Offset, $3D = Char index, $3F = Char Offset
;50% chance: 	sets up a fight command targetting a random party member
;		or picks a random known white/black/time spell and casts with inverted targetting
%sub(CharmAction)
CharmAction:
	LDA CharStruct.EnableSpells,X					;C2/1E62: BD 3D 20     LDA $203D,X
	AND #$0F			;white magic			;C2/1E65: 29 0F        AND #$0F
	ORA CharStruct.EnableSpells+1,X	;black and time magic		;C2/1E67: 1D 3E 20     ORA $203E,X
	BEQ .Fight							;C2/1E6A: F0 07        BEQ $1E73
	JSR Random_0_99							;C2/1E6C: 20 A2 02     JSR $02A2       
	CMP #$32	;50% chance of spell				;C2/1E6F: C9 32        CMP #$32
	BCC .Magic     							;C2/1E71: 90 35        BCC $1EA8       
.Fight
	LDX $3F		;char offset					;C2/1E73: A6 3F        LDX $3F
	LDA #$80							;C2/1E75: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/1E77: 9D 56 20     STA $2056,X
	LDA #$05	;fight						;C2/1E7A: A9 05        LDA #$05
	STA CharStruct.Command,X					;C2/1E7C: 9D 57 20     STA $2057,X
	STZ CharStruct.MonsterTargets,X					;C2/1E7F: 9E 58 20     STZ $2058,X
	STZ CharStruct.SelectedItem,X					;C2/1E82: 9E 5A 20     STZ $205A,X
	STZ CharStruct.SecondActionFlag,X				;C2/1E85: 9E 5B 20     STZ $205B,X
	STZ CharStruct.SecondCommand,X					;C2/1E88: 9E 5C 20     STZ $205C,X
	STZ CharStruct.SecondMonsterTargets,X				;C2/1E8B: 9E 5D 20     STZ $205D,X
	STZ CharStruct.SecondPartyTargets,X				;C2/1E8E: 9E 5E 20     STZ $205E,X
	STZ CharStruct.SecondSelectedItem,X				;C2/1E91: 9E 5F 20     STZ $205F,X
	PHX 								;C2/1E94: DA           PHX 
	TDC 								;C2/1E95: 7B           TDC 
	TAX 								;C2/1E96: AA           TAX 
	LDA #$03							;C2/1E97: A9 03        LDA #$03
	JSR Random_X_A    ;0..3						;C2/1E99: 20 7C 00     JSR $007C       
	TAX 								;C2/1E9C: AA           TAX 
	TDC 								;C2/1E9D: 7B           TDC 
	JSR SetBit_X       						;C2/1E9E: 20 D6 01     JSR $01D6       
	PLX 								;C2/1EA1: FA           PLX 
	STA CharStruct.PartyTargets,X	;fight random party member	;C2/1EA2: 9D 59 20     STA $2059,X
	JMP .QueueUncontrolledAction					;C2/1EA5: 4C 7D 1F     JMP $1F7D

.Magic
	LDA $3D		;char index					;C2/1EA8: A5 3D        LDA $3D
	TAX 								;C2/1EAA: AA           TAX 
	STX $2A								;C2/1EAB: 86 2A        STX $2A
	LDX #sizeof(CharSpells)	;650, size of CharSpells struct		;C2/1EAD: A2 8A 02     LDX #$028A      
	STX $2C								;C2/1EB0: 86 2C        STX $2C
	JSR Multiply_16bit    						;C2/1EB2: 20 D2 00     JSR $00D2       
	LDX $2E								;C2/1EB5: A6 2E        LDX $2E
	STX SpellOffsetRandom						;C2/1EB7: 86 41        STX $41
	STZ $0E								;C2/1EB9: 64 0E        STZ $0E
.FindAnySpell		;checks if any spells are learned
	LDA CharSpells.ID+18,X	;starts at first white spell		;C2/1EBB: BD 46 2D     LDA $2D46,X
	CMP #$46		;Quick spell				;C2/1EBE: C9 46        CMP #$46
	BEQ .NextSpell							;C2/1EC0: F0 04        BEQ $1EC6
	CMP #$FF		;empty spell slot			;C2/1EC2: C9 FF        CMP #$FF
	BNE .TryRandomSpell						;C2/1EC4: D0 0B        BNE $1ED1
.NextSpell
	INX 								;C2/1EC6: E8           INX 
	INC $0E								;C2/1EC7: E6 0E        INC $0E
	LDA $0E								;C2/1EC9: A5 0E        LDA $0E
	CMP #$36							;C2/1ECB: C9 36        CMP #$36
	BNE .FindAnySpell						;C2/1ECD: D0 EC        BNE $1EBB
	BRA .Fight		;no spells, hit something instead	;C2/1ECF: 80 A2        BRA $1E73

.TryRandomSpell
	LDX #$0012		;first white spell			;C2/1ED1: A2 12 00     LDX #$0012
	LDA #$47		;last time spell			;C2/1ED4: A9 47        LDA #$47
	JSR Random_X_A  	;random white/black/time spell		;C2/1ED6: 20 7C 00     JSR $007C       
	REP #$20							;C2/1ED9: C2 20        REP #$20
	ADC SpellOffsetRandom						;C2/1EDB: 65 41        ADC $41
	TAX 								;C2/1EDD: AA           TAX 
	TDC 								;C2/1EDE: 7B           TDC 
	SEP #$20							;C2/1EDF: E2 20        SEP #$20
	LDA CharSpells.ID,X						;C2/1EE1: BD 34 2D     LDA $2D34,X
	CMP #$FF		;empty spell slot			;C2/1EE4: C9 FF        CMP #$FF
	BEQ .TryRandomSpell	;keep trying until we hit a known spell	;C2/1EE6: F0 E9        BEQ $1ED1
	CMP #$46		;quick spell				;C2/1EE8: C9 46        CMP #$46
	BEQ .TryRandomSpell	;is no good either			;C2/1EEA: F0 E5        BEQ $1ED1

	PHA 			;holds known random spell		;C2/1EEC: 48           PHA 
	REP #$20							;C2/1EED: C2 20        REP #$20
	JSR ShiftMultiply_8						;C2/1EEF: 20 B6 01     JSR $01B6       
	TAX 								;C2/1EF2: AA           TAX 
	TDC 								;C2/1EF3: 7B           TDC 
	SEP #$20							;C2/1EF4: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/1EF6: BF 80 0B D1  LDA $D10B80,X
	STA TempTargetting	;temp area				;C2/1EFA: 8D A0 26     STA $26A0
	TDC 								;C2/1EFD: 7B           TDC 
	TAY 								;C2/1EFE: A8           TAY 
	STY $16			;target bits				;C2/1EFF: 84 16        STY $16
	LDA TempTargetting						;C2/1F01: AD A0 26     LDA $26A0
	BNE .CheckTargetting						;C2/1F04: D0 12        BNE $1F18
.TargetSelf
	REP #$20							;C2/1F06: C2 20        REP #$20
	LDA $3F			;Char Offset				;C2/1F08: A5 3F        LDA $3F
	JSR ShiftDivide_128	;char index (could've just loaded that)	;C2/1F0A: 20 BB 01     JSR $01BB       
	TAX 								;C2/1F0D: AA           TAX 
	TDC 								;C2/1F0E: 7B           TDC 
	SEP #$20							;C2/1F0F: E2 20        SEP #$20
	JSR SetBit_X     	;target self if no targetting info	;C2/1F11: 20 D6 01     JSR $01D6       
	STA $16								;C2/1F14: 85 16        STA $16
	BRA .TargetReady						;C2/1F16: 80 3C        BRA $1F54
.CheckTargetting
	AND #$40		;hits all 				;C2/1F18: 29 40        AND #$40
	BNE .TargetsAll							;C2/1F1A: D0 27        BNE $1F43
	LDA TempTargetting						;C2/1F1C: AD A0 26     LDA $26A0
	AND #$08		;targets enemy by default		;C2/1F1F: 29 08        AND #$08
	BNE .TargetsEnemy						;C2/1F21: D0 10        BNE $1F33
.TargetsOther			;assumed to normally target party, now targets monsters
	TDC 								;C2/1F23: 7B           TDC 
	TAX 								;C2/1F24: AA           TAX 
	LDA #$07							;C2/1F25: A9 07        LDA #$07
	JSR Random_X_A	     	;random monster 0..7			;C2/1F27: 20 7C 00     JSR $007C       
	TAX 								;C2/1F2A: AA           TAX 
	TDC 								;C2/1F2B: 7B           TDC 
	JSR SetBit_X   							;C2/1F2C: 20 D6 01     JSR $01D6       
	STA $17			;monster target				;C2/1F2F: 85 17        STA $17
	BRA .TargetReady						;C2/1F31: 80 21        BRA $1F54
.TargetsEnemy			;normally targets enemy, now targets party
	TDC 								;C2/1F33: 7B           TDC 
	TAX 								;C2/1F34: AA           TAX 
	LDA #$03							;C2/1F35: A9 03        LDA #$03
	JSR Random_X_A    	;random party 0..3			;C2/1F37: 20 7C 00     JSR $007C       
	TAX 								;C2/1F3A: AA           TAX 
	TDC 								;C2/1F3B: 7B           TDC 
	JSR SetBit_X    						;C2/1F3C: 20 D6 01     JSR $01D6       
	STA $16			;party target				;C2/1F3F: 85 16        STA $16
	BRA .TargetReady						;C2/1F41: 80 11        BRA $1F54
.TargetsAll			
	LDA TempTargetting						;C2/1F43: AD A0 26     LDA $26A0
	AND #$08		;targets enemy by default		;C2/1F46: 29 08        AND #$08
	BNE +								;C2/1F48: D0 06        BNE $1F50
	LDA #$FF							;C2/1F4A: A9 FF        LDA #$FF
	STA $17								;C2/1F4C: 85 17        STA $17
	BRA .TargetReady						;C2/1F4E: 80 04        BRA $1F54
+	LDA #$F0		;target all party members		;C2/1F50: A9 F0        LDA #$F0
	STA $16								;C2/1F52: 85 16        STA $16
.TargetReady
	LDX $3F			;char Offset				;C2/1F54: A6 3F        LDX $3F
	PLA 			;random known spell			;C2/1F56: 68           PLA 
	STA CharStruct.SelectedItem,X					;C2/1F57: 9D 5A 20     STA $205A,X
	LDA $16			;party targets				;C2/1F5A: A5 16        LDA $16
	STA CharStruct.PartyTargets,X					;C2/1F5C: 9D 59 20     STA $2059,X
	LDA $17			;monster targets			;C2/1F5F: A5 17        LDA $17
	STA CharStruct.MonsterTargets,X					;C2/1F61: 9D 58 20     STA $2058,X
	LDA #$21		;magic + costs mp			;C2/1F64: A9 21        LDA #$21
	STA CharStruct.ActionFlag,X					;C2/1F66: 9D 56 20     STA $2056,X
	LDA #$2C		;first magic command 			;C2/1F69: A9 2C        LDA #$2C
	STA CharStruct.Command,X					;C2/1F6B: 9D 57 20     STA $2057,X
	STZ CharStruct.SecondActionFlag,X				;C2/1F6E: 9E 5B 20     STZ $205B,X
	STZ CharStruct.SecondCommand,X					;C2/1F71: 9E 5C 20     STZ $205C,X
	STZ CharStruct.SecondMonsterTargets,X				;C2/1F74: 9E 5D 20     STZ $205D,X
	STZ CharStruct.SecondPartyTargets,X				;C2/1F77: 9E 5E 20     STZ $205E,X
	STZ CharStruct.SecondSelectedItem,X				;C2/1F7A: 9E 5F 20     STZ $205F,X
.QueueUncontrolledAction
	JMP QueueUncontrolledAction					;C2/1F7D: 4C B3 1F     JMP $1FB3
%endsub()

%org($C21F80)
;Param X = Char Offset, $3D = Char index
;sets up a fight command targetting a random monster
%sub(BerserkAction)
BerserkAction:
	LDA #$80							;C2/1F80: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/1F82: 9D 56 20     STA $2056,X
	LDA #$05	;fight						;C2/1F85: A9 05        LDA #$05
	STA CharStruct.Command,X					;C2/1F87: 9D 57 20     STA $2057,X
	STZ CharStruct.PartyTargets,X					;C2/1F8A: 9E 59 20     STZ $2059,X
	STZ CharStruct.SelectedItem,X					;C2/1F8D: 9E 5A 20     STZ $205A,X
	STZ CharStruct.SecondActionFlag,X				;C2/1F90: 9E 5B 20     STZ $205B,X
	STZ CharStruct.SecondCommand,X					;C2/1F93: 9E 5C 20     STZ $205C,X
	STZ CharStruct.SecondMonsterTargets,X				;C2/1F96: 9E 5D 20     STZ $205D,X
	STZ CharStruct.SecondPartyTargets,X				;C2/1F99: 9E 5E 20     STZ $205E,X
	STZ CharStruct.SecondSelectedItem,X				;C2/1F9C: 9E 5F 20     STZ $205F,X
	PHX 								;C2/1F9F: DA           PHX 
	TDC 								;C2/1FA0: 7B           TDC 
	TAX 								;C2/1FA1: AA           TAX 
	LDA #$07							;C2/1FA2: A9 07        LDA #$07
	JSR Random_X_A	;0..7 random monster				;C2/1FA4: 20 7C 00     JSR $007C       
	TAX 								;C2/1FA7: AA           TAX 
	TDC 								;C2/1FA8: 7B           TDC 
	JSR SetBit_X   							;C2/1FA9: 20 D6 01     JSR $01D6       
	PLX 								;C2/1FAC: FA           PLX 
	STA CharStruct.MonsterTargets,X					;C2/1FAD: 9D 58 20     STA $2058,X
	JMP QueueUncontrolledAction					;C2/1FB0: 4C B3 1F     JMP $1FB3
%endsub()

%org($C21FB3)
;Param $3D = char index
;Sets character's queued action to fire on the next ATB tick, and reset their uncontrolled ATB for their next turn
QueueUncontrolledAction:								
	LDA $3D		;char index					;C2/1FB3: A5 3D        LDA $3D
	JSR ResetATB   	;also sets Y = timer offset			;C2/1FB5: 20 82 24     JSR $2482       
	LDA $3D								;C2/1FB8: A5 3D        LDA $3D
	TAX 								;C2/1FBA: AA           TAX 
	LDA CurrentTimer.ATB,Y 						;C2/1FBB: B9 7F 3D     LDA $3D7F,Y     
	CMP #$7F							;C2/1FBE: C9 7F        CMP #$7F
	BCC +								;C2/1FC0: 90 02        BCC $1FC4
	LDA #$7F	;max ATB 127					;C2/1FC2: A9 7F        LDA #$7F        
+	STA UncontrolledATB,X 						;C2/1FC4: 9D 04 7C     STA $7C04,X     
	LDA #$01	;action on next ATB tick			;C2/1FC7: A9 01        LDA #$01
	STA CurrentTimer.ATB,Y 						;C2/1FC9: 99 7F 3D     STA $3D7F,Y     
	LDA #$41    	;waiting for delayed action			;C2/1FCC: A9 41        LDA #$41        
	STA EnableTimer.ATB,Y 						;C2/1FCE: 99 FB 3C     STA $3CFB,Y     
	RTS								;C2/1FD1: 60           RTS 
	
%org($C21FD2)
;Randomizes a table of combatant numbers, also initializes global timers
RandomizeOrder:
	LDA CurrentlyReacting							;C2/1FD2: AD 4E 47     LDA $474E	
	BNE +									;C2/1FD5: D0 03        BNE $1FDA	
	JSR GlobalTimers							;C2/1FD7: 20 90 20     JSR $2090	
+	TDC 									;C2/1FDA: 7B           TDC 		
	TAX 									;C2/1FDB: AA           TAX 		
	DEC 									;C2/1FDC: 3A           DEC 		
										;:					
-	STA RandomOrder,X							;C2/1FDD: 9D 93 3E     STA $3E93,X
	INX 									;C2/1FE0: E8           INX 		
	CPX #$000C								;C2/1FE1: E0 0C 00     CPX #$000C	
	BNE -									;C2/1FE4: D0 F7        BNE $1FDD	
										;.					
	TDC 									;C2/1FE6: 7B           TDC 		
	TAY 			;slot for writing				;C2/1FE7: A8           TAY 		

.RandomizeOrder														
	TDC 									;C2/1FE8: 7B           TDC 		
	TAX 			;slot for reading				;C2/1FE9: AA           TAX 		
	LDA #$0B								;C2/1FEA: A9 0B        LDA #$0B		
	JSR Random_X_A		;0..11						;C2/1FEC: 20 7C 00     JSR $007C	
	STA $0E									;C2/1FEF: 85 0E        STA $0E		
	LDX #$0000								;C2/1FF1: A2 00 00     LDX #$0000	
										;:					
.CheckValueInUse		;see if we've used this number yet
	LDA $0E									;C2/1FF4: A5 0E        LDA $0E		
	CMP RandomOrder,X							;C2/1FF6: DD 93 3E     CMP $3E93,X	
	BEQ .Next		;already used, try another 			;C2/1FF9: F0 0A        BEQ $2005	
	INX 									;C2/1FFB: E8           INX 		
	CPX #$000C								;C2/1FFC: E0 0C 00     CPX #$000C	
	BNE .CheckValueInUse							;C2/1FFF: D0 F3        BNE $1FF4	
										;.					
	STA RandomOrder,Y	;if not, save it 				;C2/2001: 99 93 3E     STA $3E93,Y	
	INY 			;and select next writing slot			;C2/2004: C8           INY 		
										;:					
 .Next
	CPY #$000C		;12 combatant slots				;C2/2005: C0 0C 00     CPY #$000C	
	BNE .RandomizeOrder							;C2/2008: D0 DE        BNE $1FE8	
										;.					
	RTS									;C2/200A: 60           RTS

%org($C2200B)
;Updates Status/ATB timers for all combatants
;may skip updates depending on stop/etc.
UpdateTimers:
	JSR GlobalTimers   						;C2/200B: 20 90 20     JSR $2090      
	TDC 								;C2/200E: 7B           TDC 
	TAX 								;C2/200F: AA           TAX 
	STX $0A     		;char index				;C2/2010: 86 0A        STX $0A        
.Loop	TDC 								;C2/2012: 7B           TDC 
	TAY 								;C2/2013: A8           TAY 
	STY $0C     		;timer index 				;C2/2014: 84 0C        STY $0C        
	LDA $0A								;C2/2016: A5 0A        LDA $0A
	JSR GetTimerOffset  						;C2/2018: 20 07 02     JSR $0207      
	TYX 			;X = Timer Offset			;C2/201B: BB           TYX 
	LDY $0A								;C2/201C: A4 0A        LDY $0A
	LDA ActiveParticipants,Y					;C2/201E: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextChar							;C2/2021: F0 29        BEQ $204C
	LDA PauseTimerChecks,Y						;C2/2023: B9 9F 3E     LDA $3E9F,Y
	BNE .NextChar							;C2/2026: D0 24        BNE $204C
	LDA CurrentlyReacting						;C2/2028: AD 4E 47     LDA $474E
	BNE +								;C2/202B: D0 05        BNE $2032
	LDA QuickTimeFrozen,Y						;C2/202D: B9 AB 3E     LDA $3EAB,Y
	BNE .NextChar							;C2/2030: D0 1A        BNE $204C
+	JSR UpdateTimer 	;first timer is stop			;C2/2032: 20 55 20     JSR $2055      
	LDA $08			;check if stop active			;C2/2035: A5 08        LDA $08
	BNE .NextChar  		;don't process other timers if stopped	;C2/2037: D0 13        BNE $204C      
	LDY #$0008  		;process 8 more status timers		;C2/2039: A0 08 00     LDY #$0008     
-	JSR UpdateTimer  						;C2/203C: 20 55 20     JSR $2055      
	DEY 								;C2/203F: 88           DEY 
	BNE -								;C2/2040: D0 FA        BNE $203C
	JSR UpdateTimer 	;one more status timer (paralyze)	;C2/2042: 20 55 20     JSR $2055      
	LDA $08			;check if paralyze active		;C2/2045: A5 08        LDA $08
	BNE .NextChar  							;C2/2047: D0 03        BNE $204C      
	JSR UpdateTimer  	;advance ATB timer if not paralyzed	;C2/2049: 20 55 20     JSR $2055      
.NextChar
	INC $0A     		;next char index			;C2/204C: E6 0A        INC $0A        
	LDA $0A								;C2/204E: A5 0A        LDA $0A
	CMP #$0C		;12 combatants				;C2/2050: C9 0C        CMP #$0C
	BNE .Loop							;C2/2052: D0 BE        BNE $2012
	RTS 								;C2/2054: 60           RTS 


%org($C22055)
;Advances a status/atb timer if that status is supposed to be checked this tick
;sets up for the next call to check the next timer
;Params: $0C = timer index, X = timer offset
;Outputs: $08 = timer triggered
UpdateTimer:								;
	STZ $08    	;timer triggered flag				;C2/2055: 64 08        STZ $08       
	PHY 								;C2/2057: 5A           PHY 
	LDY $0C		;timer index					;C2/2058: A4 0C        LDY $0C
	LDA !ProcessTimer,Y	;should process this timer this tick?	;C2/205A: B9 E4 3E     LDA $3EE4,Y
	BEQ .Finish							;C2/205D: F0 2C        BEQ $208B     
	CPY #$000A	;ProcessTimer.ATB				;C2/205F: C0 0A 00     CPY #$000A
	BEQ +								;C2/2062: F0 05        BEQ $2069     
	LDA CurrentlyReacting						;C2/2064: AD 4E 47     LDA $474E
	BNE .Finish							;C2/2067: D0 22        BNE $208B
+	LDA !EnableTimer,X	;is it enabled?				;C2/2069: BD F1 3C     LDA $3CF1,X
	BEQ .Finish  							;C2/206C: F0 1D        BEQ $208B     
	BMI .TimerActive  	;check the 80h timer flag		;C2/206E: 30 15        BMI $2085     
	LDA !CurrentTimer,X						;C2/2070: BD 75 3D     LDA $3D75,X   
	BEQ .FlagTimer							;C2/2073: F0 08        BEQ $207D
	DEC !CurrentTimer,X						;C2/2075: DE 75 3D     DEC $3D75,X
	LDA !CurrentTimer,X						;C2/2078: BD 75 3D     LDA $3D75,X
	BNE .TimerActive 						;C2/207B: D0 08        BNE $2085     
.FlagTimer		;flag EnableTimer when CurrentTimer hits 0
	LDA !EnableTimer,X						;C2/207D: BD F1 3C     LDA $3CF1,X
	ORA #$81							;C2/2080: 09 81        ORA #$81
	STA !EnableTimer,X						;C2/2082: 9D F1 3C     STA $3CF1,X   
.TimerActive
	LDA $0C								;C2/2085: A5 0C        LDA $0C
	BNE +		;doesn't branch anywhere regardless		;C2/2087: D0 00        BNE $2089
+	INC $08    	;timer triggered flag				;C2/2089: E6 08        INC $08       
.Finish
	PLY 		;restore original Y				;C2/208B: 7A           PLY 
	INX 		;next timer (in offset)				;C2/208C: E8           INX 
	INC $0C		;next timer index				;C2/208D: E6 0C        INC $0C
	RTS 								;C2/208F: 60           RTS 

%org($C22090)
;Decreases global status timers, then flags and reset those that trigger
;sets ProcessTimer to indicate that status should be updated this tick
GlobalTimers:
	TDC 									;C2/2090: 7B           TDC 		
	TAX 									;C2/2091: AA           TAX 		

.DecTimer														
	LDA !GlobalTimer,X							;C2/2092: BD D9 3E     LDA $3ED9,X	
	BEQ .Triggered								;C2/2095: F0 08        BEQ $209F	
	DEC !GlobalTimer,X							;C2/2097: DE D9 3E     DEC $3ED9,X	
	STZ !ProcessTimer,X							;C2/209A: 9E E4 3E     STZ $3EE4,X	
	BRA ++									;C2/209D: 80 0C        BRA $20AB	

.Triggered								
	LDA #$01								;C2/209F: A9 01        LDA #$01		
	STA !ProcessTimer,X		;flag timer for processing		;C2/20A1: 9D E4 3E     STA $3EE4,X	
	LDA !ROMGlobalTimer,X		;reset timer from rom			;C2/20A4: BF 76 29 D1  LDA $D12976,X	
	STA !GlobalTimer,X							;C2/20A8: 9D D9 3E     STA $3ED9,X	
								;:
++	INX 									;C2/20AB: E8           INX 		
	CPX #$000B			;11 timers				;C2/20AC: E0 0B 00     CPX #$000B	
	BNE .DecTimer								;C2/20AF: D0 E1        BNE $2092	
										;.					
	RTS 									;C2/20B1: 60           RTS 

%org($C220B2)
;Attempts to find one character for each timer for whom that timer has ended (EnableTimer bit 80h)
;Check is in a fixed random order that's set up at battle init
;but subsequent runs will continue after the last character checked for each timer so it's somewhat fair
FindEndedTimers:
	TDC 								;C2/20B2: 7B           TDC 
	TAX 								;C2/20B3: AA           TAX 
	STX $08			;timer index				;C2/20B4: 86 08        STX $08
	TAY 								;C2/20B6: A8           TAY 
-	STA !TimerEnded,Y    						;C2/20B7: 99 88 3E     STA $3E88,Y     
	INY 								;C2/20BA: C8           INY 
	CPY #$000B							;C2/20BB: C0 0B 00     CPY #$000B
	BNE -								;C2/20BE: D0 F7        BNE $20B7
.TimerLoop	;for each timer, loop finds the first character for whom that timer ended, checking in a "random" order
	TDC 								;C2/20C0: 7B           TDC 
	TAX 								;C2/20C1: AA           TAX 
	STX $0A			;char count				;C2/20C2: 86 0A        STX $0A
	LDX $08			;timer index				;C2/20C4: A6 08        LDX $08
	LDA !RandomOrderIndex,X						;C2/20C6: BD 7D 3E     LDA $3E7D,X
	PHA 			;original RandomOrderIndex		;C2/20C9: 48           PHA 
.CharLoop	;searches characters in a "random" order
	LDX $08			;timer index				;C2/20CA: A6 08        LDX $08
	LDA !RandomOrderIndex,X						;C2/20CC: BD 7D 3E     LDA $3E7D,X
	TAX 								;C2/20CF: AA           TAX 
	LDA RandomOrder,X						;C2/20D0: BD 93 3E     LDA $3E93,X
	STA $0C			;char index				;C2/20D3: 85 0C        STA $0C
	TAX 								;C2/20D5: AA           TAX 
	LDA PauseTimerChecks,X						;C2/20D6: BD 9F 3E     LDA $3E9F,X
	BNE .NextChar							;C2/20D9: D0 72        BNE $214D
	LDA CurrentlyReacting						;C2/20DB: AD 4E 47     LDA $474E
	BNE +								;C2/20DE: D0 05        BNE $20E5
	LDA QuickTimeFrozen,X						;C2/20E0: BD AB 3E     LDA $3EAB,X
	BNE .NextChar							;C2/20E3: D0 68        BNE $214D
+	LDA $0C			;char index				;C2/20E5: A5 0C        LDA $0C
	JSR GetTimerOffset      ;Y = Timer Offset			;C2/20E7: 20 07 02     JSR $0207      
	TYA 								;C2/20EA: 98           TYA 
	CLC 								;C2/20EB: 18           CLC 
	ADC $08								;C2/20EC: 65 08        ADC $08
	TAX 			;timer offset + index			;C2/20EE: AA           TAX 
	LDA !EnableTimer,X						;C2/20EF: BD F1 3C     LDA $3CF1,X
	BPL .NextChar		;80h must be set to contiue		;C2/20F2: 10 59        BPL $214D
	LDA $0C								;C2/20F4: A5 0C        LDA $0C
	TAY 								;C2/20F6: A8           TAY 
	LDA ActiveParticipants,Y					;C2/20F7: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextChar							;C2/20FA: F0 51        BEQ $214D
	LDA $08			;timer index				;C2/20FC: A5 08        LDA $08
	CMP #$01		;poison					;C2/20FE: C9 01        CMP #$01
	BEQ .PoisonCountRegen						;C2/2100: F0 08        BEQ $210A
	CMP #$03		;countdown				;C2/2102: C9 03        CMP #$03
	BEQ .PoisonCountRegen						;C2/2104: F0 04        BEQ $210A
	CMP #$07		;regen					;C2/2106: C9 07        CMP #$07
	BNE .EndTimer							;C2/2108: D0 25        BNE $212F

.PoisonCountRegen	;skips ending timer for these status if they're also erased/hidden/jumping
	PHX 		;timer offset + index				;C2/210A: DA           PHX 
	LDX $08								;C2/210B: A6 08        LDX $08
	LDA !RandomOrderIndex,X						;C2/210D: BD 7D 3E     LDA $3E7D,X
	TAX 								;C2/2110: AA           TAX 
	LDA RandomOrder,X						;C2/2111: BD 93 3E     LDA $3E93,X
	REP #$20							;C2/2114: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/2116: 20 B2 01     JSR $01B2     
	TAX 								;C2/2119: AA           TAX 
	TDC 								;C2/211A: 7B           TDC 
	SEP #$20							;C2/211B: E2 20        SEP #$20
	LDA CharStruct.Status4,X					;C2/211D: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/2120: 29 81        AND #$81
	BNE .NextCharPLX						;C2/2122: D0 07        BNE $212B
	LDA CharStruct.CmdStatus,X					;C2/2124: BD 1E 20     LDA $201E,X
	AND #$10	;jumping					;C2/2127: 29 10        AND #$10
	BEQ .EndTimerPLX						;C2/2129: F0 03        BEQ $212E
.NextCharPLX
	PLX 								;C2/212B: FA           PLX 
	BRA .NextChar							;C2/212C: 80 1F        BRA $214D

.EndTimerPLX
	PLX 		;timer offset + index				;C2/212E: FA           PLX 
.EndTimer		;sets flag that timer has ended, so effects can be applied later
	PLA 								;C2/212F: 68           PLA 
	LDA !EnableTimer,X						;C2/2130: BD F1 3C     LDA $3CF1,X
	AND #$7E	;clear $81					;C2/2133: 29 7E        AND #$7E
	STA !EnableTimer,X						;C2/2135: 9D F1 3C     STA $3CF1,X
	LDX $08		;timer index					;C2/2138: A6 08        LDX $08
	PHX 								;C2/213A: DA           PHX 
	LDA #$01	;flag that we found someone timer ended for	;C2/213B: A9 01        LDA #$01
	STA !TimerEnded,X						;C2/213D: 9D 88 3E     STA $3E88,X
	LDA !RandomOrderIndex,X						;C2/2140: BD 7D 3E     LDA $3E7D,X
	TAX 								;C2/2143: AA           TAX 
	LDA RandomOrder,X						;C2/2144: BD 93 3E     LDA $3E93,X
	PLX 		;timer index					;C2/2147: FA           PLX 
	STA !TimerReadyChar,X	;which character had their timer end	;C2/2148: 9D B7 3E     STA $3EB7,X
	BRA .NextTimer	;don't check any more characters for this timer	;C2/214B: 80 1E        BRA $216B

.NextChar	;this character's timer didn't end or isn't eligable, 
		;keep looking until all have been checked or one is found
	LDX $08		;timer index					;C2/214D: A6 08        LDX $08
	INC !RandomOrderIndex,X						;C2/214F: FE 7D 3E     INC $3E7D,X
	LDA !RandomOrderIndex,X						;C2/2152: BD 7D 3E     LDA $3E7D,X
	CMP #$0C	;reset index at 12				;C2/2155: C9 0C        CMP #$0C
	BNE +								;C2/2157: D0 03        BNE $215C
	STZ !RandomOrderIndex,X						;C2/2159: 9E 7D 3E     STZ $3E7D,X
+	INC $0A        	;char count					;C2/215C: E6 0A        INC $0A       
	LDA $0A								;C2/215E: A5 0A        LDA $0A
	CMP #$0C	;12 chars					;C2/2160: C9 0C        CMP #$0C
	BEQ +								;C2/2162: F0 03        BEQ $2167
	JMP .CharLoop							;C2/2164: 4C CA 20     JMP $20CA
+	PLA 		;original RandomOrderIndex			;C2/2167: 68           PLA 
	STA !RandomOrderIndex,X						;C2/2168: 9D 7D 3E     STA $3E7D,X
.NextTimer	
	INC $08        	;next timer index				;C2/216B: E6 08        INC $08       
	LDA $08								;C2/216D: A5 08        LDA $08
	CMP #$0B	;11 timers					;C2/216F: C9 0B        CMP #$0B
	BEQ .Ret							;C2/2171: F0 03        BEQ $2176
	JMP .TimerLoop							;C2/2173: 4C C0 20     JMP $20C0
.Ret	RTS 								;C2/2176: 60           RTS 

%org($C22177)
ApplyTimerEffects:
	TDC 								;C2/2177: 7B           TDC 
	TAX 								;C2/2178: AA           TAX 
	STX ProcessingTimer						;C2/2179: 8E CE 3E     STX $3ECE
.Loop
	LDX ProcessingTimer						;C2/217C: AE CE 3E     LDX $3ECE
	LDA !TimerEnded,X						;C2/217F: BD 88 3E     LDA $3E88,X
	BEQ .NextTimer 							;C2/2182: F0 26        BEQ $21AA     
	INC !RandomOrderIndex,X						;C2/2184: FE 7D 3E     INC $3E7D,X
	LDA !RandomOrderIndex,X						;C2/2187: BD 7D 3E     LDA $3E7D,X   
	CMP #$0C		;12 chars				;C2/218A: C9 0C        CMP #$0C
	BNE +								;C2/218C: D0 03        BNE $2191
	STZ !RandomOrderIndex,X						;C2/218E: 9E 7D 3E     STZ $3E7D,X
+	LDA !TimerReadyChar,X						;C2/2191: BD B7 3E     LDA $3EB7,X
	JSR GetTimerOffset    	;sets Y to timer offset			;C2/2194: 20 07 02     JSR $0207     
	LDA !TimerReadyChar,X						;C2/2197: BD B7 3E     LDA $3EB7,X
	JSR CalculateCharOffset   					;C2/219A: 20 EC 01     JSR $01EC     
	LDA ProcessingTimer						;C2/219D: AD CE 3E     LDA $3ECE
	BEQ .TimerEffect    	;timer 0 is stop, skips below check	;C2/21A0: F0 05        BEQ $21A7     
	LDA !EnableTimer,Y	;bits 80h and 01 are cleared prev	;C2/21A2: B9 F1 3C     LDA $3CF1,Y
	BNE .NextTimer    	;skip effect if any other bits set	;C2/21A5: D0 03        BNE $21AA     
.TimerEffect
	JSR DispatchTimerEffect						;C2/21A7: 20 B5 21     JSR $21B5     
.NextTimer
	INC ProcessingTimer  						;C2/21AA: EE CE 3E     INC $3ECE     
	LDA ProcessingTimer						;C2/21AD: AD CE 3E     LDA $3ECE
	CMP #$0B		;11 timers				;C2/21B0: C9 0B        CMP #$0B
	BNE .Loop							;C2/21B2: D0 C8        BNE $217C
	RTS 								;C2/21B4: 60           RTS 

%org($C221B5)
;uses a jump table to call an appropriate timer effect routine
;Params: Y = timer offset (used in the effect routines)
DispatchTimerEffect:
	LDA ProcessingTimer  	    					;C2/21B5: AD CE 3E     LDA $3ECE     
	ASL 								;C2/21B8: 0A           ASL 
	TAX 								;C2/21B9: AA           TAX 
	LDA TimerEffectJumpTable,X					;C2/21BA: BF CD 21 C2  LDA $C221CD,X 
	STA $08								;C2/21BE: 85 08        STA $08
	LDA TimerEffectJumpTable+1,X					;C2/21C0: BF CE 21 C2  LDA $C221CE,X
	STA $09								;C2/21C4: 85 09        STA $09
	LDA.b #bank(TimerEffectJumpTable)				;C2/21C6: A9 C2        LDA #$C2
	STA $0A								;C2/21C8: 85 0A        STA $0A
	JML [$0008]							;C2/21CA: DC 08 00     JML [$0008]

%org($C221CD)
TimerEffectJumpTable:							;C2/21CD:              .DW $21E3, $21EE, $222A, $2235, $224E, $2259, $2264, $22AD
dw TimerEffectStop							;C2/21DD:              .DW $2319, $237C, $238F
dw TimerEffectPoison	
dw TimerEffectReflect 
dw TimerEffectCountdown
dw TimerEffectMute   
dw TimerEffectHPLeak  
dw TimerEffectOld     
dw TimerEffectRegen   
dw TimerEffectSing	
dw TimerEffectParalyze
dw TimerEffectATB

%org($C221E3)
TimerEffectStop:
	LDX AttackerOffset						;C2/21E3: A6 32        LDX $32        
	LDA CharStruct.Status3,X 					;C2/21E5: BD 1C 20     LDA $201C,X    
	AND #$EF	;clear stop					;C2/21E8: 29 EF        AND #$EF
	STA CharStruct.Status3,X					;C2/21EA: 9D 1C 20     STA $201C,X
	RTS 								;C2/21ED: 60           RTS 
								;
%org($C221EE)
TimerEffectPoison:
	LDA #$01							;C2/21EE: A9 01        LDA #$01
	STA EnableTimer.Poison,Y					;C2/21F0: 99 F2 3C     STA $3CF2,Y    
	LDA InitialTimer.Poison,Y					;C2/21F3: B9 FA 3D     LDA $3DFA,Y    
	STA CurrentTimer.Poison,Y 					;C2/21F6: 99 76 3D     STA $3D76,Y    
	JSR WipeDisplayStructures     					;C2/21F9: 20 18 02     JSR $0218      
	REP #$20							;C2/21FC: C2 20        REP #$20
	LDX AttackerOffset						;C2/21FE: A6 32        LDX $32        
	LDA CharStruct.MaxHP,X						;C2/2200: BD 08 20     LDA $2008,X
	JSR ShiftDivide_16      					;C2/2203: 20 BE 01     JSR $01BE      
	BNE +								;C2/2206: D0 01        BNE $2209
	INC 				;min 1 damage			;C2/2208: 1A           INC 
+	STA $0E				;poison tick damage		;C2/2209: 85 0E        STA $0E
	SEC 								;C2/220B: 38           SEC 
	LDA CharStruct.CurHP,X						;C2/220C: BD 06 20     LDA $2006,X    
	SBC $0E				;poison tick damage		;C2/220F: E5 0E        SBC $0E
	BCS +								;C2/2211: B0 01        BCS $2214
	TDC 				;min 0 hp			;C2/2213: 7B           TDC 
+	STA CharStruct.CurHP,X						;C2/2214: 9D 06 20     STA $2006,X
	TDC 								;C2/2217: 7B           TDC 
	SEP #$20							;C2/2218: E2 20        SEP #$20
	LDA TimerReadyChar.Poison					;C2/221A: AD B8 3E     LDA $3EB8
	LDX $0E				;poison tick damage		;C2/221D: A6 0E        LDX $0E
	STX TempDisplayDamage      					;C2/221F: 8E 5D 3C     STX $3C5D      
	JSR CopyDisplayDamage     					;C2/2222: 20 76 02     JSR $0276      
	LDA #$09	;C1 routine: display regen/poison damage	;C2/2225: A9 09        LDA #$09
	JMP CallC1     							;C2/2227: 4C 69 00     JMP $0069      

%org($C2222A)
TimerEffectReflect:
	LDX AttackerOffset						;C2/222A: A6 32        LDX $32        
	LDA CharStruct.Status3,X    					;C2/222C: BD 1C 20     LDA $201C,X    
	AND #$7F	;clear reflect					;C2/222F: 29 7F        AND #$7F
	STA CharStruct.Status3,X					;C2/2231: 9D 1C 20     STA $201C,X
	RTS 								;C2/2234: 60           RTS 

%org($C22235)
TimerEffectCountdown:
	LDX AttackerOffset       					;C2/2235: A6 32        LDX $32        
	LDA CharStruct.Status1,X					;C2/2237: BD 1A 20     LDA $201A,X
	AND #$02	;zombie						;C2/223A: 29 02        AND #$02
	BNE .Ret      							;C2/223C: D0 0F        BNE $224D      
	LDA TimerReadyChar.Countdown					;C2/223E: AD BA 3E     LDA $3EBA
	JSR KillCharacter      						;C2/2241: 20 8A 61     JSR $618A      
	LDA MonsterDead							;C2/2244: A5 70        LDA $70
	BEQ .Ret							;C2/2246: F0 05        BEQ $224D
	LDA #$07	;C1 routine: condemn death animation		;C2/2248: A9 07        LDA #$07
	JSR CallC1      						;C2/224A: 20 69 00     JSR $0069      
.Ret	RTS 								;C2/224D: 60           RTS 

%org($C2224E)
TimerEffectMute:
	LDX AttackerOffset       					;C2/224E: A6 32        LDX $32        
	LDA CharStruct.Status2,X    					;C2/2250: BD 1B 20     LDA $201B,X    
	AND #$FB	;clear mute					;C2/2253: 29 FB        AND #$FB
	STA CharStruct.Status2,X					;C2/2255: 9D 1B 20     STA $201B,X
	RTS 								;C2/2258: 60           RTS 

%org($C22259)
TimerEffectHPLeak:
	LDX AttackerOffset						;C2/2259: A6 32        LDX $32        
	LDA CharStruct.Status4,X    					;C2/225B: BD 1D 20     LDA $201D,X    
	AND #$F7	;clear hp leak					;C2/225E: 29 F7        AND #$F7
	STA CharStruct.Status4,X					;C2/2260: 9D 1D 20     STA $201D,X
	RTS 								;C2/2263: 60           RTS 

%org($C22264)
%sub(TimerEffectOld)
TimerEffectOld:								;
	LDA #$01							;C2/2264: A9 01        LDA #$01
	STA EnableTimer.Old,Y						;C2/2266: 99 F7 3C     STA $3CF7,Y
	LDA InitialTimer.Old,Y						;C2/2269: B9 FF 3D     LDA $3DFF,Y
	STA CurrentTimer.Old,Y						;C2/226C: 99 7B 3D     STA $3D7B,Y
	LDX AttackerOffset						;C2/226F: A6 32        LDX $32        
	STZ $0E								;C2/2271: 64 0E        STZ $0E
.StatsLoop		;applies to all 4 main stats	
	LDA CharStruct.BaseStr,X					;C2/2273: BD 24 20     LDA $2024,X
	DEC 								;C2/2276: 3A           DEC 
	BEQ +		;**bug: wraps 0 stats to 255			;C2/2277: F0 03        BEQ $227C
	STA CharStruct.BaseStr,X					;C2/2279: 9D 24 20     STA $2024,X
+	LDA CharStruct.EquippedStr,X					;C2/227C: BD 28 20     LDA $2028,X
	DEC 								;C2/227F: 3A           DEC 
	BEQ +								;C2/2280: F0 03        BEQ $2285
	STA CharStruct.EquippedStr,X					;C2/2282: 9D 28 20     STA $2028,X
+	INX 								;C2/2285: E8           INX 
	INC $0E								;C2/2286: E6 0E        INC $0E
	LDA $0E								;C2/2288: A5 0E        LDA $0E
	CMP #$04	;4 stats					;C2/228A: C9 04        CMP #$04
	BNE .StatsLoop							;C2/228C: D0 E5        BNE $2273
	LDX ProcessingTimer 						;C2/228E: AE CE 3E     LDX $3ECE
	LDA !TimerReadyChar,X						;C2/2291: BD B7 3E     LDA $3EB7,X
	CMP #$04	;monster check					;C2/2294: C9 04        CMP #$04
	BCC .Ret							;C2/2296: 90 14        BCC $22AC
	LDX AttackerOffset						;C2/2298: A6 32        LDX $32        
	LDA CharStruct.Level,X						;C2/229A: BD 02 20     LDA $2002,X
	DEC 								;C2/229D: 3A           DEC 
	BEQ +								;C2/229E: F0 03        BEQ $22A3
	STA CharStruct.Level,X						;C2/22A0: 9D 02 20     STA $2002,X
+	LDA CharStruct.MonsterAttack,X					;C2/22A3: BD 44 20     LDA $2044,X
	DEC 								;C2/22A6: 3A           DEC 
	BPL .Ret	;bug? only decreases attack if above 128	;C2/22A7: 10 03        BPL $22AC
	STA CharStruct.MonsterAttack,X					;C2/22A9: 9D 44 20     STA $2044,X
.Ret	RTS 								;C2/22AC: 60           RTS 
%endsub()

%org($C222AD)
TimerEffectRegen:
	LDA #$01							;C2/22AD: A9 01        LDA #$01
	STA EnableTimer.Regen,Y						;C2/22AF: 99 F8 3C     STA $3CF8,Y
	LDA InitialTimer.Regen,Y					;C2/22B2: B9 00 3E     LDA $3E00,Y
	CMP #$1E							;C2/22B5: C9 1E        CMP #$1E
	BCS +								;C2/22B7: B0 05        BCS $22BE
	LDA #$1E	;max 30 ticks if it was slower			;C2/22B9: A9 1E        LDA #$1E
	STA InitialTimer.Regen,Y					;C2/22BB: 99 00 3E     STA $3E00,Y
+	STA CurrentTimer.Regen,Y					;C2/22BE: 99 7C 3D     STA $3D7C,Y
	JSR WipeDisplayStructures     					;C2/22C1: 20 18 02     JSR $0218      
	LDX AttackerOffset						;C2/22C4: A6 32        LDX $32        
	JSR CopyStatsWithBonuses     					;C2/22C6: 20 48 02     JSR $0248      
	LDA Level     							;C2/22C9: AD E5 7B     LDA $7BE5      
	STA $24								;C2/22CC: 85 24        STA $24
	LDA Vitality  							;C2/22CE: AD E3 7B     LDA $7BE3      
	STA $25								;C2/22D1: 85 25        STA $25
	JSR Multiply_8bit						;C2/22D3: 20 F1 00     JSR $00F1      
	LDX AttackerOffset						;C2/22D6: A6 32        LDX $32        
	LDA CharStruct.Status1,X					;C2/22D8: BD 1A 20     LDA $201A,X
	AND #$02	;zombie						;C2/22DB: 29 02        AND #$02
	BNE .Ret      							;C2/22DD: D0 39        BNE $2318      
	REP #$20							;C2/22DF: C2 20        REP #$20
	LDA $26								;C2/22E1: A5 26        LDA $26
	JSR ShiftDivide_16						;C2/22E3: 20 BE 01     JSR $01BE      
	TAX 								;C2/22E6: AA           TAX 
	BNE +								;C2/22E7: D0 01        BNE $22EA
	INC 		;min 1						;C2/22E9: 1A           INC 
+	STA $0E								;C2/22EA: 85 0E        STA $0E
	LDX AttackerOffset						;C2/22EC: A6 32        LDX $32        
	CLC 								;C2/22EE: 18           CLC 
	ADC CharStruct.CurHP,X						;C2/22EF: 7D 06 20     ADC $2006,X    
	BCS +								;C2/22F2: B0 05        BCS $22F9
	CMP CharStruct.MaxHP,X    					;C2/22F4: DD 08 20     CMP $2008,X    
	BCC ++								;C2/22F7: 90 03        BCC $22FC
+	LDA CharStruct.MaxHP,X	;cap at maxhp				;C2/22F9: BD 08 20     LDA $2008,X
++	STA CharStruct.CurHP,X						;C2/22FC: 9D 06 20     STA $2006,X
	TDC 								;C2/22FF: 7B           TDC 
	SEP #$20							;C2/2300: E2 20        SEP #$20
	LDA $0F								;C2/2302: A5 0F        LDA $0F
	ORA #$80       		;flag to display as healing		;C2/2304: 09 80        ORA #$80       
	STA $0F								;C2/2306: 85 0F        STA $0F
	LDA TimerReadyChar.Regen					;C2/2308: AD BE 3E     LDA $3EBE
	LDX $0E								;C2/230B: A6 0E        LDX $0E
	STX TempDisplayDamage   					;C2/230D: 8E 5D 3C     STX $3C5D      
	JSR CopyDisplayDamage						;C2/2310: 20 76 02     JSR $0276
	LDA #$09	;C1 routine: display regen/poison damage	;C2/2313: A9 09        LDA #$09
	JSR CallC1    							;C2/2315: 20 69 00     JSR $0069      
.Ret	RTS 								;C2/2318: 60           RTS 

%org($C22319)
%sub(TimerEffectSing)
TimerEffectSing:
	LDA #$01							;C2/2319: A9 01        LDA #$01
	STA EnableTimer.Sing,Y						;C2/231B: 99 F9 3C     STA $3CF9,Y
	LDA InitialTimer.Sing,Y						;C2/231E: B9 01 3E     LDA $3E01,Y
	STA CurrentTimer.Sing,Y						;C2/2321: 99 7D 3D     STA $3D7D,Y
	TDC 								;C2/2324: 7B           TDC 
	TAY 								;C2/2325: A8           TAY 
	LDX AttackerOffset						;C2/2326: A6 32        LDX $32        
	LDA CharStruct.Song,X						;C2/2328: BD 6F 20     LDA $206F,X    
	BEQ .Ret     							;C2/232B: F0 4E        BEQ $237B      
.FindSong		;Y = song stat index
	ASL 								;C2/232D: 0A           ASL 
	BCS +								;C2/232E: B0 03        BCS $2333
	INY 								;C2/2330: C8           INY 
	BRA .FindSong							;C2/2331: 80 FA        BRA $232D
+	STY $12		;song stat index				;C2/2333: 84 12        STY $12
	TDC 								;C2/2335: 7B           TDC 
	TAX 								;C2/2336: AA           TAX 
	STX $0E		;target						;C2/2337: 86 0E        STX $0E
	LDA #$04							;C2/2339: A9 04        LDA #$04
	STA $10		;after last target				;C2/233B: 85 10        STA $10
	LDA TimerReadyChar.Sing						;C2/233D: AD BF 3E     LDA $3EBF
	CMP #$04	;monster check? monsters can sing?		;C2/2340: C9 04        CMP #$04
	BCC .ApplySong							;C2/2342: 90 0B        BCC $234F
	LDA #$04							;C2/2344: A9 04        LDA #$04
	STA $0E		;target						;C2/2346: 85 0E        STA $0E
	LDA #$0C							;C2/2348: A9 0C        LDA #$0C
	STA $10		;last target +1					;C2/234A: 85 10        STA $10
	LDX #$0180	;**bug: first monster offset should be $0200	;C2/234C: A2 80 01     LDX #$0180
.ApplySong
	STX $14		;char offset					;C2/234F: 86 14        STX $14
	REP #$20							;C2/2351: C2 20        REP #$20
	TXA 								;C2/2353: 8A           TXA 
	CLC 								;C2/2354: 18           CLC 
	ADC $12		;adjust offset by song stat			;C2/2355: 65 12        ADC $12
	TAX 								;C2/2357: AA           TAX 
	TDC 								;C2/2358: 7B           TDC 
	SEP #$20							;C2/2359: E2 20        SEP #$20
.CharLoop
	LDY $0E		;target						;C2/235B: A4 0E        LDY $0E
	LDA ActiveParticipants,Y					;C2/235D: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next							;C2/2360: F0 0C        BEQ $236E
	CLC 								;C2/2362: 18           CLC 
	LDA CharStruct.BonusStr,X	;different stats depending on X	;C2/2363: BD 74 20     LDA $2074,X
	INC 								;C2/2366: 1A           INC 
	CMP #$64	;don't apply changes at 100 and up		;C2/2367: C9 64        CMP #$64
	BCS .Next							;C2/2369: B0 03        BCS $236E
	STA CharStruct.BonusStr,X					;C2/236B: 9D 74 20     STA $2074,X
.Next
	JSR NextCharOffset     						;C2/236E: 20 E0 01     JSR $01E0      
	STX $14		;char offset					;C2/2371: 86 14        STX $14
	INC $0E		;next target					;C2/2373: E6 0E        INC $0E
	LDA $0E								;C2/2375: A5 0E        LDA $0E
	CMP $10		;last target +1					;C2/2377: C5 10        CMP $10
	BNE .CharLoop							;C2/2379: D0 E0        BNE $235B
.Ret	RTS 								;C2/237B: 60           RTS 
%endsub()

%org($C2237C)
TimerEffectParalyze:
	LDX AttackerOffset						;C2/237C: A6 32        LDX $32        
	LDA CharStruct.Status2,X    					;C2/237E: BD 1B 20     LDA $201B,X    
	AND #$DF	;clear paralyze					;C2/2381: 29 DF        AND #$DF
	STA CharStruct.Status2,X					;C2/2383: 9D 1B 20     STA $201B,X
	LDX ProcessingTimer 						;C2/2386: AE CE 3E     LDX $3ECE
	LDA !TimerReadyChar,X						;C2/2389: BD B7 3E     LDA $3EB7,X
	JMP ResetATB							;C2/238C: 4C 82 24     JMP $2482

%org($C2238F)
;character's atb timer finished, either add them to the menu queue or perform their action
TimerEffectATB:
	JSR CheckBattleEnd     						;C2/238F: 20 B4 5A     JSR $5AB4      
	LDA BattleOver							;C2/2392: AD DE 7B     LDA $7BDE
	BNE .GoRet     							;C2/2395: D0 41        BNE $23D8      
	LDA TimerReadyChar.ATB						;C2/2397: AD C1 3E     LDA $3EC1      
	STA AttackerIndex        					;C2/239A: 85 47        STA $47        
	JSR GetTimerOffset      					;C2/239C: 20 07 02     JSR $0207      
	TYX 								;C2/239F: BB           TYX 
	LDA EnableTimer.Paralyze,X 					;C2/23A0: BD FA 3C     LDA $3CFA,X    
	BNE .GoRet    							;C2/23A3: D0 33        BNE $23D8      
	LDA EnableTimer.ATB,X 						;C2/23A5: BD FB 3C     LDA $3CFB,X    
	BEQ +      							;C2/23A8: F0 03        BEQ $23AD      
	JMP PerformAction      	;action is ready, do it			;C2/23AA: 4C DF 23     JMP $23DF      
+	LDA TimerReadyChar.ATB     					;C2/23AD: AD C1 3E     LDA $3EC1      
	CMP #$04	;monster check					;C2/23B0: C9 04        CMP #$04
	BCS .Monster     						;C2/23B2: B0 27        BCS $23DB      
	TDC 								;C2/23B4: 7B           TDC 
	TAX            							;C2/23B5: AA           TAX            
.SearchTurnQueue	;find character in turn queue
	LDA ATBReadyQueue,X						;C2/23B6: BD A9 41     LDA $41A9,X
	CMP TimerReadyChar.ATB						;C2/23B9: CD C1 3E     CMP $3EC1
	BEQ .GoRet	;character already in turn queue		;C2/23BC: F0 1A        BEQ $23D8
	INX 								;C2/23BE: E8           INX 
	CPX #$0004							;C2/23BF: E0 04 00     CPX #$0004
	BNE .SearchTurnQueue						;C2/23C2: D0 F2        BNE $23B6
	LDA TimerReadyChar.ATB						;C2/23C4: AD C1 3E     LDA $3EC1
	JSR CheckDisablingStatus					;C2/23C7: 20 74 1C     JSR $1C74
	BNE .GoRet							;C2/23CA: D0 0C        BNE $23D8
	LDX ATBReadyCount						;C2/23CC: AE AE 41     LDX $41AE
	LDA TimerReadyChar.ATB						;C2/23CF: AD C1 3E     LDA $3EC1
	STA ATBReadyQueue,X						;C2/23D2: 9D A9 41     STA $41A9,X
	INC ATBReadyCount						;C2/23D5: EE AE 41     INC $41AE
.GoRet	JMP .Ret							;C2/23D8: 4C DE 23     JMP $23DE
.Monster
	JSR MonsterATB							;C2/23DB: 20 D3 25     JSR $25D3     
.Ret	RTS 								;C2/23DE: 60           RTS 

%org($C223DF)
;called when character's turn is up, perform their queued action
PerformAction:
	JSR ProcessTurn							;C2/23DF: 20 BD 48     JSR $48BD
	LDA DelayedFight						;C2/23E2: AD FC 7B     LDA $7BFC
	BNE .Ret							;C2/23E5: D0 4A        BNE $2431
	LDA AttackerIndex						;C2/23E7: A5 47        LDA $47        
	CMP #$04	;monster check					;C2/23E9: C9 04        CMP #$04
	BCS .ResetATB 							;C2/23EB: B0 39        BCS $2426      
	LDX AttackerOffset						;C2/23ED: A6 32        LDX $32        
	LDA CharStruct.CmdStatus,X					;C2/23EF: BD 1E 20     LDA $201E,X    
	AND #$E0	;clear many flags (jump/flirt/others?)		;C2/23F2: 29 E0        AND #$E0
	STA CharStruct.CmdStatus,X					;C2/23F4: 9D 1E 20     STA $201E,X
	STZ CharStruct.DamageMod,X 					;C2/23F7: 9E 1F 20     STZ $201F,X    
	LDA CharStruct.Status1,X					;C2/23FA: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/23FD: 1D 70 20     ORA $2070,X
	AND #$02	;zombie						;C2/2400: 29 02        AND #$02
	BNE .Uncontrolled   						;C2/2402: D0 0A        BNE $240E      
	LDA CharStruct.Status2,X					;C2/2404: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/2407: 1D 71 20     ORA $2071,X
	AND #$18	;charm/berserk					;C2/240A: 29 18        AND #$18
	BEQ .ResetATB   						;C2/240C: F0 18        BEQ $2426      
.Uncontrolled
	LDA AttackerIndex						;C2/240E: A5 47        LDA $47        
	JSR GetTimerOffset   						;C2/2410: 20 07 02     JSR $0207      
	TDC 								;C2/2413: 7B           TDC 
	STA EnableTimer.ATB,Y 						;C2/2414: 99 FB 3C     STA $3CFB,Y    
	INC 								;C2/2417: 1A           INC 
	STA CurrentTimer.ATB,Y 						;C2/2418: 99 7F 3D     STA $3D7F,Y    
	LDA AttackerIndex						;C2/241B: A5 47        LDA $47        
	TAX 								;C2/241D: AA           TAX 
	LDA UncontrolledATB,X						;C2/241E: BD 04 7C     LDA $7C04,X
	AND #$7F	;max 127					;C2/2421: 29 7F        AND #$7F
	STA UncontrolledATB,X						;C2/2423: 9D 04 7C     STA $7C04,X
.ResetATB
	INC CheckQuick							;C2/2426: EE C7 7C     INC $7CC7
	LDA AttackerIndex    						;C2/2429: A5 47        LDA $47        
	JSR ResetATB							;C2/242B: 20 82 24     JSR $2482
	STZ CheckQuick							;C2/242E: 9C C7 7C     STZ $7CC7
.Ret	RTS 								;C2/2431: 60           RTS 

%org($C22432)
;Waits when a character's turn arrives (amount depending on battle speed setting)
ATBWait:
	LDA ATBWaiting							;C2/2432: AD D4 3E     LDA $3ED4
	BEQ .Ret							;C2/2435: F0 0F        BEQ $2446
	LDA ATBWaitLeft							;C2/2437: AD D5 3E     LDA $3ED5
	BEQ .DoneWaiting						;C2/243A: F0 06        BEQ $2442
	DEC 								;C2/243C: 3A           DEC 
	STA ATBWaitLeft							;C2/243D: 8D D5 3E     STA $3ED5
	BNE .Ret							;C2/2440: D0 04        BNE $2446
.DoneWaiting
	TDC 								;C2/2442: 7B           TDC 
	STA ATBWaiting							;C2/2443: 8D D4 3E     STA $3ED4
.Ret	RTS 								;C2/2446: 60           RTS 


%org($C22447)
;Updates ATB for all combatants and sets them active if present
ResetATBAll:
	TDC 									;C2/2447: 7B           TDC 	
	TAX 									;C2/2448: AA           TAX 	
	TAY 									;C2/2449: A8           TAY 	
	STX $0E			;char index					;C2/244A: 86 0E        STX $0E

.ResetATBLoop
	LDA $0E									;C2/244C: A5 0E        LDA $0E		
	JSR ResetATB								;C2/244E: 20 82 24     JSR $2482	
	LDA $0E									;C2/2451: A5 0E        LDA $0E
	JSR CalculateCharOffset							;C2/2453: 20 EC 01     JSR $01EC	
	LDA $0E									;C2/2456: A5 0E        LDA $0E
	CMP #$04		;monster check					;C2/2458: C9 04        CMP #$04
	BCS .Monster								;C2/245A: B0 0B        BCS $2467	
	LDX AttackerOffset							;C2/245C: A6 32        LDX $32
	LDA CharStruct.CharRow,X						;C2/245E: BD 00 20     LDA $2000,X	
	AND #$40		;not present					;C2/2461: 29 40        AND #$40		
	BEQ .SetActive								;C2/2463: F0 0D        BEQ $2472	
	BNE .Next								;C2/2465: D0 12        BNE $2479	

.Monster
	SEC 									;C2/2467: 38           SEC 		
	LDA $0E									;C2/2468: A5 0E        LDA $0E
	SBC #$04								;C2/246A: E9 04        SBC #$04		
	TAX 			;monster index					;C2/246C: AA           TAX 		
	LDA InitialMonsters,X							;C2/246D: BD 18 40     LDA $4018,X	
	BEQ .Next								;C2/2470: F0 07        BEQ $2479	

.SetActive
	LDX $0E									;C2/2472: A6 0E        LDX $0E		
	LDA #$01								;C2/2474: A9 01        LDA #$01
	STA ActiveParticipants,X						;C2/2476: 9D C2 3E     STA $3EC2,X

.Next
	INC $0E			;char index					;C2/2479: E6 0E        INC $0E		
	LDA $0E									;C2/247B: A5 0E        LDA $0E		
	CMP #$0C		;12 participants				;C2/247D: C9 0C        CMP #$0C
	BNE .ResetATBLoop							;C2/247F: D0 CB        BNE $244C	
										;.					
	RTS									;C2/2481: 60           RTS

%org($C22482)
;initialize ATB (A: character index 0-12)
ResetATB:
	PHA									;C2/2482: 48           PHA		
	JSR GetTimerOffset	;Y and $36 = timer offset			;C2/2483: 20 07 02     JSR $0207	
	PLA									;C2/2486: 68           PLA		
	JSR CalculateCharOffset							;C2/2487: 20 EC 01     JSR $01EC	
	JSR CopyStatsWithBonuses						;C2/248A: 20 48 02     JSR $0248	
	LDA CharStruct.EqWeight,X  						;C2/248D: BD 23 20     LDA $2023,X  	
	JSR ShiftDivide_8	;weight/8					;C2/2490: 20 BF 01     JSR $01BF    	
	CLC									;C2/2493: 18           CLC
	ADC #$78     		;+120						;C2/2494: 69 78        ADC #$78     	
	SEC									;C2/2496: 38           SEC
	SBC Agility    	;-agi							;C2/2497: ED E2 7B     SBC $7BE2    	
	BEQ +									;C2/249A: F0 02        BEQ $249E
	BCS ++									;C2/249C: B0 02        BCS $24A0
+	LDA #$01     		;min 1						;C2/249E: A9 01        LDA #$01     	
++	JSR HasteSlowMod    							;C2/24A0: 20 63 61     JSR $6163    	
	STA CurrentTimer.ATB,Y							;C2/24A3: 99 7F 3D     STA $3D7F,Y	
	LDA EncounterInfo.IntroFX						;C2/24A6: AD EF 3E     LDA $3EEF	
	BPL .NotCredits		;80h indicates a credits demo battle		;C2/24A9: 10 10        BPL $24BB	
	LDX AttackerOffset							;C2/24AB: A6 32        LDX $32		
	CPX #$0200		;monster					;C2/24AD: E0 00 02     CPX #$0200	
	BCS .CreditsMonster							;C2/24B0: B0 04        BCS $24B6	
	LDA #$01		;party member gets turn immediately		;C2/24B2: A9 01        LDA #$01		
	BRA .CreditsParty							;C2/24B4: 80 02        BRA $24B8	

.CreditsMonster
	LDA #$FF		;monster turn as late as possible		;C2/24B6: A9 FF        LDA #$FF		
.CreditsParty								
	STA CurrentTimer.ATB,Y							;C2/24B8: 99 7F 3D     STA $3D7F,Y	

.NotCredits								
	LDA CheckQuick								;C2/24BB: AD C7 7C     LDA $7CC7	
	BEQ .EnableATB								;C2/24BE: F0 1E        BEQ $24DE	
	LDA QuickTurns								;C2/24C0: AD 51 7C     LDA $7C51	
	BEQ .EnableATB								;C2/24C3: F0 19        BEQ $24DE	
	LDA CurrentlyReacting							;C2/24C5: AD 4E 47     LDA $474E	
	BNE .EnableATB								;C2/24C8: D0 14        BNE $24DE	
	DEC QuickTurns								;C2/24CA: CE 51 7C     DEC $7C51	
	LDA QuickTurns								;C2/24CD: AD 51 7C     LDA $7C51	
	BNE .Quick								;C2/24D0: D0 07        BNE $24D9	
	PHY									;C2/24D2: 5A           PHY		
	JSR ClearQuick								;C2/24D3: 20 E4 24     JSR $24E4	
	PLY									;C2/24D6: 7A           PLY		
	BRA .EnableATB								;C2/24D7: 80 05        BRA $24DE	

.Quick										;:					
	LDA #$01								;C2/24D9: A9 01        LDA #$01		
	STA CurrentTimer.ATB,Y							;C2/24DB: 99 7F 3D     STA $3D7F,Y	

.EnableATB
	LDA #$01								;C2/24DE: A9 01        LDA #$01		
	STA EnableTimer.ATB,Y							;C2/24E0: 99 FB 3C     STA $3CFB,Y	
	RTS 									;C2/24E3: 60           RTS 

%org($C224E4)
;Unfreezes time for everyone
ClearQuick:
	TDC 									;C2/24E4: 7B           TDC 		
	TAX 									;C2/24E5: AA           TAX 		

-	STZ QuickTimeFrozen,X							;C2/24E6: 9E AB 3E     STZ $3EAB,X	
	INX 									;C2/24E9: E8           INX 
	CPX #$000C		;12 combatants					;C2/24EA: E0 0C 00     CPX #$000C
	BNE -									;C2/24ED: D0 F7        BNE $24E6

	RTS 									;C2/24EF: 60           RTS 

%org($C224F0)
;Stop Timer (X: #timer; A: Target index 0-12)
StopTimer:
	PHX 									;C2/24F0: DA           PHX 
	JSR GetTimerOffset							;C2/24F1: 20 07 02     JSR $0207       
	PLX 									;C2/24F4: FA           PLX 
	JSR AddTimerOffsetY  							;C2/24F5: 20 3F 25     JSR $253F       
	TDC 									;C2/24F8: 7B           TDC 
	STA !EnableTimer,Y 							;C2/24F9: 99 F1 3C     STA $3CF1,Y     
	RTS 									;C2/24FC: 60           RTS 

%org($C224FD)
;Start Timer (X: #timer; A: Participant index)
StartTimer:
	PHX								;C2/24FD: DA           PHX
	PHA								;C2/24FE: 48           PHA
	JSR GetTimerOffset						;C2/24FF: 20 07 02     JSR $0207        
	PLA								;C2/2502: 68           PLA
	JSR CalculateCharOffset						;C2/2503: 20 EC 01     JSR $01EC        
	JSR CopyStatsWithBonuses					;C2/2506: 20 48 02     JSR $0248        
	PLX								;C2/2509: FA           PLX
	JSR GetTimerDuration	;also sets up Y				;C2/250A: 20 21 25     JSR $2521        
	LDX AttackerOffset	;not actually attacker, in this case	;C2/250D: A6 32        LDX $32		
	JSR HasteSlowMod  						;C2/250F: 20 63 61     JSR $6163        
	STA !CurrentTimer,Y						;C2/2512: 99 75 3D     STA $3D75,Y      
	STA !InitialTimer,Y						;C2/2515: 99 F9 3D     STA $3DF9,Y      
	LDA #$01							;C2/2518: A9 01        LDA #$01
	STA !EnableTimer,Y						;C2/251A: 99 F1 3C     STA $3CF1,Y      
	STZ StatusFixedDur						;C2/251D: 9C D7 3E     STZ $3ED7
	RTS								;C2/2520: 60           RTS

%org($C22521)
;Get Timer Duration (X - #timer; $3ED7 - StatusFixedDur): A = return duration
;sets up and jumps to a jump table entry that sets the correct duration
;also sets up Y as the correct timer offset
GetTimerDuration:
	JSR AddTimerOffsetY      ;Y = X + TimerOffset  				;C2/2521: 20 3F 25     JSR $253F       
	TXA									;C2/2524: 8A           TXA		
	ASL									;C2/2525: 0A           ASL		
	CLC									;C2/2526: 18           CLC
	ADC StatusFixedDur     ;uses alternate fixed status duration		;C2/2527: 6D D7 3E     ADC $3ED7       
	ASL									;C2/252A: 0A           ASL		
	TAX									;C2/252B: AA           TAX		
	LDA TimerDurationJumpTable,X						;C2/252C: BF 4A 25 C2  LDA $C2254A,X	
	STA $08									;C2/2530: 85 08        STA $08
	LDA TimerDurationJumpTable+1,X						;C2/2532: BF 4B 25 C2  LDA $C2254B,X
	STA $09									;C2/2536: 85 09        STA $09
	LDA.b #bank(TimerDurationJumpTable)					;C2/2538: A9 C2        LDA #$C2
	STA $0A									;C2/253A: 85 0A        STA $0A
	JMP [$0008]		;jump to table address				;C2/253C: DC 08 00     JMP [$0008]	

%org($C2253F)
;(X): Y = X + $36 Timer Offset)
AddTimerOffsetY:
	TXA      							;C2/253F: 8A           TXA              
	REP #$20							;C2/2540: C2 20        REP #$20		
	CLC								;C2/2542: 18           CLC		
	ADC TimerOffset							;C2/2543: 65 36        ADC $36		
	TAY      							;C2/2545: A8           TAY              
	TDC      							;C2/2546: 7B           TDC              
	SEP #$20							;C2/2547: E2 20        SEP #$20		
	RTS 								;C2/2549: 60           RTS 

%org($C2254A)
;Jump table for timer durations, these all return with A = timer duration
;for each timer, first entry is standard duration, second is for when StatusFixedDur is set
TimerDurationJumpTable:
;stop
dw DurSpell				;C2/254A: 72 25        $2572        Spell Duration				
dw Dur120a				;C2/254C: 76 25        $2576        120						
;poison (ticks)
dw DurVit				;C2/254E: 79 25        $2579        Vitality + 20			
dw DurVit				;C2/2550: 79 25        $2579        Vitality + 20			
;reflect
dw DurSpell				;C2/2552: 72 25        $2572        Spell Duration				
dw Dur120b				;C2/2554: 84 25        $2584        120						
;countdown/doom
dw DurSpell				;C2/2556: 72 25        $2572        Spell Duration				
dw Dur49				;C2/2558: 87 25        $2587        49						
;mute
dw DurSpell				;C2/255A: 72 25        $2572        Spell Duration	
dw Dur180mod				;C2/255C: 8A 25        $258A        180 - Magic / 2			
;hp leak
dw DurSpell				;C2/255E: 72 25        $2572        Spell Duration	
dw Dur180				;C2/2560: 9A 25        $259A        180	
;old (ticks)
dw Dur10				;C2/2562: 9D 25        $259D        10	
dw Dur10				;C2/2564: 9D 25        $259D        10	
;regen (ticks)
dw Dur110mod				;C2/2566: A0 25        $25A0        110 - Magic, min 30	
dw Dur110mod				;C2/2568: A0 25        $25A0        110 - Magic, min 30	
;sing (ticks)
dw Dur30				;C2/256A: AF 25        $25AF        30	
dw Dur30				;C2/256C: AF 25        $25AF        30	
;paralyze
dw DurSpellmod				;C2/256E: B2 25        $25B2        Spell Duration - Magic / 2	
dw Dur120mod				;C2/2570: C3 25        $25C3        120 - Magic / 2	

%org($C22572)
;Duration = Spell Duration
DurSpell:
	LDA StatusDuration					;C2/2572: AD D8 3E     LDA $3ED8
	RTS							;C2/2575: 60           RTS

%org($C22576)								
;Duration = 120
Dur120a:
	LDA #$78	;120					;C2/2576: A9 78        LDA #$78
	RTS							;C2/2578: 60           RTS

%org($C22579)
;Duration = Vitality + 20
DurVit:
	CLC 							;C2/2579: 18           CLC 
	LDA Vitality						;C2/257A: AD E3 7B     LDA $7BE3
	ADC #$14	;+20					;C2/257D: 69 14        ADC #$14
	BCC +							;C2/257F: 90 02        BCC $2583
	LDA #$FF	;max 255				;C2/2581: A9 FF        LDA #$FF
+	RTS							;C2/2583: 60           RTS
	
%org($C22584)
;Duration = 120
Dur120b:
	LDA #$78	;120					;C2/2584: A9 78        LDA #$78
	RTS							;C2/2586: 60           RTS

%org($C22587)
;Duration = 49
Dur49:
	LDA #$31	;49					;C2/2587: A9 31        LDA #$31
	RTS							;C2/2589: 60           RTS

%org($C2258A)
;Duration = 180 - Magic Power / 2
Dur180mod:
	LDA MagicPower						;C2/258A: AD E4 7B     LDA $7BE4
	LSR 							;C2/258D: 4A           LSR 
	STA $0E							;C2/258E: 85 0E        STA $0E
	SEC 							;C2/2590: 38           SEC 
	LDA #$B4	;180					;C2/2591: A9 B4        LDA #$B4
	SBC $0E							;C2/2593: E5 0E        SBC $0E
	BCS +							;C2/2595: B0 02        BCS $2599
	LDA #$01	;min 1					;C2/2597: A9 01        LDA #$01
+	RTS 							;C2/2599: 60           RTS 

%org($C2259A)
;Duration = 180 
Dur180:
	LDA #$B4	;180					;C2/259A: A9 B4        LDA #$B4
	RTS 							;C2/259C: 60           RTS 

%org($C2259D)
;Duration = 10 
Dur10:
	LDA #$0A	;10					;C2/259D: A9 0A        LDA #$0A
	RTS 							;C2/259F: 60           RTS 

%org($C225A0)
;Duration = 110 - Magic Power, min 30
%sub(Dur110mod)
Dur110mod:
	SEC 							;C2/25A0: 38           SEC 
	LDA #$6E	;110					;C2/25A1: A9 6E        LDA #$6E
	SBC MagicPower						;C2/25A3: ED E4 7B     SBC $7BE4
	BCC +							;C2/25A6: 90 04        BCC $25AC
	CMP #$1E	;min 30					;C2/25A8: C9 1E        CMP #$1E
	BCS ++							;C2/25AA: B0 02        BCS $25AE
+	LDA #$1E	;min 30					;C2/25AC: A9 1E        LDA #$1E
++	RTS 							;C2/25AE: 60           RTS 
%endsub()

%org($C225AF)
;Duration = 30
%sub(Dur30)
Dur30:
	LDA #$1E						;C2/25AF: A9 1E        LDA #$1E
	RTS 							;C2/25B1: 60           RTS 
%endsub()

%org($C225B2)
;Duration = Spell Duration - Magic Power / 2
DurSpellmod:
	LDA MagicPower						;C2/25B2: AD E4 7B     LDA $7BE4
	LSR 							;C2/25B5: 4A           LSR 
	STA $0E   						;C2/25B6: 85 0E        STA $0E     
	SEC 							;C2/25B8: 38           SEC 
	LDA StatusDuration					;C2/25B9: AD D8 3E     LDA $3ED8   
	SBC $0E							;C2/25BC: E5 0E        SBC $0E
	BCS +							;C2/25BE: B0 02        BCS $25C2
	LDA #$01	;min 1					;C2/25C0: A9 01        LDA #$01
+	RTS 							;C2/25C2: 60           RTS 

%org($C225C3)
;Duration = 120 - Magic Power / 2
Dur120mod:
	LDA MagicPower						;C2/25C3: AD E4 7B     LDA $7BE4
	LSR 							;C2/25C6: 4A           LSR 
	STA $0E							;C2/25C7: 85 0E        STA $0E
	SEC 							;C2/25C9: 38           SEC 
	LDA #$78	;120					;C2/25CA: A9 78        LDA #$78
	SBC $0E							;C2/25CC: E5 0E        SBC $0E
	BCS +							;C2/25CE: B0 02        BCS $25D2
	LDA #$01	;min 1					;C2/25D0: A9 01        LDA #$01
+	RTS 							;C2/25D2: 60           RTS 

%org($C225D3)
;Queues up a monster's action when their ATB is ready
%sub(MonsterATB)
MonsterATB:
	LDA #$01							;C2/25D3: A9 01        LDA #$01
	STA AISkipDeadCheck						;C2/25D5: 8D 50 7C     STA $7C50
	SEC 								;C2/25D8: 38           SEC 
	LDA AttackerIndex						;C2/25D9: A5 47        LDA $47        
	SBC #$04							;C2/25DB: E9 04        SBC #$04
	STA MonsterIndex						;C2/25DD: 8D 03 7C     STA $7C03      
	JSR ShiftMultiply_16						;C2/25E0: 20 B5 01     JSR $01B5      
	TAX 								;C2/25E3: AA           TAX 
	STX MonsterOffset16      					;C2/25E4: 8E 5E 43     STX $435E      
	ASL 								;C2/25E7: 0A           ASL 
	TAX 								;C2/25E8: AA           TAX 
	STX MonsterOffset32     					;C2/25E9: 8E 60 43     STX $4360      
	TDC 								;C2/25EC: 7B           TDC 
	TAY            							;C2/25ED: A8           TAY            
	STY TempCharm  							;C2/25EE: 84 22        STY $22        
	LDX MonsterOffset16 						;C2/25F0: AE 5E 43     LDX $435E
	LDA #$FF							;C2/25F3: A9 FF        LDA #$FF
-	STA MonsterMagic,X 						;C2/25F5: 9D DE 41     STA $41DE,X    
	INX 								;C2/25F8: E8           INX 
	INY 								;C2/25F9: C8           INY 
	CPY #$0010	;init 16 byte monster magic struct		;C2/25FA: C0 10 00     CPY #$0010
	BNE -								;C2/25FD: D0 F6        BNE $25F5
								;
	LDA MonsterIndex      						;C2/25FF: AD 03 7C     LDA $7C03      
	ASL 								;C2/2602: 0A           ASL 
	TAX 								;C2/2603: AA           TAX 
	LDA ROMTimes100w,X  						;C2/2604: BF 95 EE D0  LDA $D0EE95,X  
	STA $0E								;C2/2608: 85 0E        STA $0E
	LDA ROMTimes100w+1,X						;C2/260A: BF 96 EE D0  LDA $D0EE96,X
	STA $0F								;C2/260E: 85 0F        STA $0F
	TDC 								;C2/2610: 7B           TDC 
	TAY 								;C2/2611: A8           TAY 
	LDX $0E		;MonsterIndex *100				;C2/2612: A6 0E        LDX $0E
	LDA #$FF							;C2/2614: A9 FF        LDA #$FF
-	STA !MonsterAIScript,X    					;C2/2616: 9D 67 43     STA $4367,X    
	INX 								;C2/2619: E8           INX 
	INY 								;C2/261A: C8           INY 
	CPY #$0064	;init 100 bytes to $FF				;C2/261B: C0 64 00     CPY #$0064
	BNE -								;C2/261E: D0 F6        BNE $2616
	LDA AttackerIndex						;C2/2620: A5 47        LDA $47        
	JSR CalculateCharOffset      					;C2/2622: 20 EC 01     JSR $01EC      
	LDX AttackerOffset						;C2/2625: A6 32        LDX $32        
	LDA #$2C       	;magic						;C2/2627: A9 2C        LDA #$2C       
	STA CharStruct.Command,X 					;C2/2629: 9D 57 20     STA $2057,X    
	LDA #$21	;magic + costs mp				;C2/262C: A9 21        LDA #$21
	STA CharStruct.ActionFlag,X					;C2/262E: 9D 56 20     STA $2056,X    
	LDX AttackerOffset						;C2/2631: A6 32        LDX $32        
	LDA CharStruct.Status2,X    					;C2/2633: BD 1B 20     LDA $201B,X    
	ORA CharStruct.AlwaysStatus2,X					;C2/2636: 1D 71 20     ORA $2071,X
	AND #$08	;berserk					;C2/2639: 29 08        AND #$08
	BEQ .CheckCharm							;C2/263B: F0 15        BEQ $2652      

	LDA #$01							;C2/263D: A9 01        LDA #$01
	STA CharStruct.CmdCancelled,X					;C2/263F: 9D 61 20     STA $2061,X
	LDA #$80	;monster fight					;C2/2642: A9 80        LDA #$80
	STA AIBuffer							;C2/2644: 8D 40 26     STA $2640
	LDA #$FF	;end of list					;C2/2647: A9 FF        LDA #$FF
	STA AIBuffer+1							;C2/2649: 8D 41 26     STA $2641
	JSR DispatchAICommands						;C2/264C: 20 10 32     JSR $3210
	JMP .GoFinish							;C2/264F: 4C EC 26     JMP $26EC

.CheckCharm
	LDA CharStruct.Status2,X					;C2/2652: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/2655: 1D 71 20     ORA $2071,X
	AND #$10	;charm						;C2/2658: 29 10        AND #$10
	BEQ .CheckFlirt    						;C2/265A: F0 3C        BEQ $2698      
.TryRandomAction
	LDX AttackerOffset						;C2/265C: A6 32        LDX $32        
	LDA #$01							;C2/265E: A9 01        LDA #$01
	STA CharStruct.CmdCancelled,X					;C2/2660: 9D 61 20     STA $2061,X
	TDC 								;C2/2663: 7B           TDC 
	TAX 								;C2/2664: AA           TAX 
	LDA #$03							;C2/2665: A9 03        LDA #$03
	JSR Random_X_A 	;0..3						;C2/2667: 20 7C 00     JSR $007C      
	TAX 								;C2/266A: AA           TAX 
	STX $0E								;C2/266B: 86 0E        STX $0E
	LDA MonsterIndex      						;C2/266D: AD 03 7C     LDA $7C03      
	ASL 								;C2/2670: 0A           ASL 
	TAX 								;C2/2671: AA           TAX 
	REP #$20							;C2/2672: C2 20        REP #$20
	LDA BattleMonsterID,X						;C2/2674: BD 20 40     LDA $4020,X
	JSR ShiftMultiply_4      					;C2/2677: 20 B7 01     JSR $01B7      
	CLC 								;C2/267A: 18           CLC 
	ADC $0E		;random number 0..3				;C2/267B: 65 0E        ADC $0E
	TAX 		;offset into control actions table		;C2/267D: AA           TAX 
	TDC 								;C2/267E: 7B           TDC 
	SEP #$20							;C2/267F: E2 20        SEP #$20
	LDA ROMControlActions,X  					;C2/2681: BF 00 56 D0  LDA $D05600,X  
	CMP #$FF							;C2/2685: C9 FF        CMP #$FF
	BEQ .TryRandomAction	;no action in this slot, try again	;C2/2687: F0 D3        BEQ $265C
	STA AIBuffer     						;C2/2689: 8D 40 26     STA $2640      
	LDA #$FF	;end of list					;C2/268C: A9 FF        LDA #$FF
	STA AIBuffer+1							;C2/268E: 8D 41 26     STA $2641
	INC TempCharm							;C2/2691: E6 22        INC $22
	JSR DispatchAICommands						;C2/2693: 20 10 32     JSR $3210
	BRA .GoFinish							;C2/2696: 80 54        BRA $26EC

.CheckFlirt								;
	LDA CharStruct.CmdStatus,X					;C2/2698: BD 1E 20     LDA $201E,X
	AND #$08	;flirt						;C2/269B: 29 08        AND #$08
	BEQ .CheckControl						;C2/269D: F0 0C        BEQ $26AB
	LDA #$51	;throbbing command				;C2/269F: A9 51        LDA #$51
	STA CharStruct.Command,X					;C2/26A1: 9D 57 20     STA $2057,X
	LDA #$80	;other						;C2/26A4: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/26A6: 9D 56 20     STA $2056,X
	BRA .GoFinish							;C2/26A9: 80 41        BRA $26EC

.CheckControl
	LDA CharStruct.Status4,X					;C2/26AB: BD 1D 20     LDA $201D,X
	AND #$20	;control					;C2/26AE: 29 20        AND #$20
	BNE .Control							;C2/26B0: D0 09        BNE $26BB
	LDA CharStruct.Status2,X					;C2/26B2: BD 1B 20     LDA $201B,X
	AND #$40	;sleep						;C2/26B5: 29 40        AND #$40
	BNE .Sleep							;C2/26B7: D0 13        BNE $26CC
	BRA .Normal							;C2/26B9: 80 34        BRA $26EF

.Control
	TDC 								;C2/26BB: 7B           TDC 
	TAY 								;C2/26BC: A8           TAY 
-	LDA ControlTarget,Y						;C2/26BD: B9 3A 7C     LDA $7C3A,Y
	CMP AttackerIndex						;C2/26C0: C5 47        CMP $47        
	BEQ .FoundController						;C2/26C2: F0 03        BEQ $26C7
	INY 								;C2/26C4: C8           INY 
	BRA -								;C2/26C5: 80 F6        BRA $26BD
.FoundController
	LDA ControlCommand,Y						;C2/26C7: B9 3E 7C     LDA $7C3E,Y
	BNE .ControlCommand						;C2/26CA: D0 0A        BNE $26D6
.Sleep	;or controlled without a command
	STZ CharStruct.Command,X					;C2/26CC: 9E 57 20     STZ $2057,X
	LDA #$80	;action complete?				;C2/26CF: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/26D1: 9D 56 20     STA $2056,X
	BRA .GoFinish							;C2/26D4: 80 16        BRA $26EC

.ControlCommand
	TDC 								;C2/26D6: 7B           TDC 
	STA ControlCommand,Y						;C2/26D7: 99 3E 7C     STA $7C3E,Y
	LDA MonsterIndex						;C2/26DA: AD 03 7C     LDA $7C03
	TAX 								;C2/26DD: AA           TAX 
	LDA MonsterControlActions,X					;C2/26DE: BD 43 7C     LDA $7C43,X
	STA AIBuffer							;C2/26E1: 8D 40 26     STA $2640
	LDA #$FF	;end of list					;C2/26E4: A9 FF        LDA #$FF
	STA AIBuffer+1							;C2/26E6: 8D 41 26     STA $2641
	JSR DispatchAICommands						;C2/26E9: 20 10 32     JSR $3210

.GoFinish
	JMP .Finish							;C2/26EC: 4C 8A 27     JMP $278A

.Normal
	LDA MonsterIndex						;C2/26EF: AD 03 7C     LDA $7C03
	TAX 								;C2/26F2: AA           TAX 
	LDA AIActiveConditionSet,X					;C2/26F3: BD 87 46     LDA $4687,X
	STA AICurrentActiveCondSet					;C2/26F6: 8D 8F 46     STA $468F
	LDA MonsterIndex						;C2/26F9: AD 03 7C     LDA $7C03
	ASL 								;C2/26FC: 0A           ASL 
	TAX 								;C2/26FD: AA           TAX 
	REP #$20							;C2/26FE: C2 20        REP #$20
	CLC 								;C2/2700: 18           CLC 
	LDA ROMTimes1620w,X	;*1620, size of MonsterAI struct	;C2/2701: BF A5 EE D0  LDA $D0EEA5,X
	ADC #!MonsterAI							;C2/2705: 69 59 47     ADC #$4759
	STA AIOffset							;C2/2708: 85 4B        STA $4B
	TDC 								;C2/270A: 7B           TDC 
	SEP #$20							;C2/270B: E2 20        SEP #$20
	STZ AICurrentCheckedSet						;C2/270D: 9C 90 46     STZ $4690

.CheckAIConditions
	LDA AICurrentCheckedSet						;C2/2710: AD 90 46     LDA $4690
	TAX 								;C2/2713: AA           TAX 
	LDA ROMTimes17,X	;size of a MonsterAI condition		;C2/2714: BF C9 EE D0  LDA $D0EEC9,X
	TAY 								;C2/2718: A8           TAY 
	STY AIConditionOffset						;C2/2719: 8C 92 46     STY $4692
	STZ AICheckIndex						;C2/271C: 9C 91 46     STZ $4691
.CheckSingleCondition
	LDY AIConditionOffset						;C2/271F: AC 92 46     LDY $4692
	LDA (AIOffset),Y						;C2/2722: B1 4B        LDA ($4B),Y
	BEQ .AIActions		;0 always succeeds			;C2/2724: F0 2A        BEQ $2750
	CMP #$FE		;indicates end of condition set		;C2/2726: C9 FE        CMP #$FE
	BEQ .AIActions							;C2/2728: F0 26        BEQ $2750
	JSR CheckAICondition						;C2/272A: 20 BF 27     JSR $27BF      
	LDA AIConditionMet						;C2/272D: AD 94 46     LDA $4694
	BEQ .NextConditionSet      					;C2/2730: F0 14        BEQ $2746      
	REP #$20							;C2/2732: C2 20        REP #$20
	CLC 								;C2/2734: 18           CLC 
	LDA AIConditionOffset						;C2/2735: AD 92 46     LDA $4692
	ADC #$0004		;next condition in set			;C2/2738: 69 04 00     ADC #$0004
	STA AIConditionOffset						;C2/273B: 8D 92 46     STA $4692
	TDC 								;C2/273E: 7B           TDC 
	SEP #$20							;C2/273F: E2 20        SEP #$20
	INC AICheckIndex						;C2/2741: EE 91 46     INC $4691
	BRA .CheckSingleCondition					;C2/2744: 80 D9        BRA $271F

.NextConditionSet	;failed a condition in this set, check next set of conditions
	INC AICurrentCheckedSet						;C2/2746: EE 90 46     INC $4690
	LDA AICurrentCheckedSet						;C2/2749: AD 90 46     LDA $4690
	CMP #$0A		;10 conditions max			;C2/274C: C9 0A        CMP #$0A
	BNE .CheckAIConditions						;C2/274E: D0 C0        BNE $2710

.AIActions
	REP #$20							;C2/2750: C2 20        REP #$20
	CLC 								;C2/2752: 18           CLC 
	LDA AIOffset							;C2/2753: A5 4B        LDA $4B
	ADC #$00AA	;advances from Conditions to Actions		;C2/2755: 69 AA 00     ADC #$00AA
	STA AIOffset							;C2/2758: 85 4B        STA $4B
	TDC 								;C2/275A: 7B           TDC 
	SEP #$20							;C2/275B: E2 20        SEP #$20
	LDA AICurrentActiveCondSet					;C2/275D: AD 8F 46     LDA $468F
	CMP AICurrentCheckedSet						;C2/2760: CD 90 46     CMP $4690
	BEQ .ConditionOK	;matches so don't need to change things	;C2/2763: F0 22        BEQ $2787
	LDA MonsterIndex						;C2/2765: AD 03 7C     LDA $7C03
	TAX 								;C2/2768: AA           TAX 
	LDA AICurrentCheckedSet						;C2/2769: AD 90 46     LDA $4690
	STA AIActiveConditionSet,X	;checked cond is now current	;C2/276C: 9D 87 46     STA $4687,X
	LDA MonsterIndex						;C2/276F: AD 03 7C     LDA $7C03
	ASL 								;C2/2772: 0A           ASL 
	TAY 								;C2/2773: A8           TAY 
	LDA AICurrentCheckedSet						;C2/2774: AD 90 46     LDA $4690
	ASL 								;C2/2777: 0A           ASL 
	TAX 								;C2/2778: AA           TAX 
	LDA ROMTimes64w,X						;C2/2779: BF B5 EE D0  LDA $D0EEB5,X
	STA AICurrentOffset,Y						;C2/277D: 99 96 46     STA $4696,Y
	LDA ROMTimes64w+1,X						;C2/2780: BF B6 EE D0  LDA $D0EEB6,X
	STA AICurrentOffset+1,Y						;C2/2784: 99 97 46     STA $4697,Y
.ConditionOK
	JSR ProcessAIScript						;C2/2787: 20 3B 31     JSR $313B       
.Finish
	LDX MonsterOffset16						;C2/278A: AE 5E 43     LDX $435E
	LDA MonsterMagic,X    						;C2/278D: BD DE 41     LDA $41DE,X     
	REP #$20							;C2/2790: C2 20        REP #$20
	JSR ShiftMultiply_8   						;C2/2792: 20 B6 01     JSR $01B6       
	TAX 								;C2/2795: AA           TAX 
	TDC 								;C2/2796: 7B           TDC 
	SEP #$20							;C2/2797: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/2799: BF 80 0B D1  LDA $D10B80,X   
	AND #$03       	;delay values					;C2/279D: 29 03        AND #$03        
	TAX								;C2/279F: AA           TAX
	LDA ROMTimes10,X  						;C2/27A0: BF EE EC D0  LDA $D0ECEE,X   
	PHA 								;C2/27A4: 48           PHA 
	LDA AttackerIndex						;C2/27A5: A5 47        LDA $47         
	JSR GetTimerOffset    						;C2/27A7: 20 07 02     JSR $0207       
	PLA 		;**bug? doesn't adjust for haste/slow		;C2/27AA: 68           PLA 
	STA CurrentTimer.ATB,Y   					;C2/27AB: 99 7F 3D     STA $3D7F,Y     
	LDA #$41	;pending action					;C2/27AE: A9 41        LDA #$41
	STA EnableTimer.ATB,Y    					;C2/27B0: 99 FB 3C     STA $3CFB,Y     
	LDA MonsterIndex						;C2/27B3: AD 03 7C     LDA $7C03
	ASL 								;C2/27B6: 0A           ASL 
	TAX 								;C2/27B7: AA           TAX 
	STZ ForcedTarget.Party,X					;C2/27B8: 9E 2A 7C     STZ $7C2A,X
	STZ ForcedTarget.Monster,X					;C2/27BB: 9E 2B 7C     STZ $7C2B,X
	RTS 								;C2/27BE: 60           RTS 
%endsub()

%org($C227BF)
CheckAICondition:
	CMP #$13	;$12 is last valid condition			;C2/27BF: C9 13        CMP #$13
	BCC +   							;C2/27C1: 90 01        BCC $27C4       
	TDC 		;always succeed	(if invalid)			;C2/27C3: 7B           TDC 
+	STA $0E		;condition to check				;C2/27C4: 85 0E        STA $0E
	ASL 								;C2/27C6: 0A           ASL 
	TAX 								;C2/27C7: AA           TAX 
	LDA AICondition,X						;C2/27C8: BF 14 28 C2  LDA $C22814,X   
	STA $08								;C2/27CC: 85 08        STA $08
	LDA AICondition+1,X						;C2/27CE: BF 15 28 C2  LDA $C22815,X
	STA $09								;C2/27D2: 85 09        STA $09
	LDA.b #bank(AICondition)					;C2/27D4: A9 C2        LDA #$C2
	STA $0A								;C2/27D6: 85 0A        STA $0A
	INY 								;C2/27D8: C8           INY 
	LDA (AIOffset),Y  						;C2/27D9: B1 4B        LDA ($4B),Y     
	STA AIParam1							;C2/27DB: 8D 21 27     STA $2721
	INY 								;C2/27DE: C8           INY 
	LDA (AIOffset),Y  						;C2/27DF: B1 4B        LDA ($4B),Y     
	STA AIParam2							;C2/27E1: 8D 22 27     STA $2722
	INY 								;C2/27E4: C8           INY 
	LDA (AIOffset),Y  						;C2/27E5: B1 4B        LDA ($4B),Y     
	STA AIParam3							;C2/27E7: 8D 23 27     STA $2723
	STZ AIConditionMet    						;C2/27EA: 9C 94 46     STZ $4694       
	LDA AISkipDeadCheck						;C2/27ED: AD 50 7C     LDA $7C50
	BNE .Jump   							;C2/27F0: D0 1F        BNE $2811       
	LDX AttackerOffset						;C2/27F2: A6 32        LDX $32         
	LDA CharStruct.CurHP,X						;C2/27F4: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/27F7: 1D 07 20     ORA $2007,X
	BEQ .Dead    							;C2/27FA: F0 07        BEQ $2803       
	LDA CharStruct.Status1,X					;C2/27FC: BD 1A 20     LDA $201A,X
	AND #$C0	;dead or stone					;C2/27FF: 29 C0        AND #$C0
	BEQ .NotDead   							;C2/2801: F0 07        BEQ $280A       
.Dead
	LDA $0E								;C2/2803: A5 0E        LDA $0E
	CMP #$0F	;condition: dead 				;C2/2805: C9 0F        CMP #$0F
	BEQ .Jump    							;C2/2807: F0 08        BEQ $2811       
	RTS 								;C2/2809: 60           RTS 

.NotDead
	LDA $0E								;C2/280A: A5 0E        LDA $0E
	CMP #$0F	;auto-fail condition: dead if not dead		;C2/280C: C9 0F        CMP #$0F
	BNE .Jump    							;C2/280E: D0 01        BNE $2811       
	RTS 								;C2/2810: 60           RTS 
	
.Jump	JML [$0008]	;jump to AICondition table			;C2/2811: DC 08 00     JML [$0008]

%org($C22814)
AICondition:
%generatejumptable(AICondition,$12)
;vanilla values:
;C2/2814:              .DW $283A, $283E, $289D, $28DB, $28EB, $291F, $2939, $29B1
;C2/2824:              .DW $2A29, $2A63, $2A9D, $2AD2, $2B19, $2B2A, $2B6F, $2B87
;C2/2834:              .DW $2B93, $2BC0, $2BFD

%org($C2283A)
;AI Condition $00: Always Succeed
AICondition00:		
	INC AIConditionMet						;C2/283A: EE 94 46     INC $4694       
	RTS 								;C2/283D: 60           RTS 

%org($C2283E)
;AI Condition 01: Check Status
;Param1: AITarget routine
;Param2: Status offset (0-3 for status 1-4)
;Param3: Status bits
;if checking for death status, also succeed if hp is 0 (though this behavior is bugged)
%sub(AICondition01)
AICondition01:		
	LDA AIParam1							;C2/283E: AD 21 27     LDA $2721       
	JSR GetAITarget	;populates list of targets to check		;C2/2841: 20 27 2C     JSR $2C27       
	LDA AIParam2  							;C2/2844: AD 22 27     LDA $2722       
	TAX 								;C2/2847: AA           TAX 
	STX $0E								;C2/2848: 86 0E        STX $0E
	TDC 								;C2/284A: 7B           TDC 
	TAY 								;C2/284B: A8           TAY 
.Loop	REP #$20							;C2/284C: C2 20        REP #$20
	LDA AITargetOffsets,Y						;C2/284E: B9 20 26     LDA $2620,Y
	CMP #$FFFF	;end of list or no target found			;C2/2851: C9 FF FF     CMP #$FFFF
	BNE .TargetFound						;C2/2854: D0 05        BNE $285B
	TDC 								;C2/2856: 7B           TDC 
	SEP #$20							;C2/2857: E2 20        SEP #$20
	BRA .Finish							;C2/2859: 80 31        BRA $288C

.TargetFound
	STA $10		;target offset					;C2/285B: 85 10        STA $10
	CLC 								;C2/285D: 18           CLC 
	ADC $0E		;status offset					;C2/285E: 65 0E        ADC $0E
	TAX 								;C2/2860: AA           TAX 
	TDC 								;C2/2861: 7B           TDC 
	SEP #$20							;C2/2862: E2 20        SEP #$20
	LDA CharStruct.Status1,X	;could be status 1-4 depending	;C2/2864: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X	;on status offset		;C2/2867: 1D 70 20     ORA $2070,X
	AND AIParam3							;C2/286A: 2D 23 27     AND $2723
	BNE .Match							;C2/286D: D0 13        BNE $2882
	LDA $0E								;C2/286F: A5 0E        LDA $0E
	BNE .Next							;C2/2871: D0 12        BNE $2885
	LDA AIParam3							;C2/2873: AD 23 27     LDA $2723
	BPL .Next							;C2/2876: 10 0D        BPL $2885
	LDX $10			;if asked to check death status		;C2/2878: A6 10        LDX $10
	LDA CharStruct.CurHP,X	;also succeed if hp is 0		;C2/287A: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP,X	;**bug: should be HP high byte $2007	;C2/287D: 1D 06 20     ORA $2006,X

	BNE .Next							;C2/2880: D0 03        BNE $2885
.Match	INC AIConditionMet						;C2/2882: EE 94 46     INC $4694      
.Next	INY 								;C2/2885: C8           INY 
	INY 								;C2/2886: C8           INY 
	CPY #$0018	;12 characters * 2 bytes			;C2/2887: C0 18 00     CPY #$0018
	BNE .Loop							;C2/288A: D0 C0        BNE $284C
.Finish			;fail if any targets failed	
	LDA AIMultiTarget						;C2/288C: AD 24 27     LDA $2724
	BEQ .Ret							;C2/288F: F0 0B        BEQ $289C
	LDA AITargetCount						;C2/2891: AD 25 27     LDA $2725
	CMP AIConditionMet						;C2/2894: CD 94 46     CMP $4694
	BEQ .Ret							;C2/2897: F0 03        BEQ $289C
	STZ AIConditionMet  						;C2/2899: 9C 94 46     STZ $4694      
.Ret	RTS 								;C2/289C: 60           RTS 
%endsub()

%org($C2289D)
;AI Condition 02: HP less than value
;Param1: AITarget routine
;Param2: HP (low byte)
;Param3: HP (high byte)
AICondition02:
	LDA AIParam1							;C2/289D: AD 21 27     LDA $2721
	JSR GetAITarget  						;C2/28A0: 20 27 2C     JSR $2C27      
	TDC 								;C2/28A3: 7B           TDC 
	TAY 								;C2/28A4: A8           TAY 
.Loop	REP #$20							;C2/28A5: C2 20        REP #$20
	LDA AITargetOffsets,Y						;C2/28A7: B9 20 26     LDA $2620,Y
	TAX 								;C2/28AA: AA           TAX 
	CMP #$FFFF	;end of list or no target found			;C2/28AB: C9 FF FF     CMP #$FFFF
	BEQ .FinishMode							;C2/28AE: F0 17        BEQ $28C7
	LDA CharStruct.CurHP,X						;C2/28B0: BD 06 20     LDA $2006,X
	CMP AIParam2							;C2/28B3: CD 22 27     CMP $2722
	BCS .Next							;C2/28B6: B0 03        BCS $28BB
	INC AIConditionMet						;C2/28B8: EE 94 46     INC $4694      
.Next	TDC 								;C2/28BB: 7B           TDC 
	SEP #$20							;C2/28BC: E2 20        SEP #$20
	INY 								;C2/28BE: C8           INY 
	INY 								;C2/28BF: C8           INY 
	CPY #$0018	;12 characters * 2 bytes			;C2/28C0: C0 18 00     CPY #$0018
	BNE .Loop							;C2/28C3: D0 E0        BNE $28A5
	BRA .Finish	;not needed (resetting mode is harmless)	;C2/28C5: 80 03        BRA $28CA
.FinishMode		;need to fix A back to 8 bit
	TDC 								;C2/28C7: 7B           TDC 
	SEP #$20							;C2/28C8: E2 20        SEP #$20
.Finish			;fail if any targets failed
	LDA AIMultiTarget						;C2/28CA: AD 24 27     LDA $2724
	BEQ .Ret							;C2/28CD: F0 0B        BEQ $28DA
	LDA AITargetCount						;C2/28CF: AD 25 27     LDA $2725
	CMP AIConditionMet						;C2/28D2: CD 94 46     CMP $4694
	BEQ .Ret							;C2/28D5: F0 03        BEQ $28DA
	STZ AIConditionMet						;C2/28D7: 9C 94 46     STZ $4694      
.Ret	RTS 								;C2/28DA: 60           RTS 

%org($C228DB)
;AI Condition 03: Check Variable
;Param2: Var to check (0-3)
;Param3: Value
AICondition03:
	LDA AIParam2							;C2/28DB: AD 22 27     LDA $2722
	TAX 								;C2/28DE: AA           TAX 
	LDA AIVars,X 							;C2/28DF: BD 63 43     LDA $4363,X    
	CMP AIParam3							;C2/28E2: CD 23 27     CMP $2723
	BNE .Fail							;C2/28E5: D0 03        BNE $28EA
	INC AIConditionMet   						;C2/28E7: EE 94 46     INC $4694      
.Fail	RTS 								;C2/28EA: 60           RTS 

%org($C228EB)
;AI Condition 03: Alone 
;Param2: if 0, succeeds when completely alone
;	 if non-0, succeeds when all active monsters are the same
AICondition04:
	LDA AIParam2							;C2/28EB: AD 22 27     LDA $2722
	BNE .CheckSame							;C2/28EE: D0 0A        BNE $28FA
	LDA MonstersVisible						;C2/28F0: AD 48 40     LDA $4048
	JSR CountSetBits						;C2/28F3: 20 C3 01     JSR $01C3      
	DEX 								;C2/28F6: CA           DEX 
	BEQ .Met							;C2/28F7: F0 22        BEQ $291B
	RTS 								;C2/28F9: 60           RTS 

.CheckSame
	LDA MonsterIndex						;C2/28FA: AD 03 7C     LDA $7C03
	ASL 								;C2/28FD: 0A           ASL 
	TAX 								;C2/28FE: AA           TAX 
	LDA BattleMonsterID,X						;C2/28FF: BD 20 40     LDA $4020,X
	STA $0E								;C2/2902: 85 0E        STA $0E
	TDC 								;C2/2904: 7B           TDC 
	TAY 								;C2/2905: A8           TAY 
.Loop	LDA ActiveParticipants+4,Y					;C2/2906: B9 C6 3E     LDA $3EC6,Y
	BEQ .Next							;C2/2909: F0 0A        BEQ $2915
	TYA 								;C2/290B: 98           TYA 
	ASL 								;C2/290C: 0A           ASL 
	TAX 								;C2/290D: AA           TAX 
	LDA BattleMonsterID,X						;C2/290E: BD 20 40     LDA $4020,X
	CMP $0E								;C2/2911: C5 0E        CMP $0E
	BNE .Fail							;C2/2913: D0 09        BNE $291E
.Next	INY 								;C2/2915: C8           INY 
	CPY #$0008							;C2/2916: C0 08 00     CPY #$0008
	BNE .Loop							;C2/2919: D0 EB        BNE $2906
.Met
	INC AIConditionMet 						;C2/291B: EE 94 46     INC $4694      
.Fail	RTS 								;C2/291E: 60           RTS 

%org($C2291F)
;AI Condition 05: Compare Visible Monsters
;Param1: if 0, succeeds if visible monsters match provided value
;	 if non-0, succeeds if they do not match
;Param3: Monster Bits (1 bit per monster)
AICondition05:
	LDA AIParam1							;C2/291F: AD 21 27     LDA $2721
	BEQ .CheckMatch							;C2/2922: F0 09        BEQ $292D
	LDA MonstersVisible						;C2/2924: AD 48 40     LDA $4048
	CMP AIParam3							;C2/2927: CD 23 27     CMP $2723
	BNE .Met							;C2/292A: D0 09        BNE $2935
	RTS 								;C2/292C: 60           RTS 

.CheckMatch
	LDA MonstersVisible						;C2/292D: AD 48 40     LDA $4048
	CMP AIParam3							;C2/2930: CD 23 27     CMP $2723
	BNE .Fail							;C2/2933: D0 03        BNE $2938
.Met	INC AIConditionMet						;C2/2935: EE 94 46     INC $4694      
.Fail	RTS 								;C2/2938: 60           RTS 

%org($C22939)
;AI Condition 06: Reaction to Command and/or Element
;Param1: if set, inverts test so a match fails the condition, and ignores element when checking commands
;Param2: Command (post-remap values)
;	 Command $07, normally BuildUp, is used as a flag to skip the command check and just check element
;Param3: Element (ignored if zero)
AICondition06:
	LDX AttackerOffset						;C2/2939: A6 32        LDX $32        
	LDA ReactionFlags						;C2/293B: AD 53 47     LDA $4753
	AND #$01							;C2/293E: 29 01        AND #$01
	BNE .Reaction2	;Check 2nd set of reactions instead		;C2/2940: D0 36        BNE $2978
	LDA AIParam2	;command					;C2/2942: AD 22 27     LDA $2722
	CMP #$07	;used as a flag to skip command check		;C2/2945: C9 07        CMP #$07
	BEQ .SkipCmdCheck1						;C2/2947: F0 16        BEQ $295F
	LDA AIParam1	;invert checks					;C2/2949: AD 21 27     LDA $2721
	BEQ .CheckCmdMatch1						;C2/294C: F0 09        BEQ $2957
	LDA AIParam2							;C2/294E: AD 22 27     LDA $2722
	CMP CharStruct.Reaction1Command,X				;C2/2951: DD 46 20     CMP $2046,X
	BNE .Met	;if param1 is >0, succeed when no cmd match	;C2/2954: D0 57        BNE $29AD
	RTS 								;C2/2956: 60           RTS 

.CheckCmdMatch1
	LDA AIParam2							;C2/2957: AD 22 27     LDA $2722
	CMP CharStruct.Reaction1Command,X				;C2/295A: DD 46 20     CMP $2046,X
	BNE .Fail	;if param1 is 0, fail when no cmd match		;C2/295D: D0 51        BNE $29B0
.SkipCmdCheck1		;command match or command $07 override 
	LDA AIParam1							;C2/295F: AD 21 27     LDA $2721
	BEQ .CheckElemMatch1						;C2/2962: F0 09        BEQ $296D
	LDA AIParam3	;element					;C2/2964: AD 23 27     LDA $2723
	AND CharStruct.Reaction1Element,X				;C2/2967: 3D 49 20     AND $2049,X
	BEQ .Met	;if param1 is >0, succeed when no elem match	;C2/296A: F0 41        BEQ $29AD
	RTS 		;(only reachable via the $07 override)		;C2/296C: 60           RTS 

.CheckElemMatch1
	LDA AIParam3							;C2/296D: AD 23 27     LDA $2723
	BEQ .Met	;succeed when element is 0			;C2/2970: F0 3B        BEQ $29AD
	AND CharStruct.Reaction1Element,X				;C2/2972: 3D 49 20     AND $2049,X
	BNE .Met	;or when any element matches			;C2/2975: D0 36        BNE $29AD
	RTS 								;C2/2977: 60           RTS 

.Reaction2	;same logic as above, but react to the second stored command
	LDA AIParam2							;C2/2978: AD 22 27     LDA $2722
	CMP #$07							;C2/297B: C9 07        CMP #$07
	BEQ .SkipCmdCheck2						;C2/297D: F0 16        BEQ $2995
	LDA AIParam1							;C2/297F: AD 21 27     LDA $2721
	BEQ .CheckCmdMatch2						;C2/2982: F0 09        BEQ $298D
	LDA AIParam2							;C2/2984: AD 22 27     LDA $2722
	CMP CharStruct.Reaction2Command,X				;C2/2987: DD 4D 20     CMP $204D,X
	BNE .Met							;C2/298A: D0 21        BNE $29AD
	RTS 								;C2/298C: 60           RTS 

.CheckCmdMatch2
	LDA AIParam2							;C2/298D: AD 22 27     LDA $2722
	CMP CharStruct.Reaction2Command,X				;C2/2990: DD 4D 20     CMP $204D,X
	BNE .Fail							;C2/2993: D0 1B        BNE $29B0
.SkipCmdCheck2
	LDA AIParam1							;C2/2995: AD 21 27     LDA $2721
	BEQ .CheckElemMatch2						;C2/2998: F0 09        BEQ $29A3
	LDA AIParam3							;C2/299A: AD 23 27     LDA $2723
	AND CharStruct.Reaction2Element,X				;C2/299D: 3D 7B 20     AND $207B,X
	BEQ .Met							;C2/29A0: F0 0B        BEQ $29AD
	RTS 								;C2/29A2: 60           RTS 

.CheckElemMatch2
	LDA AIParam3							;C2/29A3: AD 23 27     LDA $2723
	BEQ .Met							;C2/29A6: F0 05        BEQ $29AD
	AND CharStruct.Reaction2Element,X				;C2/29A8: 3D 7B 20     AND $207B,X
	BEQ .Fail							;C2/29AB: F0 03        BEQ $29B0
.Met	INC AIConditionMet						;C2/29AD: EE 94 46     INC $4694      
.Fail	RTS 								;C2/29B0: 60           RTS 

%org($C229B1)
;AI Condition $07: Reaction to Command and/or Category
;Param1: if set, inverts test so a match fails the condition, and ignores category when checking commands
;Param2: Command (post-remap values)
;	 Command $07, normally BuildUp, is used as a flag to skip the command check and just check category
;Param3: Category (ignored if zero)
AICondition07:
	LDX AttackerOffset						;C2/29B1: A6 32        LDX $32        
	LDA ReactionFlags						;C2/29B3: AD 53 47     LDA $4753
	AND #$01							;C2/29B6: 29 01        AND #$01
	BNE .Reaction2	;Check 2nd set of reactions instead		;C2/29B8: D0 36        BNE $29F0
	LDA AIParam2	;command					;C2/29BA: AD 22 27     LDA $2722
	CMP #$07	;used as a flag to skip command check		;C2/29BD: C9 07        CMP #$07
	BEQ .SkipCmdCheck1						;C2/29BF: F0 16        BEQ $29D7
	LDA AIParam1	;invert checks if set				;C2/29C1: AD 21 27     LDA $2721
	BEQ .CheckCmdMatch1						;C2/29C4: F0 09        BEQ $29CF
	LDA AIParam2							;C2/29C6: AD 22 27     LDA $2722
	CMP CharStruct.Reaction1Command,X				;C2/29C9: DD 46 20     CMP $2046,X
	BNE .Met	;if param1 is >0, succeed when no cmd match	;C2/29CC: D0 57        BNE $2A25
	RTS 								;C2/29CE: 60           RTS 

.CheckCmdMatch1
	LDA AIParam2							;C2/29CF: AD 22 27     LDA $2722
	CMP CharStruct.Reaction1Command,X				;C2/29D2: DD 46 20     CMP $2046,X
	BNE .Fail	;if param1 is 0, fail when no cmd match		;C2/29D5: D0 51        BNE $2A28
.SkipCmdCheck1		;command match or command $07 override
	LDA AIParam1							;C2/29D7: AD 21 27     LDA $2721
	BEQ .CheckCatMatch1						;C2/29DA: F0 09        BEQ $29E5
	LDA AIParam3	;category					;C2/29DC: AD 23 27     LDA $2723
	AND CharStruct.Reaction1Category,X				;C2/29DF: 3D 4A 20     AND $204A,X
	BEQ .Met	;if param1 >0, succeed when no category match	;C2/29E2: F0 41        BEQ $2A25
	RTS 								;C2/29E4: 60           RTS 

.CheckCatMatch1
	LDA AIParam3							;C2/29E5: AD 23 27     LDA $2723
	BEQ .Met	;succeed when category is 0			;C2/29E8: F0 3B        BEQ $2A25
	AND CharStruct.Reaction1Category,X				;C2/29EA: 3D 4A 20     AND $204A,X
	BNE .Met	;or when any category matches			;C2/29ED: D0 36        BNE $2A25
	RTS 								;C2/29EF: 60           RTS 

.Reaction2	;same logic as above, but react to the second stored command
	LDA AIParam2							;C2/29F0: AD 22 27     LDA $2722
	CMP #$07	;used as a flag to skip command check		;C2/29F3: C9 07        CMP #$07
	BEQ .SkipCmdCheck2						;C2/29F5: F0 16        BEQ $2A0D
	LDA AIParam1							;C2/29F7: AD 21 27     LDA $2721
	BEQ .CheckCmdMatch2						;C2/29FA: F0 09        BEQ $2A05
	LDA AIParam2							;C2/29FC: AD 22 27     LDA $2722
	CMP CharStruct.Reaction2Command,X				;C2/29FF: DD 4D 20     CMP $204D,X
	BNE .Met							;C2/2A02: D0 21        BNE $2A25
	RTS 								;C2/2A04: 60           RTS 

.CheckCmdMatch2
	LDA AIParam2							;C2/2A05: AD 22 27     LDA $2722
	CMP CharStruct.Reaction2Command,X				;C2/2A08: DD 4D 20     CMP $204D,X
	BNE .Fail							;C2/2A0B: D0 1B        BNE $2A28
.SkipCmdCheck2
	LDA AIParam1							;C2/2A0D: AD 21 27     LDA $2721
	BEQ .CheckCatMatch2						;C2/2A10: F0 09        BEQ $2A1B
	LDA AIParam3							;C2/2A12: AD 23 27     LDA $2723
	AND CharStruct.Reaction2Category,X				;C2/2A15: 3D 7C 20     AND $207C,X
	BEQ .Met							;C2/2A18: F0 0B        BEQ $2A25
	RTS 								;C2/2A1A: 60           RTS 

.CheckCatMatch2
	LDA AIParam3							;C2/2A1B: AD 23 27     LDA $2723
	BEQ .Met							;C2/2A1E: F0 05        BEQ $2A25
	AND CharStruct.Reaction2Category,X				;C2/2A20: 3D 7C 20     AND $207C,X
	BEQ .Fail							;C2/2A23: F0 03        BEQ $2A28
.Met	INC AIConditionMet	  					;C2/2A25: EE 94 46     INC $4694      
.Fail	RTS 								;C2/2A28: 60           RTS 


%org($C22A29)
;AI Condition $08: Reaction to Magic
;Param1: if set, inverts test so a match fails the condition
;Param2: Spell
AICondition08:
	LDX AttackerOffset						;C2/2A29: A6 32        LDX $32        
	LDA ReactionFlags						;C2/2A2B: AD 53 47     LDA $4753
	AND #$01	;check second set of reactions			;C2/2A2E: 29 01        AND #$01
	BNE .Reaction2							;C2/2A30: D0 17        BNE $2A49
	LDA AIParam1							;C2/2A32: AD 21 27     LDA $2721
	BEQ .CheckMatch1						;C2/2A35: F0 09        BEQ $2A40
	LDA CharStruct.Reaction1Magic,X					;C2/2A37: BD 47 20     LDA $2047,X
	CMP AIParam2							;C2/2A3A: CD 22 27     CMP $2722
	BNE .Met							;C2/2A3D: D0 20        BNE $2A5F
	RTS 								;C2/2A3F: 60           RTS 

.CheckMatch1
	LDA CharStruct.Reaction1Magic,X					;C2/2A40: BD 47 20     LDA $2047,X
	CMP AIParam2							;C2/2A43: CD 22 27     CMP $2722
	BEQ .Met							;C2/2A46: F0 17        BEQ $2A5F
	RTS 								;C2/2A48: 60           RTS 

.Reaction2
	LDA AIParam1							;C2/2A49: AD 21 27     LDA $2721
	BEQ .CheckMatch2						;C2/2A4C: F0 09        BEQ $2A57
	LDA CharStruct.Reaction2Magic,X					;C2/2A4E: BD 4E 20     LDA $204E,X
	CMP AIParam2							;C2/2A51: CD 22 27     CMP $2722
	BNE .Met							;C2/2A54: D0 09        BNE $2A5F
	RTS 								;C2/2A56: 60           RTS 

.CheckMatch2
	LDA CharStruct.Reaction2Magic,X					;C2/2A57: BD 4E 20     LDA $204E,X
	CMP AIParam2							;C2/2A5A: CD 22 27     CMP $2722
	BNE .Fail							;C2/2A5D: D0 03        BNE $2A62
.Met	INC AIConditionMet 						;C2/2A5F: EE 94 46     INC $4694      
.Fail	RTS 								;C2/2A62: 60           RTS 

%org($C22A63)
;AI Condition $09: Reaction to Item
;Param1: if set, inverts test so a match fails the condition
;Param2: Item
AICondition09:
	LDX AttackerOffset     						;C2/2A63: A6 32        LDX $32        
	LDA ReactionFlags						;C2/2A65: AD 53 47     LDA $4753
	AND #$01	;check second set of reactions			;C2/2A68: 29 01        AND #$01
	BNE .Reaction2							;C2/2A6A: D0 17        BNE $2A83
	LDA AIParam1							;C2/2A6C: AD 21 27     LDA $2721
	BEQ .CheckMatch1						;C2/2A6F: F0 09        BEQ $2A7A
	LDA CharStruct.Reaction1Item,X					;C2/2A71: BD 48 20     LDA $2048,X
	CMP AIParam2							;C2/2A74: CD 22 27     CMP $2722
	BNE .Met							;C2/2A77: D0 20        BNE $2A99
	RTS 								;C2/2A79: 60           RTS 

.CheckMatch1
	LDA CharStruct.Reaction1Item,X					;C2/2A7A: BD 48 20     LDA $2048,X
	CMP AIParam2							;C2/2A7D: CD 22 27     CMP $2722
	BEQ .Met							;C2/2A80: F0 17        BEQ $2A99
	RTS 								;C2/2A82: 60           RTS 

.Reaction2
	LDA AIParam1							;C2/2A83: AD 21 27     LDA $2721
	BEQ .CheckMatch2						;C2/2A86: F0 09        BEQ $2A91
	LDA CharStruct.Reaction2Item,X					;C2/2A88: BD 4F 20     LDA $204F,X
	CMP AIParam2							;C2/2A8B: CD 22 27     CMP $2722
	BNE .Met							;C2/2A8E: D0 09        BNE $2A99
	RTS 								;C2/2A90: 60           RTS 

.CheckMatch2
	LDA CharStruct.Reaction2Item,X					;C2/2A91: BD 4F 20     LDA $204F,X
	CMP AIParam2							;C2/2A94: CD 22 27     CMP $2722
	BNE .Fail							;C2/2A97: D0 03        BNE $2A9C
.Met	INC AIConditionMet 						;C2/2A99: EE 94 46     INC $4694      
.Fail	RTS 								;C2/2A9C: 60           RTS 

%org($C22A9D)
;AI Condition $0A: Reaction to Targetting
;Param3: if 0, succeeds when attack was single target
;	 if non-0, succeeds when attack was multi target
AICondition0A:
	LDA ReactionFlags						;C2/2A9D: AD 53 47     LDA $4753
	AND #$01	;check second set of reactions			;C2/2AA0: 29 01        AND #$01
	BNE .Reaction2							;C2/2AA2: D0 0E        BNE $2AB2
	LDX AttackerOffset						;C2/2AA4: A6 32        LDX $32        
	LDA CharStruct.Reaction1Targets,X				;C2/2AA6: BD 4B 20     LDA $204B,X
	JSR CountSetBits   						;C2/2AA9: 20 C3 01     JSR $01C3      
	DEX 		;targets -1					;C2/2AAC: CA           DEX 
	BMI .Fail	;fail for 0 targets				;C2/2AAD: 30 11        BMI $2AC0
	JMP .CheckInvert						;C2/2AAF: 4C C1 2A     JMP $2AC1

.Reaction2
	LDX AttackerOffset     						;C2/2AB2: A6 32        LDX $32        
	LDA CharStruct.Reaction2Targets,X				;C2/2AB4: BD 7D 20     LDA $207D,X
	JSR CountSetBits						;C2/2AB7: 20 C3 01     JSR $01C3      
	DEX 		;targets -1					;C2/2ABA: CA           DEX 
	BMI .Fail	;fail for 0 targets				;C2/2ABB: 30 03        BMI $2AC0
	JSR .CheckInvert						;C2/2ABD: 20 C1 2A     JSR $2AC1
.Fail	RTS 								;C2/2AC0: 60           RTS 

.CheckInvert
	LDA AIParam3	;inverts check					;C2/2AC1: AD 23 27     LDA $2723
	BNE .Invert							;C2/2AC4: D0 05        BNE $2ACB
	TXA 								;C2/2AC6: 8A           TXA 
	BNE .Fail2	;fail for >1 targets				;C2/2AC7: D0 08        BNE $2AD1
	BEQ .Met	;succeed for exactly 1 target			;C2/2AC9: F0 03        BEQ $2ACE

.Invert
	TXA 								;C2/2ACB: 8A           TXA 
	BEQ .Fail2	;fail for exactly 1 target			;C2/2ACC: F0 03        BEQ $2AD1
.Met	INC AIConditionMet						;C2/2ACE: EE 94 46     INC $4694      
.Fail2	RTS 								;C2/2AD1: 60           RTS 

%org($C22AD2)
;AI Condition 0B: Check CharStruct param
;Param1: AITarget routine
;Param2: Offset within CharStruct to check
;Param3: Value for success
AICondition0B:
	LDA AIParam1							;C2/2AD2: AD 21 27     LDA $2721
	JSR GetAITarget	;populates list of targets to check		;C2/2AD5: 20 27 2C     JSR $2C27      
	LDA AIParam2							;C2/2AD8: AD 22 27     LDA $2722
	TAX 								;C2/2ADB: AA           TAX 
	STX $0E		;Offset within CharStruct			;C2/2ADC: 86 0E        STX $0E
	TDC 								;C2/2ADE: 7B           TDC 
	TAY 								;C2/2ADF: A8           TAY 
.Loop	REP #$20							;C2/2AE0: C2 20        REP #$20
	LDA AITargetOffsets,Y						;C2/2AE2: B9 20 26     LDA $2620,Y    
	CMP #$FFFF	;end of list or no target found			;C2/2AE5: C9 FF FF     CMP #$FFFF
	BNE .TargetFound 						;C2/2AE8: D0 05        BNE $2AEF      
	TDC 								;C2/2AEA: 7B           TDC 
	SEP #$20							;C2/2AEB: E2 20        SEP #$20
	BRA .Finish							;C2/2AED: 80 19        BRA $2B08

.TargetFound
	CLC 								;C2/2AEF: 18           CLC 
	ADC $0E		;Offset within CharStruct			;C2/2AF0: 65 0E        ADC $0E
	TAX 								;C2/2AF2: AA           TAX 
	TDC 								;C2/2AF3: 7B           TDC 
	SEP #$20							;C2/2AF4: E2 20        SEP #$20
	LDA CharStruct.0,X	;check any single CharStruct byte	;C2/2AF6: BD 00 20     LDA $2000,X
	CMP AIParam3		;compare with provided value		;C2/2AF9: CD 23 27     CMP $2723
	BNE +								;C2/2AFC: D0 03        BNE $2B01
	INC AIConditionMet  						;C2/2AFE: EE 94 46     INC $4694      
+	INY        							;C2/2B01: C8           INY            
	INY 								;C2/2B02: C8           INY 
	CPY #$0018	;12 characters * 2 bytes			;C2/2B03: C0 18 00     CPY #$0018
	BNE .Loop							;C2/2B06: D0 D8        BNE $2AE0

.Finish			;fail if any targets failed
	LDA AIMultiTarget						;C2/2B08: AD 24 27     LDA $2724
	BEQ .Ret							;C2/2B0B: F0 0B        BEQ $2B18
	LDA AITargetCount						;C2/2B0D: AD 25 27     LDA $2725
	CMP AIConditionMet						;C2/2B10: CD 94 46     CMP $4694
	BEQ .Ret							;C2/2B13: F0 03        BEQ $2B18
	STZ AIConditionMet  						;C2/2B15: 9C 94 46     STZ $4694      
.Ret	RTS 								;C2/2B18: 60           RTS 

%org($C22B19)
;AI Condition $0C: Compare with value at $A2?
;Param2/3: 16 bit Value to compare, succeeds if >= value at $A2
AICondition0C:
	REP #$20							;C2/2B19: C2 20        REP #$20
	LDA $00A2	;something from C1 bank	code			;C2/2B1B: AD A2 00     LDA $00A2
	CMP AIParam2							;C2/2B1E: CD 22 27     CMP $2722
	BCC +								;C2/2B21: 90 03        BCC $2B26
	INC AIConditionMet  						;C2/2B23: EE 94 46     INC $4694      
+	TDC 								;C2/2B26: 7B           TDC 
	SEP #$20							;C2/2B27: E2 20        SEP #$20
	RTS 								;C2/2B29: 60           RTS 

%org($C22B2A)
;AI Condition $0D: Check Event Flags
;Param2: Event Flag # (0-15)
;Param3: Value (bitmask)

;There's a special case for Event Flag 03
AICondition0D:
	LDA AIParam2							;C2/2B2A: AD 22 27     LDA $2722
	TAX 								;C2/2B2D: AA           TAX 
	CMP #$03		;special case				;C2/2B2E: C9 03        CMP #$03
	BNE .CheckEventFlags	;otherwise just compares flag bits	;C2/2B30: D0 31        BNE $2B63
	STZ $0E								;C2/2B32: 64 0E        STZ $0E
	TDC 								;C2/2B34: 7B           TDC 
	TAX 								;C2/2B35: AA           TAX 
	TAY 								;C2/2B36: A8           TAY 
.PartyLoop
	LDA BattleData.EventFlags+3					;C2/2B37: AD 87 7C     LDA $7C87
	JSR SelectBit_X  						;C2/2B3A: 20 DB 01     JSR $01DB      
	BEQ .Next	;if flag bit not set, skip this party slot	;C2/2B3D: F0 0F        BEQ $2B4E
	PHX 								;C2/2B3F: DA           PHX 
	LDA CharStruct.CharRow,Y					;C2/2B40: B9 00 20     LDA $2000,Y
	AND #$07	;character (butz, etc)				;C2/2B43: 29 07        AND #$07
	TAX 								;C2/2B45: AA           TAX 
	LDA $0E								;C2/2B46: A5 0E        LDA $0E
	JSR SetBit_X 	;otherwise, set bit corresponding with char	;C2/2B48: 20 D6 01     JSR $01D6      
	STA $0E								;C2/2B4B: 85 0E        STA $0E
	PLX 								;C2/2B4D: FA           PLX 
.Next
	REP #$20							;C2/2B4E: C2 20        REP #$20
	TYA 								;C2/2B50: 98           TYA 
	CLC 								;C2/2B51: 18           CLC 
	ADC #$0080	;next CharStruct Offset				;C2/2B52: 69 80 00     ADC #$0080
	TAY 								;C2/2B55: A8           TAY 
	TDC 								;C2/2B56: 7B           TDC 
	SEP #$20							;C2/2B57: E2 20        SEP #$20
	INX 								;C2/2B59: E8           INX 
	CPX #$0004	;4 party slots					;C2/2B5A: E0 04 00     CPX #$0004
	BNE .PartyLoop							;C2/2B5D: D0 D8        BNE $2B37
	LDA $0E		;bits set for party chars matching flag slots	;C2/2B5F: A5 0E        LDA $0E
	BRA .CheckMatch							;C2/2B61: 80 03        BRA $2B66

.CheckEventFlags
	LDA BattleData.EventFlags,X					;C2/2B63: BD 84 7C     LDA $7C84,X
.CheckMatch
	AND AIParam3							;C2/2B66: 2D 23 27     AND $2723
	BEQ .Ret							;C2/2B69: F0 03        BEQ $2B6E
	INC AIConditionMet 						;C2/2B6B: EE 94 46     INC $4694      
.Ret	RTS 								;C2/2B6E: 60           RTS 

%org($C22B6F)
;AI Condition $0E: Reaction to Damage
%sub(AICondition0E)
AICondition0E:
	
	;**bug: doesn't load X for second path, though luckily it's usually correct already
	LDA ReactionFlags						;C2/2B6F: AD 53 47     LDA $4753
	AND #$01	;check second set of reactions			;C2/2B72: 29 01        AND #$01
	BNE .Reaction2							;C2/2B74: D0 08        BNE $2B7E
	LDX AttackerOffset						;C2/2B76: A6 32        LDX $32        
	LDA CharStruct.Reaction1Damage,X				;C2/2B78: BD 4C 20     LDA $204C,X
	BNE .Met							;C2/2B7B: D0 06        BNE $2B83
	RTS 								;C2/2B7D: 60           RTS 

.Reaction2		
	LDA CharStruct.Reaction2Damage,X				;C2/2B7E: BD 7E 20     LDA $207E,X
	BEQ .Fail							;C2/2B81: F0 03        BEQ $2B86
.Met	INC AIConditionMet  						;C2/2B83: EE 94 46     INC $4694      
.Fail	RTS 								;C2/2B86: 60           RTS 
%endsub()

%org($C22B87)
;AI Condition $0F: Sets flag to skip dead monster checks (Always Succeeds)
AICondition0F:
	STZ $4751							;C2/2B87: 9C 51 47     STZ $4751
	LDA #$01							;C2/2B8A: A9 01        LDA #$01
	STA AISkipDeadCheck						;C2/2B8C: 8D 50 7C     STA $7C50
	STA AIConditionMet						;C2/2B8F: 8D 94 46     STA $4694      
	RTS 								;C2/2B92: 60           RTS 

%org($C22B93)
;AI Condition $10: One party member alive
AICondition10:
	TDC 								;C2/2B93: 7B           TDC 
	TAX 								;C2/2B94: AA           TAX 
	TAY 								;C2/2B95: A8           TAY 
	STY $0E								;C2/2B96: 84 0E        STY $0E
.PartyLoop	;count number of active party members
	LDA ActiveParticipants,Y					;C2/2B98: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next							;C2/2B9B: F0 11        BEQ $2BAE
	LDA CharStruct.Status1,X					;C2/2B9D: BD 1A 20     LDA $201A,X
	AND #$C2	;Dead/Stone/Zombie				;C2/2BA0: 29 C2        AND #$C2
	BNE .Next  							;C2/2BA2: D0 0A        BNE $2BAE      
	LDA CharStruct.CurHP,X						;C2/2BA4: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/2BA7: 1D 07 20     ORA $2007,X
	BEQ .Next  							;C2/2BAA: F0 02        BEQ $2BAE      
	INC $0E    	;count of active characters			;C2/2BAC: E6 0E        INC $0E        
.Next	JSR NextCharOffset 						;C2/2BAE: 20 E0 01     JSR $01E0      
	INY 								;C2/2BB1: C8           INY 
	CPY #$0004	;4 party members				;C2/2BB2: C0 04 00     CPY #$0004
	BNE .PartyLoop							;C2/2BB5: D0 E1        BNE $2B98

	LDA $0E								;C2/2BB7: A5 0E        LDA $0E
	DEC 								;C2/2BB9: 3A           DEC 
	BNE .Fail  	;>1 party member active				;C2/2BBA: D0 03        BNE $2BBF      
	INC AIConditionMet						;C2/2BBC: EE 94 46     INC $4694
.Fail	RTS 								;C2/2BBF: 60           RTS 

%org($C22BC0)
;AI Condition $11: Reaction to Summon
AICondition11:
	LDA ReactionFlags						;C2/2BC0: AD 53 47     LDA $4753
	AND #$01	;check second set of reactions			;C2/2BC3: 29 01        AND #$01
	BNE .Reaction2							;C2/2BC5: D0 1A        BNE $2BE1
	LDX AttackerOffset						;C2/2BC7: A6 32        LDX $32        
	LDA CharStruct.Reaction1Command,X				;C2/2BC9: BD 46 20     LDA $2046,X
	CMP #$2B	;magic						;C2/2BCC: C9 2B        CMP #$2B
	BEQ +								;C2/2BCE: F0 04        BEQ $2BD4
	CMP #$17	;conjure					;C2/2BD0: C9 17        CMP #$17
	BNE .Fail							;C2/2BD2: D0 28        BNE $2BFC
+	LDA CharStruct.Reaction1Magic,X					;C2/2BD4: BD 47 20     LDA $2047,X
	CMP #$48	;first summon spell				;C2/2BD7: C9 48        CMP #$48
	BCC .Fail							;C2/2BD9: 90 21        BCC $2BFC
	CMP #$57	;past last summon spell				;C2/2BDB: C9 57        CMP #$57
	BCS .Fail							;C2/2BDD: B0 1D        BCS $2BFC
	BRA .Met							;C2/2BDF: 80 18        BRA $2BF9

.Reaction2
	LDX AttackerOffset  						;C2/2BE1: A6 32        LDX $32        
	LDA CharStruct.Reaction2Command,X				;C2/2BE3: BD 4D 20     LDA $204D,X
	CMP #$2B	;magic						;C2/2BE6: C9 2B        CMP #$2B
	BEQ +								;C2/2BE8: F0 04        BEQ $2BEE
	CMP #$17	;conjure					;C2/2BEA: C9 17        CMP #$17
	BNE .Fail							;C2/2BEC: D0 0E        BNE $2BFC
+	LDA CharStruct.Reaction2Magic,X					;C2/2BEE: BD 4E 20     LDA $204E,X
	CMP #$48	;first summon spell				;C2/2BF1: C9 48        CMP #$48
	BCC .Fail							;C2/2BF3: 90 07        BCC $2BFC
	CMP #$57	;past last summon spell				;C2/2BF5: C9 57        CMP #$57
	BCS .Fail							;C2/2BF7: B0 03        BCS $2BFC
.Met	INC AIConditionMet						;C2/2BF9: EE 94 46     INC $4694
.Fail	RTS 								;C2/2BFC: 60           RTS 

%org($C22BFD)
;AI Condition $12: No Female targets available
AICondition12:
	TDC 								;C2/2BFD: 7B           TDC 
	TAX 								;C2/2BFE: AA           TAX 
	TAY 								;C2/2BFF: A8           TAY 
.PartyLoop
	LDA CharStruct.CharRow,X					;C2/2C00: BD 00 20     LDA $2000,X
	AND #$08	;gender						;C2/2C03: 29 08        AND #$08
	BEQ .Next							;C2/2C05: F0 13        BEQ $2C1A      
	LDA ActiveParticipants,Y					;C2/2C07: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next  							;C2/2C0A: F0 0E        BEQ $2C1A      
	LDA CharStruct.Status4,X					;C2/2C0C: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/2C0F: 29 81        AND #$81
	BNE .Next  							;C2/2C11: D0 07        BNE $2C1A      
	LDA CharStruct.CmdStatus,X					;C2/2C13: BD 1E 20     LDA $201E,X
	AND #$10	;jumping					;C2/2C16: 29 10        AND #$10
	BEQ .Fail  	;girl available, fail condition			;C2/2C18: F0 0C        BEQ $2C26      
.Next	JSR NextCharOffset  						;C2/2C1A: 20 E0 01     JSR $01E0      
	INY 								;C2/2C1D: C8           INY 
	CPY #$0004							;C2/2C1E: C0 04 00     CPY #$0004
	BNE .PartyLoop							;C2/2C21: D0 DD        BNE $2C00
	INC AIConditionMet						;C2/2C23: EE 94 46     INC $4694
.Fail	RTS 								;C2/2C26: 60           RTS 

%org($C22C27)
GetAITarget:
	ASL 								;C2/2C27: 0A           ASL 
	TAX 								;C2/2C28: AA           TAX 
	LDA AITarget,X							;C2/2C29: BF 4D 2C C2  LDA $C22C4D,X
	STA $08								;C2/2C2D: 85 08        STA $08
	LDA AITarget+1,X						;C2/2C2F: BF 4E 2C C2  LDA $C22C4E,X
	STA $09								;C2/2C33: 85 09        STA $09
	LDA.b #bank(AITarget)						;C2/2C35: A9 C2        LDA #$C2
	STA $0A								;C2/2C37: 85 0A        STA $0A
	LDX #$0017	;18 bytes of AI target offsets to init		;C2/2C39: A2 17 00     LDX #$0017
	LDA #$FF							;C2/2C3C: A9 FF        LDA #$FF
-	STA AITargetOffsets,X 						;C2/2C3E: 9D 20 26     STA $2620,X    
	DEX 								;C2/2C41: CA           DEX 
	BPL -								;C2/2C42: 10 FA        BPL $2C3E
	STZ AIMultiTarget						;C2/2C44: 9C 24 27     STZ $2724
	STZ AITargetCount						;C2/2C47: 9C 25 27     STZ $2725
	JML [$0008]							;C2/2C4A: DC 08 00     JML [$0008]

%org($C22C4D)
AITarget:
%generatejumptable(AITarget,$32)
;original data
;C2/2C4D:              .DW $2CB3, $2CDA, $2CE0, $2CE6, $2CEC, $2CF2, $2CFE, $2D0A ; $00
;C2/2C5D:              .DW $2D16, $2D22, $2D2E, $2D3A, $2D46, $2D52, $2D79, $2DBD
;C2/2C6D:              .DW $2DC6, $2DCD, $2DD3, $2E18, $2E25, $2E2D, $2E37, $2E44 ; $10
;C2/2C7D:              .DW $2E4F, $2E59, $2E62, $2E65, $2EA6, $2F00, $2F0B, $2F19
;C2/2C8D:              .DW $2F24, $2F27, $2F70, $2FAB, $2FB7, $2FC0, $2FC3, $3019 ; $20
;C2/2C9D:              .DW $305D, $309B, $30A1, $30A7, $30AD, $30B3, $30C2, $30F1
;C2/2CAD:              .DW $3115, $311B, $3121                                    ; $30

%org($C22CB3)
AITarget00:	;butz
	STZ $0E								;C2/2CB3: 64 0E        STZ $0E
AITargetPerson:		;code reused for other party members
	TDC 								;C2/2CB5: 7B           TDC 
	TAY 								;C2/2CB6: A8           TAY 
	TAX 								;C2/2CB7: AA           TAX 
.Loop
	LDA CharStruct.CharRow,X					;C2/2CB8: BD 00 20     LDA $2000,X
	AND #$07	;just character bits				;C2/2CBB: 29 07        AND #$07
	CMP $0E								;C2/2CBD: C5 0E        CMP $0E
	BNE .Next							;C2/2CBF: D0 0F        BNE $2CD0
	LDA ActiveParticipants,Y					;C2/2CC1: B9 C2 3E     LDA $3EC2,Y
	BEQ .Ret							;C2/2CC4: F0 13        BEQ $2CD9
	JSR CheckTargetValid						;C2/2CC6: 20 27 31     JSR $3127
	BNE .Ret							;C2/2CC9: D0 0E        BNE $2CD9
	STX AITargetOffsets						;C2/2CCB: 8E 20 26     STX $2620
	BRA .Ret							;C2/2CCE: 80 09        BRA $2CD9
.Next	JSR NextCharOffset    						;C2/2CD0: 20 E0 01     JSR $01E0      
	INY 								;C2/2CD3: C8           INY 
	CPY #$0004	;4 chars to check				;C2/2CD4: C0 04 00     CPY #$0004
	BNE .Loop							;C2/2CD7: D0 DF        BNE $2CB8
.Ret	RTS 								;C2/2CD9: 60           RTS 

%org($C22CDA)
AITarget01:	;lenna
	LDA #$01							;C2/2CDA: A9 01        LDA #$01
	STA $0E								;C2/2CDC: 85 0E        STA $0E
	BRA AITargetPerson						;C2/2CDE: 80 D5        BRA $2CB5

%org($C22CE0)
AITarget02: 	;galuf
	LDA #$02							;C2/2CE0: A9 02        LDA #$02
	STA $0E								;C2/2CE2: 85 0E        STA $0E
	BRA AITargetPerson						;C2/2CE4: 80 CF        BRA $2CB5

%org($C22CE6)
AITarget03:	;faris
	LDA #$03							;C2/2CE6: A9 03        LDA #$03
	STA $0E								;C2/2CE8: 85 0E        STA $0E
	BRA AITargetPerson						;C2/2CEA: 80 C9        BRA $2CB5

%org($C22CEC)
AITarget04:	;krile
	LDA #$04							;C2/2CEC: A9 04        LDA #$04
	STA $0E								;C2/2CEE: 85 0E        STA $0E
	BRA AITargetPerson						;C2/2CF0: 80 C3        BRA $2CB5

%org($C22CF2)
%sub(AITarget05)
AITarget05: 	;monster 1
	LDA ActiveParticipants+4					;C2/2CF2: AD C6 3E     LDA $3EC6
	BEQ .Ret							;C2/2CF5: F0 06        BEQ $2CFD
	LDX #sizeof(CharStruct)*4					;C2/2CF7: A2 00 02     LDX #$0200
	STX AITargetOffsets						;C2/2CFA: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2CFD: 60           RTS 
%endsub()

%org($C22CFE)
%sub(AITarget06)
AITarget06: 	;monster 2
	LDA ActiveParticipants+5					;C2/2CFE: AD C7 3E     LDA $3EC7
	BEQ .Ret							;C2/2D01: F0 06        BEQ $2D09
	LDX #sizeof(CharStruct)*5					;C2/2D03: A2 80 02     LDX #$0280
	STX AITargetOffsets						;C2/2D06: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D09: 60           RTS 
%endsub()
      
%org($C22D0A)
%sub(AITarget07)
AITarget07: 	;monster 3
	LDA ActiveParticipants+6					;C2/2D0A: AD C8 3E     LDA $3EC8
	BEQ .Ret							;C2/2D0D: F0 06        BEQ $2D15
	LDX #sizeof(CharStruct)*6					;C2/2D0F: A2 00 03     LDX #$0300
	STX AITargetOffsets						;C2/2D12: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D15: 60           RTS 
%endsub()
        
%org($C22D16)
%sub(AITarget08)
AITarget08: 	;monster 4
	LDA ActiveParticipants+7					;C2/2D16: AD C9 3E     LDA $3EC9
	BEQ .Ret							;C2/2D19: F0 06        BEQ $2D21
	LDX #sizeof(CharStruct)*7					;C2/2D1B: A2 80 03     LDX #$0380
	STX AITargetOffsets						;C2/2D1E: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D21: 60           RTS 
%endsub()
        
%org($C22D22)
%sub(AITarget09)
AITarget09: 	;monster 5
	LDA ActiveParticipants+8					;C2/2D22: AD CA 3E     LDA $3ECA
	BEQ .Ret							;C2/2D25: F0 06        BEQ $2D2D
	LDX #sizeof(CharStruct)*8					;C2/2D27: A2 00 04     LDX #$0400
	STX AITargetOffsets						;C2/2D2A: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D2D: 60           RTS 
%endsub()
        
%org($C22D2E)
%sub(AITarget0A)
AITarget0A: 	;monster 6
	LDA ActiveParticipants+9					;C2/2D2E: AD CB 3E     LDA $3ECB
	BEQ .Ret							;C2/2D31: F0 06        BEQ $2D39
	LDX #sizeof(CharStruct)*9					;C2/2D33: A2 80 04     LDX #$0480
	STX AITargetOffsets						;C2/2D36: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D39: 60           RTS 
%endsub()
        
%org($C22D3A)
%sub(AITarget0B)
AITarget0B: 	;monster 7
	LDA ActiveParticipants+10					;C2/2D3A: AD CC 3E     LDA $3ECC
	BEQ .Ret							;C2/2D3D: F0 06        BEQ $2D45
	LDX #sizeof(CharStruct)*10					;C2/2D3F: A2 00 05     LDX #$0500
	STX AITargetOffsets						;C2/2D42: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D45: 60           RTS 
%endsub()
        
%org($C22D46)
%sub(AITarget0C)
AITarget0C: 	;monster 8
	LDA ActiveParticipants+11					;C2/2D46: AD CD 3E     LDA $3ECD
	BEQ .Ret							;C2/2D49: F0 06        BEQ $2D51
	LDX #sizeof(CharStruct)*11					;C2/2D4B: A2 80 05     LDX #$0580
	STX AITargetOffsets						;C2/2D4E: 8E 20 26     STX $2620
.Ret	RTS 								;C2/2D51: 60           RTS 
%endsub()

%org($C22D52)
AITarget0D:	;self, unless forced
	LDA ReactingIndexType						;C2/2D52: AD 56 7C     LDA $7C56
	BEQ .Self							;C2/2D55: F0 13        BEQ $2D6A
	DEC 								;C2/2D57: 3A           DEC 
	BEQ .ForcedMonster						;C2/2D58: F0 08        BEQ $2D62
	DEC ReactingIndexType						;C2/2D5A: CE 56 7C     DEC $7C56
	LDA ReactingIndex						;C2/2D5D: AD 55 47     LDA $4755
	BRA .Target							;C2/2D60: 80 0A        BRA $2D6C
.ForcedMonster
	CLC 								;C2/2D62: 18           CLC 
	LDA ReactingIndex						;C2/2D63: AD 55 47     LDA $4755
	ADC #$04							;C2/2D66: 69 04        ADC #$04
	BRA .Target							;C2/2D68: 80 02        BRA $2D6C
.Self
	LDA AttackerIndex						;C2/2D6A: A5 47        LDA $47        
.Target
	REP #$20							;C2/2D6C: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/2D6E: 20 B2 01     JSR $01B2      
	TAX 								;C2/2D71: AA           TAX 
	TDC 								;C2/2D72: 7B           TDC 
	SEP #$20							;C2/2D73: E2 20        SEP #$20
	STX AITargetOffsets						;C2/2D75: 8E 20 26     STX $2620
	RTS 								;C2/2D78: 60           RTS 

%org($C22D79)
AITarget0E:	;all active monsters except attacker
	LDA MonsterIndex						;C2/2D79: AD 03 7C     LDA $7C03
	STA $12		;excluded monster				;C2/2D7C: 85 12        STA $12
	INC AIMultiTarget						;C2/2D7E: EE 24 27     INC $2724
AITargetMonstersExcept:
	TDC 								;C2/2D81: 7B           TDC 
	TAX 								;C2/2D82: AA           TAX 
	STX $0E		;first open AITargetOffsets slot		;C2/2D83: 86 0E        STX $0E
	STX $10		;currently checked monster			;C2/2D85: 86 10        STX $10
	LDX #sizeof(CharStruct)*4	;first monster offset		;C2/2D87: A2 00 02     LDX #$0200
.Loop
	LDY $10								;C2/2D8A: A4 10        LDY $10
	LDA ActiveParticipants+4,Y					;C2/2D8C: B9 C6 3E     LDA $3EC6,Y
	BEQ .Next							;C2/2D8F: F0 20        BEQ $2DB1
	LDA $10		;currently checked monster			;C2/2D91: A5 10        LDA $10
	CMP $12		;excluded monster				;C2/2D93: C5 12        CMP $12
	BEQ .Next							;C2/2D95: F0 1A        BEQ $2DB1
	JSR CheckTargetValid						;C2/2D97: 20 27 31     JSR $3127
	BNE .Next							;C2/2D9A: D0 15        BNE $2DB1
	LDY $0E		;first open AITargetOffsets slot		;C2/2D9C: A4 0E        LDY $0E
	STX $08		;monster offset					;C2/2D9E: 86 08        STX $08
	LDA $08								;C2/2DA0: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2DA2: 99 20 26     STA $2620,Y
	LDA $09								;C2/2DA5: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/2DA7: 99 21 26     STA $2621,Y
	INY 								;C2/2DAA: C8           INY 
	INY 								;C2/2DAB: C8           INY 
	STY $0E		;next slot					;C2/2DAC: 84 0E        STY $0E
	INC AITargetCount						;C2/2DAE: EE 25 27     INC $2725
.Next	JSR NextCharOffset 						;C2/2DB1: 20 E0 01     JSR $01E0      
	INC $10								;C2/2DB4: E6 10        INC $10
	LDA $10		;monster counter				;C2/2DB6: A5 10        LDA $10
	CMP #$08	;8 monsters					;C2/2DB8: C9 08        CMP #$08
	BNE .Loop							;C2/2DBA: D0 CE        BNE $2D8A
	RTS 								;C2/2DBC: 60           RTS 


%org($C22DBD)
AITarget0F:	;all active monsters
	LDA #$FF							;C2/2DBD: A9 FF        LDA #$FF
	STA $12		;excluded monster				;C2/2DBF: 85 12        STA $12
	INC AIMultiTarget						;C2/2DC1: EE 24 27     INC $2724
	BRA AITargetMonstersExcept					;C2/2DC4: 80 BB        BRA $2D81

%org($C22DC6)
AITarget10:	;random active monster except attacker
	LDA MonsterIndex						;C2/2DC6: AD 03 7C     LDA $7C03
	STA $12		;excluded monster				;C2/2DC9: 85 12        STA $12
	BRA AITargetMonstersExcept					;C2/2DCB: 80 B4        BRA $2D81

%org($C22DCD)
AITarget11:	;random active monster
	LDA #$FF							;C2/2DCD: A9 FF        LDA #$FF
	STA $12		;excluded monster				;C2/2DCF: 85 12        STA $12
	BRA AITargetMonstersExcept					;C2/2DD1: 80 AE        BRA $2D81

%org($C22DD3)
AITarget12:	;all front row active party 
	LDA #$80							;C2/2DD3: A9 80        LDA #$80
	STA $12		;check row bit					;C2/2DD5: 85 12        STA $12
	STZ $13		;front row					;C2/2DD7: 64 13        STZ $13
	INC AIMultiTarget						;C2/2DD9: EE 24 27     INC $2724
AITargetCharRow:
	TDC 								;C2/2DDC: 7B           TDC 
	TAX 								;C2/2DDD: AA           TAX 
	STX $0E		;first open AITargetOffsets slot		;C2/2DDE: 86 0E        STX $0E
	STX $10								;C2/2DE0: 86 10        STX $10
.Loop
	LDY $10		;currently checked character			;C2/2DE2: A4 10        LDY $10
	LDA ActiveParticipants,Y					;C2/2DE4: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next							;C2/2DE7: F0 23        BEQ $2E0C
	JSR CheckTargetValid						;C2/2DE9: 20 27 31     JSR $3127
	BNE .Next							;C2/2DEC: D0 1E        BNE $2E0C
	LDA CharStruct.CharRow,X					;C2/2DEE: BD 00 20     LDA $2000,X
	AND $12		;bits to check					;C2/2DF1: 25 12        AND $12
	CMP $13		;desired value					;C2/2DF3: C5 13        CMP $13
	BNE .Next							;C2/2DF5: D0 15        BNE $2E0C
	LDY $0E								;C2/2DF7: A4 0E        LDY $0E
	STX $08								;C2/2DF9: 86 08        STX $08
	LDA $08								;C2/2DFB: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2DFD: 99 20 26     STA $2620,Y
	LDA $09								;C2/2E00: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/2E02: 99 21 26     STA $2621,Y
	INY 								;C2/2E05: C8           INY 
	INY 								;C2/2E06: C8           INY 
	STY $0E		;next slot					;C2/2E07: 84 0E        STY $0E
	INC AITargetCount						;C2/2E09: EE 25 27     INC $2725
.Next	JSR NextCharOffset						;C2/2E0C: 20 E0 01     JSR $01E0      
	INC $10								;C2/2E0F: E6 10        INC $10
	LDA $10								;C2/2E11: A5 10        LDA $10
	CMP #$04	;4 party members to check			;C2/2E13: C9 04        CMP #$04
	BNE .Loop							;C2/2E15: D0 CB        BNE $2DE2
	RTS 								;C2/2E17: 60           RTS 

%org($C22E18)
AITarget13:	;all back row active party
	LDA #$80							;C2/2E18: A9 80        LDA #$80
	STA $12		;check row bit					;C2/2E1A: 85 12        STA $12
	LDA #$80							;C2/2E1C: A9 80        LDA #$80
	STA $13		;back row					;C2/2E1E: 85 13        STA $13
	INC AIMultiTarget						;C2/2E20: EE 24 27     INC $2724
	BRA AITargetCharRow						;C2/2E23: 80 B7        BRA $2DDC
	
%org($C22E25)	
AITarget14:	;random front row active party							
	LDA #$80							;C2/2E25: A9 80        LDA #$80
	STA $12		;check row bit					;C2/2E27: 85 12        STA $12
	STZ $13		;front row					;C2/2E29: 64 13        STZ $13
	BRA AITargetCharRow						;C2/2E2B: 80 AF        BRA $2DDC

%org($C22E2D)
AITarget15:	;random back row active party
	LDA #$80							;C2/2E2D: A9 80        LDA #$80
	STA $12		;check row bit					;C2/2E2F: 85 12        STA $12
	LDA #$80							;C2/2E31: A9 80        LDA #$80
	STA $13		;back row					;C2/2E33: 85 13        STA $13
	BRA AITargetCharRow						;C2/2E35: 80 A5        BRA $2DDC

%org($C22E37)
AITarget16:	;all female active party						
	LDA #$08							;C2/2E37: A9 08        LDA #$08
	STA $12		;check gender bit				;C2/2E39: 85 12        STA $12
	LDA #$08							;C2/2E3B: A9 08        LDA #$08
	STA $13		;female						;C2/2E3D: 85 13        STA $13
	INC AIMultiTarget						;C2/2E3F: EE 24 27     INC $2724
	BRA AITargetCharRow						;C2/2E42: 80 98        BRA $2DDC

%org($C22E44)
AITarget17:	;all male active party
	LDA #$08							;C2/2E44: A9 08        LDA #$08
	STA $12		;check gender bit				;C2/2E46: 85 12        STA $12
	STZ $13		;male						;C2/2E48: 64 13        STZ $13
	INC AIMultiTarget						;C2/2E4A: EE 24 27     INC $2724
	BRA AITargetCharRow						;C2/2E4D: 80 8D        BRA $2DDC

%org($C22E4F)
AITarget18:	;random female active party
	LDA #$08							;C2/2E4F: A9 08        LDA #$08
	STA $12		;check gender bit				;C2/2E51: 85 12        STA $12
	LDA #$08							;C2/2E53: A9 08        LDA #$08
	STA $13		;female						;C2/2E55: 85 13        STA $13
	BRA AITargetCharRow						;C2/2E57: 80 83        BRA $2DDC

%org($C22E59)
AITarget19:	;random male active party
	LDA #$08							;C2/2E59: A9 08        LDA #$08
	STA $12		;check gender bit				;C2/2E5B: 85 12        STA $12
	STZ $13		;male						;C2/2E5D: 64 13        STZ $13
	JMP AITargetCharRow						;C2/2E5F: 4C DC 2D     JMP $2DDC

%org($C22E62)
AITarget1A:	;all dead party
	INC AIMultiTarget						;C2/2E62: EE 24 27     INC $2724
;continues to next routine

%org($C22E65)
AITarget1B:	;random dead party
	TDC 								;C2/2E65: 7B           TDC 
	TAX 								;C2/2E66: AA           TAX 
	STX $0E								;C2/2E67: 86 0E        STX $0E
	STX $10								;C2/2E69: 86 10        STX $10
.Loop
	LDA CharStruct.Status1,X					;C2/2E6B: BD 1A 20     LDA $201A,X
	AND #$40	;stone						;C2/2E6E: 29 40        AND #$40
	BNE .Next							;C2/2E70: D0 28        BNE $2E9A
	LDA CharStruct.Status4,X					;C2/2E72: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/2E75: 29 81        AND #$81
	BNE .Next							;C2/2E77: D0 21        BNE $2E9A
	LDA CharStruct.CmdStatus,X					;C2/2E79: BD 1E 20     LDA $201E,X
	AND #$10	;jumping					;C2/2E7C: 29 10        AND #$10
	BNE .Next							;C2/2E7E: D0 1A        BNE $2E9A
	LDA CharStruct.Status1,X					;C2/2E80: BD 1A 20     LDA $201A,X
	BPL .Next	;skip if alive					;C2/2E83: 10 15        BPL $2E9A
	LDY $0E								;C2/2E85: A4 0E        LDY $0E
	STX $08								;C2/2E87: 86 08        STX $08
	LDA $08								;C2/2E89: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2E8B: 99 20 26     STA $2620,Y
	LDA $09								;C2/2E8E: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/2E90: 99 21 26     STA $2621,Y
	INY 								;C2/2E93: C8           INY 
	INY 								;C2/2E94: C8           INY 
	STY $0E								;C2/2E95: 84 0E        STY $0E
	INC AITargetCount						;C2/2E97: EE 25 27     INC $2725
.Next	JSR NextCharOffset						;C2/2E9A: 20 E0 01     JSR $01E0      
	INC $10								;C2/2E9D: E6 10        INC $10
	LDA $10								;C2/2E9F: A5 10        LDA $10
	CMP #$04	;4 party members				;C2/2EA1: C9 04        CMP #$04
	BNE .Loop							;C2/2EA3: D0 C6        BNE $2E6B
	RTS 								;C2/2EA5: 60           RTS 

%org($C22EA6)
AITarget1C:	;all monsters with reflect
	LDA #$1C	;status 3					;C2/2EA6: A9 1C        LDA #$1C
	TAX 								;C2/2EA8: AA           TAX 
	STX $14								;C2/2EA9: 86 14        STX $14
	LDA #$80	;reflect					;C2/2EAB: A9 80        LDA #$80
	STA $12								;C2/2EAD: 85 12        STA $12
	INC AIMultiTarget						;C2/2EAF: EE 24 27     INC $2724
AITargetMonsterStatus:
	TDC 								;C2/2EB2: 7B           TDC 
	TAX 								;C2/2EB3: AA           TAX 
	STX $0E								;C2/2EB4: 86 0E        STX $0E
	STX $10								;C2/2EB6: 86 10        STX $10
	LDX #sizeof(CharStruct)*4					;C2/2EB8: A2 00 02     LDX #$0200
.Loop
	PHX 								;C2/2EBB: DA           PHX 
	LDY $10								;C2/2EBC: A4 10        LDY $10
	LDA ActiveParticipants+4,Y					;C2/2EBE: B9 C6 3E     LDA $3EC6,Y
	BEQ .Next							;C2/2EC1: F0 30        BEQ $2EF3
	JSR CheckTargetValid						;C2/2EC3: 20 27 31     JSR $3127
	BNE .Next							;C2/2EC6: D0 2B        BNE $2EF3
	REP #$20							;C2/2EC8: C2 20        REP #$20
	CLC 								;C2/2ECA: 18           CLC 
	TXA 								;C2/2ECB: 8A           TXA 
	ADC $14		;status offset within CharStruct		;C2/2ECC: 65 14        ADC $14
	TAX 								;C2/2ECE: AA           TAX 
	TDC 								;C2/2ECF: 7B           TDC 
	SEP #$20							;C2/2ED0: E2 20        SEP #$20
	LDA $2000,X	;selected status				;C2/2ED2: BD 00 20     LDA $2000,X
	ORA $2056,X	;always selected status				;C2/2ED5: 1D 56 20     ORA $2056,X
	AND $12								;C2/2ED8: 25 12        AND $12
	CMP $12		;status to check				;C2/2EDA: C5 12        CMP $12
	BNE .Next							;C2/2EDC: D0 15        BNE $2EF3
	LDY $0E								;C2/2EDE: A4 0E        LDY $0E
	STX $08								;C2/2EE0: 86 08        STX $08
	LDA $08								;C2/2EE2: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2EE4: 99 20 26     STA $2620,Y
	LDA $09								;C2/2EE7: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/2EE9: 99 21 26     STA $2621,Y
	INY 								;C2/2EEC: C8           INY 
	INY 								;C2/2EED: C8           INY 
	STY $0E								;C2/2EEE: 84 0E        STY $0E
	INC AITargetCount						;C2/2EF0: EE 25 27     INC $2725
.Next	PLX 								;C2/2EF3: FA           PLX 
	JSR NextCharOffset						;C2/2EF4: 20 E0 01     JSR $01E0      
	INC $10								;C2/2EF7: E6 10        INC $10
	LDA $10								;C2/2EF9: A5 10        LDA $10
	CMP #$08	;8 monsters					;C2/2EFB: C9 08        CMP #$08
	BNE .Loop							;C2/2EFD: D0 BC        BNE $2EBB
	RTS 								;C2/2EFF: 60           RTS 

%org($C22F00)
AITarget1D:	;random monster with reflect
	LDA #$1C	;status 3					;C2/2F00: A9 1C        LDA #$1C
	TAX 								;C2/2F02: AA           TAX 
	STX $14								;C2/2F03: 86 14        STX $14
	LDA #$80	;reflect					;C2/2F05: A9 80        LDA #$80
	STA $12								;C2/2F07: 85 12        STA $12
	BRA AITargetMonsterStatus					;C2/2F09: 80 A7        BRA $2EB2

%org($C22F0B)	;all monsters with critical hp
AITarget1E:								
	LDA #$1D	;status 4					;C2/2F0B: A9 1D        LDA #$1D
	TAX 								;C2/2F0D: AA           TAX 
	STX $14								;C2/2F0E: 86 14        STX $14
	LDA #$02	;critical hp					;C2/2F10: A9 02        LDA #$02
	STA $12								;C2/2F12: 85 12        STA $12
	INC AIMultiTarget						;C2/2F14: EE 24 27     INC $2724
	BRA AITargetMonsterStatus					;C2/2F17: 80 99        BRA $2EB2

%org($C22F19)
AITarget1F:	;random monster with critical hp			
	LDA #$1D	;status 4					;C2/2F19: A9 1D        LDA #$1D
	TAX 								;C2/2F1B: AA           TAX 
	STX $14								;C2/2F1C: 86 14        STX $14
	LDA #$02	;critical hp					;C2/2F1E: A9 02        LDA #$02
	STA $12								;C2/2F20: 85 12        STA $12
	BRA AITargetMonsterStatus					;C2/2F22: 80 8E        BRA $2EB2	

%org($C22F24)
AITarget20:	;all monsters with under half hp
	INC AIMultiTarget						;C2/2F24: EE 24 27     INC $2724
;continues to next routine

%org($C22F27)								
AITarget21:	;random monster with under half hp
	TDC 								;C2/2F27: 7B           TDC 
	TAX 								;C2/2F28: AA           TAX 
	STX $0E								;C2/2F29: 86 0E        STX $0E
	STX $10								;C2/2F2B: 86 10        STX $10
	LDX #sizeof(CharStruct)*4					;C2/2F2D: A2 00 02     LDX #$0200
.Loop
	LDY $10								;C2/2F30: A4 10        LDY $10
	LDA ActiveParticipants+4,Y					;C2/2F32: B9 C6 3E     LDA $3EC6,Y
	BEQ .Next							;C2/2F35: F0 2D        BEQ $2F64
	JSR CheckTargetValid						;C2/2F37: 20 27 31     JSR $3127
	BNE .Next							;C2/2F3A: D0 28        BNE $2F64
	REP #$20							;C2/2F3C: C2 20        REP #$20
	LDA CharStruct.MaxHP,X						;C2/2F3E: BD 08 20     LDA $2008,X
	LSR 								;C2/2F41: 4A           LSR 
	CMP CharStruct.CurHP,X						;C2/2F42: DD 06 20     CMP $2006,X
	BCS .BelowHalf							;C2/2F45: B0 05        BCS $2F4C
	TDC 								;C2/2F47: 7B           TDC 
	SEP #$20							;C2/2F48: E2 20        SEP #$20
	BRA .Next							;C2/2F4A: 80 18        BRA $2F64
.BelowHalf
	TDC 								;C2/2F4C: 7B           TDC 
	SEP #$20							;C2/2F4D: E2 20        SEP #$20
	LDY $0E								;C2/2F4F: A4 0E        LDY $0E
	STX $08								;C2/2F51: 86 08        STX $08
	LDA $08								;C2/2F53: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2F55: 99 20 26     STA $2620,Y
	LDA $09								;C2/2F58: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/2F5A: 99 21 26     STA $2621,Y
	INY 								;C2/2F5D: C8           INY 
	INY 								;C2/2F5E: C8           INY 
	STY $0E								;C2/2F5F: 84 0E        STY $0E
	INC AITargetCount						;C2/2F61: EE 25 27     INC $2725
.Next	JSR NextCharOffset						;C2/2F64: 20 E0 01     JSR $01E0      
	INC $10								;C2/2F67: E6 10        INC $10
	LDA $10								;C2/2F69: A5 10        LDA $10
	CMP #$08	;8 monsters					;C2/2F6B: C9 08        CMP #$08
	BNE .Loop							;C2/2F6D: D0 C1        BNE $2F30
	RTS 								;C2/2F6F: 60           RTS 

%org($C22F70)
AITarget22:	;random party member with reflect
	TDC 								;C2/2F70: 7B           TDC 
	TAX 								;C2/2F71: AA           TAX 
	STX $0E								;C2/2F72: 86 0E        STX $0E
	STX $10								;C2/2F74: 86 10        STX $10
.Loop	LDY $10								;C2/2F76: A4 10        LDY $10
	LDA ActiveParticipants,Y					;C2/2F78: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next							;C2/2F7B: F0 22        BEQ $2F9F
	JSR CheckTargetValid						;C2/2F7D: 20 27 31     JSR $3127
	BNE .Next							;C2/2F80: D0 1D        BNE $2F9F
	LDA CharStruct.Status3,X					;C2/2F82: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/2F85: 1D 72 20     ORA $2072,X
	BPL .Next							;C2/2F88: 10 15        BPL $2F9F
	LDY $0E								;C2/2F8A: A4 0E        LDY $0E
	STX $08								;C2/2F8C: 86 08        STX $08
	LDA $08								;C2/2F8E: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2F90: 99 20 26     STA $2620,Y
	LDA $09								;C2/2F93: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/2F95: 99 21 26     STA $2621,Y
	INY 								;C2/2F98: C8           INY 
	INY 								;C2/2F99: C8           INY 
	STY $0E								;C2/2F9A: 84 0E        STY $0E
	INC AITargetCount						;C2/2F9C: EE 25 27     INC $2725
.Next	JSR NextCharOffset 						;C2/2F9F: 20 E0 01     JSR $01E0      
	INC $10								;C2/2FA2: E6 10        INC $10
	LDA $10								;C2/2FA4: A5 10        LDA $10
	CMP #$04	;4 party members				;C2/2FA6: C9 04        CMP #$04
	BNE .Loop							;C2/2FA8: D0 CC        BNE $2F76
	RTS 								;C2/2FAA: 60           RTS 

%org($C22FAB)
AITarget23:	;all party members on the team?
	LDA #$40							;C2/2FAB: A9 40        LDA #$40
	STA $12		;on the team bit?				;C2/2FAD: 85 12        STA $12
	STZ $13								;C2/2FAF: 64 13        STZ $13
	INC AIMultiTarget						;C2/2FB1: EE 24 27     INC $2724
	JMP AITargetCharRow						;C2/2FB4: 4C DC 2D     JMP $2DDC

%org($C22FB7)
AITarget24:	;random party member on the team?
	LDA #$40							;C2/2FB7: A9 40        LDA #$40
	STA $12		;on the team bit?				;C2/2FB9: 85 12        STA $12
	STZ $13								;C2/2FBB: 64 13        STZ $13
	JMP AITargetCharRow						;C2/2FBD: 4C DC 2D     JMP $2DDC

%org($C22FC0)
AITarget25:	;all dead monsters
	INC AIMultiTarget						;C2/2FC0: EE 24 27     INC $2724
;continues to next routine

%org($C22FC3)
AITarget26:	;random dead monster
	TDC 								;C2/2FC3: 7B           TDC 
	TAX 								;C2/2FC4: AA           TAX 
	STX $0E								;C2/2FC5: 86 0E        STX $0E
	STX $10								;C2/2FC7: 86 10        STX $10
	LDX #sizeof(CharStruct)*4					;C2/2FC9: A2 00 02     LDX #$0200
.Loop	LDA CharStruct.Status1,X					;C2/2FCC: BD 1A 20     LDA $201A,X
	AND #$40	;stone						;C2/2FCF: 29 40        AND #$40
	BNE .Next							;C2/2FD1: D0 3A        BNE $300D
	CPX #sizeof(CharStruct)*4					;C2/2FD3: E0 00 02     CPX #$0200
	BCC +		;branch can never occur?			;C2/2FD6: 90 05        BCC $2FDD
	LDA SandwormBattle						;C2/2FD8: AD 4C 7C     LDA $7C4C      
	BNE .SkipChecks							;C2/2FDB: D0 0E        BNE $2FEB
+	LDA CharStruct.Status4,X					;C2/2FDD: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/2FE0: 29 81        AND #$81
	BNE .Next							;C2/2FE2: D0 29        BNE $300D
	LDA CharStruct.CmdStatus,X					;C2/2FE4: BD 1E 20     LDA $201E,X
	AND #$10	;jumping					;C2/2FE7: 29 10        AND #$10
	BNE .Next							;C2/2FE9: D0 22        BNE $300D
.SkipChecks
	LDA CharStruct.Status1,X					;C2/2FEB: BD 1A 20     LDA $201A,X
	BMI .Dead							;C2/2FEE: 30 08        BMI $2FF8
	LDA CharStruct.CurHP,X						;C2/2FF0: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/2FF3: 1D 07 20     ORA $2007,X
	BNE .Next							;C2/2FF6: D0 15        BNE $300D
.Dead	LDY $0E								;C2/2FF8: A4 0E        LDY $0E
	STX $08								;C2/2FFA: 86 08        STX $08
	LDA $08								;C2/2FFC: A5 08        LDA $08
	STA AITargetOffsets,Y						;C2/2FFE: 99 20 26     STA $2620,Y
	LDA $09								;C2/3001: A5 09        LDA $09
	STA AITargetOffsets+1,Y						;C2/3003: 99 21 26     STA $2621,Y
	INY 								;C2/3006: C8           INY 
	INY 								;C2/3007: C8           INY 
	STY $0E								;C2/3008: 84 0E        STY $0E
	INC AITargetCount						;C2/300A: EE 25 27     INC $2725
.Next	JSR NextCharOffset						;C2/300D: 20 E0 01     JSR $01E0      
	INC $10								;C2/3010: E6 10        INC $10
	LDA $10								;C2/3012: A5 10        LDA $10
	CMP #$08	;8 monsters					;C2/3014: C9 08        CMP #$08
	BNE .Loop							;C2/3016: D0 B4        BNE $2FCC
	RTS 								;C2/3018: 60           RTS 

%org($C23019)
AITarget27:	;first monster target matching ai bits (??), excluding attacker or ReactingIndex if that's set
		;not sure exactly what's going on here, also data it doesn't expect could easily cause an infinite loop 
	TDC 								;C2/3019: 7B           TDC 
	TAY 								;C2/301A: A8           TAY 
	SEC 								;C2/301B: 38           SEC 
	LDA AIScriptOffset						;C2/301C: A5 41        LDA $41
	SBC #$1B	;???						;C2/301E: E9 1B        SBC #$1B
	TAX 								;C2/3020: AA           TAX 
	LDA !MonsterAIScript,X						;C2/3021: BD 67 43     LDA $4367,X
	BEQ .Ret							;C2/3024: F0 36        BEQ $305C
	STA $12		;target bits from somewhere in ai script	;C2/3026: 85 12        STA $12
	LDA ReactingIndexType						;C2/3028: AD 56 7C     LDA $7C56
	BNE .ReactingIndex						;C2/302B: D0 07        BNE $3034
	SEC 								;C2/302D: 38           SEC 
	LDA AttackerIndex						;C2/302E: A5 47        LDA $47       
	SBC #$04							;C2/3030: E9 04        SBC #$04
	BRA .FindTarget							;C2/3032: 80 03        BRA $3037

.ReactingIndex
	LDA ReactingIndex						;C2/3034: AD 55 47     LDA $4755
.FindTarget
	TAX 								;C2/3037: AA           TAX 
	STX $10		;monster index to avoid				;C2/3038: 86 10        STX $10
	LDA $12		;bitfield of acceptable targets			;C2/303A: A5 12        LDA $12

.BitLoop
	ASL 								;C2/303C: 0A           ASL 
	BCS .BitSet							;C2/303D: B0 03        BCS $3042
	INY 								;C2/303F: C8           INY 
	BRA .BitLoop							;C2/3040: 80 FA        BRA $303C

.BitSet
	CPY $10								;C2/3042: C4 10        CPY $10
	BNE .FoundTarget						;C2/3044: D0 03        BNE $3049
	INY 								;C2/3046: C8           INY 
	BRA .BitLoop							;C2/3047: 80 F3        BRA $303C

.FoundTarget
	TYA 								;C2/3049: 98           TYA 
	CLC 								;C2/304A: 18           CLC 
	ADC #$04							;C2/304B: 69 04        ADC #$04
	TAX 								;C2/304D: AA           TAX 
	INC ActiveParticipants,X	;target forced active		;C2/304E: FE C2 3E     INC $3EC2,X
	REP #$20							;C2/3051: C2 20        REP #$20
	JSR ShiftMultiply_128	 					;C2/3053: 20 B2 01     JSR $01B2     
	STA AITargetOffsets						;C2/3056: 8D 20 26     STA $2620
	TDC 								;C2/3059: 7B           TDC 
	SEP #$20							;C2/305A: E2 20        SEP #$20
.Ret	RTS 								;C2/305C: 60           RTS 

%org($C2305D)
AITarget28: 	;butz if jumping but not yet intercepted
	STZ $0E		;butz						;C2/305D: 64 0E        STZ $0E
AITargetPersonJumping:
	TDC 								;C2/305F: 7B           TDC 
	TAY 								;C2/3060: A8           TAY 
	TAX 								;C2/3061: AA           TAX 
.Loop	LDA CharStruct.CharRow,X					;C2/3062: BD 00 20     LDA $2000,X
	AND #$07	;character bits					;C2/3065: 29 07        AND #$07
	CMP $0E								;C2/3067: C5 0E        CMP $0E
	BNE .Next							;C2/3069: D0 26        BNE $3091
	LDA ActiveParticipants,Y					;C2/306B: B9 C2 3E     LDA $3EC2,Y
	BEQ .Ret							;C2/306E: F0 2A        BEQ $309A
	LDA CharStruct.Status1,X					;C2/3070: BD 1A 20     LDA $201A,X
	AND #$C0	;stone or dead					;C2/3073: 29 C0        AND #$C0
	BNE .Ret							;C2/3075: D0 23        BNE $309A
	LDA CharStruct.Status4,X					;C2/3077: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/307A: 29 81        AND #$81
	BNE .Ret							;C2/307C: D0 1C        BNE $309A
	LDA CharStruct.CmdStatus,X					;C2/307E: BD 1E 20     LDA $201E,X
	AND #$10	;jumping					;C2/3081: 29 10        AND #$10
	BEQ .Ret	;aborts if NOT jumping				;C2/3083: F0 15        BEQ $309A
	LDA CharStruct.Command,X					;C2/3085: BD 57 20     LDA $2057,X
	CMP #$50	;jump intercepted				;C2/3088: C9 50        CMP #$50
	BEQ .Ret	;already intercepted				;C2/308A: F0 0E        BEQ $309A
	STX AITargetOffsets						;C2/308C: 8E 20 26     STX $2620
	BRA .Ret							;C2/308F: 80 09        BRA $309A
.Next	JSR NextCharOffset  						;C2/3091: 20 E0 01     JSR $01E0     
	INY 								;C2/3094: C8           INY 
	CPY #$0004	;4 chars to check				;C2/3095: C0 04 00     CPY #$0004
	BNE .Loop							;C2/3098: D0 C8        BNE $3062
.Ret	RTS 								;C2/309A: 60           RTS 

%org($C2309B)
AITarget29:	;lenna if jumping but not yet intercepted							
	LDA #$01	;lenna						;C2/309B: A9 01        LDA #$01
	STA $0E								;C2/309D: 85 0E        STA $0E
	BRA AITargetPersonJumping					;C2/309F: 80 BE        BRA $305F

%org($C230A1)
AITarget2A:	;galuf if jumping but not yet intercepted
	LDA #$02	;galuf						;C2/30A1: A9 02        LDA #$02
	STA $0E								;C2/30A3: 85 0E        STA $0E
	BRA AITargetPersonJumping					;C2/30A5: 80 B8        BRA $305F

%org($C230A7)
AITarget2B:	;faris if jumping but not yet intercepted
	LDA #$03	;faris						;C2/30A7: A9 03        LDA #$03
	STA $0E								;C2/30A9: 85 0E        STA $0E
	BRA AITargetPersonJumping					;C2/30AB: 80 B2        BRA $305F

%org($C230AD)
AITarget2C:	;krile if jumping but not yet intercepted
	LDA #$04	;krile						;C2/30AD: A9 04        LDA #$04
	STA $0E								;C2/30AF: 85 0E        STA $0E
	BRA AITargetPersonJumping					;C2/30B1: 80 AC        BRA $305F

%org($C230B3)
AITarget2D:	;acted this tick
	LDA ActedIndex							;C2/30B3: AD 73 7C     LDA $7C73
	REP #$20							;C2/30B6: C2 20        REP #$20
	JSR ShiftMultiply_128 						;C2/30B8: 20 B2 01     JSR $01B2     
	STA AITargetOffsets						;C2/30BB: 8D 20 26     STA $2620
	TDC 								;C2/30BE: 7B           TDC 
	SEP #$20							;C2/30BF: E2 20        SEP #$20
	RTS 								;C2/30C1: 60           RTS 

%org($C230C2)
AITarget2E:	;all party matching a bitmask from event flags?
	INC AIMultiTarget						;C2/30C2: EE 24 27     INC $2724
	TDC 								;C2/30C5: 7B           TDC 
	TAX 								;C2/30C6: AA           TAX 
	STX $0E								;C2/30C7: 86 0E        STX $0E
	STX $10								;C2/30C9: 86 10        STX $10
.Loop	LDX $0E								;C2/30CB: A6 0E        LDX $0E
	LDA BattleData.EventFlags+3	;???				;C2/30CD: AD 87 7C     LDA $7C87
	JSR SelectBit_X  						;C2/30D0: 20 DB 01     JSR $01DB     
	BEQ .Next							;C2/30D3: F0 13        BEQ $30E8
	REP #$20							;C2/30D5: C2 20        REP #$20
	LDX $10								;C2/30D7: A6 10        LDX $10
	LDA $0E								;C2/30D9: A5 0E        LDA $0E
	JSR ShiftMultiply_128						;C2/30DB: 20 B2 01     JSR $01B2     
	STA AITargetOffsets,X						;C2/30DE: 9D 20 26     STA $2620,X
	INC $10								;C2/30E1: E6 10        INC $10
	INC $10								;C2/30E3: E6 10        INC $10
	TDC 								;C2/30E5: 7B           TDC 
	SEP #$20							;C2/30E6: E2 20        SEP #$20
.Next	INC $0E								;C2/30E8: E6 0E        INC $0E
	LDA $0E								;C2/30EA: A5 0E        LDA $0E
	CMP #$04	;4 chars to check				;C2/30EC: C9 04        CMP #$04
	BNE .Loop							;C2/30EE: D0 DB        BNE $30CB
	RTS 								;C2/30F0: 60           RTS 

%org($C230F1)
AITarget2F:	;butz if dead
	STZ $0E		;butz						;C2/30F1: 64 0E        STZ $0E
AITargetPersonDead:	;reused for other characters, note there is no krile version
	TDC 								;C2/30F3: 7B           TDC 
	TAY 								;C2/30F4: A8           TAY 
	TAX 								;C2/30F5: AA           TAX 
.Loop	LDA CharStruct.CharRow,X					;C2/30F6: BD 00 20     LDA $2000,X
	AND #$07	;character bits					;C2/30F9: 29 07        AND #$07
	CMP $0E								;C2/30FB: C5 0E        CMP $0E
	BNE .Next							;C2/30FD: D0 0C        BNE $310B
	LDA CharStruct.Status1,X					;C2/30FF: BD 1A 20     LDA $201A,X
	AND #$80	;dead						;C2/3102: 29 80        AND #$80
	BEQ .Ret  							;C2/3104: F0 0E        BEQ $3114     
	STX AITargetOffsets						;C2/3106: 8E 20 26     STX $2620
	BRA .Ret							;C2/3109: 80 09        BRA $3114
.Next	JSR NextCharOffset						;C2/310B: 20 E0 01     JSR $01E0     
	INY 								;C2/310E: C8           INY 
	CPY #$0004	;4 chars to check				;C2/310F: C0 04 00     CPY #$0004
	BNE .Loop							;C2/3112: D0 E2        BNE $30F6
.Ret	RTS 								;C2/3114: 60           RTS 

%org($C23115)								
AITarget30:	;lenna if dead
	LDA #$01	;lenna						;C2/3115: A9 01        LDA #$01
	STA $0E								;C2/3117: 85 0E        STA $0E
	BRA AITargetPersonDead						;C2/3119: 80 D8        BRA $30F3

%org($C2311B)
AITarget31:	;galuf if dead							
	LDA #$02	;galuf						;C2/311B: A9 02        LDA #$02
	STA $0E								;C2/311D: 85 0E        STA $0E
	BRA AITargetPersonDead						;C2/311F: 80 D2        BRA $30F3

%org($C23121)	;faris if dead
AITarget32:		;faris
	LDA #$03							;C2/3121: A9 03        LDA #$03
	STA $0E								;C2/3123: 85 0E        STA $0E
	BRA AITargetPersonDead						;C2/3125: 80 CC        BRA $30F3

%org($C23127)
;used by AI routines, but seems like it could be useful elsewhere
;returns non-zero if target is dead, stone, erased, hidden or jumping
CheckTargetValid:
	LDA CharStruct.Status1,X 					;C2/3127: BD 1A 20     LDA $201A,X   
	AND #$C0	;dead or stone					;C2/312A: 29 C0        AND #$C0
	BNE .Ret							;C2/312C: D0 0C        BNE $313A
	LDA CharStruct.Status4,X 					;C2/312E: BD 1D 20     LDA $201D,X   
	AND #$81	;erased or hidden				;C2/3131: 29 81        AND #$81
	BNE .Ret							;C2/3133: D0 05        BNE $313A
	LDA CharStruct.CmdStatus,X 					;C2/3135: BD 1E 20     LDA $201E,X   
	AND #$10	;jumping					;C2/3138: 29 10        AND #$10
.Ret	RTS 								;C2/313A: 60           RTS 

%org($C2313B)
;Processes the current AI script into the AI command buffer, then executes it
ProcessAIScript:	
	LDX #$0040   	;init 64 byte buffer to $FF			;C2/313B: A2 40 00     LDX #$0040    
	LDA #$FF							;C2/313E: A9 FF        LDA #$FF
-	STA AIBuffer,X  						;C2/3140: 9D 40 26     STA $2640,X   
	DEX 								;C2/3143: CA           DEX 
	BPL -								;C2/3144: 10 FA        BPL $3140

	LDA MonsterIndex    						;C2/3146: AD 03 7C     LDA $7C03     
	ASL 								;C2/3149: 0A           ASL 
	TAX 								;C2/314A: AA           TAX 
	LDA AICurrentOffset,X						;C2/314B: BD 96 46     LDA $4696,X
	STA $0E		;current ai offset				;C2/314E: 85 0E        STA $0E
	LDA AICurrentOffset+1,X						;C2/3150: BD 97 46     LDA $4697,X
	STA $0F								;C2/3153: 85 0F        STA $0F
	TDC 								;C2/3155: 7B           TDC 
	TAX 								;C2/3156: AA           TAX 
	LDY $0E		;current ai offset				;C2/3157: A4 0E        LDY $0E

.ProcessScript
	LDA (AIOffset),Y						;C2/3159: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/315B: 9D 40 26     STA $2640,X
	INY 								;C2/315E: C8           INY 
	INX 								;C2/315F: E8           INX 
	CMP #$FE	;end of entry					;C2/3160: C9 FE        CMP #$FE
	BNE +								;C2/3162: D0 03        BNE $3167
	JMP .EndSequence						;C2/3164: 4C F8 31     JMP $31F8
+	CMP #$FF	;end of ai					;C2/3167: C9 FF        CMP #$FF
	BNE +								;C2/3169: D0 03        BNE $316E
	JMP .EndSequence						;C2/316B: 4C F8 31     JMP $31F8
+	CMP #$FD	;special command				;C2/316E: C9 FD        CMP #$FD
	BNE .NotSpecial							;C2/3170: D0 69        BNE $31DB

;special commands (Flag byte $FD)
	LDA (AIOffset),Y	;copy command byte			;C2/3172: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/3174: 9D 40 26     STA $2640,X
	INY 								;C2/3177: C8           INY 
	INX 								;C2/3178: E8           INX 
	CMP #$F7							;C2/3179: C9 F7        CMP #$F7
	BEQ .CopyExtraBytes						;C2/317B: F0 1E        BEQ $319B
	CMP #$F0							;C2/317D: C9 F0        CMP #$F0
	BCS .OtherSpecial						;C2/317F: B0 49        BCS $31CA
	LDA (AIOffset),Y	;copy 2 data bytes			;C2/3181: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/3183: 9D 40 26     STA $2640,X
	INY 								;C2/3186: C8           INY 
	INX 								;C2/3187: E8           INX 
	LDA (AIOffset),Y						;C2/3188: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/318A: 9D 40 26     STA $2640,X
	INY 								;C2/318D: C8           INY 
	INX 								;C2/318E: E8           INX 
	LDA (AIOffset),Y						;C2/318F: B1 4B        LDA ($4B),Y
	CMP #$FE		;check for end				;C2/3191: C9 FE        CMP #$FE
	BEQ .EndSequence						;C2/3193: F0 63        BEQ $31F8
	CMP #$FF							;C2/3195: C9 FF        CMP #$FF
	BEQ .EndSequence						;C2/3197: F0 5F        BEQ $31F8
	BRA .UpdateOffset						;C2/3199: 80 4A        BRA $31E5

.CopyExtraBytes	;F7 command, copies 2 bytes then extra bytes depending on the first (min 1)
	LDA (AIOffset),Y	;number of extra data bytes to copy 	;C2/319B: B1 4B        LDA ($4B),Y
	STA AIBuffer,X		;.. must be at least 1 			;C2/319D: 9D 40 26     STA $2640,X
	STA $10								;C2/31A0: 85 10        STA $10
	INY 								;C2/31A2: C8           INY 
	INX 								;C2/31A3: E8           INX 
	LDA (AIOffset),Y						;C2/31A4: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/31A6: 9D 40 26     STA $2640,X
	INY 								;C2/31A9: C8           INY 
	INX 								;C2/31AA: E8           INX 
	STZ $11								;C2/31AB: 64 11        STZ $11
-	LDA (AIOffset),Y						;C2/31AD: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/31AF: 9D 40 26     STA $2640,X
	INY 								;C2/31B2: C8           INY 
	INX 								;C2/31B3: E8           INX 
	INC $11								;C2/31B4: E6 11        INC $11
	LDA $11								;C2/31B6: A5 11        LDA $11
	CMP $10								;C2/31B8: C5 10        CMP $10
	BNE -								;C2/31BA: D0 F1        BNE $31AD
	DEX 								;C2/31BC: CA           DEX 
	LDA AIBuffer,X		;check the last byte copied		;C2/31BD: BD 40 26     LDA $2640,X
	CMP #$FE							;C2/31C0: C9 FE        CMP #$FE
	BEQ .EndSequence						;C2/31C2: F0 34        BEQ $31F8
	CMP #$FF							;C2/31C4: C9 FF        CMP #$FF
	BEQ .EndSequence						;C2/31C6: F0 30        BEQ $31F8
	BRA .UpdateOffset						;C2/31C8: 80 1B        BRA $31E5

.OtherSpecial	;>= F0, but not F7
		;copies 2 more data bytes then continues processing
	LDA (AIOffset),Y						;C2/31CA: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/31CC: 9D 40 26     STA $2640,X
	INY 								;C2/31CF: C8           INY 
	INX 								;C2/31D0: E8           INX 
	LDA (AIOffset),Y						;C2/31D1: B1 4B        LDA ($4B),Y
	STA AIBuffer,X							;C2/31D3: 9D 40 26     STA $2640,X
	INY 								;C2/31D6: C8           INY 
	INX 								;C2/31D7: E8           INX 
	JMP .ProcessScript						;C2/31D8: 4C 59 31     JMP $3159

.NotSpecial	
	LDA (AIOffset),Y	;check for end				;C2/31DB: B1 4B        LDA ($4B),Y
	CMP #$FE							;C2/31DD: C9 FE        CMP #$FE
	BEQ .EndSequence						;C2/31DF: F0 17        BEQ $31F8
	CMP #$FF							;C2/31E1: C9 FF        CMP #$FF
	BEQ .EndSequence						;C2/31E3: F0 13        BEQ $31F8
.UpdateOffset
	STY $0E		;update current ai offset (position in script)	;C2/31E5: 84 0E        STY $0E
	LDA MonsterIndex						;C2/31E7: AD 03 7C     LDA $7C03
	ASL 								;C2/31EA: 0A           ASL 
	TAY 								;C2/31EB: A8           TAY 
	LDA $0E								;C2/31EC: A5 0E        LDA $0E
	STA AICurrentOffset,Y						;C2/31EE: 99 96 46     STA $4696,Y
	LDA $0F								;C2/31F1: A5 0F        LDA $0F
	STA AICurrentOffset+1,Y						;C2/31F3: 99 97 46     STA $4697,Y
	BRA DispatchAICommands						;C2/31F6: 80 18        BRA $3210

.EndSequence	;FE or FF, resets offset to start of set
	LDA MonsterIndex						;C2/31F8: AD 03 7C     LDA $7C03
	ASL 								;C2/31FB: 0A           ASL 
	TAY 								;C2/31FC: A8           TAY 
	LDA AICurrentCheckedSet						;C2/31FD: AD 90 46     LDA $4690
	ASL 								;C2/3200: 0A           ASL 
	TAX 								;C2/3201: AA           TAX 
	LDA ROMTimes64w,X						;C2/3202: BF B5 EE D0  LDA $D0EEB5,X
	STA AICurrentOffset,Y						;C2/3206: 99 96 46     STA $4696,Y
	LDA ROMTimes64w+1,X						;C2/3209: BF B6 EE D0  LDA $D0EEB6,X
	STA AICurrentOffset+1,Y						;C2/320D: 99 97 46     STA $4697,Y
;continues into next routine

%org($C23210)
;Sends AI commands to their proper processing routines
;	operates from the top of AIBuffer until it hits a $FE or $FF
;	$FD indicates a special command in the next byte(s)
;	anything else is a spell to cast
DispatchAICommands:
	STZ $0E								;C2/3210: 64 0E        STZ $0E
	LDX MonsterOffset32    						;C2/3212: AE 60 43     LDX $4360       
.InitMMTargets
	STZ !MMTargets,X	;targets for monster magic		;C2/3215: 9E 5E 42     STZ $425E,X
	INX 								;C2/3218: E8           INX 
	INC $0E			;loop index				;C2/3219: E6 0E        INC $0E
	LDA $0E								;C2/321B: A5 0E        LDA $0E
	CMP #$20      		;32 byte structure			;C2/321D: C9 20        CMP #$20        
	BNE .InitMMTargets						;C2/321F: D0 F4        BNE $3215

	LDX MonsterOffset16						;C2/3221: AE 5E 43     LDX $435E
	STX MMOffset      						;C2/3224: 86 3D        STX $3D         
	LDX MonsterOffset32						;C2/3226: AE 60 43     LDX $4360
	STX MMTargetOffset       					;C2/3229: 86 3F        STX $3F         
	LDA MonsterIndex    						;C2/322B: AD 03 7C     LDA $7C03       
	ASL 								;C2/322E: 0A           ASL 
	TAX 								;C2/322F: AA           TAX 
	LDA ROMTimes100w,X 						;C2/3230: BF 95 EE D0  LDA $D0EE95,X   
	STA AIScriptOffset      					;C2/3234: 85 41        STA $41         
	LDA ROMTimes100w+1,X						;C2/3236: BF 96 EE D0  LDA $D0EE96,X
	STA AIScriptOffset+1						;C2/323A: 85 42        STA $42

	TDC           							;C2/323C: 7B           TDC             
	TAY           							;C2/323D: A8           TAY             
	STY AIBufferOffset						;C2/323E: 84 43        STY $43
	STY AISpellCount						;C2/3240: 84 45        STY $45
.Loop
	LDX AIScriptOffset						;C2/3242: A6 41        LDX $41
	LDY AIBufferOffset						;C2/3244: A4 43        LDY $43
	LDA AIBuffer,Y   						;C2/3246: B9 40 26     LDA $2640,Y     
	STA MonsterAIScript.Flag,X					;C2/3249: 9D 67 43     STA $4367,X
	CMP #$FE							;C2/324C: C9 FE        CMP #$FE
	BEQ .Ret     							;C2/324E: F0 4B        BEQ $329B       
	CMP #$FF							;C2/3250: C9 FF        CMP #$FF
	BEQ .Ret							;C2/3252: F0 47        BEQ $329B
	CMP #$FD							;C2/3254: C9 FD        CMP #$FD
	BCS .Special   							;C2/3256: B0 05        BCS $325D       
.CastSpell	;values < $FD are just a spell to cast
	JSR AICastNormalSpell   					;C2/3258: 20 9C 32     JSR $329C       
	BRA .GoLoop							;C2/325B: 80 3C        BRA $3299

.Special	;FD is a flag for special commands
	LDA AIBuffer+1,Y   						;C2/325D: B9 41 26     LDA $2641,Y     
	CMP #$F0							;C2/3260: C9 F0        CMP #$F0
	BCS +								;C2/3262: B0 05        BCS $3269
	JSR AIChoose1of3	;command < $F0 means a list of 3 spells	;C2/3264: 20 4D 33     JSR $334D       
	BRA .CastSpell							;C2/3267: 80 EF        BRA $3258
+	CMP #$F2							;C2/3269: C9 F2        CMP #$F2
	BNE +								;C2/326B: D0 05        BNE $3272
	JSR AIShowMonster	;command $F2				;C2/326D: 20 6E 33     JSR $336E       
	BRA .GoLoop							;C2/3270: 80 27        BRA $3299
+	CMP #$F3							;C2/3272: C9 F3        CMP #$F3
	BNE +								;C2/3274: D0 05        BNE $327B
	JSR AISetTarget     	;command $F3				;C2/3276: 20 EC 33     JSR $33EC       
	BRA .GoLoop							;C2/3279: 80 1E        BRA $3299
+	CMP #$F4							;C2/327B: C9 F4        CMP #$F4
	BNE +								;C2/327D: D0 05        BNE $3284
	JSR AISetVar     	;command $F4				;C2/327F: 20 6F 34     JSR $346F       
	BRA .GoLoop							;C2/3282: 80 15        BRA $3299
+	CMP #$F9							;C2/3284: C9 F9        CMP #$F9
	BNE +								;C2/3286: D0 05        BNE $328D
	JSR AISetEventFlag     	;command $F9				;C2/3288: 20 7B 34     JSR $347B       
	BRA .GoLoop							;C2/328B: 80 0C        BRA $3299
+	CMP #$FA							;C2/328D: C9 FA        CMP #$FA
	BNE +								;C2/328F: D0 05        BNE $3296
	JSR AISetStatsToggleStatus     	;command $FA			;C2/3291: 20 8A 34     JSR $348A       
	BRA .GoLoop							;C2/3294: 80 03        BRA $3299
+	JSR AICopyCommand     	;could be F0,F1,F5-F8,FB-FF		;C2/3296: 20 D9 34     JSR $34D9       
				;.. just copies command as it is
.GoLoop
	BRA .Loop							;C2/3299: 80 A7        BRA $3242
.Ret	RTS 								;C2/329B: 60           RTS 

%org($C2329C)
;Spell is passed in A
;Includes things like "Monster Fight" which are all spells
AICastNormalSpell:
	LDX MMOffset      						;C2/329C: A6 3D        LDX $3D         
	CMP #$F1							;C2/329E: C9 F1        CMP #$F1
	BNE .QueueSpell							;C2/32A0: D0 29        BNE $32CB
	
	;$F1 is a special case command that aborts the action?
	LDX AIScriptOffset						;C2/32A2: A6 41        LDX $41
	LDA #$FF	;flag to be ignored by graphics routines?	;C2/32A4: A9 FF        LDA #$FF
	STA MonsterAIScript.Flag,X 					;C2/32A6: 9D 67 43     STA $4367,X     
	STZ $16								;C2/32A9: 64 16        STZ $16
	LDA MMOffset 							;C2/32AB: A5 3D        LDA $3D
	LSR 								;C2/32AD: 4A           LSR 
	ROR $16								;C2/32AE: 66 16        ROR $16
	LSR 								;C2/32B0: 4A           LSR 
	ROR $16								;C2/32B1: 66 16        ROR $16
	LSR 								;C2/32B3: 4A           LSR 
	ROR $16								;C2/32B4: 66 16        ROR $16
	LSR 								;C2/32B6: 4A           LSR 
	ROR $16		;low 4bits of MMOffset in high 4 of $16		;C2/32B7: 66 16        ROR $16
	LDA $16								;C2/32B9: A5 16        LDA $16
	BNE .Dummy	;at least one action was queued before this?	;C2/32BB: D0 0A        BNE $32C7
	;if nothing else has been queued consider the action complete?
	LDX AttackerOffset						;C2/32BD: A6 32        LDX $32         
	STZ CharStruct.Command,X 					;C2/32BF: 9E 57 20     STZ $2057,X     
	LDA #$80	;physical/other					;C2/32C2: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X 					;C2/32C4: 9D 56 20     STA $2056,X     
.Dummy
	LDA #$78	;queue failure/dummy spell?			;C2/32C7: A9 78        LDA #$78
	LDX MMOffset							;C2/32C9: A6 3D        LDX $3D

.QueueSpell								
	STA MonsterMagic,X  						;C2/32CB: 9D DE 41     STA $41DE,X     
	STA $16		;spell to cast					;C2/32CE: 85 16        STA $16
	LDX AttackerOffset						;C2/32D0: A6 32        LDX $32         
	LDA AISpellCount						;C2/32D2: A5 45        LDA $45
	CMP #$02							;C2/32D4: C9 02        CMP #$02
	BCS .NextMM	;if queued spells >= 2, don't bother with Char	;C2/32D6: B0 14        BCS $32EC
	DEC 								;C2/32D8: 3A           DEC 
	BEQ .Add2ndSpell						;C2/32D9: F0 07        BEQ $32E2
	;if 0, put first spell selection in CharStruct
	LDA $16								;C2/32DB: A5 16        LDA $16
	STA CharStruct.SelectedItem,X  					;C2/32DD: 9D 5A 20     STA $205A,X     
	BRA .NextMM							;C2/32E0: 80 0A        BRA $32EC

.Add2ndSpell	;if 1, put in 2nd slot
	LDA $16								;C2/32E2: A5 16        LDA $16
	STA CharStruct.SecondSelectedItem,X				;C2/32E4: 9D 5F 20     STA $205F,X
	LDA #$21	;magic, costs mp				;C2/32E7: A9 21        LDA #$21
	STA CharStruct.SecondActionFlag,X				;C2/32E9: 9D 5B 20     STA $205B,X

.NextMM	
	INC MMOffset							;C2/32EC: E6 3D        INC $3D
	INC AISpellCount						;C2/32EE: E6 45        INC $45
	LDX AIScriptOffset      					;C2/32F0: A6 41        LDX $41         
	STZ $17								;C2/32F2: 64 17        STZ $17
.WipeAIScript		;wipes 20 bytes of MonsterAIScript 
	LDA #$FF							;C2/32F4: A9 FF        LDA #$FF
	STA !MonsterAIScript,X						;C2/32F6: 9D 67 43     STA $4367,X
	INX 								;C2/32F9: E8           INX 
	REP #$20							;C2/32FA: C2 20        REP #$20
	INC AIScriptOffset    						;C2/32FC: E6 41        INC $41         
	SEP #$20							;C2/32FE: E2 20        SEP #$20
	INC $17		;loop index					;C2/3300: E6 17        INC $17
	LDA $17								;C2/3302: A5 17        LDA $17
	CMP #$14							;C2/3304: C9 14        CMP #$14
	BNE .WipeAIScript						;C2/3306: D0 EC        BNE $32F4
	REP #$20							;C2/3308: C2 20        REP #$20
	DEC AIScriptOffset   ;unsure why, incremented at end anyway	;C2/330A: C6 41        DEC $41         
	SEP #$20							;C2/330C: E2 20        SEP #$20
	LDX MMTargetOffset						;C2/330E: A6 3F        LDX $3F
	LDA MMTargets.Party,X  						;C2/3310: BD 5E 42     LDA $425E,X     
	ORA MMTargets.Monster,X						;C2/3313: 1D 5F 42     ORA $425F,X
	BEQ .NoTarget							;C2/3316: F0 06        BEQ $331E
	INC MMTargetOffset						;C2/3318: E6 3F        INC $3F
	INC MMTargetOffset						;C2/331A: E6 3F        INC $3F
	BRA .Finish							;C2/331C: 80 26        BRA $3344

.NoTarget	;our spell doesn't have a target yet, check if one was forced
	LDA MonsterIndex						;C2/331E: AD 03 7C     LDA $7C03
	ASL 								;C2/3321: 0A           ASL 
	TAX 								;C2/3322: AA           TAX 
	LDA ForcedTarget.Party,X					;C2/3323: BD 2A 7C     LDA $7C2A,X
	ORA ForcedTarget.Monster,X					;C2/3326: 1D 2B 7C     ORA $7C2B,X
	BEQ .StillNoTarget						;C2/3329: F0 14        BEQ $333F
	LDY MMTargetOffset						;C2/332B: A4 3F        LDY $3F
	LDA ForcedTarget.Party,X					;C2/332D: BD 2A 7C     LDA $7C2A,X
	STA MMTargets.Party,Y						;C2/3330: 99 5E 42     STA $425E,Y
	LDA ForcedTarget.Monster,X					;C2/3333: BD 2B 7C     LDA $7C2B,X
	STA MMTargets.Monster,Y						;C2/3336: 99 5F 42     STA $425F,Y
	INC MMTargetOffset						;C2/3339: E6 3F        INC $3F
	INC MMTargetOffset						;C2/333B: E6 3F        INC $3F
	BRA .Finish							;C2/333D: 80 05        BRA $3344

.StillNoTarget	;we still don't have a target, so call a routine to set it
	LDA $16		;spell to cast					;C2/333F: A5 16        LDA $16
	JSR AISpellTarget						;C2/3341: 20 04 35     JSR $3504

.Finish
	REP #$20							;C2/3344: C2 20        REP #$20
	INC AIScriptOffset    						;C2/3346: E6 41        INC $41         
	INC AIBufferOffset						;C2/3348: E6 43        INC $43
	SEP #$20							;C2/334A: E2 20        SEP #$20
	RTS 								;C2/334C: 60           RTS 


%org($C2334D)
;First spell in A when called
AIChoose1of3:
	STA $2720		;scratch area				;C2/334D: 8D 20 27     STA $2720
	LDA AIBuffer+2,Y						;C2/3350: B9 42 26     LDA $2642,Y
	STA $2721							;C2/3353: 8D 21 27     STA $2721
	LDA AIBuffer+3,Y						;C2/3356: B9 43 26     LDA $2643,Y
	STA $2722							;C2/3359: 8D 22 27     STA $2722
	INC AIBufferOffset	;incrememnt buffer to account		;C2/335C: E6 43        INC $43
	INC AIBufferOffset	;.. for the extra 3 bytes		;C2/335E: E6 43        INC $43
	INC AIBufferOffset						;C2/3360: E6 43        INC $43
	TDC 								;C2/3362: 7B           TDC 
	TAX 								;C2/3363: AA           TAX 
	LDA #$02							;C2/3364: A9 02        LDA #$02
	JSR Random_X_A							;C2/3366: 20 7C 00     JSR $007C       
	TAX 								;C2/3369: AA           TAX 
	LDA $2720,X							;C2/336A: BD 20 27     LDA $2720,X
	RTS 								;C2/336D: 60           RTS 


%org($C2336E)
;AI Command $F2, Show Monster
;Param1/Type:  	bitfield but only $40 (random) is supported
;Param2/Data1: 	bitfield of valid monsters to show
;		.. or if 0, picks a random monster other than self
AIShowMonster:
	JSR AICopyCommand   						;C2/336E: 20 D9 34     JSR $34D9       
	LDA CurrentlyReacting						;C2/3371: AD 4E 47     LDA $474E
	BEQ .Normal							;C2/3374: F0 0F        BEQ $3385
	PHX 								;C2/3376: DA           PHX 
	LDA MonsterIndex						;C2/3377: AD 03 7C     LDA $7C03       
	TAX 								;C2/337A: AA           TAX 
	LDA FinalTarget2Bits	;remove self from any pending reactions	;C2/337B: AD 51 47     LDA $4751
	JSR ClearBit_X 							;C2/337E: 20 D1 01     JSR $01D1       
	STA FinalTarget2Bits						;C2/3381: 8D 51 47     STA $4751
	PLX 								;C2/3384: FA           PLX 

.Normal
	LDA $0F     	;monsters to show				;C2/3385: A5 0F        LDA $0F         
	BNE .ShowFromSet						;C2/3387: D0 30        BNE $33B9
	;no monsters provided, pick one at random
	PHX 								;C2/3389: DA           PHX 
.TryRandomMonster
	TDC 								;C2/338A: 7B           TDC 
	TAX								;C2/338B: AA           TAX
	LDA #$07							;C2/338C: A9 07        LDA #$07
	JSR Random_X_A							;C2/338E: 20 7C 00     JSR $007C       
	STA $10								;C2/3391: 85 10        STA $10
	CMP MonsterIndex						;C2/3393: CD 03 7C     CMP $7C03       
	BEQ .TryRandomMonster  	;picked self, try again			;C2/3396: F0 F2        BEQ $338A       
	ASL 								;C2/3398: 0A           ASL 
	TAX 								;C2/3399: AA           TAX 
	LDA BattleMonsterID,X 						;C2/339A: BD 20 40     LDA $4020,X     
	AND BattleMonsterID+1,X						;C2/339D: 3D 21 40     AND $4021,X
	CMP #$FF							;C2/33A0: C9 FF        CMP #$FF
	BEQ .TryRandomMonster	;picked empty slot, try again		;C2/33A2: F0 E6        BEQ $338A       
	LDA MonsterIndex  						;C2/33A4: AD 03 7C     LDA $7C03       
	TAX 								;C2/33A7: AA           TAX 
	TDC 								;C2/33A8: 7B           TDC 
	JSR SetBit_X  	;current monster always shown			;C2/33A9: 20 D6 01     JSR $01D6       
	PHA 								;C2/33AC: 48           PHA 
	LDA $10								;C2/33AD: A5 10        LDA $10
	TAX 								;C2/33AF: AA           TAX 
	PLA 								;C2/33B0: 68           PLA 
	JSR SetBit_X  	;randomly picked monster also shown		;C2/33B1: 20 D6 01     JSR $01D6       
	PLX 								;C2/33B4: FA           PLX 
	STA MonsterAIScript.Data1,X					;C2/33B5: 9D 6A 43     STA $436A,X
	RTS								;C2/33B8: 60           RTS

.ShowFromSet								
	LDA $0E     	;command type bits				;C2/33B9: A5 0E        LDA $0E         
	AND #$40	;but only $40 (random) is supported		;C2/33BB: 29 40        AND #$40
	BEQ .Ret   							;C2/33BD: F0 2C        BEQ $33EB       
	PHX 								;C2/33BF: DA           PHX 
.TryRandomSet
	TDC 								;C2/33C0: 7B           TDC 
	TAX 								;C2/33C1: AA           TAX 
	LDA #$07							;C2/33C2: A9 07        LDA #$07
	JSR Random_X_A							;C2/33C4: 20 7C 00     JSR $007C       
	STA $10								;C2/33C7: 85 10        STA $10
	ASL 								;C2/33C9: 0A           ASL 
	TAX 								;C2/33CA: AA           TAX 
	LDA BattleMonsterID,X						;C2/33CB: BD 20 40     LDA $4020,X
	AND BattleMonsterID+1,X						;C2/33CE: 3D 21 40     AND $4021,X
	CMP #$FF							;C2/33D1: C9 FF        CMP #$FF
	BEQ .TryRandomSet	;empty slot, try again			;C2/33D3: F0 EB        BEQ $33C0       
	LDA $10								;C2/33D5: A5 10        LDA $10
	TAX 								;C2/33D7: AA           TAX 
	TDC 								;C2/33D8: 7B           TDC 
	JSR SetBit_X							;C2/33D9: 20 D6 01     JSR $01D6       
	AND $0F			;monsters to show			;C2/33DC: 25 0F        AND $0F
	BEQ .TryRandomSet	;not in set, try again			;C2/33DE: F0 E0        BEQ $33C0       
	LDA $10								;C2/33E0: A5 10        LDA $10
	TAX 								;C2/33E2: AA           TAX 
	TDC 								;C2/33E3: 7B           TDC 
	JSR SetBit_X   	;set the bit again for no reason		;C2/33E4: 20 D6 01     JSR $01D6       
	PLX 								;C2/33E7: FA           PLX 
	STA MonsterAIScript.Data1,X					;C2/33E8: 9D 6A 43     STA $436A,X
.Ret	RTS 								;C2/33EB: 60           RTS 


%org($C233EC)
;AI Command $F3: Set Target
;Param1/Type: AITarget routine
AISetTarget:
	JSR AICopyCommand						;C2/33EC: 20 D9 34     JSR $34D9
	LDA ReactingIndexType						;C2/33EF: AD 56 7C     LDA $7C56
	BEQ +								;C2/33F2: F0 03        BEQ $33F7
	INC ReactingIndexType						;C2/33F4: EE 56 7C     INC $7C56
+	LDA $0E								;C2/33F7: A5 0E        LDA $0E
	JSR GetAITarget    						;C2/33F9: 20 27 2C     JSR $2C27       
	LDA AITargetOffsets						;C2/33FC: AD 20 26     LDA $2620
	AND AITargetOffsets+1						;C2/33FF: 2D 21 26     AND $2621
	CMP #$FF	;no targets					;C2/3402: C9 FF        CMP #$FF
	BEQ .Ret							;C2/3404: F0 68        BEQ $346E
	TDC 								;C2/3406: 7B           TDC 
	TAX 								;C2/3407: AA           TAX 
	TAY 								;C2/3408: A8           TAY 
	STX $0E								;C2/3409: 86 0E        STX $0E
.Loop	;loop until we run out of targets
	REP #$20							;C2/340B: C2 20        REP #$20
	LDA AITargetOffsets,Y						;C2/340D: B9 20 26     LDA $2620,Y
	JSR ShiftDivide_128	;offset->index				;C2/3410: 20 BB 01     JSR $01BB       
	TAX 								;C2/3413: AA           TAX 
	TDC 								;C2/3414: 7B           TDC 
	SEP #$20							;C2/3415: E2 20        SEP #$20
	CPX #$000C	;>=12 means we're done				;C2/3417: E0 0C 00     CPX #$000C
	BCS .CheckMulti							;C2/341A: B0 1D        BCS $3439
	TXA 								;C2/341C: 8A           TXA 
	CMP #$04	;monster check					;C2/341D: C9 04        CMP #$04
	BCS .Monster							;C2/341F: B0 09        BCS $342A
	LDA $0E								;C2/3421: A5 0E        LDA $0E
	JSR SetBit_X   							;C2/3423: 20 D6 01     JSR $01D6       
	STA $0E								;C2/3426: 85 0E        STA $0E
	BRA .Next							;C2/3428: 80 0B        BRA $3435
.Monster
	SEC 								;C2/342A: 38           SEC 
	SBC #$04							;C2/342B: E9 04        SBC #$04
	TAX 								;C2/342D: AA           TAX 
	LDA $0F								;C2/342E: A5 0F        LDA $0F
	JSR  SetBit_X    						;C2/3430: 20 D6 01     JSR $01D6       
	STA $0F								;C2/3433: 85 0F        STA $0F
.Next	INY 								;C2/3435: C8           INY 
	INY 								;C2/3436: C8           INY 
	BRA .Loop							;C2/3437: 80 D2        BRA $340B

.CheckMulti
	LDA AIMultiTarget						;C2/3439: AD 24 27     LDA $2724
	BNE .Finish	;use as-is for multitarget, or select 1 random	;C2/343C: D0 24        BNE $3462
.TryRandom
	TDC 								;C2/343E: 7B           TDC 
	TAX 								;C2/343F: AA           TAX 
	LDA #$07							;C2/3440: A9 07        LDA #$07
	JSR Random_X_A 							;C2/3442: 20 7C 00     JSR $007C       
	TAX 								;C2/3445: AA           TAX 
	LDA $0E		;party targets					;C2/3446: A5 0E        LDA $0E
	JSR SelectBit_X  						;C2/3448: 20 DB 01     JSR $01DB       
	BEQ .CheckMonster						;C2/344B: F0 08        BEQ $3455
	TDC 								;C2/344D: 7B           TDC 
	JSR SetBit_X	  						;C2/344E: 20 D6 01     JSR $01D6       
	STA $0E								;C2/3451: 85 0E        STA $0E
	BRA .Finish							;C2/3453: 80 0D        BRA $3462

.CheckMonster
	LDA $0F		;monster targets				;C2/3455: A5 0F        LDA $0F
	JSR SelectBit_X 						;C2/3457: 20 DB 01     JSR $01DB       
	BEQ .TryRandom	;failed both, try again				;C2/345A: F0 E2        BEQ $343E
	TDC 								;C2/345C: 7B           TDC 
	JSR SetBit_X   							;C2/345D: 20 D6 01     JSR $01D6       
	STA $0F								;C2/3460: 85 0F        STA $0F
.Finish
	LDX MMTargetOffset						;C2/3462: A6 3F        LDX $3F
	LDA $0E								;C2/3464: A5 0E        LDA $0E
	STA MMTargets.Party,X						;C2/3466: 9D 5E 42     STA $425E,X
	LDA $0F								;C2/3469: A5 0F        LDA $0F
	STA MMTargets.Monster,X						;C2/346B: 9D 5F 42     STA $425F,X
.Ret	RTS 								;C2/346E: 60           RTS 

%org($C2346F)
;AI Command $F4: Set Variable
;Param1: Variable #
;Param2: Value
AISetVar:
	JSR AICopyCommand  						;C2/346F: 20 D9 34     JSR $34D9       
	LDA $0E								;C2/3472: A5 0E        LDA $0E
	TAX 								;C2/3474: AA           TAX 
	LDA $0F								;C2/3475: A5 0F        LDA $0F
	STA AIVars,X							;C2/3477: 9D 63 43     STA $4363,X     
	RTS 								;C2/347A: 60           RTS 

%org($C2347B)
;AI Command $F9: Set Event Flag
;Param1: Event Flags Byte
;Param2: Bits to set
AISetEventFlag:
	JSR AICopyCommand  						;C2/347B: 20 D9 34     JSR $34D9       
	LDA $0E								;C2/347E: A5 0E        LDA $0E
	TAX 								;C2/3480: AA           TAX 
	LDA BattleData.EventFlags,X					;C2/3481: BD 84 7C     LDA $7C84,X
	ORA $0F								;C2/3484: 05 0F        ORA $0F
	STA BattleData.EventFlags,X					;C2/3486: 9D 84 7C     STA $7C84,X
	RTS 								;C2/3489: 60           RTS 

%org($C2348A)
;AI Command $FA: Set Stats or Toggle Status 
;Param1: Offset within CharStruct
;Param2: Value to set, or Status to toggle (only highest status bit applies)
AISetStatsToggleStatus:
	JSR AICopyCommand      						;C2/348A: 20 D9 34     JSR $34D9       
	LDA $0E								;C2/348D: A5 0E        LDA $0E
	REP #$20							;C2/348F: C2 20        REP #$20
	CLC 								;C2/3491: 18           CLC 
	ADC AttackerOffset						;C2/3492: 65 32        ADC $32         
	TAX 								;C2/3494: AA           TAX 
	TDC 								;C2/3495: 7B           TDC 
	SEP #$20							;C2/3496: E2 20        SEP #$20
	LDA $0E								;C2/3498: A5 0E        LDA $0E
	CMP #$1A	;before Status1					;C2/349A: C9 1A        CMP #$1A
	BCC .SetDirect							;C2/349C: 90 35        BCC $34D3
	CMP #$1E	;before CmdStatus				;C2/349E: C9 1E        CMP #$1E
	BCC .ToggleStatus						;C2/34A0: 90 08        BCC $34AA
	CMP #$70	;before AlwaysStatus				;C2/34A2: C9 70        CMP #$70
	BCC .SetDirect							;C2/34A4: 90 2D        BCC $34D3
	CMP #$74	;after AlwaysStatus				;C2/34A6: C9 74        CMP #$74
	BCS .SetDirect							;C2/34A8: B0 29        BCS $34D3

.ToggleStatus		;also applies to always status
	TDC 								;C2/34AA: 7B           TDC 
	TAY 								;C2/34AB: A8           TAY 
	LDA $0F								;C2/34AC: A5 0F        LDA $0F
	BEQ .Ret	;0 would cause infinite loop, so abort		;C2/34AE: F0 22        BEQ $34D2
	
.FindFirstSetBit	
	ASL 								;C2/34B0: 0A           ASL 
	BCS .Found							;C2/34B1: B0 03        BCS $34B6
	INY 								;C2/34B3: C8           INY 
	BRA .FindFirstSetBit						;C2/34B4: 80 FA        BRA $34B0
	
.Found		;now set this status if not set, or clear it if already set
	PHX 								;C2/34B6: DA           PHX 
	TYX 								;C2/34B7: BB           TYX 
	LDA ROMBitUnset,X						;C2/34B8: BF DE EC D0  LDA $D0ECDE,X
	STA $0E								;C2/34BC: 85 0E        STA $0E
	PLX 								;C2/34BE: FA           PLX 
	LDA !CharStruct,X						;C2/34BF: BD 00 20     LDA $2000,X
	AND $0F								;C2/34C2: 25 0F        AND $0F
	EOR $0F								;C2/34C4: 45 0F        EOR $0F
	STA $10								;C2/34C6: 85 10        STA $10
	LDA !CharStruct,X						;C2/34C8: BD 00 20     LDA $2000,X
	AND $0E								;C2/34CB: 25 0E        AND $0E
	ORA $10								;C2/34CD: 05 10        ORA $10
	STA !CharStruct,X						;C2/34CF: 9D 00 20     STA $2000,X
.Ret	RTS 								;C2/34D2: 60           RTS 
	
.SetDirect	;for non-status offsets, just set it to the provided value
	LDA $0F								;C2/34D3: A5 0F        LDA $0F
	STA !CharStruct,X						;C2/34D5: 9D 00 20     STA $2000,X
	RTS 								;C2/34D8: 60           RTS 


%org($C234D9)
;copies one 5 byte command from AIbuffer to MonsterAIScript
;first byte ($FD) has already been copied before this is called
;also puts the first 2 command params in $0E and $0F
AICopyCommand:
	STA MonsterAIScript.Cmd,X					;C2/34D9: 9D 68 43     STA $4368,X
	LDA AIBuffer+2,Y						;C2/34DC: B9 42 26     LDA $2642,Y     
	STA MonsterAIScript.Type,X					;C2/34DF: 9D 69 43     STA $4369,X
	STA $0E								;C2/34E2: 85 0E        STA $0E
	LDA AIBuffer+3,Y						;C2/34E4: B9 43 26     LDA $2643,Y     
	STA MonsterAIScript.Data1,X					;C2/34E7: 9D 6A 43     STA $436A,X
	STA $0F								;C2/34EA: 85 0F        STA $0F
	STA MonsterAIScript.Data2,X					;C2/34EC: 9D 6B 43     STA $436B,X
	REP #$20							;C2/34EF: C2 20        REP #$20
	CLC 								;C2/34F1: 18           CLC 
	LDA AIScriptOffset    						;C2/34F2: A5 41        LDA $41         
	ADC #$0005		;advance past this command		;C2/34F4: 69 05 00     ADC #$0005
	STA AIScriptOffset						;C2/34F7: 85 41        STA $41
	TDC 								;C2/34F9: 7B           TDC 
	SEP #$20							;C2/34FA: E2 20        SEP #$20
	CLC 								;C2/34FC: 18           CLC 
	LDA AIBufferOffset						;C2/34FD: A5 43        LDA $43
	ADC #$04		;advance mostly past this command 	;C2/34FF: 69 04        ADC #$04
	STA AIBufferOffset	;.. last byte is in called routine	;C2/3501: 85 43        STA $43
	RTS 								;C2/3503: 60           RTS 

%org($C23504)
;called when a queued MonsterMagic doesn't have a target
;A is the spell being cast
AISpellTarget:
	PHA 								;C2/3504: 48           PHA 
	PLA 								;C2/3505: 68           PLA 
	BNE +								;C2/3506: D0 05        BNE $350D
	STZ $17								;C2/3508: 64 17        STZ $17
	JMP .RandomParty						;C2/350A: 4C A9 35     JMP $35A9
+	CMP #$EC	;a dummy spell					;C2/350D: C9 EC        CMP #$EC
	BNE .SpellTargetting						;C2/350F: D0 1D        BNE $352E
	LDA #$F0	;all party members				;C2/3511: A9 F0        LDA #$F0
	STA $16		;party targets					;C2/3513: 85 16        STA $16
	STZ $17								;C2/3515: 64 17        STZ $17
	TDC 								;C2/3517: 7B           TDC 
	TAX 								;C2/3518: AA           TAX 
.RemoveInactive
	LDA ActiveParticipants,X					;C2/3519: BD C2 3E     LDA $3EC2,X
	BEQ .Next							;C2/351C: F0 07        BEQ $3525
	LDA $16								;C2/351E: A5 16        LDA $16
	JSR ClearBit_X    						;C2/3520: 20 D1 01     JSR $01D1       
	STA $16								;C2/3523: 85 16        STA $16
.Next	INX 								;C2/3525: E8           INX 
	CPX #$0004							;C2/3526: E0 04 00     CPX #$0004
	BNE .RemoveInactive						;C2/3529: D0 EE        BNE $3519
	JMP .Finish							;C2/352B: 4C D2 35     JMP $35D2

.SpellTargetting
	REP #$20							;C2/352E: C2 20        REP #$20
	JSR ShiftMultiply_8       					;C2/3530: 20 B6 01     JSR $01B6       
	TAX 								;C2/3533: AA           TAX 
	TDC 								;C2/3534: 7B           TDC 
	SEP #$20							;C2/3535: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/3537: BF 80 0B D1  LDA $D10B80,X
	STA TempTargetting						;C2/353B: 8D A0 26     STA $26A0
	TDC 								;C2/353E: 7B           TDC 
	TAY 								;C2/353F: A8           TAY 
	STY $16								;C2/3540: 84 16        STY $16
	LDA TempTargetting						;C2/3542: AD A0 26     LDA $26A0
	BNE .CheckRoulette						;C2/3545: D0 0C        BNE $3553
	;no targetting info, so target self
	LDA MonsterIndex						;C2/3547: AD 03 7C     LDA $7C03
	TAX 								;C2/354A: AA           TAX 
	TDC 								;C2/354B: 7B           TDC 
	JSR SetBit_X   							;C2/354C: 20 D6 01     JSR $01D6       
	STA $17								;C2/354F: 85 17        STA $17
	BRA .Finish							;C2/3551: 80 7F        BRA $35D2

.CheckRoulette
	AND #$04	;roulette					;C2/3553: 29 04        AND #$04
	BEQ .NormalTargetting						;C2/3555: F0 2C        BEQ $3583
.TryRandom
	TDC 								;C2/3557: 7B           TDC 
	TAX 								;C2/3558: AA           TAX 
	LDA #$0B							;C2/3559: A9 0B        LDA #$0B
	JSR Random_X_A	;0..11, random target				;C2/355B: 20 7C 00     JSR $007C       
	STA $16								;C2/355E: 85 16        STA $16
	TAY 								;C2/3560: A8           TAY 
	LDA ActiveParticipants,Y					;C2/3561: B9 C2 3E     LDA $3EC2,Y
	BEQ .TryRandom	;inactive target, try again			;C2/3564: F0 F1        BEQ $3557
	LDA $16								;C2/3566: A5 16        LDA $16
	CMP #$04	;monster check					;C2/3568: C9 04        CMP #$04
	BCS .Monster							;C2/356A: B0 09        BCS $3575
	TAX 								;C2/356C: AA           TAX 
	TDC 								;C2/356D: 7B           TDC 
	JSR SetBit_X   							;C2/356E: 20 D6 01     JSR $01D6       
	STA $16		;party target					;C2/3571: 85 16        STA $16
	BRA .Finish							;C2/3573: 80 5D        BRA $35D2
.Monster
	STZ $16								;C2/3575: 64 16        STZ $16
	SEC 								;C2/3577: 38           SEC 
	SBC #$04							;C2/3578: E9 04        SBC #$04
	TAX 								;C2/357A: AA           TAX 
	TDC 								;C2/357B: 7B           TDC 
	JSR SetBit_X      						;C2/357C: 20 D6 01     JSR $01D6       
	STA $17		;monster target					;C2/357F: 85 17        STA $17
	BRA .Finish							;C2/3581: 80 4F        BRA $35D2

.NormalTargetting
	LDA TempTargetting						;C2/3583: AD A0 26     LDA $26A0
	AND #$40	;hits all					;C2/3586: 29 40        AND #$40
	BNE .All							;C2/3588: D0 2F        BNE $35B9
	LDA TempTargetting						;C2/358A: AD A0 26     LDA $26A0
	AND #$08	;targets enemy					;C2/358D: 29 08        AND #$08
	BNE .Enemy							;C2/358F: D0 14        BNE $35A5
	LDA TempCharm	;flag for charm, inverts targetting		;C2/3591: A5 22        LDA $22
	BNE .RandomParty						;C2/3593: D0 14        BNE $35A9
.RandomMonster
	TDC 								;C2/3595: 7B           TDC 
	TAX 								;C2/3596: AA           TAX 
	LDA #$07							;C2/3597: A9 07        LDA #$07
	JSR Random_X_A							;C2/3599: 20 7C 00     JSR $007C       
	TAX 								;C2/359C: AA           TAX 
	TDC 								;C2/359D: 7B           TDC 
	JSR SetBit_X   							;C2/359E: 20 D6 01     JSR $01D6       
	STA $17		;monster target					;C2/35A1: 85 17        STA $17
	BRA .Finish							;C2/35A3: 80 2D        BRA $35D2

.Enemy
	LDA TempCharm	;flag for charm, inverts targetting		;C2/35A5: A5 22        LDA $22
	BNE .RandomMonster						;C2/35A7: D0 EC        BNE $3595
.RandomParty
	TDC 								;C2/35A9: 7B           TDC 
	TAX 								;C2/35AA: AA           TAX 
	LDA #$03							;C2/35AB: A9 03        LDA #$03
	JSR Random_X_A 							;C2/35AD: 20 7C 00     JSR $007C       
	TAX 								;C2/35B0: AA           TAX 
	TDC 								;C2/35B1: 7B           TDC 
	JSR SetBit_X    						;C2/35B2: 20 D6 01     JSR $01D6       
	STA $16		;party target					;C2/35B5: 85 16        STA $16
	BRA .Finish							;C2/35B7: 80 19        BRA $35D2

.All
	LDA TempTargetting						;C2/35B9: AD A0 26     LDA $26A0
	AND #$08	;target enemy					;C2/35BC: 29 08        AND #$08
	BNE .AllEnemy							;C2/35BE: D0 0A        BNE $35CA
	LDA TempCharm							;C2/35C0: A5 22        LDA $22
	BNE .AllParty							;C2/35C2: D0 0A        BNE $35CE
.AllMonster
	LDA #$FF	;all monsters					;C2/35C4: A9 FF        LDA #$FF
	STA $17		;monster targets				;C2/35C6: 85 17        STA $17
	BRA .Finish							;C2/35C8: 80 08        BRA $35D2

.AllEnemy
	LDA TempCharm							;C2/35CA: A5 22        LDA $22
	BNE .AllMonster							;C2/35CC: D0 F6        BNE $35C4
.AllParty
	LDA #$F0	;all party members				;C2/35CE: A9 F0        LDA #$F0
	STA $16		;party targets					;C2/35D0: 85 16        STA $16

.Finish
	LDX MMTargetOffset						;C2/35D2: A6 3F        LDX $3F
	LDA $16								;C2/35D4: A5 16        LDA $16
	STA MMTargets.Party,X						;C2/35D6: 9D 5E 42     STA $425E,X
	LDA $17								;C2/35D9: A5 17        LDA $17
	STA MMTargets.Monster,X						;C2/35DB: 9D 5F 42     STA $425F,X
	INC MMTargetOffset						;C2/35DE: E6 3F        INC $3F
	INC MMTargetOffset						;C2/35E0: E6 3F        INC $3F
	RTS 								;C2/35E2: 60           RTS 

%org($C235E3)
;Check for and launch any reactions to the attacks this tick
;Includes things like waking from sleep but also AI scripted reactions
%sub(HandleReactions)
HandleReactions:
	LDA #$01							;C2/35E3: A9 01        LDA #$01
	STA ReactingIndexType						;C2/35E5: 8D 56 7C     STA $7C56
	LDA CurrentlyReacting						;C2/35E8: AD 4E 47     LDA $474E
	BNE .StartReactions						;C2/35EB: D0 79        BNE $3666
	LDA TurnProcessed						;C2/35ED: AD 54 47     LDA $4754
	BNE +								;C2/35F0: D0 03        BNE $35F5
	JMP .Finish							;C2/35F2: 4C 0C 3C     JMP $3C0C
+	LDA AttackerIndex						;C2/35F5: A5 47        LDA $47         
	STA ActedIndex							;C2/35F7: 8D 73 7C     STA $7C73
	LDA #$FF							;C2/35FA: A9 FF        LDA #$FF
	STA ReactingIndex						;C2/35FC: 8D 55 47     STA $4755
	STZ ReactionFlags						;C2/35FF: 9C 53 47     STZ $4753
	STZ FinalTargetBits						;C2/3602: 9C 4F 47     STZ $474F
	STZ TargetWasParty						;C2/3605: 9C 50 47     STZ $4750
	STZ FinalTarget2Bits						;C2/3608: 9C 51 47     STZ $4751
	STZ Target2WasParty						;C2/360B: 9C 52 47     STZ $4752
	LDA ActionAnim[0].Flags						;C2/360E: AD CC 3B     LDA $3BCC
	AND #$40	;target was a monster				;C2/3611: 29 40        AND #$40
	BNE +								;C2/3613: D0 03        BNE $3618
	INC TargetWasParty						;C2/3615: EE 50 47     INC $4750
+	LDA ActionAnim[0].TargetBits					;C2/3618: AD CF 3B     LDA $3BCF
	STA FinalTargetBits						;C2/361B: 8D 4F 47     STA $474F
	BNE .TargetSet							;C2/361E: D0 10        BNE $3630
	LDA ActionAnim[0].ReflecteeBits					;C2/3620: AD D1 3B     LDA $3BD1
	BEQ .TargetSet							;C2/3623: F0 0B        BEQ $3630
	STA FinalTargetBits						;C2/3625: 8D 4F 47     STA $474F
	LDA TargetWasParty						;C2/3628: AD 50 47     LDA $4750
	EOR #$01							;C2/362B: 49 01        EOR #$01
	STA TargetWasParty						;C2/362D: 8D 50 47     STA $4750
.TargetSet
	LDA #$80							;C2/3630: A9 80        LDA #$80
	STA ReactionFlags						;C2/3632: 8D 53 47     STA $4753
	LDA Skip2ndReactionCheck	;may be unused?			;C2/3635: AD 2E 7B     LDA $7B2E
	CMP #$FF							;C2/3638: C9 FF        CMP #$FF
	BEQ .StartReactions		;skips 2nd reaction setup	;C2/363A: F0 2A        BEQ $3666
	LDA ActionAnim[1].Flags						;C2/363C: AD D3 3B     LDA $3BD3
	AND #$40			;target was a monster		;C2/363F: 29 40        AND #$40
	BNE +								;C2/3641: D0 03        BNE $3646
	INC Target2WasParty						;C2/3643: EE 52 47     INC $4752
+	LDA ActionAnim[1].TargetBits					;C2/3646: AD D6 3B     LDA $3BD6
	STA FinalTarget2Bits						;C2/3649: 8D 51 47     STA $4751
	BNE .Target2Set							;C2/364C: D0 10        BNE $365E
	LDA ActionAnim[1].ReflecteeBits					;C2/364E: AD D8 3B     LDA $3BD8
	BEQ .Target2Set							;C2/3651: F0 0B        BEQ $365E
	STA FinalTarget2Bits						;C2/3653: 8D 51 47     STA $4751
	LDA Target2WasParty						;C2/3656: AD 52 47     LDA $4752
	EOR #$01							;C2/3659: 49 01        EOR #$01
	STA Target2WasParty						;C2/365B: 8D 52 47     STA $4752
.Target2Set
	LDA ReactionFlags						;C2/365E: AD 53 47     LDA $4753
	ORA #$40							;C2/3661: 09 40        ORA #$40
	STA ReactionFlags						;C2/3663: 8D 53 47     STA $4753

.StartReactions
	LDA PendingReactions						;C2/3666: AD 56 47     LDA $4756
	BEQ +								;C2/3669: F0 03        BEQ $366E
	JMP .Finish							;C2/366B: 4C 0C 3C     JMP $3C0C
+	LDA ReactingIndex						;C2/366E: AD 55 47     LDA $4755
	BMI +								;C2/3671: 30 03        BMI $3676
	JSR RestoreActionData						;C2/3673: 20 08 3D     JSR $3D08
+	LDA ReactionFlags						;C2/3676: AD 53 47     LDA $4753
	AND #$01	;should check second reaction instead		;C2/3679: 29 01        AND #$01
	BEQ .CheckTargetsLoop						;C2/367B: F0 03        BEQ $3680
	JMP .CheckTargets2Loop						;C2/367D: 4C 51 39     JMP $3951

.CheckTargetsLoop
	TDC 								;C2/3680: 7B           TDC 
	TAX 								;C2/3681: AA           TAX 
-	LDA FinalTargetBits						;C2/3682: AD 4F 47     LDA $474F
	JSR SelectBit_X  						;C2/3685: 20 DB 01     JSR $01DB       
	BNE .FoundTarget						;C2/3688: D0 0C        BNE $3696
	INX 								;C2/368A: E8           INX 
	CPX #$0008							;C2/368B: E0 08 00     CPX #$0008
	BNE -								;C2/368E: D0 F2        BNE $3682
	INC ReactionFlags	;switch to second reaction 		;C2/3690: EE 53 47     INC $4753
	JMP .CheckTargets2Loop						;C2/3693: 4C 51 39     JMP $3951

.FoundTarget
	LDA FinalTargetBits						;C2/3696: AD 4F 47     LDA $474F
	JSR ClearBit_X	 						;C2/3699: 20 D1 01     JSR $01D1       
	STA FinalTargetBits						;C2/369C: 8D 4F 47     STA $474F
	TXA 								;C2/369F: 8A           TXA 
	STA ReactingIndex						;C2/36A0: 8D 55 47     STA $4755
	LDA TargetWasParty						;C2/36A3: AD 50 47     LDA $4750
	BNE .PartyTarget						;C2/36A6: D0 08        BNE $36B0
	CLC 								;C2/36A8: 18           CLC 
	LDA ReactingIndex						;C2/36A9: AD 55 47     LDA $4755
	ADC #$04	;now character index				;C2/36AC: 69 04        ADC #$04
	BRA .MonsterTarget						;C2/36AE: 80 03        BRA $36B3

.PartyTarget
	LDA ReactingIndex						;C2/36B0: AD 55 47     LDA $4755
.MonsterTarget
	TAX 								;C2/36B3: AA           TAX 
	LDA ActiveParticipants,X					;C2/36B4: BD C2 3E     LDA $3EC2,X
	BEQ .CheckTargetsLoop						;C2/36B7: F0 C7        BEQ $3680
	TXA 								;C2/36B9: 8A           TXA 
	JSR CalculateCharOffset  					;C2/36BA: 20 EC 01     JSR $01EC       
	LDA CharStruct.Status1,X					;C2/36BD: BD 1A 20     LDA $201A,X
	AND #$40	;stone						;C2/36C0: 29 40        AND #$40
	BNE .CheckTargetsLoop						;C2/36C2: D0 BC        BNE $3680
	LDA CharStruct.Status3,X					;C2/36C4: BD 1C 20     LDA $201C,X
	AND #$10	;stop						;C2/36C7: 29 10        AND #$10
	BNE .CheckTargetsLoop						;C2/36C9: D0 B5        BNE $3680
	LDA CharStruct.Status4,X					;C2/36CB: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/36CE: 29 81        AND #$81
	BNE .CheckTargetsLoop						;C2/36D0: D0 AE        BNE $3680
	LDA TargetWasParty						;C2/36D2: AD 50 47     LDA $4750
	BEQ .MonsterChecks						;C2/36D5: F0 03        BEQ $36DA
	JMP .PartyChecks						;C2/36D7: 4C B9 37     JMP $37B9

.MonsterChecks
	LDA CharStruct.Reaction1Magic,X					;C2/36DA: BD 47 20     LDA $2047,X
	CMP #$80	;monster fight					;C2/36DD: C9 80        CMP #$80
	BEQ .Fight							;C2/36DF: F0 23        BEQ $3704
	CMP #$81	;monster special				;C2/36E1: C9 81        CMP #$81
	BEQ .Fight							;C2/36E3: F0 1F        BEQ $3704
	LDA CharStruct.Reaction1Command,X				;C2/36E5: BD 46 20     LDA $2046,X
	CMP #$04	;fight						;C2/36E8: C9 04        CMP #$04
	BEQ .Fight							;C2/36EA: F0 18        BEQ $3704
	CMP #$0B	;capture/mug					;C2/36EC: C9 0B        CMP #$0B
	BEQ .Fight							;C2/36EE: F0 14        BEQ $3704
	CMP #$15	;aim						;C2/36F0: C9 15        CMP #$15
	BEQ .Fight							;C2/36F2: F0 10        BEQ $3704
	CMP #$16	;x-fight					;C2/36F4: C9 16        CMP #$16
	BEQ .Fight							;C2/36F6: F0 0C        BEQ $3704
	CMP #$2C	;simple fight (no procs)			;C2/36F8: C9 2C        CMP #$2C
	BEQ .Fight							;C2/36FA: F0 08        BEQ $3704
	CMP #$2D	;jump landing					;C2/36FC: C9 2D        CMP #$2D
	BEQ .Fight							;C2/36FE: F0 04        BEQ $3704
	CMP #$33	;double lance					;C2/3700: C9 33        CMP #$33
	BNE .CheckReactions	;**bug: missing swordslap		;C2/3702: D0 7E        BNE $3782

.Fight	;remove relevant statuses after getting hit
	LDA CharStruct.Status4,X					;C2/3704: BD 1D 20     LDA $201D,X
	AND #$DF	;clear controlled status			;C2/3707: 29 DF        AND #$DF
	STA CharStruct.Status4,X					;C2/3709: 9D 1D 20     STA $201D,X
	CLC 								;C2/370C: 18           CLC 
	LDA ReactingIndex						;C2/370D: AD 55 47     LDA $4755
	ADC #$04							;C2/3710: 69 04        ADC #$04
	STA $0E		;char index					;C2/3712: 85 0E        STA $0E
	TDC 								;C2/3714: 7B           TDC 
	TAY 								;C2/3715: A8           TAY 
-	LDA ControlTarget,Y						;C2/3716: B9 3A 7C     LDA $7C3A,Y
	CMP $0E								;C2/3719: C5 0E        CMP $0E
	BEQ .ClearControl						;C2/371B: F0 08        BEQ $3725
	INY 								;C2/371D: C8           INY 
	CPY #$0004							;C2/371E: C0 04 00     CPY #$0004
	BNE -								;C2/3721: D0 F3        BNE $3716
	BRA .CheckSleep							;C2/3723: 80 19        BRA $373E

.ClearControl
	TDC 								;C2/3725: 7B           TDC 
	STA ControlTarget,Y						;C2/3726: 99 3A 7C     STA $7C3A,Y
	LDA CharStruct.Status2,X					;C2/3729: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/372C: 1D 71 20     ORA $2071,X
	STA $10		;stored status2					;C2/372F: 85 10        STA $10
	LDA ReactingIndex						;C2/3731: AD 55 47     LDA $4755
	ASL 								;C2/3734: 0A           ASL 
	TAX 								;C2/3735: AA           TAX 
	STZ ForcedTarget.Party,X					;C2/3736: 9E 2A 7C     STZ $7C2A,X
	STZ ForcedTarget.Monster,X					;C2/3739: 9E 2B 7C     STZ $7C2B,X
	BRA .WakeUp							;C2/373C: 80 16        BRA $3754

.CheckSleep
	LDA CharStruct.Status2,X					;C2/373E: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/3741: 1D 71 20     ORA $2071,X
	STA $10		;stored status2					;C2/3744: 85 10        STA $10
	LDA ReactingIndex						;C2/3746: AD 55 47     LDA $4755
	JSR ShiftMultiply_4  						;C2/3749: 20 B7 01     JSR $01B7       
	TAY 								;C2/374C: A8           TAY 
	LDA CombinedStatus[8].S2,Y	;8 is first monster		;C2/374D: B9 9F 7B     LDA $7B9F,Y
	AND #$40	;sleep						;C2/3750: 29 40        AND #$40
	BEQ .Awake							;C2/3752: F0 0F        BEQ $3763

.WakeUp
	PHX 								;C2/3754: DA           PHX 
	LDA $0E		;char index					;C2/3755: A5 0E        LDA $0E
	JSR ResetATB							;C2/3757: 20 82 24     JSR $2482
	PLX 								;C2/375A: FA           PLX 
	LDA CharStruct.Status2,X					;C2/375B: BD 1B 20     LDA $201B,X
	AND #$BF	;clear sleep					;C2/375E: 29 BF        AND #$BF
	STA CharStruct.Status2,X					;C2/3760: 9D 1B 20     STA $201B,X

.Awake
	LDA ReactingIndex						;C2/3763: AD 55 47     LDA $4755
	JSR ShiftMultiply_4  						;C2/3766: 20 B7 01     JSR $01B7       
	TAY 								;C2/3769: A8           TAY 
	LDA CombinedStatus[8].S2,Y	;8 is first monster		;C2/376A: B9 9F 7B     LDA $7B9F,Y
	AND #$10	;charm						;C2/376D: 29 10        AND #$10
	BEQ +								;C2/376F: F0 08        BEQ $3779
	LDA CharStruct.Status2,X					;C2/3771: BD 1B 20     LDA $201B,X
	AND #$EF	;clear charm					;C2/3774: 29 EF        AND #$EF
	STA CharStruct.Status2,X					;C2/3776: 9D 1B 20     STA $201B,X
+	LDA $10		;stored status2					;C2/3779: A5 10        LDA $10
	AND #$78	;sleep/para/charm/berserk			;C2/377B: 29 78        AND #$78
	BEQ .CheckReactions						;C2/377D: F0 03        BEQ $3782

.GoCheckTargetsLoop
	JMP .CheckTargetsLoop	;look for next target to check		;C2/377F: 4C 80 36     JMP $3680

.CheckReactions		
	LDX AttackerOffset						;C2/3782: A6 32        LDX $32         
	LDA CharStruct.Status2,X					;C2/3784: BD 1B 20     LDA $201B,X
	AND #$78	;sleep/para/charm/berserk			;C2/3787: 29 78        AND #$78
	BNE .GoCheckTargetsLoop						;C2/3789: D0 F4        BNE $377F
	LDA CharStruct.Status4,X					;C2/378B: BD 1D 20     LDA $201D,X
	AND #$20	;controlled					;C2/378E: 29 20        AND #$20
	BNE .GoCheckTargetsLoop						;C2/3790: D0 ED        BNE $377F
	LDA CharStruct.Reaction1Command,X				;C2/3792: BD 46 20     LDA $2046,X
	CMP #$1C	;catch						;C2/3795: C9 1C        CMP #$1C
	BEQ .GoCheckTargetsLoop						;C2/3797: F0 E6        BEQ $377F
	JSR CheckReactionConditions					;C2/3799: 20 10 3C     JSR $3C10
	LDA AIConditionMet 						;C2/379C: AD 94 46     LDA $4694
	BNE +								;C2/379F: D0 03        BNE $37A4
	JMP .CheckTargetsLoop						;C2/37A1: 4C 80 36     JMP $3680
+	CLC 								;C2/37A4: 18           CLC 
	LDA ReactingIndex						;C2/37A5: AD 55 47     LDA $4755
	ADC #$04	;shift to become Char Index			;C2/37A8: 69 04        ADC #$04
	STA ReactingIndex						;C2/37AA: 8D 55 47     STA $4755
	JSR SaveActionData						;C2/37AD: 20 7F 3C     JSR $3C7F
	JSR ProcessReaction						;C2/37B0: 20 C7 3D     JSR $3DC7
	JSR ReactionPauseTimerChecks					;C2/37B3: 20 9C 3D     JSR $3D9C
	JMP .Finish							;C2/37B6: 4C 0C 3C     JMP $3C0C

.PartyChecks	
	LDX AttackerOffset						;C2/37B9: A6 32        LDX $32         
	LDA CharStruct.Status2,X					;C2/37BB: BD 1B 20     LDA $201B,X
	AND #$04	;mute						;C2/37BE: 29 04        AND #$04
	BNE +								;C2/37C0: D0 07        BNE $37C9
	LDA Void							;C2/37C2: AD E6 7B     LDA $7BE6
	AND #$40	;void						;C2/37C5: 29 40        AND #$40
	BEQ .CheckHP							;C2/37C7: F0 18        BEQ $37E1
+	LDA CharStruct.Status4,X					;C2/37C9: BD 1D 20     LDA $201D,X
	AND #$04	;singing					;C2/37CC: 29 04        AND #$04
	BEQ .CheckHP							;C2/37CE: F0 11        BEQ $37E1
	LDA CharStruct.Status4,X					;C2/37D0: BD 1D 20     LDA $201D,X
	AND #$FB	;clear singing					;C2/37D3: 29 FB        AND #$FB
	STA CharStruct.Status4,X					;C2/37D5: 9D 1D 20     STA $201D,X
	;**bug: mute or void is supposed to stop singing, but stops the wrong person's sing timer
	LDA Defense+1	;$55 high byte of defense, which is usually 0	;C2/37D8: A5 55        LDA $55
	JSR GetTimerOffset 						;C2/37DA: 20 07 02     JSR $0207       
	TDC 								;C2/37DD: 7B           TDC 
	STA EnableTimer.Sing,Y						;C2/37DE: 99 F9 3C     STA $3CF9,Y

.CheckHP
	LDX AttackerOffset						;C2/37E1: A6 32        LDX $32         
	LDA CharStruct.CurHP,X						;C2/37E3: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/37E6: 1D 07 20     ORA $2007,X
	BEQ .Dead							;C2/37E9: F0 11        BEQ $37FC
	LDA CharStruct.Status1,X					;C2/37EB: BD 1A 20     LDA $201A,X
	AND #$80	;dead						;C2/37EE: 29 80        AND #$80
	BNE .Dead							;C2/37F0: D0 0A        BNE $37FC
	LDA CharStruct.Status2,X					;C2/37F2: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/37F5: 1D 71 20     ORA $2071,X
	AND #$20	;paralyze					;C2/37F8: 29 20        AND #$20
	BEQ +								;C2/37FA: F0 03        BEQ $37FF
.Dead	JMP .GoCheckTargetsLoopB					;C2/37FC: 4C 4B 39     JMP $394B

+	LDA CharStruct.Reaction1Magic,X					;C2/37FF: BD 47 20     LDA $2047,X
	CMP #$80	;monster fight					;C2/3802: C9 80        CMP #$80
	BEQ .PFight							;C2/3804: F0 23        BEQ $3829
	CMP #$81	;monster special				;C2/3806: C9 81        CMP #$81
	BEQ .PFight							;C2/3808: F0 1F        BEQ $3829
	LDA CharStruct.Reaction1Command,X				;C2/380A: BD 46 20     LDA $2046,X
	CMP #$04	;fight						;C2/380D: C9 04        CMP #$04
	BEQ .PFight							;C2/380F: F0 18        BEQ $3829
	CMP #$0B	;capture/mug					;C2/3811: C9 0B        CMP #$0B
	BEQ .PFight							;C2/3813: F0 14        BEQ $3829
	CMP #$15	;aim						;C2/3815: C9 15        CMP #$15
	BEQ .PFight							;C2/3817: F0 10        BEQ $3829
	CMP #$16	;x-fight					;C2/3819: C9 16        CMP #$16
	BEQ .PFight							;C2/381B: F0 0C        BEQ $3829
	CMP #$2C	;simple fight (no procs)			;C2/381D: C9 2C        CMP #$2C
	BEQ .PFight							;C2/381F: F0 08        BEQ $3829
	CMP #$2D	;jump landing					;C2/3821: C9 2D        CMP #$2D
	BEQ .PFight							;C2/3823: F0 04        BEQ $3829
	CMP #$33	;double lance					;C2/3825: C9 33        CMP #$33
	BNE .CheckDisablingStatus	;**bug: missing swordslap	;C2/3827: D0 5C        BNE $3885

.PFight	LDA CharStruct.Status2,X						;C2/3829: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/382C: 1D 71 20     ORA $2071,X
	STA $0E		;saved status2						;C2/382F: 85 0E        STA $0E
	LDA CharStruct.Status4,X						;C2/3831: BD 1D 20     LDA $201D,X
	STA $0F		;saved status4						;C2/3834: 85 0F        STA $0F
	LDA ReactingIndex							;C2/3836: AD 55 47     LDA $4755
	JSR ShiftMultiply_4							;C2/3839: 20 B7 01     JSR $01B7     
	TAY 									;C2/383C: A8           TAY 
	LDA CombinedStatus.S2,Y							;C2/383D: B9 7F 7B     LDA $7B7F,Y
	AND #$40	;sleep							;C2/3840: 29 40        AND #$40
	BEQ +									;C2/3842: F0 08        BEQ $384C
	LDA CharStruct.Status2,X						;C2/3844: BD 1B 20     LDA $201B,X
	AND #$BF	;clear sleep						;C2/3847: 29 BF        AND #$BF
	STA CharStruct.Status2,X						;C2/3849: 9D 1B 20     STA $201B,X
+	LDA CombinedStatus.S2,Y							;C2/384C: B9 7F 7B     LDA $7B7F,Y
	AND #$10	;charm							;C2/384F: 29 10        AND #$10
	BEQ +									;C2/3851: F0 08        BEQ $385B
	LDA CharStruct.Status2,X						;C2/3853: BD 1B 20     LDA $201B,X
	AND #$EF	;clear charm						;C2/3856: 29 EF        AND #$EF
	STA CharStruct.Status2,X						;C2/3858: 9D 1B 20     STA $201B,X
+	LDA CharStruct.Status4,X						;C2/385B: BD 1D 20     LDA $201D,X
	AND #$FB	;clear singing						;C2/385E: 29 FB        AND #$FB
	STA CharStruct.Status4,X						;C2/3860: 9D 1D 20     STA $201D,X
	LDA CombinedStatus.S2,Y							;C2/3863: B9 7F 7B     LDA $7B7F,Y
	AND $0E		;saved status2						;C2/3866: 25 0E        AND $0E
	AND #$50	;sleep/charm						;C2/3868: 29 50        AND #$50
	BNE +									;C2/386A: D0 10        BNE $387C
	LDA $0F		;saved status4						;C2/386C: A5 0F        LDA $0F
	AND #$04	;singing						;C2/386E: 29 04        AND #$04
	;**bug: barrier can be queued if para/berserk when reacting to physical attacks
	BEQ .CheckBarrier							;C2/3870: F0 27        BEQ $3899
	LDA ReactingIndex							;C2/3872: AD 55 47     LDA $4755
	JSR GetTimerOffset  							;C2/3875: 20 07 02     JSR $0207     
	TDC 									;C2/3878: 7B           TDC 
	STA EnableTimer.Sing,Y							;C2/3879: 99 F9 3C     STA $3CF9,Y
+	LDA ReactingIndex							;C2/387C: AD 55 47     LDA $4755
	JSR ResetATB								;C2/387F: 20 82 24     JSR $2482
	JMP .GoCheckTargetsLoopB						;C2/3882: 4C 4B 39     JMP $394B

.CheckDisablingStatus
	LDA CharStruct.Status2,X					;C2/3885: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/3888: 1D 71 20     ORA $2071,X
	AND #$78	;sleep/para/charm/berserk			;C2/388B: 29 78        AND #$78
	BNE +								;C2/388D: D0 07        BNE $3896
	LDA CharStruct.Status4,X					;C2/388F: BD 1D 20     LDA $201D,X
	AND #$04	;singing					;C2/3892: 29 04        AND #$04
	BEQ .CheckBarrier						;C2/3894: F0 03        BEQ $3899
+	JMP .GoCheckTargetsLoopB					;C2/3896: 4C 4B 39     JMP $394B

.CheckBarrier
	LDA CharStruct.Passives1,X					;C2/3899: BD 20 20     LDA $2020,X
	AND #$20	;Barrier					;C2/389C: 29 20        AND #$20
	BEQ .CheckCounter						;C2/389E: F0 50        BEQ $38F0
	LDA CharStruct.Status3,X					;C2/38A0: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/38A3: 1D 72 20     ORA $2072,X
	BMI .CheckCounter	;no barrier if reflected		;C2/38A6: 30 48        BMI $38F0
	LDA AttackerIndex						;C2/38A8: A5 47        LDA $47       
	CMP #$04	;no barrier if attacker was also party		;C2/38AA: C9 04        CMP #$04
	BCC .CheckCounter						;C2/38AC: 90 42        BCC $38F0
	REP #$20							;C2/38AE: C2 20        REP #$20
	LDA CharStruct.MaxHP,X						;C2/38B0: BD 08 20     LDA $2008,X
	JSR ShiftDivide_16						;C2/38B3: 20 BE 01     JSR $01BE     
	CMP CharStruct.CurHP,X						;C2/38B6: DD 06 20     CMP $2006,X
	BCC .CheckCounter16						;C2/38B9: 90 32        BCC $38ED
	TDC 								;C2/38BB: 7B           TDC 
	SEP #$20							;C2/38BC: E2 20        SEP #$20
	JSR SaveActionData						;C2/38BE: 20 7F 3C     JSR $3C7F
	LDY AttackerOffset						;C2/38C1: A4 32        LDY $32       
	LDA #$20	;Magic						;C2/38C3: A9 20        LDA #$20
	STA CharStruct.ActionFlag,Y					;C2/38C5: 99 56 20     STA $2056,Y
	LDA #$2C	;Magic						;C2/38C8: A9 2C        LDA #$2C
	STA CharStruct.Command,Y					;C2/38CA: 99 57 20     STA $2057,Y
	LDA #$7C	;Magic Barrier spell				;C2/38CD: A9 7C        LDA #$7C
	STA CharStruct.SelectedItem,Y					;C2/38CF: 99 5A 20     STA $205A,Y
	LDA ReactingIndex						;C2/38D2: AD 55 47     LDA $4755
	TAX 								;C2/38D5: AA           TAX 
	TDC 								;C2/38D6: 7B           TDC 
	JSR SetBit_X							;C2/38D7: 20 D6 01     JSR $01D6     
	STA CharStruct.PartyTargets,Y					;C2/38DA: 99 59 20     STA $2059,Y
	TDC 								;C2/38DD: 7B           TDC 
	STA CharStruct.MonsterTargets,Y					;C2/38DE: 99 58 20     STA $2058,Y
	JSR ProcessReaction_Party					;C2/38E1: 20 91 3E     JSR $3E91
	JSR ReactionPauseTimerChecks					;C2/38E4: 20 9C 3D     JSR $3D9C
	INC CurrentlyReacting						;C2/38E7: EE 4E 47     INC $474E
	JMP .GoFinish							;C2/38EA: 4C 4E 39     JMP $394E

.CheckCounter16
	TDC 								;C2/38ED: 7B           TDC 
	SEP #$20							;C2/38EE: E2 20        SEP #$20
.CheckCounter
	LDA CharStruct.Passives1,X					;C2/38F0: BD 20 20     LDA $2020,X   
	AND #$80	;counter					;C2/38F3: 29 80        AND #$80
	BPL .GoCheckTargetsLoopB					;C2/38F5: 10 54        BPL $394B     
	LDA CharStruct.Reaction1Magic,X					;C2/38F7: BD 47 20     LDA $2047,X   
	CMP #$80	;monster fight					;C2/38FA: C9 80        CMP #$80
	BEQ .CounterAttempt						;C2/38FC: F0 17        BEQ $3915
	CMP #$81	;monster special				;C2/38FE: C9 81        CMP #$81
	BNE .GoCheckTargetsLoopB					;C2/3900: D0 49        BNE $394B
	LDA ActedIndex							;C2/3902: AD 73 7C     LDA $7C73
	REP #$20							;C2/3905: C2 20        REP #$20
	JSR ShiftMultiply_128   					;C2/3907: 20 B2 01     JSR $01B2     
	TAY 								;C2/390A: A8           TAY 
	TDC 								;C2/390B: 7B           TDC 
	SEP #$20							;C2/390C: E2 20        SEP #$20
	LDA CharStruct.Specialty,Y					;C2/390E: B9 6E 20     LDA $206E,Y   
	AND #$83	;auto hit ignore defense, hp leak, 1.5x damage	;C2/3911: 29 83        AND #$83
	BEQ .GoCheckTargetsLoopB	   				;C2/3913: F0 36        BEQ $394B     

.CounterAttempt		;50% chance to counter monster fight or damaging specialty
	JSR Random_0_99							;C2/3915: 20 A2 02     JSR $02A2     
	CMP #$32     	;50%						;C2/3918: C9 32        CMP #$32      
	BCS .GoCheckTargetsLoopB					;C2/391A: B0 2F        BCS $394B
	JSR SaveActionData						;C2/391C: 20 7F 3C     JSR $3C7F
	LDY AttackerOffset						;C2/391F: A4 32        LDY $32       
	LDA #$80	;Physical/Other					;C2/3921: A9 80        LDA #$80
	STA CharStruct.ActionFlag,Y					;C2/3923: 99 56 20     STA $2056,Y
	LDA #$05     	;Fight						;C2/3926: A9 05        LDA #$05      
	STA CharStruct.Command,Y					;C2/3928: 99 57 20     STA $2057,Y
	SEC 								;C2/392B: 38           SEC 
	LDA AttackerIndex						;C2/392C: A5 47        LDA $47       
	SBC #$04	;to monster index				;C2/392E: E9 04        SBC #$04
	TAX 								;C2/3930: AA           TAX 
	TDC 								;C2/3931: 7B           TDC 
	JSR SetBit_X   							;C2/3932: 20 D6 01     JSR $01D6     
	STA CharStruct.MonsterTargets,Y					;C2/3935: 99 58 20     STA $2058,Y
	TDC 								;C2/3938: 7B           TDC 
	STA CharStruct.PartyTargets,Y					;C2/3939: 99 59 20     STA $2059,Y
	STA CharStruct.SelectedItem,Y					;C2/393C: 99 5A 20     STA $205A,Y
	JSR ProcessReaction_Party					;C2/393F: 20 91 3E     JSR $3E91
	JSR ReactionPauseTimerChecks					;C2/3942: 20 9C 3D     JSR $3D9C
	INC CurrentlyReacting						;C2/3945: EE 4E 47     INC $474E
	JMP .GoFinish							;C2/3948: 4C 4E 39     JMP $394E

.GoCheckTargetsLoopB
	JMP .CheckTargetsLoop	;check next target for reactions	;C2/394B: 4C 80 36     JMP $3680

.GoFinish
	JMP .Finish							;C2/394E: 4C 0C 3C     JMP $3C0C
	
.CheckTargets2Loop		;second reaction, same general code structure as above
				;**optimize: 	could probably move a lot of the dupe code to reusable functions
				;		this is more difficult that it should be because the second set of reactions is split up in ram
	TDC 								;C2/3951: 7B           TDC 
	TAX 								;C2/3952: AA           TAX 
-	LDA FinalTarget2Bits						;C2/3953: AD 51 47     LDA $4751
	JSR SelectBit_X							;C2/3956: 20 DB 01     JSR $01DB      
	BNE .FoundTarget2						;C2/3959: D0 14        BNE $396F
	INX 								;C2/395B: E8           INX 
	CPX #$0008							;C2/395C: E0 08 00     CPX #$0008
	BNE -								;C2/395F: D0 F2        BNE $3953
	LDA CurrentlyReacting						;C2/3961: AD 4E 47     LDA $474E
	BEQ .GoFinish2							;C2/3964: F0 06        BEQ $396C
	JSR UnpauseTimerChecks						;C2/3966: 20 BB 3D     JSR $3DBB
	STZ CurrentlyReacting						;C2/3969: 9C 4E 47     STZ $474E
.GoFinish2
	JMP .Finish							;C2/396C: 4C 0C 3C     JMP $3C0C

.FoundTarget2
	LDA FinalTarget2Bits						;C2/396F: AD 51 47     LDA $4751
	JSR ClearBit_X   						;C2/3972: 20 D1 01     JSR $01D1      
	STA FinalTarget2Bits						;C2/3975: 8D 51 47     STA $4751
	TXA 								;C2/3978: 8A           TXA 
	STA ReactingIndex						;C2/3979: 8D 55 47     STA $4755
	LDA Target2WasParty						;C2/397C: AD 52 47     LDA $4752
	BNE .PartyTarget2						;C2/397F: D0 08        BNE $3989
	CLC 								;C2/3981: 18           CLC 
	LDA ReactingIndex						;C2/3982: AD 55 47     LDA $4755
	ADC #$04	;now char index					;C2/3985: 69 04        ADC #$04
	BRA .MonsterTarget2						;C2/3987: 80 03        BRA $398C

.PartyTarget2
	LDA ReactingIndex						;C2/3989: AD 55 47     LDA $4755
.MonsterTarget2
	TAX 								;C2/398C: AA           TAX 
	LDA ActiveParticipants,X					;C2/398D: BD C2 3E     LDA $3EC2,X
	BEQ .CheckTargets2Loop						;C2/3990: F0 BF        BEQ $3951
	TXA 								;C2/3992: 8A           TXA 
	JSR CalculateCharOffset    					;C2/3993: 20 EC 01     JSR $01EC      
	LDA CharStruct.Status1,X					;C2/3996: BD 1A 20     LDA $201A,X
	AND #$40	;stone						;C2/3999: 29 40        AND #$40
	BNE .CheckTargets2Loop						;C2/399B: D0 B4        BNE $3951
	LDA CharStruct.Status3,X					;C2/399D: BD 1C 20     LDA $201C,X
	AND #$10	;stop						;C2/39A0: 29 10        AND #$10
	BNE .CheckTargets2Loop						;C2/39A2: D0 AD        BNE $3951
	LDA CharStruct.Status4,X					;C2/39A4: BD 1D 20     LDA $201D,X
	AND #$81	;erased or hidden				;C2/39A7: 29 81        AND #$81
	BNE .CheckTargets2Loop						;C2/39A9: D0 A6        BNE $3951
	LDA Target2WasParty						;C2/39AB: AD 52 47     LDA $4752
	BEQ .MonsterChecks2						;C2/39AE: F0 03        BEQ $39B3
	JMP .PartyChecks2						;C2/39B0: 4C 92 3A     JMP $3A92

.MonsterChecks2
	LDA CharStruct.Reaction2Magic,X					;C2/39B3: BD 4E 20     LDA $204E,X
	CMP #$80	;monster fight					;C2/39B6: C9 80        CMP #$80
	BEQ .Fight2							;C2/39B8: F0 23        BEQ $39DD
	CMP #$81	;monster special				;C2/39BA: C9 81        CMP #$81
	BEQ .Fight2							;C2/39BC: F0 1F        BEQ $39DD
	LDA CharStruct.Reaction2Command,X				;C2/39BE: BD 4D 20     LDA $204D,X
	CMP #$04	;fight						;C2/39C1: C9 04        CMP #$04
	BEQ .Fight2							;C2/39C3: F0 18        BEQ $39DD
	CMP #$0B	;capture/mug					;C2/39C5: C9 0B        CMP #$0B
	BEQ .Fight2							;C2/39C7: F0 14        BEQ $39DD
	CMP #$15	;aim						;C2/39C9: C9 15        CMP #$15
	BEQ .Fight2							;C2/39CB: F0 10        BEQ $39DD
	CMP #$16	;x-fight					;C2/39CD: C9 16        CMP #$16
	BEQ .Fight2							;C2/39CF: F0 0C        BEQ $39DD
	CMP #$2C	;simple fight (no procs)			;C2/39D1: C9 2C        CMP #$2C
	BEQ .Fight2							;C2/39D3: F0 08        BEQ $39DD
	CMP #$2D	;jump landing					;C2/39D5: C9 2D        CMP #$2D
	BEQ .Fight2							;C2/39D7: F0 04        BEQ $39DD
	CMP #$33	;double lance					;C2/39D9: C9 33        CMP #$33
	BNE .CheckReactions2	;**bug: missing swordslap		;C2/39DB: D0 7E        BNE $3A5B

.Fight2		;remove relevant statuses after getting hit
	LDA CharStruct.Status4,X					;C2/39DD: BD 1D 20     LDA $201D,X
	AND #$DF	;clear controlled status			;C2/39E0: 29 DF        AND #$DF
	STA CharStruct.Status4,X					;C2/39E2: 9D 1D 20     STA $201D,X
	CLC 								;C2/39E5: 18           CLC 
	LDA ReactingIndex						;C2/39E6: AD 55 47     LDA $4755
	ADC #$04							;C2/39E9: 69 04        ADC #$04
	STA $0E		;char index					;C2/39EB: 85 0E        STA $0E
	TDC 								;C2/39ED: 7B           TDC 
	TAY 								;C2/39EE: A8           TAY 
-	LDA ControlTarget,Y						;C2/39EF: B9 3A 7C     LDA $7C3A,Y
	CMP $0E								;C2/39F2: C5 0E        CMP $0E
	BEQ .ClearControl2						;C2/39F4: F0 08        BEQ $39FE
	INY 								;C2/39F6: C8           INY 
	CPY #$0004							;C2/39F7: C0 04 00     CPY #$0004
	BNE -								;C2/39FA: D0 F3        BNE $39EF
	BRA .CheckSleep2						;C2/39FC: 80 19        BRA $3A17
	
.ClearControl2
	TDC 								;C2/39FE: 7B           TDC 
	STA ControlTarget,Y						;C2/39FF: 99 3A 7C     STA $7C3A,Y
	LDA CharStruct.Status2,X					;C2/3A02: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/3A05: 1D 71 20     ORA $2071,X
	STA $10								;C2/3A08: 85 10        STA $10
	LDA ReactingIndex						;C2/3A0A: AD 55 47     LDA $4755
	ASL 								;C2/3A0D: 0A           ASL 
	TAX 								;C2/3A0E: AA           TAX 
	STZ ForcedTarget.Party,X					;C2/3A0F: 9E 2A 7C     STZ $7C2A,X
	STZ ForcedTarget.Monster,X					;C2/3A12: 9E 2B 7C     STZ $7C2B,X
	BRA .WakeUp2							;C2/3A15: 80 16        BRA $3A2D

.CheckSleep2
	LDA CharStruct.Status2,X					;C2/3A17: BD 1B 20     LDA $201B,X   
	ORA CharStruct.AlwaysStatus2,X					;C2/3A1A: 1D 71 20     ORA $2071,X   
	STA $10								;C2/3A1D: 85 10        STA $10       
	LDA ReactingIndex						;C2/3A1F: AD 55 47     LDA $4755     
	JSR ShiftMultiply_4   						;C2/3A22: 20 B7 01     JSR $01B7     
	TAY 								;C2/3A25: A8           TAY           
	LDA CombinedStatus[8].S2,Y	;8 is first monster		;C2/3A26: B9 9F 7B     LDA $7B9F,Y   
	AND #$40	;sleep						;C2/3A29: 29 40        AND #$40      
	BEQ .Awake2							;C2/3A2B: F0 0F        BEQ $3A3C     
													     
.WakeUp2                                                                                                     
	PHX 								;C2/3A2D: DA           PHX           
	LDA $0E		;char index					;C2/3A2E: A5 0E        LDA $0E       
	JSR ResetATB							;C2/3A30: 20 82 24     JSR $2482     
	PLX 								;C2/3A33: FA           PLX           
	LDA CharStruct.Status2,X					;C2/3A34: BD 1B 20     LDA $201B,X   
	AND #$BF	;clear sleep					;C2/3A37: 29 BF        AND #$BF      
	STA CharStruct.Status2,X					;C2/3A39: 9D 1B 20     STA $201B,X   
													     
.Awake2                                                                                                      
	LDA ReactingIndex						;C2/3A3C: AD 55 47     LDA $4755     
	JSR ShiftMultiply_4  						;C2/3A3F: 20 B7 01     JSR $01B7     
	TAY 								;C2/3A42: A8           TAY           
	LDA CombinedStatus[8].S2,Y	;8 is first monster		;C2/3A43: B9 9F 7B     LDA $7B9F,Y   
	AND #$10	;charm						;C2/3A46: 29 10        AND #$10      
	BEQ +								;C2/3A48: F0 08        BEQ $3A52     
	LDA CharStruct.Status2,X					;C2/3A4A: BD 1B 20     LDA $201B,X   
	AND #$EF	;clear charm					;C2/3A4D: 29 EF        AND #$EF      
	STA CharStruct.Status2,X					;C2/3A4F: 9D 1B 20     STA $201B,X   
+	LDA $10		;stored status2					;C2/3A52: A5 10        LDA $10       
	AND #$78	;sleep/para/charm/berserk			;C2/3A54: 29 78        AND #$78      
	BEQ .CheckReactions2						;C2/3A56: F0 03        BEQ $3A5B     
.GoCheckTargets2Loop                                                                                         
	JMP .CheckTargets2Loop						;C2/3A58: 4C 51 39     JMP $3951     
													     
.CheckReactions2                                                                                             
	LDX AttackerOffset						;C2/3A5B: A6 32        LDX $32       
	LDA CharStruct.Status2,X					;C2/3A5D: BD 1B 20     LDA $201B,X   
	AND #$78	;sleep/para/charm/berserk			;C2/3A60: 29 78        AND #$78      
	BNE .GoCheckTargets2Loop					;C2/3A62: D0 F4        BNE $3A58     
	LDA CharStruct.Status4,X					;C2/3A64: BD 1D 20     LDA $201D,X   
	AND #$20	;controlled					;C2/3A67: 29 20        AND #$20      
	BNE .GoCheckTargets2Loop					;C2/3A69: D0 ED        BNE $3A58     
	LDA CharStruct.Reaction2Command,X				;C2/3A6B: BD 4D 20     LDA $204D,X   
	CMP #$1C	;catch						;C2/3A6E: C9 1C        CMP #$1C      
	BEQ .GoCheckTargets2Loop					;C2/3A70: F0 E6        BEQ $3A58     
	JSR CheckReactionConditions					;C2/3A72: 20 10 3C     JSR $3C10     
	LDA AIConditionMet 						;C2/3A75: AD 94 46     LDA $4694     
	BNE +								;C2/3A78: D0 03        BNE $3A7D     
	JMP .CheckTargets2Loop						;C2/3A7A: 4C 51 39     JMP $3951     
+	CLC 								;C2/3A7D: 18           CLC           
	LDA ReactingIndex						;C2/3A7E: AD 55 47     LDA $4755     
	ADC #$04	;shift to become Char Index			;C2/3A81: 69 04        ADC #$04      
	STA ReactingIndex						;C2/3A83: 8D 55 47     STA $4755     
	JSR SaveActionData						;C2/3A86: 20 7F 3C     JSR $3C7F     
	JSR ProcessReaction						;C2/3A89: 20 C7 3D     JSR $3DC7     
	JSR ReactionPauseTimerChecks					;C2/3A8C: 20 9C 3D     JSR $3D9C     
	JMP .Finish							;C2/3A8F: 4C 0C 3C     JMP $3C0C     
													     
.PartyChecks2	;differs from first set of reactions, is missing the (bugged) silence sing check             
	LDA CurrentlyReacting						;C2/3A92: AD 4E 47     LDA $474E     
	BEQ +								;C2/3A95: F0 06        BEQ $3A9D     
	JSR UnpauseTimerChecks						;C2/3A97: 20 BB 3D     JSR $3DBB     
	STZ CurrentlyReacting						;C2/3A9A: 9C 4E 47     STZ $474E     
+	LDX AttackerOffset						;C2/3A9D: A6 32        LDX $32       
	LDA CharStruct.CurHP,X						;C2/3A9F: BD 06 20     LDA $2006,X   
	ORA CharStruct.CurHP+1,X					;C2/3AA2: 1D 07 20     ORA $2007,X   
	BEQ .Dead2							;C2/3AA5: F0 11        BEQ $3AB8     
	LDA CharStruct.Status1,X					;C2/3AA7: BD 1A 20     LDA $201A,X   
	AND #$80	;dead						;C2/3AAA: 29 80        AND #$80      
	BNE .Dead2							;C2/3AAC: D0 0A        BNE $3AB8     
	LDA CharStruct.Status2,X					;C2/3AAE: BD 1B 20     LDA $201B,X   
	ORA CharStruct.AlwaysStatus2,X					;C2/3AB1: 1D 71 20     ORA $2071,X   
	AND #$20	;paralyze					;C2/3AB4: 29 20        AND #$20      
	BEQ +								;C2/3AB6: F0 03        BEQ $3ABB     
.Dead2	JMP .GoCheckTargets2LoopB					;C2/3AB8: 4C 09 3C     JMP $3C09     
													     
+	LDA CharStruct.Reaction2Magic,X					;C2/3ABB: BD 4E 20     LDA $204E,X   
	CMP #$80	;monster fight					;C2/3ABE: C9 80        CMP #$80      
	BEQ .PFight2							;C2/3AC0: F0 23        BEQ $3AE5     
	CMP #$81	;monster special				;C2/3AC2: C9 81        CMP #$81      
	BEQ .PFight2							;C2/3AC4: F0 1F        BEQ $3AE5     
	LDA CharStruct.Reaction2Command,X				;C2/3AC6: BD 4D 20     LDA $204D,X   
	CMP #$04	;fight						;C2/3AC9: C9 04        CMP #$04      
	BEQ .PFight2							;C2/3ACB: F0 18        BEQ $3AE5     
	CMP #$0B	;capture/mug					;C2/3ACD: C9 0B        CMP #$0B      
	BEQ .PFight2							;C2/3ACF: F0 14        BEQ $3AE5     
	CMP #$15	;aim						;C2/3AD1: C9 15        CMP #$15      
	BEQ .PFight2							;C2/3AD3: F0 10        BEQ $3AE5     
	CMP #$16	;x-fight					;C2/3AD5: C9 16        CMP #$16      
	BEQ .PFight2							;C2/3AD7: F0 0C        BEQ $3AE5     
	CMP #$2C	;simple fight (no procs)			;C2/3AD9: C9 2C        CMP #$2C      
	BEQ .PFight2							;C2/3ADB: F0 08        BEQ $3AE5     
	CMP #$2D	;jump landing					;C2/3ADD: C9 2D        CMP #$2D      
	BEQ .PFight2							;C2/3ADF: F0 04        BEQ $3AE5     
	CMP #$33	;double lance					;C2/3AE1: C9 33        CMP #$33      
	BNE .CheckDisablingStatus2					;C2/3AE3: D0 5C        BNE $3B41     
													     
.PFight2                                                                                                     
	LDA CharStruct.Status2,X						;C2/3AE5: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/3AE8: 1D 71 20     ORA $2071,X
	STA $0E									;C2/3AEB: 85 0E        STA $0E
	LDA CharStruct.Status4,X						;C2/3AED: BD 1D 20     LDA $201D,X
	STA $0F									;C2/3AF0: 85 0F        STA $0F
	LDA ReactingIndex							;C2/3AF2: AD 55 47     LDA $4755
	JSR ShiftMultiply_4    							;C2/3AF5: 20 B7 01     JSR $01B7      
	TAY 									;C2/3AF8: A8           TAY 
	LDA CombinedStatus.S2,Y							;C2/3AF9: B9 7F 7B     LDA $7B7F,Y
	AND #$40	;sleep							;C2/3AFC: 29 40        AND #$40
	BEQ +									;C2/3AFE: F0 08        BEQ $3B08
	LDA CharStruct.Status2,X						;C2/3B00: BD 1B 20     LDA $201B,X
	AND #$BF	;clear sleep						;C2/3B03: 29 BF        AND #$BF
	STA CharStruct.Status2,X						;C2/3B05: 9D 1B 20     STA $201B,X
+	LDA CombinedStatus.S2,Y							;C2/3B08: B9 7F 7B     LDA $7B7F,Y
	AND #$10	;charm							;C2/3B0B: 29 10        AND #$10
	BEQ +									;C2/3B0D: F0 08        BEQ $3B17
	LDA CharStruct.Status2,X						;C2/3B0F: BD 1B 20     LDA $201B,X
	AND #$EF	;clear charm						;C2/3B12: 29 EF        AND #$EF
	STA CharStruct.Status2,X						;C2/3B14: 9D 1B 20     STA $201B,X
+	LDA CharStruct.Status4,X						;C2/3B17: BD 1D 20     LDA $201D,X
	AND #$FB	;clear singing						;C2/3B1A: 29 FB        AND #$FB
	STA CharStruct.Status4,X						;C2/3B1C: 9D 1D 20     STA $201D,X
	LDA CombinedStatus.S2,Y							;C2/3B1F: B9 7F 7B     LDA $7B7F,Y
	AND $0E		;saved status2						;C2/3B22: 25 0E        AND $0E
	AND #$50	;sleep/charm						;C2/3B24: 29 50        AND #$50
	BNE +									;C2/3B26: D0 10        BNE $3B38
	LDA $0F		;saved status4						;C2/3B28: A5 0F        LDA $0F
	AND #$04	;singing						;C2/3B2A: 29 04        AND #$04
	;**bug: barrier can be queued when para/berserk when hit by physical attacks
	BEQ .CheckBarrier2							;C2/3B2C: F0 27        BEQ $3B55
	LDA ReactingIndex							;C2/3B2E: AD 55 47     LDA $4755
	JSR GetTimerOffset   							;C2/3B31: 20 07 02     JSR $0207      
	TDC 									;C2/3B34: 7B           TDC 
	STA EnableTimer.Sing,Y							;C2/3B35: 99 F9 3C     STA $3CF9,Y
+	LDA ReactingIndex							;C2/3B38: AD 55 47     LDA $4755
	JSR ResetATB								;C2/3B3B: 20 82 24     JSR $2482
	;**bug: wrong reaction loop (first instead of second)
	JMP .GoCheckTargetsLoopB						;C2/3B3E: 4C 4B 39     JMP $394B

.CheckDisablingStatus2
	LDA CharStruct.Status2,X						;C2/3B41: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/3B44: 1D 71 20     ORA $2071,X
	AND #$78	;sleep/para/charm/berserk				;C2/3B47: 29 78        AND #$78
	BNE +									;C2/3B49: D0 07        BNE $3B52
	LDA CharStruct.Status4,X						;C2/3B4B: BD 1D 20     LDA $201D,X
	AND #$04	;singing						;C2/3B4E: 29 04        AND #$04
	BEQ .CheckBarrier2							;C2/3B50: F0 03        BEQ $3B55
+	
	;**bug: wrong reaction loop again
	JMP .GoCheckTargetsLoopB						;C2/3B52: 4C 4B 39     JMP $394B

.CheckBarrier2 
	LDA CharStruct.Passives1,X					;C2/3B55: BD 20 20     LDA $2020,X
	AND #$20	;barrier					;C2/3B58: 29 20        AND #$20
	BEQ .CheckCounter2						;C2/3B5A: F0 51        BEQ $3BAD
	LDA CharStruct.Status3,X					;C2/3B5C: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/3B5F: 1D 72 20     ORA $2072,X
	BMI .CheckCounter2	;no barrier if reflected		;C2/3B62: 30 49        BMI $3BAD
	LDA ActedIndex							;C2/3B64: AD 73 7C     LDA $7C73
	CMP #$04	;no barrier if attacker was also party		;C2/3B67: C9 04        CMP #$04
	BCC .CheckCounter2						;C2/3B69: 90 42        BCC $3BAD
	REP #$20							;C2/3B6B: C2 20        REP #$20
	LDA CharStruct.MaxHP,X						;C2/3B6D: BD 08 20     LDA $2008,X
	JSR ShiftDivide_16						;C2/3B70: 20 BE 01     JSR $01BE      
	CMP CharStruct.CurHP,X						;C2/3B73: DD 06 20     CMP $2006,X
	BCC .CheckCounter2Mode						;C2/3B76: 90 32        BCC $3BAA
	TDC 								;C2/3B78: 7B           TDC 
	SEP #$20							;C2/3B79: E2 20        SEP #$20
	JSR SaveActionData						;C2/3B7B: 20 7F 3C     JSR $3C7F
	LDY AttackerOffset						;C2/3B7E: A4 32        LDY $32        
	LDA #$20	;Magic						;C2/3B80: A9 20        LDA #$20
	STA CharStruct.ActionFlag,Y					;C2/3B82: 99 56 20     STA $2056,Y
	LDA #$2C	;Magic						;C2/3B85: A9 2C        LDA #$2C
	STA CharStruct.Command,Y					;C2/3B87: 99 57 20     STA $2057,Y
	LDA #$7C	;Magic Barrier spell				;C2/3B8A: A9 7C        LDA #$7C
	STA CharStruct.SelectedItem,Y					;C2/3B8C: 99 5A 20     STA $205A,Y
	LDA ReactingIndex						;C2/3B8F: AD 55 47     LDA $4755
	TAX 								;C2/3B92: AA           TAX 
	TDC 								;C2/3B93: 7B           TDC 
	JSR SetBit_X							;C2/3B94: 20 D6 01     JSR $01D6      
	STA CharStruct.PartyTargets,Y					;C2/3B97: 99 59 20     STA $2059,Y
	TDC 								;C2/3B9A: 7B           TDC 
	STA CharStruct.MonsterTargets,Y					;C2/3B9B: 99 58 20     STA $2058,Y
	JSR ProcessReaction_Party					;C2/3B9E: 20 91 3E     JSR $3E91
	JSR ReactionPauseTimerChecks					;C2/3BA1: 20 9C 3D     JSR $3D9C
	INC CurrentlyReacting						;C2/3BA4: EE 4E 47     INC $474E
	JMP .Finish							;C2/3BA7: 4C 0C 3C     JMP $3C0C

.CheckCounter2Mode
	TDC 								;C2/3BAA: 7B           TDC 
	SEP #$20							;C2/3BAB: E2 20        SEP #$20
.CheckCounter2
	LDA CharStruct.Passives1,X					;C2/3BAD: BD 20 20     LDA $2020,X
	AND #$80	;counter					;C2/3BB0: 29 80        AND #$80
	BPL .GoCheckTargets2LoopB					;C2/3BB2: 10 55        BPL $3C09
	LDA CharStruct.Reaction2Magic,X					;C2/3BB4: BD 4E 20     LDA $204E,X
	CMP #$80	;monster fight					;C2/3BB7: C9 80        CMP #$80
	BEQ .CounterAttempt2						;C2/3BB9: F0 17        BEQ $3BD2
	CMP #$81	;monster special				;C2/3BBB: C9 81        CMP #$81
	BNE .GoCheckTargets2LoopB					;C2/3BBD: D0 4A        BNE $3C09
	LDA ActedIndex							;C2/3BBF: AD 73 7C     LDA $7C73
	REP #$20							;C2/3BC2: C2 20        REP #$20
	JSR ShiftMultiply_128 						;C2/3BC4: 20 B2 01     JSR $01B2      
	TAY 								;C2/3BC7: A8           TAY 
	TDC 								;C2/3BC8: 7B           TDC 
	SEP #$20							;C2/3BC9: E2 20        SEP #$20
	LDA CharStruct.Specialty,Y					;C2/3BCB: B9 6E 20     LDA $206E,Y
	AND #$83	;auto hit ignore defense, hp leak, 1.5x damage	;C2/3BCE: 29 83        AND #$83
	BEQ .GoCheckTargets2LoopB					;C2/3BD0: F0 37        BEQ $3C09

.CounterAttempt2	;50% chance to counter monster fight or damaging specialty
	JSR Random_0_99							;C2/3BD2: 20 A2 02     JSR $02A2      
	CMP #$32     	;50%						;C2/3BD5: C9 32        CMP #$32       
	BCS .GoCheckTargets2LoopB					;C2/3BD7: B0 30        BCS $3C09
	JSR SaveActionData						;C2/3BD9: 20 7F 3C     JSR $3C7F
	LDY AttackerOffset						;C2/3BDC: A4 32        LDY $32        
	LDA #$80	;Physical/Other					;C2/3BDE: A9 80        LDA #$80
	STA CharStruct.ActionFlag,Y					;C2/3BE0: 99 56 20     STA $2056,Y
	LDA #$05     	;Fight						;C2/3BE3: A9 05        LDA #$05
	STA CharStruct.Command,Y					;C2/3BE5: 99 57 20     STA $2057,Y
	SEC 								;C2/3BE8: 38           SEC 
	LDA ActedIndex	;first counter check used AttackerIndex		;C2/3BE9: AD 73 7C     LDA $7C73
	SBC #$04	;to monster index				;C2/3BEC: E9 04        SBC #$04
	TAX 								;C2/3BEE: AA           TAX 
	TDC 								;C2/3BEF: 7B           TDC 
	JSR SetBit_X   			  				;C2/3BF0: 20 D6 01     JSR $01D6      
	STA CharStruct.MonsterTargets,Y					;C2/3BF3: 99 58 20     STA $2058,Y
	TDC 								;C2/3BF6: 7B           TDC 
	STA CharStruct.PartyTargets,Y					;C2/3BF7: 99 59 20     STA $2059,Y
	STA CharStruct.SelectedItem,Y					;C2/3BFA: 99 5A 20     STA $205A,Y
	JSR ProcessReaction_Party					;C2/3BFD: 20 91 3E     JSR $3E91
	JSR ReactionPauseTimerChecks					;C2/3C00: 20 9C 3D     JSR $3D9C
	INC CurrentlyReacting						;C2/3C03: EE 4E 47     INC $474E
	JMP .Finish							;C2/3C06: 4C 0C 3C     JMP $3C0C

.GoCheckTargets2LoopB
	JMP .CheckTargets2Loop						;C2/3C09: 4C 51 39     JMP $3951

.Finish
	STZ ReactingIndexType						;C2/3C0C: 9C 56 7C     STZ $7C56
	RTS 								;C2/3C0F: 60           RTS 
%endsub()

%org($C23C10)
CheckReactionConditions:
	STZ AISkipDeadCheck						;C2/3C10: 9C 50 7C     STZ $7C50
	STZ AIConditionMet						;C2/3C13: 9C 94 46     STZ $4694
	LDA ReactingIndex						;C2/3C16: AD 55 47     LDA $4755
	STA MonsterIndex						;C2/3C19: 8D 03 7C     STA $7C03
	TAX 								;C2/3C1C: AA           TAX 
	LDA MonsterReactions,X						;C2/3C1D: BD 30 40     LDA $4030,X
	BEQ .Ret							;C2/3C20: F0 5C        BEQ $3C7E

	LDA MonsterEscaped,X						;C2/3C22: BD AE 7C     LDA $7CAE,X
	BNE .Ret							;C2/3C25: D0 57        BNE $3C7E

	LDA ReactingIndex						;C2/3C27: AD 55 47     LDA $4755
	ASL 								;C2/3C2A: 0A           ASL 
	TAX 								;C2/3C2B: AA           TAX 
	REP #$20							;C2/3C2C: C2 20        REP #$20
	CLC 								;C2/3C2E: 18           CLC 
	LDA ROMTimes1620w,X	;size of MonsterAI struct		;C2/3C2F: BF A5 EE D0  LDA $D0EEA5,X
	ADC #MonsterAI.ReactConditions					;C2/3C33: 69 83 4A     ADC #$4A83
	STA AIOffset							;C2/3C36: 85 4B        STA $4B
	TDC 								;C2/3C38: 7B           TDC 
	SEP #$20							;C2/3C39: E2 20        SEP #$20
	STZ AICurrentCheckedSet						;C2/3C3B: 9C 90 46     STZ $4690

.CheckSets		;10 sets of 4 conditions
	LDA AICurrentCheckedSet						;C2/3C3E: AD 90 46     LDA $4690
	TAX 								;C2/3C41: AA           TAX 
	LDA ROMTimes17,X	;size of a condition set		;C2/3C42: BF C9 EE D0  LDA $D0EEC9,X
	TAY 								;C2/3C46: A8           TAY 
	STY AIConditionOffset						;C2/3C47: 8C 92 46     STY $4692
	STZ AICheckIndex						;C2/3C4A: 9C 91 46     STZ $4691

.CheckEachCondition
	LDY AIConditionOffset						;C2/3C4D: AC 92 46     LDY $4692
	LDA (AIOffset),Y						;C2/3C50: B1 4B        LDA ($4B),Y
	BEQ .Ret							;C2/3C52: F0 2A        BEQ $3C7E
	CMP #$FE	;end of condition set				;C2/3C54: C9 FE        CMP #$FE
	BEQ  .Ret	;returning here means all consitions succeeded	;C2/3C56: F0 26        BEQ $3C7E
	JSR CheckAICondition    					;C2/3C58: 20 BF 27     JSR $27BF      
	LDA AIConditionMet						;C2/3C5B: AD 94 46     LDA $4694
	BEQ .Finish   							;C2/3C5E: F0 14        BEQ $3C74      
	REP #$20							;C2/3C60: C2 20        REP #$20
	CLC 								;C2/3C62: 18           CLC 
	LDA AIConditionOffset						;C2/3C63: AD 92 46     LDA $4692
	ADC #$0004	;next condition in set				;C2/3C66: 69 04 00     ADC #$0004
	STA AIConditionOffset						;C2/3C69: 8D 92 46     STA $4692
	TDC 								;C2/3C6C: 7B           TDC 
	SEP #$20							;C2/3C6D: E2 20        SEP #$20
	INC AICheckIndex						;C2/3C6F: EE 91 46     INC $4691
	BRA .CheckEachCondition						;C2/3C72: 80 D9        BRA $3C4D

.Finish	INC AICurrentCheckedSet						;C2/3C74: EE 90 46     INC $4690
	LDA AICurrentCheckedSet						;C2/3C77: AD 90 46     LDA $4690
	CMP #$0A	;10 sets					;C2/3C7A: C9 0A        CMP #$0A
	BNE .CheckSets							;C2/3C7C: D0 C0        BNE $3C3E
.Ret	RTS 								;C2/3C7E: 60           RTS 

%org($C23C7F)
%sub(SaveActionData)
SaveActionData:
	TDC 								;C2/3C7F: 7B           TDC 
	TAY 								;C2/3C80: A8           TAY 
	LDX AttackerOffset    						;C2/3C81: A6 32        LDX $32        

-	LDA CharStruct.ActionFlag,X					;C2/3C83: BD 56 20     LDA $2056,X
	STA !SavedActionReaction,Y						;C2/3C86: 99 3A 47     STA $473A,Y
	INX 								;C2/3C89: E8           INX 
	INY 								;C2/3C8A: C8           INY 
	CPY #$000A	;copy 10 bytes of action data			;C2/3C8B: C0 0A 00     CPY #$000A
	BNE -								;C2/3C8E: D0 F3        BNE $3C83
	
	LDA ReactingIndex 						;C2/3C90: AD 55 47     LDA $4755
	CMP #$04	;monster check					;C2/3C93: C9 04        CMP #$04
	BCC .Finish							;C2/3C95: 90 5A        BCC $3CF1
	SEC 								;C2/3C97: 38           SEC 
	SBC #$04	;now monster index				;C2/3C98: E9 04        SBC #$04
	STA $10								;C2/3C9A: 85 10        STA $10
	ASL 								;C2/3C9C: 0A           ASL 
	TAX 								;C2/3C9D: AA           TAX 
	LDA ROMTimes100w,X	;size of MonsterAIScript 		;C2/3C9E: BF 95 EE D0  LDA $D0EE95,X
	STA $0E								;C2/3CA2: 85 0E        STA $0E
	LDA ROMTimes100w+1,X						;C2/3CA4: BF 96 EE D0  LDA $D0EE96,X
	STA $0F								;C2/3CA8: 85 0F        STA $0F
	TDC 								;C2/3CAA: 7B           TDC 
	TAY 								;C2/3CAB: A8           TAY 
	LDX $0E		;AI Script Offset				;C2/3CAC: A6 0E        LDX $0E

-	LDA !MonsterAIScript,X						;C2/3CAE: BD 67 43     LDA $4367,X
	STA SavedMonsterAIScript,Y					;C2/3CB1: 99 D6 46     STA $46D6,Y
	INX 								;C2/3CB4: E8           INX 
	INY 								;C2/3CB5: C8           INY 
	CPY #$0064	;100 bytes copied				;C2/3CB6: C0 64 00     CPY #$0064
	BNE -								;C2/3CB9: D0 F3        BNE $3CAE

	LDA $10		;monster index					;C2/3CBB: A5 10        LDA $10
	JSR ShiftMultiply_16   						;C2/3CBD: 20 B5 01     JSR $01B5      
	TAX 								;C2/3CC0: AA           TAX 
	STX $0E		;*16						;C2/3CC1: 86 0E        STX $0E
	ASL 								;C2/3CC3: 0A           ASL 
	TAX 								;C2/3CC4: AA           TAX 
	STX $10		;*32						;C2/3CC5: 86 10        STX $10
	TDC 								;C2/3CC7: 7B           TDC 
	TAY 								;C2/3CC8: A8           TAY 
	LDX $0E								;C2/3CC9: A6 0E        LDX $0E

-	LDA MonsterMagic,X						;C2/3CCB: BD DE 41     LDA $41DE,X
	STA SavedMonsterMagic,Y						;C2/3CCE: 99 A6 46     STA $46A6,Y
	INX 								;C2/3CD1: E8           INX 
	INY 								;C2/3CD2: C8           INY 
	CPY #$0010	;16 bytes copied				;C2/3CD3: C0 10 00     CPY #$0010
	BNE -								;C2/3CD6: D0 F3        BNE $3CCB
	
	TDC 								;C2/3CD8: 7B           TDC 
	TAY 								;C2/3CD9: A8           TAY 
	LDX $10								;C2/3CDA: A6 10        LDX $10

-	LDA MMTargets.Party,X						;C2/3CDC: BD 5E 42     LDA $425E,X
	STA SavedMMTargets,Y						;C2/3CDF: 99 B6 46     STA $46B6,Y
	LDA MMTargets.Monster,X						;C2/3CE2: BD 5F 42     LDA $425F,X
	STA SavedMMTargets+1,Y						;C2/3CE5: 99 B7 46     STA $46B7,Y
	INX 								;C2/3CE8: E8           INX 
	INX 								;C2/3CE9: E8           INX 
	INY 								;C2/3CEA: C8           INY 
	INY 								;C2/3CEB: C8           INY 
	CPY #$0020	;32 bytes copied				;C2/3CEC: C0 20 00     CPY #$0020
	BNE -								;C2/3CEF: D0 EB        BNE $3CDC

.Finish		;party target, or finishing up after a monster target
	LDA ReactingIndex							;C2/3CF1: AD 55 47     LDA $4755
	ASL 									;C2/3CF4: 0A           ASL 
	TAX 									;C2/3CF5: AA           TAX 
	LDA ROMTimes11w,X							;C2/3CF6: BF 61 ED D0  LDA $D0ED61,X
	TAX 									;C2/3CFA: AA           TAX 
	LDA EnableTimer.ATB,X							;C2/3CFB: BD FB 3C     LDA $3CFB,X
	STA SavedEnableATB							;C2/3CFE: 8D 44 47     STA $4744
	LDA CurrentTimer.ATB,X							;C2/3D01: BD 7F 3D     LDA $3D7F,X
	STA SavedCurrentATB							;C2/3D04: 8D 45 47     STA $4745
	RTS 									;C2/3D07: 60           RTS 
%endsub()

%org($C23D08)
;restores a bunch of action data which was saved before doing monster reactions
%sub(RestoreActionData)
RestoreActionData:
	LDA ReactingIndex							;C2/3D08: AD 55 47     LDA $4755
	JSR CalculateCharOffset   						;C2/3D0B: 20 EC 01     JSR $01EC     
	TDC 									;C2/3D0E: 7B           TDC 
	TAY 									;C2/3D0F: A8           TAY 
	LDX AttackerOffset	;offset of forced target			;C2/3D10: A6 32        LDX $32

-	LDA !SavedActionReaction,Y							;C2/3D12: B9 3A 47     LDA $473A,Y
	STA CharStruct.ActionFlag,X						;C2/3D15: 9D 56 20     STA $2056,X
	INX 									;C2/3D18: E8           INX 
	INY 									;C2/3D19: C8           INY 
	CPY #$000A	;copy 10 bytes action data				;C2/3D1A: C0 0A 00     CPY #$000A
	BNE -									;C2/3D1D: D0 F3        BNE $3D12

	LDA ReactingIndex							;C2/3D1F: AD 55 47     LDA $4755
	CMP #$04	;monster check						;C2/3D22: C9 04        CMP #$04
	BCC .Finish								;C2/3D24: 90 5A        BCC $3D80
	SEC 									;C2/3D26: 38           SEC 
	SBC #$04								;C2/3D27: E9 04        SBC #$04
	STA $10		;monster index 						;C2/3D29: 85 10        STA $10
	ASL 									;C2/3D2B: 0A           ASL 
	TAX 									;C2/3D2C: AA           TAX 
	LDA ROMTimes100w,X							;C2/3D2D: BF 95 EE D0  LDA $D0EE95,X
	STA $0E									;C2/3D31: 85 0E        STA $0E
	LDA ROMTimes100w+1,X							;C2/3D33: BF 96 EE D0  LDA $D0EE96,X
	STA $0F									;C2/3D37: 85 0F        STA $0F
	TDC 									;C2/3D39: 7B           TDC 
	TAY 									;C2/3D3A: A8           TAY 
	LDX $0E									;C2/3D3B: A6 0E        LDX $0E

-	LDA SavedMonsterAIScript,Y						;C2/3D3D: B9 D6 46     LDA $46D6,Y
	STA !MonsterAIScript,X							;C2/3D40: 9D 67 43     STA $4367,X
	INX 									;C2/3D43: E8           INX 
	INY 									;C2/3D44: C8           INY 
	CPY #$0064	;100 bytes						;C2/3D45: C0 64 00     CPY #$0064
	BNE -									;C2/3D48: D0 F3        BNE $3D3D

	LDA $10									;C2/3D4A: A5 10        LDA $10
	JSR ShiftMultiply_16   							;C2/3D4C: 20 B5 01     JSR $01B5     
	TAX 									;C2/3D4F: AA           TAX 
	STX $0E									;C2/3D50: 86 0E        STX $0E
	ASL 									;C2/3D52: 0A           ASL 
	TAX 									;C2/3D53: AA           TAX 
	STX $10									;C2/3D54: 86 10        STX $10
	TDC 									;C2/3D56: 7B           TDC 
	TAY 									;C2/3D57: A8           TAY 
	LDX $0E									;C2/3D58: A6 0E        LDX $0E

-	LDA SavedMonsterMagic,Y							;C2/3D5A: B9 A6 46     LDA $46A6,Y
	STA MonsterMagic,X							;C2/3D5D: 9D DE 41     STA $41DE,X
	INX 									;C2/3D60: E8           INX 
	INY 									;C2/3D61: C8           INY 
	CPY #$0010	;16 bytes						;C2/3D62: C0 10 00     CPY #$0010
	BNE -									;C2/3D65: D0 F3        BNE $3D5A

	TDC 									;C2/3D67: 7B           TDC 
	TAY 									;C2/3D68: A8           TAY 
	LDX $10									;C2/3D69: A6 10        LDX $10

-	LDA SavedMMTargets,Y							;C2/3D6B: B9 B6 46     LDA $46B6,Y
	STA MMTargets.Party,X							;C2/3D6E: 9D 5E 42     STA $425E,X
	LDA SavedMMTargets+1,Y							;C2/3D71: B9 B7 46     LDA $46B7,Y
	STA MMTargets.Monster,X							;C2/3D74: 9D 5F 42     STA $425F,X
	INX 									;C2/3D77: E8           INX 
	INX 									;C2/3D78: E8           INX 
	INY 									;C2/3D79: C8           INY 
	INY 									;C2/3D7A: C8           INY 
	CPY #$0020	;32 bytes						;C2/3D7B: C0 20 00     CPY #$0020
	BNE -									;C2/3D7E: D0 EB        BNE $3D6B

.Finish		;either a party target, or after monster data is restored
	LDA ReactingIndex							;C2/3D80: AD 55 47     LDA $4755
	ASL 									;C2/3D83: 0A           ASL 
	TAX 									;C2/3D84: AA           TAX 
	LDA ROMTimes11w,X							;C2/3D85: BF 61 ED D0  LDA $D0ED61,X
	TAX 									;C2/3D89: AA           TAX 
	LDA SavedEnableATB							;C2/3D8A: AD 44 47     LDA $4744
	STA EnableTimer.ATB,X							;C2/3D8D: 9D FB 3C     STA $3CFB,X
	LDA SavedCurrentATB							;C2/3D90: AD 45 47     LDA $4745
	STA CurrentTimer.ATB,X							;C2/3D93: 9D 7F 3D     STA $3D7F,X
	LDA #$FF								;C2/3D96: A9 FF        LDA #$FF
	STA ReactingIndex							;C2/3D98: 8D 55 47     STA $4755
	RTS 									;C2/3D9B: 60           RTS 
%endsub()

%org($C23D9C)
ReactionPauseTimerChecks:
	TDC 									;C2/3D9C: 7B           TDC 
	TAX 									;C2/3D9D: AA           TAX 
	STX $0E									;C2/3D9E: 86 0E        STX $0E
	LDA ReactingIndex							;C2/3DA0: AD 55 47     LDA $4755
-	CMP $0E									;C2/3DA3: C5 0E        CMP $0E
	BNE +									;C2/3DA5: D0 05        BNE $3DAC
	STZ PauseTimerChecks,X							;C2/3DA7: 9E 9F 3E     STZ $3E9F,X
	BRA ++									;C2/3DAA: 80 03        BRA $3DAF
+	INC PauseTimerChecks,X							;C2/3DAC: FE 9F 3E     INC $3E9F,X
++	INC $0E									;C2/3DAF: E6 0E        INC $0E
	INX 									;C2/3DB1: E8           INX 
	CPX #$000C	;12 chars						;C2/3DB2: E0 0C 00     CPX #$000C
	BNE -									;C2/3DB5: D0 EC        BNE $3DA3
	INC PendingReactions							;C2/3DB7: EE 56 47     INC $4756
	RTS 									;C2/3DBA: 60           RTS 

%org($C23DBB)
UnpauseTimerChecks:
	TDC 									;C2/3DBB: 7B           TDC 
	TAX 									;C2/3DBC: AA           TAX 
-	STZ PauseTimerChecks,X							;C2/3DBD: 9E 9F 3E     STZ $3E9F,X
	INX 									;C2/3DC0: E8           INX 
	CPX #$000C								;C2/3DC1: E0 0C 00     CPX #$000C
	BNE -									;C2/3DC4: D0 F7        BNE $3DBD
	RTS 									;C2/3DC6: 60           RTS 

%org($C23DC7)
;Runs a Reaction AI Script 
;Also used for party reactions, called at a point near the end skipping the AI stuff
ProcessReaction:
	SEC 									;C2/3DC7: 38           SEC 
	LDA ReactingIndex							;C2/3DC8: AD 55 47     LDA $4755
	SBC #$04								;C2/3DCB: E9 04        SBC #$04
	STA MonsterIndex							;C2/3DCD: 8D 03 7C     STA $7C03
	JSR ShiftMultiply_16      						;C2/3DD0: 20 B5 01     JSR $01B5     
	TAX 									;C2/3DD3: AA           TAX 
	STX MonsterOffset16							;C2/3DD4: 8E 5E 43     STX $435E
	ASL 									;C2/3DD7: 0A           ASL 
	TAX 									;C2/3DD8: AA           TAX 
	STX MonsterOffset32							;C2/3DD9: 8E 60 43     STX $4360
	TDC 									;C2/3DDC: 7B           TDC 
	TAY 									;C2/3DDD: A8           TAY 
	LDX MonsterOffset16							;C2/3DDE: AE 5E 43     LDX $435E
	LDA #$FF								;C2/3DE1: A9 FF        LDA #$FF

-	STA MonsterMagic,X							;C2/3DE3: 9D DE 41     STA $41DE,X
	INX 									;C2/3DE6: E8           INX 
	INY 									;C2/3DE7: C8           INY 
	CPY #$0010	;init 16 bytes to $FF					;C2/3DE8: C0 10 00     CPY #$0010
	BNE -									;C2/3DEB: D0 F6        BNE $3DE3

	LDX AttackerOffset     							;C2/3DED: A6 32        LDX $32       
	LDA #$2C	;Magic (technically MSword L1)				;C2/3DEF: A9 2C        LDA #$2C
	STA CharStruct.Command,X						;C2/3DF1: 9D 57 20     STA $2057,X
	LDA #$21	;Magic & Costs MP					;C2/3DF4: A9 21        LDA #$21
	STA CharStruct.ActionFlag,X						;C2/3DF6: 9D 56 20     STA $2056,X
	INC CurrentlyReacting	;indicates a reaction to other routines		;C2/3DF9: EE 4E 47     INC $474E

	LDX #$0040		;init 64 byte AI buffer				;C2/3DFC: A2 40 00     LDX #$0040
	LDA #$FF								;C2/3DFF: A9 FF        LDA #$FF
-	STA AIBuffer,X								;C2/3E01: 9D 40 26     STA $2640,X
	DEX 									;C2/3E04: CA           DEX 
	BPL -									;C2/3E05: 10 FA        BPL $3E01

	REP #$20								;C2/3E07: C2 20        REP #$20
	CLC 									;C2/3E09: 18           CLC 
	LDA AIOffset								;C2/3E0A: A5 4B        LDA $4B
	ADC #$00AA	;in MonsterAI, shift from Conditions to Actions		;C2/3E0C: 69 AA 00     ADC #$00AA
	STA AIOffset								;C2/3E0F: 85 4B        STA $4B
	TDC 									;C2/3E11: 7B           TDC 
	SEP #$20								;C2/3E12: E2 20        SEP #$20
	LDA AICurrentCheckedSet							;C2/3E14: AD 90 46     LDA $4690
	ASL 									;C2/3E17: 0A           ASL 
	TAX 									;C2/3E18: AA           TAX 
	LDA ROMTimes64w,X	;size of one MonsterAI ReactActions entry	;C2/3E19: BF B5 EE D0  LDA $D0EEB5,X
	STA $0E									;C2/3E1D: 85 0E        STA $0E
	LDA ROMTimes64w+1,X							;C2/3E1F: BF B6 EE D0  LDA $D0EEB6,X
	STA $0F									;C2/3E23: 85 0F        STA $0F
	TDC 									;C2/3E25: 7B           TDC 
	TAX 									;C2/3E26: AA           TAX 
	LDY $0E		;Current Action offset					;C2/3E27: A4 0E        LDY $0E

.ProcessScript
	LDA (AIOffset),Y							;C2/3E29: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E2B: 9D 40 26     STA $2640,X
	INY 									;C2/3E2E: C8           INY 
	INX 									;C2/3E2F: E8           INX 
	CMP #$FE	;end of entry						;C2/3E30: C9 FE        CMP #$FE
	BEQ .Finish								;C2/3E32: F0 58        BEQ $3E8C
	CMP #$FF	;end of ai						;C2/3E34: C9 FF        CMP #$FF
	BEQ .Finish								;C2/3E36: F0 54        BEQ $3E8C
	CMP #$FD	;special command					;C2/3E38: C9 FD        CMP #$FD
	BNE .Finish								;C2/3E3A: D0 50        BNE $3E8C

	LDA (AIOffset),Y							;C2/3E3C: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E3E: 9D 40 26     STA $2640,X
	INY 									;C2/3E41: C8           INY 
	INX 									;C2/3E42: E8           INX 
	CMP #$F7								;C2/3E43: C9 F7        CMP #$F7
	BEQ .CopyExtraBytes							;C2/3E45: F0 12        BEQ $3E59
	CMP #$F0								;C2/3E47: C9 F0        CMP #$F0
	BCS .OtherSpecial							;C2/3E49: B0 31        BCS $3E7C
	LDA (AIOffset),Y							;C2/3E4B: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E4D: 9D 40 26     STA $2640,X
	INY 									;C2/3E50: C8           INY 
	INX 									;C2/3E51: E8           INX 
	LDA (AIOffset),Y							;C2/3E52: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E54: 9D 40 26     STA $2640,X
	BRA .Finish								;C2/3E57: 80 33        BRA $3E8C

.CopyExtraBytes		;command $F7
	LDA (AIOffset),Y	;number of extra data bytes to copy 		;C2/3E59: B1 4B        LDA ($4B),Y
	STA AIBuffer,X		;.. must be at least 1 				;C2/3E5B: 9D 40 26     STA $2640,X
	STA $10									;C2/3E5E: 85 10        STA $10
	INY 									;C2/3E60: C8           INY 
	INX 									;C2/3E61: E8           INX 
	LDA (AIOffset),Y							;C2/3E62: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E64: 9D 40 26     STA $2640,X
	INY 									;C2/3E67: C8           INY 
	INX 									;C2/3E68: E8           INX 
	STZ $11									;C2/3E69: 64 11        STZ $11
-	LDA (AIOffset),Y							;C2/3E6B: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E6D: 9D 40 26     STA $2640,X
	INY 									;C2/3E70: C8           INY 
	INX 									;C2/3E71: E8           INX 
	INC $11			;bytes copied					;C2/3E72: E6 11        INC $11
	LDA $11									;C2/3E74: A5 11        LDA $11
	CMP $10			;bytes to copy					;C2/3E76: C5 10        CMP $10
	BNE -									;C2/3E78: D0 F1        BNE $3E6B
	BRA .Finish								;C2/3E7A: 80 10        BRA $3E8C

.OtherSpecial		;>=$F0, but not $F7
			;copies 2 more bytes then loops back to continue processing
	LDA (AIOffset),Y							;C2/3E7C: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E7E: 9D 40 26     STA $2640,X
	INY 									;C2/3E81: C8           INY 
	INX 									;C2/3E82: E8           INX 
	LDA (AIOffset),Y							;C2/3E83: B1 4B        LDA ($4B),Y
	STA AIBuffer,X								;C2/3E85: 9D 40 26     STA $2640,X
	INY 									;C2/3E88: C8           INY 
	INX 									;C2/3E89: E8           INX 
	BRA .ProcessScript							;C2/3E8A: 80 9D        BRA $3E29

.Finish
	STZ TempCharm								;C2/3E8C: 64 22        STZ $22
	JSR DispatchAICommands							;C2/3E8E: 20 10 32     JSR $3210
.Party
	LDA ReactingIndex							;C2/3E91: AD 55 47     LDA $4755
	JSR GetTimerOffset     							;C2/3E94: 20 07 02     JSR $0207    
	LDA #$01		;action for next tick				;C2/3E97: A9 01        LDA #$01
	STA CurrentTimer.ATB,Y							;C2/3E99: 99 7F 3D     STA $3D7F,Y
	LDA #$41		;queued action					;C2/3E9C: A9 41        LDA #$41
	STA EnableTimer.ATB,Y							;C2/3E9E: 99 FB 3C     STA $3CFB,Y
	RTS 									;C2/3EA1: 60           RTS 


%org($C23EA2)
;Loads stats and status for all characters, including party equipment and monster AI
%sub(LoadStatsEquipmentAI)
LoadStatsEquipmentAI:
	TDC 									;C2/3EA2: 7B           TDC 		
	TAX 									;C2/3EA3: AA           TAX 		
	TAY 									;C2/3EA4: A8           TAY 		
	LDA #$04		;4 characters					;C2/3EA5: A9 04        LDA #$04		
	STA $10									;C2/3EA7: 85 10        STA $10		
.CopyCharStatsLoop
	LDA #$50		;80 bytes per character				;C2/3EA9: A9 50        LDA #$50		
	STA $0E									;C2/3EAB: 85 0E        STA $0E		
;Checks for fight $1F7, which is the Galuf Exdeath battle
	LDA EncounterIndex							;C2/3EAD: AD F0 04     LDA $04F0	
	CMP #$F7								;C2/3EB0: C9 F7        CMP #$F7		
	BNE .CopyOneChar							;C2/3EB2: D0 0C        BNE $3EC0	
	LDA EncounterIndex+1							;C2/3EB4: AD F1 04     LDA $04F1	
	CMP #$01								;C2/3EB7: C9 01        CMP #$01		
	BNE .CopyOneChar							;C2/3EB9: D0 05        BNE $3EC0	
	LDA #$08		;Set Always HP Leak				;C2/3EBB: A9 08        LDA #$08		
	STA CharStruct.AlwaysStatus4,Y						;C2/3EBD: 99 73 20     STA $2073,Y

.CopyOneChar
	LDA !FieldChar,X								;C2/3EC0: BD 00 05     LDA $0500,X
	STA !CharStruct,Y							;C2/3EC3: 99 00 20     STA $2000,Y
	INX 									;C2/3EC6: E8           INX 		
	INY 									;C2/3EC7: C8           INY 		
	DEC $0E									;C2/3EC8: C6 0E        DEC $0E		
	LDA $0E									;C2/3ECA: A5 0E        LDA $0E		
	BNE .CopyOneChar							;C2/3ECC: D0 F2        BNE $3EC0	
	
	REP #$20								;C2/3ECE: C2 20        REP #$20	
	TYA 									;C2/3ED0: 98           TYA 		
	CLC 									;C2/3ED1: 18           CLC 		
	ADC #$0030		;advance CharStruct index to next character	;C2/3ED2: 69 30 00     ADC #$0030
	TAY 									;C2/3ED5: A8           TAY 		
	TDC 									;C2/3ED6: 7B           TDC 		
	SEP #$20								;C2/3ED7: E2 20        SEP #$20	
	DEC $10			;next character					;C2/3ED9: C6 10        DEC $10		
	LDA $10									;C2/3EDB: A5 10        LDA $10		
	BNE .CopyCharStatsLoop							;C2/3EDD: D0 CA        BNE $3EA9	
	
	LDA EncounterIndex+1	;1 for boss fights				;C2/3EDF: AD F1 04     LDA $04F1	
	BEQ .DoneLenna								;C2/3EE2: F0 2D        BEQ $3F11	
	LDA EncounterIndex							;C2/3EE4: AD F0 04     LDA $04F0	
	CMP #$BA		;Forza/Magisa					;C2/3EE7: C9 BA        CMP #$BA	
	BNE .DoneLenna								;C2/3EE9: D0 26        BNE $3F11	
	TDC 									;C2/3EEB: 7B           TDC 		
	TAX 									;C2/3EEC: AA           TAX 
	TAY 									;C2/3EED: A8           TAY 
	
.PoisonLenna
	LDA CharStruct.CharRow,X						;C2/3EEE: BD 00 20     LDA $2000,X
	AND #$07		;character bits					;C2/3EF1: 29 07        AND #$07	
	CMP #$01		;Lenna						;C2/3EF3: C9 01        CMP #$01	
	BNE .Next								;C2/3EF5: D0 11        BNE $3F08	
	LDA CharStruct.Status1,X						;C2/3EF7: BD 1A 20     LDA $201A,X
	AND #$C6		;if Dead/Stone/Zombie/Poison, abort 		;C2/3EFA: 29 C6        AND #$C6		
	BNE .DoneLenna								;C2/3EFC: D0 13        BNE $3F11	
	LDA CharStruct.Status1,X						;C2/3EFE: BD 1A 20     LDA $201A,X
	ORA #$04		;set poison					;C2/3F01: 09 04        ORA #$04		
	STA CharStruct.Status1,X						;C2/3F03: 9D 1A 20     STA $201A,X
	BRA .DoneLenna								;C2/3F06: 80 09        BRA $3F11	
.Next	JSR NextCharOffset							;C2/3F08: 20 E0 01     JSR $01E0	
	INY 									;C2/3F0B: C8           INY 
	CPY #$0004								;C2/3F0C: C0 04 00     CPY #$0004
	BNE .PoisonLenna							;C2/3F0F: D0 DD        BNE $3EEE

.DoneLenna
	JSR StartPartyPoisonTimers						;C2/3F11: 20 D5 45     JSR $45D5	
	JSR ApplyPartyGear							;C2/3F14: 20 5E 9A     JSR $9A5E	
	TDC									;C2/3F17: 7B           TDC		
	TAX 									;C2/3F18: AA           TAX 		
	STX $0E			;MonsterStats offset				;C2/3F19: 86 0E        STX $0E		
	STX $10			;Monster CharStruct offset			;C2/3F1B: 86 10        STX $10		
	STX $12			;current monster index				;C2/3F1D: 86 12        STX $12		
	LDA #$D0								;C2/3F1F: A9 D0        LDA #$D0		
	STA $22									;C2/3F21: 85 22        STA $22		
	STA $1E									;C2/3F23: 85 1E        STA $1E		
	LDX #$9C00								;C2/3F25: A2 00 9C     LDX #$9C00
	STX $20			;$D09C00, ROMAIScriptOffsets			;C2/3F28: 86 20        STX $20		
										;:					
.LoadMonsterStatsAI
	LDX #$0000								;C2/3F2A: A2 00 00     LDX #$0000
	LDA #$02								;C2/3F2D: A9 02        LDA #$02		
	JSR Random_X_A								;C2/3F2F: 20 7C 00     JSR $007C	
	CMP #$02								;C2/3F32: C9 02        CMP #$02		
	BNE +									;C2/3F34: D0 02        BNE $3F38	
	LDA #$FF		;-1						;C2/3F36: A9 FF        LDA #$FF		
+	STA $16			;randomly 0, +1 or -1 ($FF)			;C2/3F38: 85 16        STA $16		
	LDX $0E			;MonsterStats offset				;C2/3F3A: A6 0E        LDX $0E		
	LDY $10			;Monster CharStruct offset			;C2/3F3C: A4 10        LDY $10		
	CLC 									;C2/3F3E: 18           CLC 		
	LDA MonsterStats.Speed,X						;C2/3F3F: BD FF 3E     LDA $3EFF,X
	ADC $16			;randomly 0, +1 or -1				;C2/3F42: 65 16        ADC $16		
	STA CharStruct[4].BaseAgi,Y	;CharStruct[4] is the first monster	;C2/3F44: 99 25 22     STA $2225,Y	
	STA CharStruct[4].EquippedAgi,Y						;C2/3F47: 99 29 22     STA $2229,Y
	LDA MonsterStats.AttackPower,X						;C2/3F4A: BD 00 3F     LDA $3F00,X
	STA CharStruct[4].MonsterAttack,Y					;C2/3F4D: 99 44 22     STA $2244,Y
	LDA MonsterStats.AttackMult,X						;C2/3F50: BD 01 3F     LDA $3F01,X
	STA CharStruct[4].MonsterM,Y						;C2/3F53: 99 62 22     STA $2262,Y
	LDA MonsterStats.Evade,X						;C2/3F56: BD 02 3F     LDA $3F02,X
	STA CharStruct[4].Evade,Y						;C2/3F59: 99 2C 22     STA $222C,Y
	LDA MonsterStats.Defense,X						;C2/3F5C: BD 03 3F     LDA $3F03,X
	STA CharStruct[4].Defense,Y						;C2/3F5F: 99 2D 22     STA $222D,Y
	LDA MonsterStats.MagicPower,X						;C2/3F62: BD 04 3F     LDA $3F04,X
	STA CharStruct[4].BaseMag,Y						;C2/3F65: 99 27 22     STA $2227,Y
	STA CharStruct[4].EquippedMag,Y						;C2/3F68: 99 2B 22     STA $222B,Y
	LDA MonsterStats.MDefense,X						;C2/3F6B: BD 05 3F     LDA $3F05,X
	STA CharStruct[4].MDefense,Y						;C2/3F6E: 99 2F 22     STA $222F,Y
	LDA MonsterStats.MEvade,X						;C2/3F71: BD 06 3F     LDA $3F06,X
	STA CharStruct[4].MEvade,Y						;C2/3F74: 99 2E 22     STA $222E,Y
	REP #$20								;C2/3F77: C2 20        REP #$20		
	LDA MonsterStats.HP,X							;C2/3F79: BD 07 3F     LDA $3F07,X
	STA CharStruct[4].CurHP,Y						;C2/3F7C: 99 06 22     STA $2206,Y
	STA CharStruct[4].MaxHP,Y						;C2/3F7F: 99 08 22     STA $2208,Y
	LDA MonsterStats.MP,X							;C2/3F82: BD 09 3F     LDA $3F09,X
	STA CharStruct[4].CurMP,Y						;C2/3F85: 99 0A 22     STA $220A,Y
	LDA #$270F			;monsters always have 9999 Max MP	;C2/3F88: A9 0F 27     LDA #$270F
	STA CharStruct[4].MaxMP,Y						;C2/3F8B: 99 0C 22     STA $220C,Y
	LDA MonsterStats.Exp,X							;C2/3F8E: BD 0B 3F     LDA $3F0B,X
	STA CharStruct[4].RewardExp,Y						;C2/3F91: 99 67 22     STA $2267,Y
	LDA MonsterStats.Gil,X							;C2/3F94: BD 0D 3F     LDA $3F0D,X
	STA CharStruct[4].RewardGil,Y						;C2/3F97: 99 69 22     STA $2269,Y
	LDA MonsterStats.StatusImmune1,X	;also copies StatusImmune2	;C2/3F9A: BD 11 3F     LDA $3F11,X
	STA CharStruct[4].StatusImmune1,Y					;C2/3F9D: 99 35 22     STA $2235,Y
	TDC 									;C2/3FA0: 7B           TDC 
	SEP #$20								;C2/3FA1: E2 20        SEP #$20		
	STA CharStruct[4].CharRow,Y						;C2/3FA3: 99 00 22     STA $2200,Y
	LDA MonsterStats.StatusImmune3,X					;C2/3FA6: BD 13 3F     LDA $3F13,X
	STA CharStruct[4].StatusImmune3,Y					;C2/3FA9: 99 37 22     STA $2237,Y
	LDA MonsterStats.AttackFX,X						;C2/3FAC: BD 0F 3F     LDA $3F0F,X
	STA CharStruct[4].RHWeapon,Y						;C2/3FAF: 99 13 22     STA $2213,Y
	LDA MonsterStats.EAbsorb,X						;C2/3FB2: BD 14 3F     LDA $3F14,X
	STA CharStruct[4].EAbsorb,Y						;C2/3FB5: 99 30 22     STA $2230,Y
	LDA MonsterStats.EImmune,X						;C2/3FB8: BD 10 3F     LDA $3F10,X
	STA CharStruct[4].EImmune,Y						;C2/3FBB: 99 32 22     STA $2232,Y
	LDA MonsterStats.CantEvade,X						;C2/3FBE: BD 15 3F     LDA $3F15,X
	STA CharStruct[4].CantEvade,Y						;C2/3FC1: 99 64 22     STA $2264,Y
	LDA MonsterStats.EWeak,X						;C2/3FC4: BD 16 3F     LDA $3F16,X
	STA CharStruct[4].EWeak,Y						;C2/3FC7: 99 34 22     STA $2234,Y
	LDA MonsterStats.CreatureType,X						;C2/3FCA: BD 17 3F     LDA $3F17,X
	STA CharStruct[4].CreatureType,Y					;C2/3FCD: 99 65 22     STA $2265,Y
	LDA MonsterStats.CmdImmunity,X						;C2/3FD0: BD 18 3F     LDA $3F18,X
	STA CharStruct[4].CmdImmunity,Y						;C2/3FD3: 99 66 22     STA $2266,Y
	LDA MonsterStats.Level,X						;C2/3FD6: BD 1E 3F     LDA $3F1E,X
	STA CharStruct[4].Level,Y						;C2/3FD9: 99 02 22     STA $2202,Y
	STA CharStruct[4].EquippedVit,Y		;vit = level for monsters	;C2/3FDC: 99 2A 22     STA $222A,Y
	PHY 									;C2/3FDF: 5A           PHY 		
	LDA MonsterStats.Status1,X						;C2/3FE0: BD 19 3F     LDA $3F19,X
	BPL .ApplyStatus							;C2/3FE3: 10 0B        BPL $3FF0	

.AlwaysStatus										
	REP #$20								;C2/3FE5: C2 20        REP #$20		
	TYA 									;C2/3FE7: 98           TYA 		
	CLC 									;C2/3FE8: 18           CLC 		
	ADC #$0056	;Shift offset so regular status points to always status ;C2/3FE9: 69 56 00     ADC #$0056
	TAY 									;C2/3FEC: A8           TAY 		
	TDC 									;C2/3FED: 7B           TDC 		
	SEP #$20								;C2/3FEE: E2 20        SEP #$20		

.ApplyStatus														
	LDA MonsterStats.Status1,X						;C2/3FF0: BD 19 3F     LDA $3F19,X
	AND #$7F	;clear high bit since it also means death		;C2/3FF3: 29 7F        AND #$7F		
	STA CharStruct[4].Status1,Y						;C2/3FF5: 99 1A 22     STA $221A,Y
	LDA MonsterStats.Status2,X						;C2/3FF8: BD 1A 3F     LDA $3F1A,X
	STA CharStruct[4].Status2,Y						;C2/3FFB: 99 1B 22     STA $221B,Y
	LDA MonsterStats.Status3,X						;C2/3FFE: BD 1B 3F     LDA $3F1B,X
	STA CharStruct[4].Status3,Y						;C2/4001: 99 1C 22     STA $221C,Y
	LDA MonsterStats.Status4,X						;C2/4004: BD 1C 3F     LDA $3F1C,X
	STA CharStruct[4].Status4,Y						;C2/4007: 99 1D 22     STA $221D,Y
	LDA $12			;current monster index				;C2/400A: A5 12        LDA $12		
	ASL 									;C2/400C: 0A           ASL 		
	TAY 									;C2/400D: A8           TAY 		
	LDA MonsterStats.EnemyNameID,X						;C2/400E: BD 1D 3F     LDA $3F1D,X
	STA MonsterNameID,Y							;C2/4011: 99 08 40     STA $4008,Y
	LDA BattleMonsterID+1							;C2/4014: AD 21 40     LDA $4021	
	STA MonsterNameID+1,Y							;C2/4017: 99 09 40     STA $4009,Y
	LDA $12			;current monster index				;C2/401A: A5 12        LDA $12		
	ASL 									;C2/401C: 0A           ASL 		
	TAX 									;C2/401D: AA           TAX 		
	REP #$20								;C2/401E: C2 20        REP #$20		
	LDA BattleMonsterID,X							;C2/4020: BD 20 40     LDA $4020,X
	ASL 									;C2/4023: 0A           ASL 		
	TAX 									;C2/4024: AA           TAX 		
	TDC 									;C2/4025: 7B           TDC 		
	SEP #$20								;C2/4026: E2 20        SEP #$20		
	LDA ROMSpecialtyData.Properties,X					;C2/4028: BF 00 99 D0  LDA $D09900,X
	STA $1C									;C2/402C: 85 1C        STA $1C		
	LDA ROMSpecialtyData.Name,X						;C2/402E: BF 01 99 D0  LDA $D09901,X
	STA $1D									;C2/4032: 85 1D        STA $1D		
	PLY 									;C2/4034: 7A           PLY 		
	LDA $1C									;C2/4035: A5 1C        LDA $1C
	STA CharStruct[4].Specialty,Y						;C2/4037: 99 6E 22     STA $226E,Y
	LDA $1D									;C2/403A: A5 1D        LDA $1D		
	STA CharStruct[4].SpecialtyName,Y						;C2/403C: 99 7F 22     STA $227F,Y
	LDA $12			;current monster index				;C2/403F: A5 12        LDA $12		
	ASL 									;C2/4041: 0A           ASL 		
	TAX 									;C2/4042: AA           TAX 		
	REP #$20								;C2/4043: C2 20        REP #$20		
	LDA BattleMonsterID,X							;C2/4045: BD 20 40     LDA $4020,X
	ASL 									;C2/4048: 0A           ASL 		
	TAY 									;C2/4049: A8           TAY 		
	TDC 									;C2/404A: 7B           TDC 		
	SEP #$20								;C2/404B: E2 20        SEP #$20		
	LDA [$20],Y		;$D09C00, ROMAIScriptOffsets			;C2/404D: B7 20        LDA [$20],Y
	STA $1C									;C2/404F: 85 1C        STA $1C
	INY 									;C2/4051: C8           INY 
	LDA [$20],Y								;C2/4052: B7 20        LDA [$20],Y
	STA $1D									;C2/4054: 85 1D        STA $1D
	LDX #$0654								;C2/4056: A2 54 06     LDX #$0654
	STX $2A									;C2/4059: 86 2A        STX $2A		
	LDX $12			;current monster index				;C2/405B: A6 12        LDX $12		
	STX $2C									;C2/405D: 86 2C        STX $2C
	JSR Multiply_16bit	;current monster index * 1620			;C2/405F: 20 D2 00     JSR $00D2	
	LDX $2E			;which is MonsterAI offset 			;C2/4062: A6 2E        LDX $2E		
	STX $08			; there's a table for *1620 in the rom		;C2/4064: 86 08        STX $08		
	STX $0A			; not sure why it's not being used		;C2/4066: 86 0A        STX $0A		
	PHX 									;C2/4068: DA           PHX 		
	TDC 									;C2/4069: 7B           TDC 		
	TAY 									;C2/406A: A8           TAY 		
	STY $0C			;condition/action index				;C2/406B: 84 0C        STY $0C		

.CopyAI															
	LDX $08			;Current MonsterAI Condition offset		;C2/406D: A6 08        LDX $08		
.CopyAIConditions													
	LDA [$1C],Y		;AI script offset in ROM			;C2/406F: B7 1C        LDA [$1C],Y
	STA MonsterAI.Conditions,X						;C2/4071: 9D 59 47     STA $4759,X
	INX 									;C2/4074: E8           INX 
	INY 									;C2/4075: C8           INY 
	CMP #$FE		;end of condition entry				;C2/4076: C9 FE        CMP #$FE		
	BNE .CopyAIConditions							;C2/4078: D0 F5        BNE $406F	

	LDX $0A			;Current MonsterAI Action offset 			;C2/407A: A6 0A        LDX $
.CopyAIActions														
	LDA [$1C],Y		;AI script offset in ROM, Y is kept from above	;C2/407C: B7 1C        LDA [$1C],Y
	STA MonsterAI.Actions,X							;C2/407E: 9D 03 48     STA $4803,X
	INX 									;C2/4081: E8           INX 		
	INY 									;C2/4082: C8           INY 		
	CMP #$FF		;end of AI script				;C2/4083: C9 FF        CMP #$FF		
	BEQ .AICounters								;C2/4085: F0 21        BEQ $40A8	
	CMP #$FE		;end of action entry				;C2/4087: C9 FE        CMP #$FE		
	BNE .CopyAIActions							;C2/4089: D0 F1        BNE $407C	

	REP #$20								;C2/408B: C2 20        REP #$20		
	CLC 									;C2/408D: 18           CLC 		
	LDA $08			;MonsterAI Condition offset 			;C2/408E: A5 08        LDA $08		
	ADC #$0011		;next condition					;C2/4090: 69 11 00     ADC #$0011
	STA $08									;C2/4093: 85 08        STA $08		
	CLC 									;C2/4095: 18           CLC 		
	LDA $0A			;MonsterAI Action offset 				;C2/4096: A5 0A        LDA $
	ADC #$0040		;next action 					;C2/4098: 69 40 00     ADC #$0040
	STA $0A									;C2/409B: 85 0A        STA $0A		
	TDC 									;C2/409D: 7B           TDC 		
	SEP #$20								;C2/409E: E2 20        SEP #$20		
	INC $0C			;next condition/action index			;C2/40A0: E6 0C        INC $0C		
	LDA $0C									;C2/40A2: A5 0C        LDA $0C		
	CMP #$0A		;max 10 condition/action pairs			;C2/40A4: C9 0A        CMP #$0A		
	BNE .CopyAI								;C2/40A6: D0 C5        BNE $406D	
	
.AICounters
	PLX 			;MonsterAI offset 				;C2/40A8: FA           PLX 		
	STX $08									;C2/40A9: 86 08        STX $08		
	STX $0A									;C2/40AB: 86 0A        STX $0A		
	STX $0C									;C2/40AD: 86 0C        STX $0C		

.CopyAIReact								
	LDX $08			;Current MonsterAI Condition offset		;C2/40AF: A6 08        LDX $08		
.CopyAIReactConditions													
	LDA [$1C],Y		;AI script offset in ROM, Y is kept from above	;C2/40B1: B7 1C        LDA [$1C],Y
	STA MonsterAI.ReactConditions,X						;C2/40B3: 9D 83 4A     STA $4A83,X
	INX 									;C2/40B6: E8           INX 
	INY 									;C2/40B7: C8           INY 
	CMP #$FF		;end of AI script				;C2/40B8: C9 FF        CMP #$FF		
	BEQ .NextMonster        						;C2/40BA: F0 37        BEQ $40F3    
	CMP #$FE         	;end of condition entry				;C2/40BC: C9 FE        CMP #$FE     
	BNE .CopyAIReactConditions       					;C2/40BE: D0 F1        BNE $40B1    
	
	LDX $12			;current monster index				;C2/40C0: A6 12        LDX $12		
	INC MonsterReactions,X							;C2/40C2: FE 30 40     INC $4030,X

	LDX $0A									;C2/40C5: A6 0A        LDX $0A		
.CopyAIReactActions													
	LDA [$1C],Y		;AI script offset in ROM, Y is kept from above	;C2/40C7: B7 1C        LDA [$1C],Y
	STA MonsterAI.ReactActions,X						;C2/40C9: 9D 2D 4B     STA $4B2D,X
	INX 									;C2/40CC: E8           INX 
	INY 									;C2/40CD: C8           INY 
	CMP #$FF		;end of AI script				;C2/40CE: C9 FF        CMP #$FF		
	BEQ .NextMonster        						;C2/40D0: F0 21        BEQ $40F3    
	CMP #$FE		;end of action entry				;C2/40D2: C9 FE        CMP #$FE		
	BNE .CopyAIReactActions							;C2/40D4: D0 F1        BNE $40C7	

	REP #$20								;C2/40D6: C2 20        REP #$20		
	CLC 									;C2/40D8: 18           CLC 		
	LDA $08			;MonsterAI Condition offset 			;C2/40D9: A5 08        LDA $08		
	ADC #$0011       	;next react condition				;C2/40DB: 69 11 00     ADC #$0011   
	STA $08          							;C2/40DE: 85 08        STA $08      
	CLC              							;C2/40E0: 18           CLC          
	LDA $0A          	;MonsterAI Action offset			;C2/40E1: A5 0A        LDA $0A
	ADC #$0040       	;next react action				;C2/40E3: 69 40 00     ADC #$0040   
	STA $0A          							;C2/40E6: 85 0A        STA $0A      
	TDC              							;C2/40E8: 7B           TDC          
	SEP #$20         							;C2/40E9: E2 20        SEP #$20     
	INC $0C          	;next condition/action index			;C2/40EB: E6 0C        INC $0C      
	LDA $0C          							;C2/40ED: A5 0C        LDA $0C      
	CMP #$0A         	;max 10 condition/action pairs			;C2/40EF: C9 0A        CMP #$0A     
	BNE .CopyAIReact        						;C2/40F1: D0 BC        BNE $40AF    

.NextMonster
	LDX $10			;Monster CharStruct offset			;C2/40F3: A6 10        LDX $10		
	JSR NextCharOffset							;C2/40F5: 20 E0 01     JSR $01E0	
	STX $10									;C2/40F8: 86 10        STX $10
	CLC 									;C2/40FA: 18           CLC 		
	LDA $0E			;MonsterStats offset				;C2/40FB: A5 0E        LDA $0E		
	ADC #$20		;next monster					;C2/40FD: 69 20        ADC #$20		
	STA $0E									;C2/40FF: 85 0E        STA $0E
	INC $12			;next monster index				;C2/4101: E6 12        INC $12		
	LDA $12									;C2/4103: A5 12        LDA $12
	CMP #$08		;8 monsters					;C2/4105: C9 08        CMP #$08		
	BEQ .MonsterStatusTimers						;C2/4107: F0 03        BEQ $410C	
	JMP .LoadMonsterStatsAI							;C2/4109: 4C 2A 3F     JMP $3F2A	
								
.MonsterStatusTimers
	TDC 									;C2/410C: 7B           TDC 		
	TAX 									;C2/410D: AA           TAX 		
	LDA #$04								;C2/410E: A9 04        LDA #$04		
	STA Temp								;C2/4110: 8D 20 26     STA $2620	

.MonStatusLoop														
	LDA Temp								;C2/4113: AD 20 26     LDA $2620	
	JSR CalculateCharOffset							;C2/4116: 20 EC 01     JSR $01EC	
	LDA CharStruct.Status1,X						;C2/4119: BD 1A 20     LDA $201A,X
	AND #$04		;poison						;C2/411C: 29 04        AND #$04		
	BEQ +									;C2/411E: F0 05        BEQ $4125	
	LDA #$01		;poison timer					;C2/4120: A9 01        LDA #$01		
	JSR StartTimerFromTemp							;C2/4122: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/4125: A6 32        LDX $32		
	LDA CharStruct.Status2,X						;C2/4127: BD 1B 20     LDA $201B,X	
	AND #$80		;old						;C2/412A: 29 80        AND #$80		
	BEQ +									;C2/412C: F0 05        BEQ $4133	
	LDA #$06		;old timer					;C2/412E: A9 06        LDA #$06		
	JSR StartTimerFromTemp							;C2/4130: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/4133: A6 32        LDX $32		
	LDA CharStruct.Status2,X						;C2/4135: BD 1B 20     LDA $201B,X	
	AND #$20		;paralyze					;C2/4138: 29 20        AND #$20		
	BEQ +									;C2/413A: F0 05        BEQ $4141	
	LDA #$09		;paralyze timer					;C2/413C: A9 09        LDA #$09		
	JSR StartTimerFromTemp							;C2/413E: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/4141: A6 32        LDX $32		
	LDA CharStruct.Status2,X						;C2/4143: BD 1B 20     LDA $201B,X	
	AND #$04		;mute						;C2/4146: 29 04        AND #$04		
	BEQ +									;C2/4148: F0 05        BEQ $414F	
	LDA #$04		;mute timer					;C2/414A: A9 04        LDA #$04		
	JSR StartTimerFromTemp							;C2/414C: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/414F: A6 32        LDX $32		
	LDA CharStruct.Status3,X						;C2/4151: BD 1C 20     LDA $201C,X	
	AND #$80		;reflect					;C2/4154: 29 80        AND #$80		
	BEQ +									;C2/4156: F0 05        BEQ $415D	
	LDA #$02		;reflect timer					;C2/4158: A9 02        LDA #$02		
	JSR StartTimerFromTemp							;C2/415A: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/415D: A6 32        LDX $32		
	LDA CharStruct.Status3,X						;C2/415F: BD 1C 20     LDA $201C,X	
	AND #$10		;stop						;C2/4162: 29 10        AND #$10		
	BEQ +									;C2/4164: F0 05        BEQ $416B	
	LDA #$00		;stop timer					;C2/4166: A9 00        LDA #$00		
	JSR StartTimerFromTemp							;C2/4168: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/416B: A6 32        LDX $32		
	LDA CharStruct.Status3,X						;C2/416D: BD 1C 20     LDA $201C,X	
	AND #$01		;regen						;C2/4170: 29 01        AND #$01		
	BEQ +									;C2/4172: F0 05        BEQ $4179	
	LDA #$07		;regen timer					;C2/4174: A9 07        LDA #$07		
	JSR StartTimerFromTemp							;C2/4176: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/4179: A6 32        LDX $32		
	LDA CharStruct.Status4,X						;C2/417B: BD 1D 20     LDA $201D,X	
	AND #$10		;countdown					;C2/417E: 29 10        AND #$10		
	BEQ +									;C2/4180: F0 05        BEQ $4187	
	LDA #$03		;countdown timer				;C2/4182: A9 03        LDA #$03		
	JSR StartTimerFromTemp							;C2/4184: 20 A3 41     JSR $41A3	
										
+	LDX AttackerOffset							;C2/4187: A6 32        LDX $32		
	;**bug: checks wrong status byte 3 instead of 4
	LDA CharStruct.Status3,X						;C2/4189: BD 1C 20     LDA $201C,X	
	AND #$08		;Haste due to bug, should be HP leak		;C2/418C: 29 08        AND #$08		
	BEQ +									;C2/418E: F0 05        BEQ $4195	
	LDA #$05		;HP leak timer					;C2/4190: A9 05        LDA #$05		
	JSR StartTimerFromTemp							;C2/4192: 20 A3 41     JSR $41A3	
								
+	INC Temp								;C2/4195: EE 20 26     INC $2620	
	LDA Temp								;C2/4198: AD 20 26     LDA $2620	
	CMP #$0C		;doing slots 4-11 for monsters, 12 is too far	;C2/419B: C9 0C        CMP #$0C		
	BEQ .Ret								;C2/419D: F0 03        BEQ $41A2	
	JMP .MonStatusLoop							;C2/419F: 4C 13 41     JMP $4113	
.Ret	RTS 									;C2/41A2: 60           RTS 
%endsub()
	
%org($C241A3)
;(A: #timer, $2620: index) Starts a status timer for a character
StartTimerFromTemp:
	TAX 								;C2/41A3: AA           TAX 		
	LDA #$01							;C2/41A4: A9 01        LDA #$01		
	STA StatusFixedDur						;C2/41A6: 8D D7 3E     STA $3ED7	
	LDA Temp	;Party index					;C2/41A9: AD 20 26     LDA $2620	
	JMP StartTimer							;C2/41AC: 4C FD 24     JMP $24FD	

%org($C241AF)
;sets up inventory and magic lists
%sub(SetupInventoryMagic)
SetupInventoryMagic:
	TDC 										;C2/41AF: 7B           TDC 		
	TAX 										;C2/41B0: AA           TAX 		
	LDA #$80									;C2/41B1: A9 80        LDA #$80		
											;:					
-	STA InventoryFlags,X								;C2/41B3: 9D 34 2B     STA $2B34,X	
	INX										;C2/41B6: E8           INX		
	CPX #$0100									;C2/41B7: E0 00 01     CPX #$0100	
	BNE -										;C2/41BA: D0 F7        BNE $41B3	
											;.					
	TDC 										;C2/41BC: 7B           TDC 		
	TAX 										;C2/41BD: AA           TAX 		
	STX $0E										;C2/41BE: 86 0E        STX $0E		
											;:					
.InitSpells
	TDC 										;C2/41C0: 7B           TDC 		
	TAY 										;C2/41C1: A8           TAY 		
	LDA #$81									;C2/41C2: A9 81        LDA #$81		
											;:					
-	STA CharSpells.Flags,X								;C2/41C4: 9D 3C 2F     STA $2F3C,X	
	STA CharSpells.Level,X								;C2/41C7: 9D B6 2D     STA $2DB6,X	
	INX 										;C2/41CA: E8           INX 		
	INY 										;C2/41CB: C8           INY 		
	CPY #$0082									;C2/41CC: C0 82 00     CPY #$0082	
	BNE -										;C2/41CF: D0 F3        BNE $41C4	
											;.					
	REP #$20									;C2/41D1: C2 20        REP #$20		
	TXA										;C2/41D3: 8A           TXA		
	CLC										;C2/41D4: 18           CLC		
	ADC #$0208	;next CharSpells struct						;C2/41D5: 69 08 02     ADC #$0208	
	TAX										;C2/41D8: AA           TAX		
	TDC 										;C2/41D9: 7B           TDC 		
	SEP #$20									;C2/41DA: E2 20        SEP #$20		
	INC $0E		;next char index						;C2/41DC: E6 0E        INC $0E		
	LDA $0E										;C2/41DE: A5 0E        LDA $0E		
	CMP #$04	;4 chars							;C2/41E0: C9 04        CMP #$04		
	BNE .InitSpells									;C2/41E2: D0 DC        BNE $41C0	
											;.					
	TDC 										;C2/41E4: 7B           TDC 		
	TAX 										;C2/41E5: AA           TAX 		
	STX $0E										;C2/41E6: 86 0E        STX $0E		
											;:					
.InitCmdFlags	
	TDC 										;C2/41E8: 7B           TDC 		
	TAY 										;C2/41E9: A8           TAY 		
	LDA #$80									;C2/41EA: A9 80        LDA #$80		
											;:					
-	STA CharCommands.Flags,X							;C2/41EC: 9D 6C 37     STA $376C,X	
	INX										;C2/41EF: E8           INX		
	INY 										;C2/41F0: C8           INY 		
	CPY #$0004	;4 bytes of command data					;C2/41F1: C0 04 00     CPY #$0004	
	BNE -										;C2/41F4: D0 F6        BNE $41EC	
											;.					
	TXA										;C2/41F6: 8A           TXA		
	CLC 										;C2/41F7: 18           CLC 		
	ADC #$10	;next CharCommands Struct					;C2/41F8: 69 10        ADC #$10		
	TAX 										;C2/41FA: AA           TAX 		
	INC $0E		;next char index						;C2/41FB: E6 0E        INC $0E
	LDA $0E										;C2/41FD: A5 0E        LDA $0E
	CMP #$04	;4 chars							;C2/41FF: C9 04        CMP #$04
	BNE .InitCmdFlags								;C2/4201: D0 E5        BNE $41E8	

	TDC 										;C2/4203: 7B           TDC 		
	TAX              								;C2/4204: AA           TAX              
	STX $0E          								;C2/4205: 86 0E        STX $0E          

.InitHandItemFlags									;:				
	TDC 										;C2/4207: 7B           TDC 		
	TAY              								;C2/4208: A8           TAY              
	LDA #$80									;C2/4209: A9 80        LDA #$80		
	
-	STA HandItems.Flags,X								;C2/420B: 9D B4 37     STA $37B4,X
	INX 										;C2/420E: E8           INX 
	INY 										;C2/420F: C8           INY 
	CPY #$0002	;structure has room for 4 values but only 2 hands are used	;C2/4210: C0 02 00     CPY #$0002
	BNE -										;C2/4213: D0 F6        BNE $420B
	
	TXA										;C2/4215: 8A           TXA
	CLC 										;C2/4216: 18           CLC 
	ADC #$0A	;next charcter in HandItems					;C2/4217: 69 0A        ADC #$0A		
	TAX 										;C2/4219: AA           TAX 
	INC $0E		;next char index						;C2/421A: E6 0E        INC $0E
	LDA $0E										;C2/421C: A5 0E        LDA $0E
	CMP #$04	;4 chars							;C2/421E: C9 04        CMP #$04
	BNE .InitHandItemFlags								;C2/4220: D0 E5        BNE $4207
	
	TDC 										;C2/4222: 7B           TDC 		
	TAY 										;C2/4223: A8           TAY 		
	TAX 										;C2/4224: AA           TAX 		
	STY $0E										;C2/4225: 84 0E        STY $0E	
	
.CopyEquipInfo
	STZ $0E										;C2/4227: 64 0E        STZ $0E		
	PHX 										;C2/4229: DA           PHX 		
											;:					
-	LDA CharStruct.EquipWeapons,X							;C2/422A: BD 40 20     LDA $2040,X	
	STA CharEquippable.Weapons,Y							;C2/422D: 99 99 41     STA $4199,Y
	INX 										;C2/4230: E8           INX 
	INY 										;C2/4231: C8           INY 
	INC $0E		;next byte							;C2/4232: E6 0E        INC $0E
	LDA $0E										;C2/4234: A5 0E        LDA $0E
	CMP #$04	;4 bytes of weapon/armor equip data				;C2/4236: C9 04        CMP #$04
	BNE -										;C2/4238: D0 F0        BNE $422A
											;.					
	PLX 										;C2/423A: FA           PLX 		
	JSR NextCharOffset								;C2/423B: 20 E0 01     JSR $01E0	
	INC $0F		;next char index						;C2/423E: E6 0F        INC $0F
	LDA $0F										;C2/4240: A5 0F        LDA $0F
	CMP #$04	;4 chars							;C2/4242: C9 04        CMP #$04
	BNE .CopyEquipInfo								;C2/4244: D0 E1        BNE $4227
											;.					
	JSL CleanupFieldItems_D0	;wtf, code in the data bank			;C2/4246: 22 78 EF D0  JSL $D0EF78	
	TDC 			;it sets items with qty 0 to id 0			;C2/424A: 7B           TDC 		
	TAX 			;and sets items with id 0 to qty 0			;C2/424B: AA           TAX 		
	TAY 										;C2/424C: A8           TAY 		
											;:					
-	LDA FieldItems,X								;C2/424D: BD 40 06     LDA $0640,X	
	STA InventoryItems,X								;C2/4250: 9D 34 27     STA $2734,X
	INX 										;C2/4253: E8           INX 
	CPX #$0200		;512, includes item quantities				;C2/4254: E0 00 02     CPX #$0200
	BNE -										;C2/4257: D0 F4        BNE $424D	
											;.					
-	LDA InventoryItems,Y								;C2/4259: B9 34 27     LDA $2734,Y	
	JSR SetupInventoryInfo	;sets InventoryFlags and Temp (equipment type)		;C2/425C: 20 FA 03     JSR $03FA	
	INY 										;C2/425F: C8           INY 
	CPY #$0100									;C2/4260: C0 00 01     CPY #$0100	
	BNE -										;C2/4263: D0 F4        BNE $4259
											;.					
	TDC										;C2/4265: 7B           TDC		
	TAY										;C2/4266: A8           TAY		
	STY $08										;C2/4267: 84 08        STY $08		
-	LDY $08										;C2/4269: A4 08        LDY $08		
	JSR GetItemUsableY	;after, A now holds byte for InventoryUsable		;C2/426B: 20 69 03     JSR $0369	
	LDY $08										;C2/426E: A4 08        LDY $08		
	STA Temp,Y									;C2/4270: 99 20 26     STA $2620,Y	
	INC $08										;C2/4273: E6 08        INC $08		
	LDA $08										;C2/4275: A5 08        LDA $08		
	BNE -										;C2/4277: D0 F0        BNE $4269	
											;.					
	TDC 										;C2/4279: 7B           TDC 		
	TAX										;C2/427A: AA           TAX		
											;: 					
-	LDA Temp,X									;C2/427B: BD 20 26     LDA $2620,X	
	STA InventoryUsable,X								;C2/427E: 9D 34 2C     STA $2C34,X
	INX 										;C2/4281: E8           INX 
	CPX #$0100									;C2/4282: E0 00 01     CPX #$0100
	BNE -										;C2/4285: D0 F4        BNE $427B

	TDC 										;C2/4287: 7B           TDC 		
	TAX 										;C2/4288: AA           TAX 		
	STX $0E		;MagicBits Index						;C2/4289: 86 0E        STX $0E		
	STX $10		;finished spell count						;C2/428B: 86 10        STX $10		
	STX $18		;blue magic flag						;C2/428D: 86 18        STX $18		
	INX 										;C2/428F: E8           INX 		
	STX $14		;current spell level 1-6					;C2/4290: 86 14        STX $14		

.MagicBitsLoop															
	LDA $0E		;MagicBits Index						;C2/4292: A5 0E        LDA $0E		
	CMP #$0C	;12 bytes of non-blue magic					;C2/4294: C9 0C        CMP #$0C		
	BCC +										;C2/4296: 90 0B        BCC $42A3	
	SEC 										;C2/4298: 38           SEC 		
	LDA $0E										;C2/4299: A5 0E        LDA $0E		
	SBC #$0C	;-12	back to start						;C2/429B: E9 0C        SBC #$0C		
	CLC 										;C2/429D: 18           CLC 		
	ADC #$10	;+16	start of blue magic					;C2/429E: 69 10        ADC #$10		
	TAX 										;C2/42A0: AA           TAX 		
	BRA ++										;C2/42A1: 80 02        BRA $42A5	

+	LDX $0E		;MagicBits Index						;C2/42A3: A6 0E        LDX $0E		

++	LDA MagicBits,X									;C2/42A5: BD 50 09     LDA $0950,X	
	STA $12		;current byte of MagicBits					;C2/42A8: 85 12        STA $12		
	LDY #$0008	;bit counter							;C2/42AA: A0 08 00     LDY #$0008	
																
.ProcessMagicBit
	LDX $10										;C2/42AD: A6 10        LDX $10		
	CPX #$0081									;C2/42AF: E0 81 00     CPX #$0081	
	BNE .CheckMagicBit								;C2/42B2: D0 03        BNE $42B7
	JMP .EnableSpells								;C2/42B4: 4C 67 43     JMP $4367	

.CheckMagicBit
	ASL $12		;current byte of MagicBits					;C2/42B7: 06 12        ASL $12		
	BCS .CheckBlue									;C2/42B9: B0 10        BCS $42CB	
	LDA #$FF									;C2/42BB: A9 FF        LDA #$FF		
	STA CharSpells[0].ID,X								;C2/42BD: 9D 34 2D     STA $2D34,X
	STA CharSpells[1].ID,X								;C2/42C0: 9D BE 2F     STA $2FBE,X
	STA CharSpells[2].ID,X								;C2/42C3: 9D 48 32     STA $3248,X
	STA CharSpells[3].ID,X								;C2/42C6: 9D D2 34     STA $34D2,X
	BRA .NextSpell									;C2/42C9: 80 6B        BRA $4336

.CheckBlue									
	TXA 										;C2/42CB: 8A           TXA 		
	CMP #$5F	;end of non-blue magic						;C2/42CC: C9 5F        CMP #$5F		
	BCC .SetupSpell									;C2/42CE: 90 18        BCC $42E8	
	SEC 										;C2/42D0: 38           SEC 
	SBC #$5F	;remove offset from other spells so first blue is 0		;C2/42D1: E9 5F        SBC #$5F		
	CLC 										;C2/42D3: 18           CLC 
	ADC #$80	;first blue now $80						;C2/42D4: 69 80        ADC #$80		
	PHA 										;C2/42D6: 48           PHA 		
	LDA #$FF	;clear the "original" blue magic position			;C2/42D7: A9 FF        LDA #$FF		
	STA CharSpells[0].ID,X								;C2/42D9: 9D 34 2D     STA $2D34,X
	STA CharSpells[1].ID,X								;C2/42DC: 9D BE 2F     STA $2FBE,X
	STA CharSpells[2].ID,X								;C2/42DF: 9D 48 32     STA $3248,X
	STA CharSpells[3].ID,X								;C2/42E2: 9D D2 34     STA $34D2,X
	PLA 										;C2/42E5: 68           PLA 		
	DEX 		;blue spells offset the whole structure by -2			;C2/42E6: CA           DEX 		
	DEX		;because there's 2 empty bits in the first blue byte		;C2/42E7: CA           DEX		

.SetupSpell									
	STX $20		;temp index							;C2/42E8: 86 20        STX $20		
	STA CharSpells[0].ID,X								;C2/42EA: 9D 34 2D     STA $2D34,X
	STA CharSpells[1].ID,X								;C2/42ED: 9D BE 2F     STA $2FBE,X
	STA CharSpells[2].ID,X								;C2/42F0: 9D 48 32     STA $3248,X
	STA CharSpells[3].ID,X								;C2/42F3: 9D D2 34     STA $34D2,X
	LDA $14		;current spell level						;C2/42F6: A5 14        LDA $14		
	STA CharSpells[0].Level,X							;C2/42F8: 9D B6 2D     STA $2DB6,X
	STA CharSpells[1].Level,X							;C2/42FB: 9D 40 30     STA $3040,X
	STA CharSpells[2].Level,X							;C2/42FE: 9D CA 32     STA $32CA,X
	STA CharSpells[3].Level,X							;C2/4301: 9D 54 35     STA $3554,X
	LDA CharSpells[0].ID,X								;C2/4304: BD 34 2D     LDA $2D34,X	
	REP #$20									;C2/4307: C2 20        REP #$20		
	JSR ShiftMultiply_8								;C2/4309: 20 B6 01     JSR $01B6	
	TAX 										;C2/430C: AA           TAX 		
	TDC 										;C2/430D: 7B           TDC 		
	SEP #$20									;C2/430E: E2 20        SEP #$20		
	LDA ROMMagicInfo.Targetting,X							;C2/4310: BF 80 0B D1  LDA $D10B80,X	
	PHA 										;C2/4314: 48           PHA 		
	LDA ROMMagicInfo.MPCost,X							;C2/4315: BF 83 0B D1  LDA $D10B83,X	
	AND #$7F	;just MP Cost							;C2/4319: 29 7F        AND #$7F		
	LDX $20										;C2/431B: A6 20        LDX $20		
	STA CharSpells[0].MP,X								;C2/431D: 9D 38 2E     STA $2E38,X	
	STA CharSpells[1].MP,X								;C2/4320: 9D C2 30     STA $30C2,X
	STA CharSpells[2].MP,X								;C2/4323: 9D 4C 33     STA $334C,X
	STA CharSpells[3].MP,X								;C2/4326: 9D D6 35     STA $35D6,X
	PLA 										;C2/4329: 68           PLA 
	STA CharSpells[0].Targetting,X							;C2/432A: 9D BA 2E     STA $2EBA,X
	STA CharSpells[1].Targetting,X							;C2/432D: 9D 44 31     STA $3144,X
	STA CharSpells[2].Targetting,X							;C2/4330: 9D CE 33     STA $33CE,X
	STA CharSpells[3].Targetting,X							;C2/4333: 9D 58 36     STA $3658,X

.NextSpell	
	INC $15		;counter for spells in a spell Level				;C2/4336: E6 15        INC $15		
	LDA $15										;C2/4338: A5 15        LDA $15
	CMP #$03	;max 3								;C2/433A: C9 03        CMP #$03		
	BNE .NextSpellCount								;C2/433C: D0 0E        BNE $434C	
	STZ $15										;C2/433E: 64 15        STZ $15		
	INC $14		;next spell level						;C2/4340: E6 14        INC $14		
	LDA $14										;C2/4342: A5 14        LDA $14
	CMP #$07	;only 6 spell levels						;C2/4344: C9 07        CMP #$07		
	BNE .NextSpellCount								;C2/4346: D0 04        BNE $434C	
	LDA #$01	;reset to spell level 1						;C2/4348: A9 01        LDA #$01		
	STA $14										;C2/434A: 85 14        STA $14		

.NextSpellCount
	INC $10		;finished spell count						;C2/434C: E6 10        INC $10
	LDA $18		;blue magic flag						;C2/434E: A5 18        LDA $18		
	BNE .NextSpellBit								;C2/4350: D0 0A        BNE $435C	
	LDA $10										;C2/4352: A5 10        LDA $10
	CMP #$5F	;last non-blue magic spell					;C2/4354: C9 5F        CMP #$5F		
	BCC .NextSpellBit								;C2/4356: 90 04        BCC $435C	
	INC $18		;blue magic flag						;C2/4358: E6 18        INC $18		
	BRA .NextSpellByte								;C2/435A: 80 06        BRA $4362

.NextSpellBit									
	DEY 		;bit counter							;C2/435C: 88           DEY 		
	BEQ .NextSpellByte								;C2/435D: F0 03        BEQ $4362
	JMP .ProcessMagicBit								;C2/435F: 4C AD 42     JMP $42AD

.NextSpellByte															
	INC $0E		;MagicBits Index (next)						;C2/4362: E6 0E        INC $0E		
	JMP .MagicBitsLoop								;C2/4364: 4C 92 42     JMP $4292	

.EnableSpells															
	TDC 										;C2/4367: 7B           TDC 		
	TAY 										;C2/4368: A8           TAY 		
	TAX 										;C2/4369: AA           TAX 		

.UnpackEnableSpells											;:			
	STZ $0E										;C2/436A: 64 0E        STZ $0E		
	PHX 										;C2/436C: DA           PHX 		

.UnpackOne											;:				
	LDA CharStruct.EnableSpells,X							;C2/436D: BD 3D 20     LDA $203D,X	
	PHA 										;C2/4370: 48           PHA 		
	JSR ShiftDivide_16								;C2/4371: 20 BE 01     JSR $01BE	
	INC 										;C2/4374: 1A           INC 		
	STA Temp,Y	;high 4 bits to first temp byte					;C2/4375: 99 20 26     STA $2620,Y	
	PLA 										;C2/4378: 68           PLA 		
	AND #$0F									;C2/4379: 29 0F        AND #$0F		
	INC 										;C2/437B: 1A           INC 		
	STA Temp+1,Y	;low 4 bits to second temp byte					;C2/437C: 99 21 26     STA $2621,Y	
	INY 										;C2/437F: C8           INY 		
	INY 										;C2/4380: C8           INY 		
	INX 										;C2/4381: E8           INX 		
	INC $0E										;C2/4382: E6 0E        INC $0E		
	LDA $0E										;C2/4384: A5 0E        LDA $0E
	CMP #$03	;3 bytes for 6 magic types					;C2/4386: C9 03        CMP #$03		
	BNE .UnpackOne									;C2/4388: D0 E3        BNE $436D	
											;.					
	PLX 										;C2/438A: FA           PLX 		
	JSR NextCharOffset								;C2/438B: 20 E0 01     JSR $01E0	
	CPY #$0018	;6 bytes * 4 characters						;C2/438E: C0 18 00     CPY #$0018	
	BNE .UnpackEnableSpells								;C2/4391: D0 D7        BNE $436A	
											;.					
	TDC										;C2/4393: 7B           TDC		
	TAX 										;C2/4394: AA           TAX 		
	TAY 										;C2/4395: A8           TAY 		
	STY $12		;character index						;C2/4396: 84 12        STY $12		
	STY HalfMP	;								;C2/4398: 84 3D        STY $3D		
	STY HalfMP+2									;C2/439A: 84 3F        STY $3F		

.AllCharSpellConditions											;:			
	STZ $1A		;half mp for current character					;C2/439C: 64 1A        STZ $1A		
	PHX 										;C2/439E: DA           PHX 		
	LDA $12		;character index						;C2/439F: A5 12        LDA $12		
	REP #$20									;C2/43A1: C2 20        REP #$20		
	JSR ShiftMultiply_128								;C2/43A3: 20 B2 01     JSR $01B2	
	TAX 										;C2/43A6: AA           TAX 		
	TDC 										;C2/43A7: 7B           TDC 		
	SEP #$20									;C2/43A8: E2 20        SEP #$20		
	LDA CharStruct.ArmorProperties,X						;C2/43AA: BD 39 20     LDA $2039,X	
	AND #$08	;half mp cost							;C2/43AD: 29 08        AND #$08		
	BEQ +										;C2/43AF: F0 07        BEQ $43B8	
	LDA $12		;character index						;C2/43B1: A5 12        LDA $12		
	TAX 										;C2/43B3: AA           TAX 		
	INC HalfMP,X									;C2/43B4: F6 3D        INC $3D,X	
	INC $1A		;half mp for current character					;C2/43B6: E6 1A        INC $1A		
	
+	PLX 										;C2/43B8: FA           PLX 		
	STZ $10			;spell type counter					;C2/43B9: 64 10        STZ $10		
	STZ $14			;spell counter						;C2/43BB: 64 14        STZ $14		

.CheckAllSpellConditions											;:		
	STZ $0E										;C2/43BD: 64 0E        STZ $0E		

.CheckSpellCond										;:					
	LDA $14			;spell counter						;C2/43BF: A5 14        LDA $14		
	CMP #$57		;stop at 87 spells					;C2/43C1: C9 57        CMP #$57		
	BEQ .NextSpellType								;C2/43C3: F0 34        BEQ $43F9	
	LDA CharSpells.Level,X								;C2/43C5: BD B6 2D     LDA $2DB6,X	
	CMP Temp,Y		;magic level enabled for current Type			;C2/43C8: D9 20 26     CMP $2620,Y
	BCS .LevelFail									;C2/43CB: B0 18        BCS $43E5
	LDA EncounterInfo.Flags								;C2/43CD: AD FE 3E     LDA $3EFE
	AND #$04	;Always Void							;C2/43D0: 29 04        AND #$04
	BNE .NextSpellCond								;C2/43D2: D0 1A        BNE $43EE
	STZ CharSpells.Flags,X								;C2/43D4: 9E 3C 2F     STZ $2F3C,X
	LDA $1A		;half mp for current character					;C2/43D7: A5 1A        LDA $1A
	BEQ .NextSpellCond								;C2/43D9: F0 13        BEQ $43EE
	LSR CharSpells.MP,X								;C2/43DB: 5E 38 2E     LSR $2E38,X
	BCC .NextSpellCond								;C2/43DE: 90 0E        BCC $43EE
	INC CharSpells.MP,X	;min 1							;C2/43E0: FE 38 2E     INC $2E38,X
	BRA .NextSpellCond								;C2/43E3: 80 09        BRA $43EE

.LevelFail
	LDA #$FF									;C2/43E5: A9 FF        LDA #$FF
	STA CharSpells.ID,X								;C2/43E7: 9D 34 2D     STA $2D34,X
	INC 										;C2/43EA: 1A           INC 
	STA CharSpells.MP,X								;C2/43EB: 9D 38 2E     STA $2E38,X

.NextSpellCond
	INC $14			;spell counter						;C2/43EE: E6 14        INC $14
	INX 										;C2/43F0: E8           INX 
	INC $0E										;C2/43F1: E6 0E        INC $0E
	LDA $0E										;C2/43F3: A5 0E        LDA $0E
	CMP #$12		;18 spells per type					;C2/43F5: C9 12        CMP #$12		
	BNE .CheckSpellCond								;C2/43F7: D0 C6        BNE $43BF

.NextSpellType									
	INY 			;index for magic level enabled table at Temp		;C2/43F9: C8           INY 
	INC $10			;spell type counter					;C2/43FA: E6 10        INC $10
	LDA $10										;C2/43FC: A5 10        LDA $10
	CMP #$05		;checking first 5 types 				;C2/43FE: C9 05        CMP #$05		
	BNE .CheckAllSpellConditions							;C2/4400: D0 BB        BNE $43BD
																
	REP #$20									;C2/4402: C2 20        REP #$20
	TXA 										;C2/4404: 8A           TXA 
	CLC 										;C2/4405: 18           CLC 
	ADC #$0233		;$57 + $233 is the size of the CharSpells Struct	;C2/4406: 69 33 02     ADC #$0233
	TAX 			;next character in CharSpells				;C2/4409: AA           TAX 
	TDC 										;C2/440A: 7B           TDC 
	SEP #$20									;C2/440B: E2 20        SEP #$20
	INY 										;C2/440D: C8           INY 
	INC $12			;character index					;C2/440E: E6 12        INC $12
	LDA $12										;C2/4410: A5 12        LDA $12
	CMP #$04		;4 characters						;C2/4412: C9 04        CMP #$04		
	BNE .AllCharSpellConditions							;C2/4414: D0 86        BNE $439C
											;.					
	LDA EncounterInfo.Flags								;C2/4416: AD FE 3E     LDA $3EFE	
	AND #$04		;always void						;C2/4419: 29 04        AND #$04		
	BNE .DoneSongBlue								;C2/441B: D0 46        BNE $4463	
	STZ $0E			;character index					;C2/441D: 64 0E        STZ $0E		
	LDX #$0057		;first spell after summons (songs then blue)		;C2/441F: A2 57 00     LDX #$0057	
	STX $12			;first song offset					;C2/4422: 86 12        STX $12		
											;:					
.AllSongBlue
	LDA $0E			;character index					;C2/4424: A5 0E        LDA $0E		
	TAX 										;C2/4426: AA           TAX 
	LDA HalfMP,X									;C2/4427: B5 3D        LDA $3D,X	
	STA $1A			;half mp for current character				;C2/4429: 85 1A        STA $1A
	STZ $10			;spell counter						;C2/442B: 64 10        STZ $10		
	LDX $12			;first song offset					;C2/442D: A6 12        LDX $12		

.SongBlue										;:					
	LDA CharSpells.ID,X								;C2/442F: BD 34 2D     LDA $2D34,X
	CMP #$FF									;C2/4432: C9 FF        CMP #$FF
	BEQ .NextSongBlue								;C2/4434: F0 0F        BEQ $4445
	STZ CharSpells.Flags,X								;C2/4436: 9E 3C 2F     STZ $2F3C,X
	LDA $1A			;half mp for current character				;C2/4439: A5 1A        LDA $1A
	BEQ .NextSongBlue								;C2/443B: F0 08        BEQ $4445
	LSR CharSpells.MP,X								;C2/443D: 5E 38 2E     LSR $2E38,X
	BCC .NextSongBlue								;C2/4440: 90 03        BCC $4445
	INC CharSpells.MP,X	;min 1							;C2/4442: FE 38 2E     INC $2E38,X

.NextSongBlue
	INX 			;charspell index					;C2/4445: E8           INX 
	INC $10			;spell counter						;C2/4446: E6 10        INC $10
	LDA $10										;C2/4448: A5 10        LDA $10
	CMP #$28		;40 spells (total of 128)				;C2/444A: C9 28        CMP #$28		
	BNE .SongBlue									;C2/444C: D0 E1        BNE $442F
					
	REP #$20									;C2/444E: C2 20        REP #$20		
	CLC 										;C2/4450: 18           CLC 
	LDA $12			;first song offset					;C2/4451: A5 12        LDA $12
	ADC #$028A		;size of CharSpells struct				;C2/4453: 69 8A 02     ADC #$028A	
	STA $12			;first song offset for next character			;C2/4456: 85 12        STA $12		
	TDC 										;C2/4458: 7B           TDC 
	SEP #$20									;C2/4459: E2 20        SEP #$20		
	INC $0E			;character index					;C2/445B: E6 0E        INC $0E
	LDA $0E										;C2/445D: A5 0E        LDA $0E		
	CMP #$04		;4 characters						;C2/445F: C9 04        CMP #$04		
	BNE .AllSongBlue								;C2/4461: D0 C1        BNE $4424	
				
.DoneSongBlue															
	TDC 										;C2/4463: 7B           TDC 		
	TAX 										;C2/4464: AA           TAX 		
	TAY 										;C2/4465: A8           TAY 		
	STY $0E										;C2/4466: 84 0E        STY $0E		
	STY $10			;character counter					;C2/4468: 84 10        STY $10		
											;:					
.AllSetupCmds
	STZ $11			;command counter					;C2/446A: 64 11        STZ $11		
	LDX $0E			;CharStruct offset					;C2/446C: A6 0E        LDX $0E		
											;:					
.SetupCmds
	PHX 										;C2/446E: DA           PHX 		
	LDA CharStruct.BattleCommands,X							;C2/446F: BD 16 20     LDA $2016,X	
	BEQ .NextCmd									;C2/4472: F0 2A        BEQ $449E	
	CMP #$50		;there are no commands $50 or higher			;C2/4474: C9 50        CMP #$50		
	BCS .NextCmd									;C2/4476: B0 26        BCS $449E	
	CMP #$1D		;Catch Command						;C2/4478: C9 1D        CMP #$1D		
	BNE .OtherCmd									;C2/447A: D0 0F        BNE $448B	
	LDX $0E										;C2/447C: A6 0E        LDX $0E		
	LDA CharStruct.CaughtMonster,X							;C2/447E: BD 15 20     LDA $2015,X	
	CMP #$FF		;no monster caught					;C2/4481: C9 FF        CMP #$FF		
	BEQ .Catch									;C2/4483: F0 04        BEQ $4489	
	LDA #$1E		;Release Command					;C2/4485: A9 1E        LDA #$1E		
	BRA .OtherCmd									;C2/4487: 80 02        BRA $448B

.Catch
	LDA #$1D									;C2/4489: A9 1D        LDA #$1D		
.OtherCmd	
	STA CharCommands.ID,Y								;C2/448B: 99 5C 37     STA $375C,Y	
	REP #$20									;C2/448E: C2 20        REP #$20		
	JSR ShiftMultiply_8								;C2/4490: 20 B6 01     JSR $01B6	
	TAX 										;C2/4493: AA           TAX 		
	TDC 										;C2/4494: 7B           TDC 		
	SEP #$20									;C2/4495: E2 20        SEP #$20		
	LDA ROMAbilityInfo.Targetting,X							;C2/4497: BF E0 59 D1  LDA $D159E0,X	
	STA CharCommands.Targetting,Y							;C2/449B: 99 68 37     STA $3768,Y	

.NextCmd
	PLX 			;CharStruct offset					;C2/449E: FA           PLX 		
	INY 			;next command id slot					;C2/449F: C8           INY 		
	INX 			;next command byte in CharStruct			;C2/44A0: E8           INX 
	INC $11			;command counter					;C2/44A1: E6 11        INC $11		
	LDA $11										;C2/44A3: A5 11        LDA $11		
	CMP #$04		;4 commands						;C2/44A5: C9 04        CMP #$04		
	BNE .SetupCmds									;C2/44A7: D0 C5        BNE $446E	
											;.					
	LDX $0E										;C2/44A9: A6 0E        LDX $0E		
	JSR NextCharOffset								;C2/44AB: 20 E0 01     JSR $01E0	
	STX $0E										;C2/44AE: 86 0E        STX $0E		
	TYA 										;C2/44B0: 98           TYA 		
	CLC 										;C2/44B1: 18           CLC 		
	ADC #$10		;next CharCommands character				;C2/44B2: 69 10        ADC #$10		
	TAY 										;C2/44B4: A8           TAY 		
	INC $10			;character counter					;C2/44B5: E6 10        INC $10		
	LDA $10										;C2/44B7: A5 10        LDA $10
	CMP #$04		;4 characters						;C2/44B9: C9 04        CMP #$04		
	BNE .AllSetupCmds								;C2/44BB: D0 AD        BNE $446A	
	
	TDC 										;C2/44BD: 7B           TDC 		
	TAX 										;C2/44BE: AA           TAX 		
	TAY 										;C2/44BF: A8           TAY 		
	STY $0E										;C2/44C0: 84 0E        STY $0E		
	STY $10			;character counter					;C2/44C2: 84 10        STY $10
	
.AllSetupHandItems
	STZ $11			;hand counter						;C2/44C4: 64 11        STZ $11		
	LDX $0E			;charstruct offset					;C2/44C6: A6 0E        LDX $0E

.SetupHandItems													
	PHX 										;C2/44C8: DA           PHX 		
	LDA CharStruct.RHWeapon,X							;C2/44C9: BD 13 20     LDA $2013,X	
	BNE +										;C2/44CC: D0 03        BNE $44D1	
	LDA CharStruct.RHShield,X							;C2/44CE: BD 11 20     LDA $2011,X	
+	CMP #$01									;C2/44D1: C9 01        CMP #$01		
	BNE +										;C2/44D3: D0 01        BNE $44D6	
	TDC 			;item 1 -> 0						;C2/44D5: 7B           TDC 		
+	STA HandItems.ID,Y								;C2/44D6: 99 AC 37     STA $37AC,Y	
	PHA 										;C2/44D9: 48           PHA 		
	CMP #$80									;C2/44DA: C9 80        CMP #$80		
	BCC .Weapon									;C2/44DC: 90 1D        BCC $44FB	
	SEC 										;C2/44DE: 38           SEC 		
	SBC #$80		;remove armor offset					;C2/44DF: E9 80        SBC #$80		
	REP #$20									;C2/44E1: C2 20        REP #$20		
	JSR ShiftMultiply_4								;C2/44E3: 20 B7 01     JSR $01B7	
	STA $12										;C2/44E6: 85 12        STA $12		
	ASL 										;C2/44E8: 0A           ASL 		
	CLC 										;C2/44E9: 18           CLC 
	ADC $12										;C2/44EA: 65 12        ADC $12		
	TAX 			;Armor ID *12						;C2/44EC: AA           TAX 		
	TDC 										;C2/44ED: 7B           TDC 		
	SEP #$20									;C2/44EE: E2 20        SEP #$20		
	LDA #$5A									;C2/44F0: A9 5A        LDA #$5A		
	STA HandItems.Flags,Y								;C2/44F2: 99 B4 37     STA $37B4,Y	
	LDA !ROMArmor.EquipmentType,X							;C2/44F5: BF 02 06 D1  LDA $D10602,X	
	BRA .SetHandUsable								;C2/44F9: 80 32        BRA $452D		

.Weapon
	REP #$20									;C2/44FB: C2 20        REP #$20		
	JSR ShiftMultiply_4        							;C2/44FD: 20 B7 01     JSR $01B7    
	STA $12          								;C2/4500: 85 12        STA $12      
	ASL              								;C2/4502: 0A           ASL          
	CLC              								;C2/4503: 18           CLC          
	ADC $12          								;C2/4504: 65 12        ADC $12      
	TAX              	;Weapon ID *12						;C2/4506: AA           TAX          
	TDC              								;C2/4507: 7B           TDC          
	SEP #$20         								;C2/4508: E2 20        SEP #$20     
	LDA !ROMWeapons.Targetting,X							;C2/450A: BF 00 00 D1  LDA $D10000,X
	STA HandItems.Targetting,Y							;C2/450E: 99 B2 37     STA $37B2,Y
	LDA !ROMWeapons.DoubleGrip,X							;C2/4511: BF 04 00 D1  LDA $D10004,X
	AND #$80		;double grip bit					;C2/4515: 29 80        AND #$80		
	JSR ShiftDivide_32	;shift to 3rd bit					;C2/4517: 20 BD 01     JSR $01BD	
	STA HandItems.Flags,Y								;C2/451A: 99 B4 37     STA $37B4,Y
	LDA !ROMWeapons.EquipmentType,X							;C2/451D: BF 02 00 D1  LDA $D10002,X
	PHA 										;C2/4521: 48           PHA 		
	AND #$C0			;usable? and throwable				;C2/4522: 29 C0        AND #$C0		
	ORA #$1A			;set some more bits ?				;C2/4524: 09 1A        ORA #$1A		
	ORA HandItems.Flags,Y	;double grip bit from before				;C2/4526: 19 B4 37     ORA $37B4,Y
	STA HandItems.Flags,Y								;C2/4529: 99 B4 37     STA $37B4,Y
	PLA 			;equipment type						;C2/452C: 68           PLA 		
	
.SetHandUsable
	JSR GetItemUsableA								;C2/452D: 20 5E 45     JSR $455E	
	STA HandItems.Usable,Y								;C2/4530: 99 B6 37     STA $37B6,Y
	PLA 			;current hand's item id					;C2/4533: 68           PLA 		
	BEQ .NextHand									;C2/4534: F0 05        BEQ $453B	
	TDC 										;C2/4536: 7B           TDC 		
	INC 										;C2/4537: 1A           INC 		
	STA HandItems.Level,Y								;C2/4538: 99 AE 37     STA $37AE,Y

.NextHand
	PLX 										;C2/453B: FA           PLX 		
	INY 			;structure offsets increase to left hand		;C2/453C: C8           INY 
	INX 										;C2/453D: E8           INX 
	INC $11			;hand counter						;C2/453E: E6 11        INC $11
	LDA $11										;C2/4540: A5 11        LDA $11
	CMP #$02		;2 hands to process					;C2/4542: C9 02        CMP #$02
	BNE .SetupHandItems								;C2/4544: D0 82        BNE $44C8
											;.					
	LDX $0E			;charstruct offset					;C2/4546: A6 0E        LDX $0E		
	JSR NextCharOffset								;C2/4548: 20 E0 01     JSR $01E0	
	STX $0E										;C2/454B: 86 0E        STX $0E		
	TYA 										;C2/454D: 98           TYA 
	CLC 										;C2/454E: 18           CLC 
	ADC #$0A		;next HandItems character				;C2/454F: 69 0A        ADC #$0A
	TAY 										;C2/4551: A8           TAY 
	INC $10			;character counter					;C2/4552: E6 10        INC $10
	LDA $10										;C2/4554: A5 10        LDA $10
	CMP #$04		;4 characters						;C2/4556: C9 04        CMP #$04
	BEQ .Ret									;C2/4558: F0 03        BEQ $455D
	JMP .AllSetupHandItems								;C2/455A: 4C C4 44     JMP $44C4	
	
.Ret	RTS 										;C2/455D: 60           RTS 
%endsub()

%org($C2455E)
;Calculate Item Usability
;(A: item data equipment type (byte 2/12), returns A = Useable byte, 2 bits per char)
%sub(GetItemUsableA)
GetItemUsableA:
	PHY 									;C2/455E: 5A           PHY 		
	AND #$3F		;strip flags					;C2/455F: 29 3F        AND #$3F		
	JSR ShiftMultiply_4							;C2/4561: 20 B7 01     JSR $01B7	
	TAX 									;C2/4564: AA           TAX 		
	TDC 									;C2/4565: 7B           TDC 		
	TAY 									;C2/4566: A8           TAY 		
										;:					
-	LDA !ROMItemEquippable,X						;C2/4567: BF 80 24 D1  LDA $D12480,X	
	STA !TempEquippable,Y							;C2/456B: 99 20 27     STA $2720,Y	
	INX 									;C2/456E: E8           INX 		
	INY 									;C2/456F: C8           INY 
	CPY #$0004		;2 weapon bytes, 2 armor bytes			;C2/4570: C0 04 00     CPY #$0004	
	BNE -									;C2/4573: D0 F2        BNE $4567	
										;.					
	TDC									;C2/4575: 7B           TDC		
	TAX 									;C2/4576: AA           TAX 		
	TAY 									;C2/4577: A8           TAY 		
	LDA #$AA		;usable for none				;C2/4578: A9 AA        LDA #$AA		
	STA $14			;in-progress usable byte			;C2/457A: 85 14        STA $14		

.DetermineEquippableLoop
	LDA CharEquippable.Weapons,X						;C2/457C: BD 99 41     LDA $4199,X	
	AND TempEquippable.Weapons,Y						;C2/457F: 39 20 27     AND $2720,Y	
	BNE .Match								;C2/4582: D0 18        BNE $459C	
	LDA CharEquippable.Weapons+1,X						;C2/4584: BD 9A 41     LDA $419A,X	
	AND TempEquippable.Weapons+1,Y						;C2/4587: 39 21 27     AND $2721,Y	
	BNE .Match								;C2/458A: D0 10        BNE $459C	
	LDA CharEquippable.Armor,X						;C2/458C: BD 9B 41     LDA $419B,X	
	AND TempEquippable.Armor,Y						;C2/458F: 39 22 27     AND $2722,Y	
	BNE .Match								;C2/4592: D0 08        BNE $459C	
	LDA CharEquippable.Armor+1,X						;C2/4594: BD 9C 41     LDA $419C,X	
	AND TempEquippable.Armor+1,Y						;C2/4597: 39 23 27     AND $2723,Y	
	BEQ .NextChar								;C2/459A: F0 2C        BEQ $45C8	

.Match	
	TXA 									;C2/459C: 8A           TXA 		
	JSR ShiftDivide_4							;C2/459D: 20 C0 01     JSR $01C0	
	BNE .Check1								;C2/45A0: D0 08        BNE $45AA	
								
	LDA $14		;in-progress usable byte				;C2/45A2: A5 14        LDA $14
	AND #$7F	;clear first character bit				;C2/45A4: 29 7F        AND #$7F		
	STA $14									;C2/45A6: 85 14        STA $14
	BRA .NextChar								;C2/45A8: 80 1E        BRA $45C8

.Check1								
	CMP #$01								;C2/45AA: C9 01        CMP #$01
	BNE .Check2								;C2/45AC: D0 08        BNE $45B6	
	LDA $14									;C2/45AE: A5 14        LDA $14
	AND #$DF	;clear second character bit				;C2/45B0: 29 DF        AND #$DF		
	STA $14									;C2/45B2: 85 14        STA $14
	BRA .NextChar								;C2/45B4: 80 12        BRA $45C8
.Check2								
	CMP #$02								;C2/45B6: C9 02        CMP #$02		
	BNE .Other								;C2/45B8: D0 08        BNE $45C2	
	LDA $14									;C2/45BA: A5 14        LDA $14
	AND #$F7	;clear third character bit									
	STA $14									;C2/45BE: 85 14        STA $14
	BRA .NextChar								;C2/45C0: 80 06        BRA $45C8
.Other								
	LDA $14									;C2/45C2: A5 14        LDA $14
	AND #$FD	;clear fourth character bit				;C2/45C4: 29 FD        AND #$FD		
	STA $14									;C2/45C6: 85 14        STA $14

.NextChar
	INX 									;C2/45C8: E8           INX 
	INX 									;C2/45C9: E8           INX 
	INX 									;C2/45CA: E8           INX 
	INX 									;C2/45CB: E8           INX 		
	CPX #$0010	;4 bytes * 4 characters					;C2/45CC: E0 10 00     CPX #$0010	
	BNE .DetermineEquippableLoop						;C2/45CF: D0 AB        BNE $457C	
										;.					
	LDA $14									;C2/45D1: A5 14        LDA $14		
	PLY 									;C2/45D3: 7A           PLY 		
	RTS 									;C2/45D4: 60           RTS 
%endsub()


%org($C245D5)
;Start party poison status timers
StartPartyPoisonTimers:
	TDC 								;C2/45D5: 7B           TDC 		
	TAX 								;C2/45D6: AA           TAX 		
	STX $22		;CharStruct Offset				;C2/45D7: 86 22        STX $22		
	STX Temp	;Party index					;C2/45D9: 8E 20 26     STX $2620	
.StartTimersLoop														
	LDX $22								;C2/45DC: A6 22        LDX $22		
	LDA CharStruct.Status1,X					;C2/45DE: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/45E1: 1D 70 20     ORA $2070,X	
	AND #$04	;Poison						;C2/45E4: 29 04        AND #$04	
	BEQ .Next							;C2/45E6: F0 05        BEQ $45ED	
	LDA #$01							;C2/45E8: A9 01        LDA #$01	
	JSR StartTimerFromTemp						;C2/45EA: 20 A3 41     JSR $41A3	
.Next	LDX $22								;C2/45ED: A6 22        LDX $22		
	JSR NextCharOffset						;C2/45EF: 20 E0 01     JSR $01E0	
	STX $22								;C2/45F2: 86 22        STX $22		
	INC Temp	;next party member				;C2/45F4: EE 20 26     INC $2620	
	LDA Temp							;C2/45F7: AD 20 26     LDA $2620
	CMP #$04							;C2/45FA: C9 04        CMP #$04
	BNE .StartTimersLoop						;C2/45FC: D0 DE        BNE $45DC

	RTS								;C2/45FE: 60           RTS 


%org($C245FF)
;Command $05 (Fight)
FightCommand:

%sub(CommandTable04)
CommandTable04:
	LDX AttackerOffset							;C2/45FF: A6 32        LDX $32 		
	LDA CharStruct.MonsterTargets,X 					;C2/4601: BD 58 20     LDA $2058,X 	
	STA MonsterTargets							;C2/4604: 85 65        STA $65		
	LDA CharStruct.PartyTargets,X						;C2/4606: BD 59 20     LDA $2059,X	
	STA PartyTargets							;C2/4609: 85 66        STA $66		
	JSR CheckRetarget							;C2/460B: 20 FE 4A     JSR $4AFE	
	LDX AttackerOffset							;C2/460E: A6 32        LDX $32		
	LDA PartyTargets							;C2/4610: A5 66        LDA $66		
	STA CharStruct.PartyTargets,X						;C2/4612: 9D 59 20     STA $2059,X	
	LDA MonsterTargets							;C2/4615: A5 65        LDA $65		
	STA CharStruct.MonsterTargets,X						;C2/4617: 9D 58 20     STA $2058,X	
	PHA 									;C2/461A: 48           PHA 		
	AND #$F0								;C2/461B: 29 F0        AND #$F0		
	LSR 									;C2/461D: 4A           LSR 		
	LSR 									;C2/461E: 4A           LSR 
	LSR 									;C2/461F: 4A           LSR 
	LSR 									;C2/4620: 4A           LSR 
	ORA CharStruct.PartyTargets,X						;C2/4621: 1D 59 20     ORA $2059,X	
	STA TempTargetBitmask	;targets, CCCC MMMM 				;C2/4624: 8D 20 27     STA $2720	
	PLA 									;C2/4627: 68           PLA 		
	AND #$0F								;C2/4628: 29 0F        AND #$0F		
	ASL 									;C2/462A: 0A           ASL 		
	ASL 									;C2/462B: 0A           ASL 	
	ASL 									;C2/462C: 0A           ASL 
	ASL 									;C2/462D: 0A           ASL 
	STA TempTargetBitmask+1	;targets 2nd byte, MMMM 0000			;C2/462E: 8D 21 27     STA $2721	
	LDA AttackerIndex							;C2/4631: A5 47        LDA $47		
	TAX 									;C2/4633: AA           TAX 		
	LDA ROMTimes84,X		;multiplies by 84			;C2/4634: BF 85 ED D0  LDA $D0ED85,X	
	TAX 									;C2/4638: AA           TAX 		
	STX $0E				;offset into character equipment	;C2/4639: 86 0E        STX $0E		
	LDX AttackerOffset							;C2/463B: A6 32        LDX $32		
	LDA CharStruct.RHWeapon,X						;C2/463D: BD 13 20     LDA $2013,X	
	BNE .RightHand								;C2/4640: D0 03        BNE $4645	
	JMP .LeftHand								;C2/4642: 4C 79 47     JMP $4779	

.RightHand
	LDX $0E				;offset into character equipment	;C2/4645: A6 0E        LDX $0E		
	LDA RHWeapon.Properties,X						;C2/4647: BD 8A 40     LDA $408A,X	
	STA $10				;RH Weapon Properties			;C2/464A: 85 10        STA $10		
	AND #$02			;command instead of attack		;C2/464C: 29 02        AND #$02		
	BEQ .NormalAttack							;C2/464E: F0 25        BEQ $4675	
	LDA CurrentlyReacting							;C2/4650: AD 4E 47     LDA $474E	
	BNE .NormalAttack							;C2/4653: D0 20        BNE $4675	
	LDX AttackerOffset							;C2/4655: A6 32        LDX $32		
	LDA CharStruct.Status1,X						;C2/4657: BD 1A 20     LDA $201A,X	
	AND #$02      			;Zombie					;C2/465A: 29 02        AND #$02      	
	BNE .NormalAttack							;C2/465C: D0 17        BNE $4675	
	LDA CharStruct.Status2,X   						;C2/465E: BD 1B 20     LDA $201B,X   	
	AND #$10			;Charm					;C2/4661: 29 10        AND #$10		
	BNE .NormalAttack							;C2/4663: D0 10        BNE $4675	
	JSR Random_0_99								;C2/4665: 20 A2 02     JSR $02A2    
	LDX $0E				;offset into character equipment	;C2/4668: A6 0E        LDX $0E		
	CMP RHWeapon.Param2,X		;proc chance				;C2/466A: DD 8F 40     CMP $408F,X	
	BCS .NormalAttack							;C2/466D: B0 06        BCS $4675	
	LDA RHWeapon.Param3,X		;proc command				;C2/466F: BD 90 40     LDA $4090,X	
	JMP DispatchCommand_CommandReady	;dispatch the new command	;C2/4672: 4C D5 49     JMP $49D5	

.NormalAttack								
	JSR SelectCurrentProcSequence	;Y and $0C = AttackInfo offsets		;C2/4675: 20 23 99     JSR $9923	
	STY $14				;AttackInfo offset			;C2/4678: 84 14        STY $14		
	STZ $12									;C2/467A: 64 12        STZ $12		
	LDX $0E				;offset into character equipment	;C2/467C: A6 0E        LDX $0E		

.CopyAttackInfo										
	LDA !RHWeapon,X								;C2/467E: BD 85 40     LDA $4085,X	
	STA !AttackInfo,Y							;C2/4681: 99 FC 79     STA $79FC,Y	
	INX 									;C2/4684: E8           INX 		
	INY 									;C2/4685: C8           INY 
	INC $12									;C2/4686: E6 12        INC $12		
	LDA $12									;C2/4688: A5 12        LDA $12		
	CMP #$0C			;12 byte structure size			;C2/468A: C9 0C        CMP #$0C		
	BNE .CopyAttackInfo							;C2/468C: D0 F0        BNE $467E		

	LDX $0E				;offset into character equipment	;C2/468E: A6 0E        LDX $0E		
	LDA RHWeapon.Properties,X						;C2/4690: BD 8A 40     LDA $408A,X	
	AND #$04			;Magic Sword OK				;C2/4693: 29 04        AND #$04		
	BNE .MSword								;C2/4695: D0 03        BNE $469A	
	TDC 									;C2/4697: 7B           TDC 		
	BRA ++									;C2/4698: 80 07        BRA $46A1	
								
.MSword	LDX AttackerOffset							;C2/469A: A6 32        LDX $32		
	LDA CharStruct.MSwordAnim,X						;C2/469C: BD 7A 20     LDA $207A,X	
	AND #$7F			;Right Hand clears high bit		;C2/469F: 29 7F        AND #$7F		
								
++	PHA 									;C2/46A1: 48           PHA 		
	JSR FindOpenGFXQueueSlot						;C2/46A2: 20 FA 98     JSR $98FA	
	STZ GFXQueue.Flag,X							;C2/46A5: 9E 4C 38     STZ $384C,X	
	LDA #$FC								;C2/46A8: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X							;C2/46AA: 9D 4D 38     STA $384D,X
	LDA #$01								;C2/46AD: A9 01        LDA #$01
	STA GFXQueue.Type,X							;C2/46AF: 9D 4E 38     STA $384E,X
	LDA #$04								;C2/46B2: A9 04        LDA #$04
	STA GFXQueue.Data1,X							;C2/46B4: 9D 4F 38     STA $384F,X
	PLA 									;C2/46B7: 68           PLA 
	STA GFXQueue.Data2,X		;created command $00,FC,01,04,<MSword>	;C2/46B8: 9D 50 38     STA $3850,X
	LDX $0E				;offset into character equipment	;C2/46BB: A6 0E        LDX $0E		
	LDA RHWeapon.AtkType,X							;C2/46BD: BD 8D 40     LDA $408D,X	
	PHA 									;C2/46C0: 48           PHA 		
	LDA ProcSequence							;C2/46C1: AD FA 79     LDA $79FA	
	TAX 									;C2/46C4: AA           TAX 
	PLA 									;C2/46C5: 68           PLA 
	STA AtkType,X								;C2/46C6: 9D 2D 7B     STA $7B2D,X
	STZ MultiTarget,X							;C2/46C9: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X							;C2/46CC: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence							;C2/46CF: AD FA 79     LDA $79FA		
	ASL 									;C2/46D2: 0A           ASL 
	TAX 									;C2/46D3: AA           TAX 
	LDA TempTargetBitmask							;C2/46D4: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X						;C2/46D7: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1							;C2/46DA: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X						;C2/46DD: 9D DD 7A     STA $7ADD,X
	INC ProcSequence							;C2/46E0: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers		;creates GFX cmd $00,FC,06,00,00	;C2/46E3: 20 E3 98     JSR $98E3	
	LDA $10				;RH Weapon Properties			;C2/46E6: A5 10        LDA $10		
	AND #$01			;Wonder Rod				;C2/46E8: 29 01        AND #$01		
	BEQ .NoWonder								;C2/46EA: F0 1B        BEQ $4707	

	CLC 									;C2/46EC: 18           CLC 		
	LDA BattleData.WonderRod						;C2/46ED: AD 76 7C     LDA $7C76	
	ADC #$12			;+18					;C2/46F0: 69 12        ADC #$12		
	STA $10				;Wonder Rod Spell + 18			;C2/46F2: 85 10        STA $10		
	CLC 									;C2/46F4: 18           CLC 		
	LDA BattleData.WonderRod						;C2/46F5: AD 76 7C     LDA $7C76	
	BNE +									;C2/46F8: D0 01        BNE $46FB	
	INC 				;min 1 (skips scan)			;C2/46FA: 1A           INC 		
+	ADC #$01			;					;C2/46FB: 69 01        ADC #$01		
	CMP #$24			;36					;C2/46FD: C9 24        CMP #$24		
	BNE +									;C2/46FF: D0 01        BNE $4702	
	TDC 				;clear wonder rod if it got too high	;C2/4701: 7B           TDC 		
+	STA BattleData.WonderRod						;C2/4702: 8D 76 7C     STA $7C76	
	BRA .MagicProc								;C2/4705: 80 15        BRA $471C	

.NoWonder								
	LDA $10				;RH Weapon Properties			;C2/4707: A5 10        LDA $10		
	AND #$08			;Magic on hit				;C2/4709: 29 08        AND #$08		
	BEQ .LeftHand								;C2/470B: F0 6C        BEQ $4779	
	JSR Random_0_99								;C2/470D: 20 A2 02     JSR $02A2	
	LDX $0E				;offset into character equipment	;C2/4710: A6 0E        LDX $0E		
	CMP RHWeapon.Param2,X		;Proc Chance				;C2/4712: DD 8F 40     CMP $408F,X	
	BCS .LeftHand								;C2/4715: B0 62        BCS $4779	
	LDA RHWeapon.Param3,X		;Proc Magic				;C2/4717: BD 90 40     LDA $4090,X	
	STA $10				;Proc Magic				;C2/471A: 85 10        STA $10		
								
.MagicProc
	LDY $14				;AttackInfo offset			;C2/471C: A4 14        LDY $14		
	TYA 									;C2/471E: 98           TYA 		
	CLC 									;C2/471F: 18           CLC 		
	ADC #$0C			;+12, size of AttackInfo		;C2/4720: 69 0C        ADC #$0C		
	TAY 									;C2/4722: A8           TAY 		
	STY $14				;next AttackInfo offset			;C2/4723: 84 14        STY $14		
	LDA $10				;Proc or Wonder Magic			;C2/4725: A5 10        LDA $10		
	PHA 									;C2/4727: 48           PHA 		
	JSR CopyROMMagicInfo							;C2/4728: 20 24 03     JSR $0324	
	LDA ProcSequence							;C2/472B: AD FA 79     LDA $79FA	
	TAX 									;C2/472E: AA           TAX 
	LDY $14				;AttackInfo offset			;C2/472F: A4 14        LDY $14
	LDA AttackInfo.MagicAtkType,Y						;C2/4731: B9 00 7A     LDA $7A00,Y
	AND #$7F								;C2/4734: 29 7F        AND #$7F
	STA AtkType,X								;C2/4736: 9D 2D 7B     STA $7B2D,X
	JSR FindOpenGFXQueueSlot						;C2/4739: 20 FA 98     JSR $98FA	
	PLA 				;Proc or Wonder Magic			;C2/473C: 68           PLA 		
	STA GFXQueue.Data1,X							;C2/473D: 9D 4F 38     STA $384F,X
	STZ GFXQueue.Flag,X							;C2/4740: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Data2,X							;C2/4743: 9E 50 38     STZ $3850,X
	LDA #$FC								;C2/4746: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X							;C2/4748: 9D 4D 38     STA $384D,X
	LDA #$07								;C2/474B: A9 07        LDA #$07
	STA GFXQueue.Type,X		;created command $00,FC,07,<Magic>,00	;C2/474D: 9D 4E 38     STA $384E,X
	LDA ProcSequence							;C2/4750: AD FA 79     LDA $79FA
	TAX 									;C2/4753: AA           TAX 
	STZ MultiTarget,X							;C2/4754: 9E 1C 7B     STZ $7B1C,X
	LDA #$10								;C2/4757: A9 10        LDA #$10
	STA TargetType,X							;C2/4759: 9D CC 7A     STA $7ACC,X
	LDA ProcSequence							;C2/475C: AD FA 79     LDA $79FA
	ASL 									;C2/475F: 0A           ASL 
	TAX 									;C2/4760: AA           TAX 
	LDA TempTargetBitmask							;C2/4761: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X						;C2/4764: 9D DC 7A     STA $7ADC,X
	STA TargetBitmask,X							;C2/4767: 9D FC 7A     STA $7AFC,X
	LDA TempTargetBitmask+1							;C2/476A: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X						;C2/476D: 9D DD 7A     STA $7ADD,X
	STA TargetBitmask+1,X							;C2/4770: 9D FD 7A     STA $7AFD,X
	INC ProcSequence							;C2/4773: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers		;creates Action $00,FC,06,00,00		;C2/4776: 20 E3 98     JSR $98E3	

.LeftHand	;very similar to RH code, but does a bunch of stuff in a different order
	LDX AttackerOffset							;C2/4779: A6 32        LDX $32		
	LDA CharStruct.LHWeapon,X						;C2/477B: BD 14 20     LDA $2014,X	
	BNE +									;C2/477E: D0 01        BNE $4781	
	RTS 			;no LH weapon, we're done			;C2/4780: 60           RTS 

+	LDX $0E			;offset into character equipment		;C2/4781: A6 0E        LDX $0E
	LDA LHWeapon.Properties,X						;C2/4783: BD 96 40     LDA $4096,X
	STA $10			;LH Weapon Properties				;C2/4786: 85 10        STA $10
	AND #$02		;Command instead of attack			;C2/4788: 29 02        AND #$02
	BEQ .NormalAttackLH							;C2/478A: F0 25        BEQ $47B1
	LDA CurrentlyReacting							;C2/478C: AD 4E 47     LDA $474E
	BNE .NormalAttackLH							;C2/478F: D0 20        BNE $47B1
	LDX AttackerOffset							;C2/4791: A6 32        LDX $32
	LDA CharStruct.Status1,X						;C2/4793: BD 1A 20     LDA $201A,X
	AND #$02		;Zombie						;C2/4796: 29 02        AND #$02
	BNE .NormalAttackLH							;C2/4798: D0 17        BNE $47B1
	LDA CharStruct.Status2,X						;C2/479A: BD 1B 20     LDA $201B,X
	AND #$10		;Charm						;C2/479D: 29 10        AND #$10
	BNE .NormalAttackLH							;C2/479F: D0 10        BNE $47B1
	JSR Random_0_99								;C2/47A1: 20 A2 02     JSR $02A2
	LDX $0E			;offset into character equipment		;C2/47A4: A6 0E        LDX $0E
	CMP LHWeapon.Param2,X			;proc chance			;C2/47A6: DD 9B 40     CMP $409B,X
	BCS .NormalAttackLH							;C2/47A9: B0 06        BCS $47B1
	LDA LHWeapon.Param3,X			;proc command			;C2/47AB: BD 9C 40     LDA $409C,X
	JMP DispatchCommand_CommandReady	;dispatch the new command	;C2/47AE: 4C D5 49     JMP $49D5

.NormalAttackLH
	JSR SelectCurrentProcSequence	;Y and $0C = AttackInfo offsets		;C2/47B1: 20 23 99     JSR $9923
	STY $12				;AttackInfo offset			;C2/47B4: 84 12        STY $12
	STZ $14									;C2/47B6: 64 14        STZ $14
	LDX $0E									;C2/47B8: A6 0E        LDX $0E

.CopyAttackInfoLH
	LDA !LHWeapon,X								;C2/47BA: BD 91 40     LDA $4091,X
	STA !AttackInfo,Y							;C2/47BD: 99 FC 79     STA $79FC,Y
	INX 									;C2/47C0: E8           INX 
	INY 									;C2/47C1: C8           INY 
	INC $14									;C2/47C2: E6 14        INC $14
	LDA $14									;C2/47C4: A5 14        LDA $14
	CMP #$0C			;12 byte structure size			;C2/47C6: C9 0C        CMP #$0C
	BNE .CopyAttackInfoLH							;C2/47C8: D0 F0        BNE $47BA
		
	LDX $0E			;offset into character equipment		;C2/47CA: A6 0E        LDX $0E
	LDA ProcSequence							;C2/47CC: AD FA 79     LDA $79FA
	TAY 									;C2/47CF: A8           TAY 
	LDA LHWeapon.AtkType,X							;C2/47D0: BD 99 40     LDA $4099,X
	STA AtkType,Y								;C2/47D3: 99 2D 7B     STA $7B2D,Y
	JSR FindOpenGFXQueueSlot						;C2/47D6: 20 FA 98     JSR $98FA
	STZ GFXQueue.Flag,X							;C2/47D9: 9E 4C 38     STZ $384C,X
	LDA #$FC								;C2/47DC: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X							;C2/47DE: 9D 4D 38     STA $384D,X
	LDA #$01								;C2/47E1: A9 01        LDA #$01
	STA GFXQueue.Type,X							;C2/47E3: 9D 4E 38     STA $384E,X
	LDA #$04								;C2/47E6: A9 04        LDA #$04
	STA GFXQueue.Data1,X							;C2/47E8: 9D 4F 38     STA $384F,X
	STX $08			;command queue slot offset			;C2/47EB: 86 08        STX $08
	LDX $0E			;offset into character equipment		;C2/47ED: A6 0E        LDX $0E
	LDA LHWeapon.Properties,X						;C2/47EF: BD 96 40     LDA $4096,X
	AND #$04		;Magic Sword OK					;C2/47F2: 29 04        AND #$04
	BNE .MSwordLH								;C2/47F4: D0 04        BNE $47FA
	LDA #$80								;C2/47F6: A9 80        LDA #$80
	BRA +									;C2/47F8: 80 07        BRA $4801

.MSwordLH
	LDX AttackerOffset							;C2/47FA: A6 32        LDX $32
	LDA CharStruct.MSwordAnim,X						;C2/47FC: BD 7A 20     LDA $207A,X
	ORA #$80		;Left Hand sets high bit			;C2/47FF: 09 80        ORA #$80

+	LDX $08			;command queue slot offset			;C2/4801: A6 08        LDX $08
	STA GFXQueue.Data2,X	;created command $00,FC,01,04,<MSword/Hand>	;C2/4803: 9D 50 38     STA $3850,X
	LDA ProcSequence							;C2/4806: AD FA 79     LDA $79FA
	TAX 									;C2/4809: AA           TAX 
	STZ MultiTarget,X							;C2/480A: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X							;C2/480D: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence							;C2/4810: AD FA 79     LDA $79FA
	ASL 									;C2/4813: 0A           ASL 
	TAX 									;C2/4814: AA           TAX 
	LDA TempTargetBitmask							;C2/4815: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X						;C2/4818: 9D DC 7A     STA $7ADC,X
	LDA TempTargetBitmask+1							;C2/481B: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X						;C2/481E: 9D DD 7A     STA $7ADD,X
	INC ProcSequence							;C2/4821: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers	;creates GFX command $00,FC,06,00,00		;C2/4824: 20 E3 98     JSR $98E3
	LDA $10			;LH Weapon Properties				;C2/4827: A5 10        LDA $10
	AND #$01		;Wonder Rod					;C2/4829: 29 01        AND #$01
	BEQ .NoWonderLH								;C2/482B: F0 1B        BEQ $4848
	
	CLC 									;C2/482D: 18           CLC 
	LDA BattleData.WonderRod						;C2/482E: AD 76 7C     LDA $7C76
	ADC #$12		;+18						;C2/4831: 69 12        ADC #$12
	STA $10			;Wonder Rod Spell + 18				;C2/4833: 85 10        STA $10
	CLC 									;C2/4835: 18           CLC 
	LDA BattleData.WonderRod						;C2/4836: AD 76 7C     LDA $7C76
	BNE +									;C2/4839: D0 01        BNE $483C
	INC 			;skip scan					;C2/483B: 1A           INC 
+	ADC #$01								;C2/483C: 69 01        ADC #$01
	CMP #$24		;36						;C2/483E: C9 24        CMP #$24
	BNE +									;C2/4840: D0 01        BNE $4843
	TDC 			;clear wonder rod if it got too high		;C2/4842: 7B           TDC 
+	STA BattleData.WonderRod						;C2/4843: 8D 76 7C     STA $7C76
	BRA .MagicProcLH							;C2/4846: 80 15        BRA $485D
	
.NoWonderLH
	LDA $10			;LH Weapon Properties				;C2/4848: A5 10        LDA $10
	AND #$08		;magic on hit					;C2/484A: 29 08        AND #$08
	BEQ .Ret								;C2/484C: F0 6E        BEQ $48BC
	JSR Random_0_99								;C2/484E: 20 A2 02     JSR $02A2
	LDX $0E			;offset into character equipment		;C2/4851: A6 0E        LDX $0E
	CMP LHWeapon.Param2,X	;Proc chance					;C2/4853: DD 9B 40     CMP $409B,X
	BCS .Ret								;C2/4856: B0 64        BCS $48BC
	LDA LHWeapon.Param3,X	;Proc Magic					;C2/4858: BD 9C 40     LDA $409C,X
	STA $10			;Proc Magic					;C2/485B: 85 10        STA $10

.MagicProcLH
	LDY $12			;AttackInfo offset				;C2/485D: A4 12        LDY $12
	TYA 									;C2/485F: 98           TYA 
	CLC 									;C2/4860: 18           CLC 
	ADC #$0C		;+12, size of AttackInfo			;C2/4861: 69 0C        ADC #$0C
	TAY 									;C2/4863: A8           TAY 
	STY $12			;next AttackInfo offset				;C2/4864: 84 12        STY $12
	LDX $0E			;offset into character equipment		;C2/4866: A6 0E        LDX $0E
	LDA $10			;Proc or Wonder Magic				;C2/4868: A5 10        LDA $10
	PHA 									;C2/486A: 48           PHA 
	JSR CopyROMMagicInfo							;C2/486B: 20 24 03     JSR $0324
	LDY $12			;AttackInfo offset				;C2/486E: A4 12        LDY $12
	LDA ProcSequence							;C2/4870: AD FA 79     LDA $79FA
	TAX 									;C2/4873: AA           TAX 
	LDA AttackInfo.MagicAtkType,Y						;C2/4874: B9 00 7A     LDA $7A00,Y
	AND #$7F								;C2/4877: 29 7F        AND #$7F
	STA AtkType,X								;C2/4879: 9D 2D 7B     STA $7B2D,X
	JSR FindOpenGFXQueueSlot						;C2/487C: 20 FA 98     JSR $98FA
	STZ GFXQueue.Flag,X							;C2/487F: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Data2,X							;C2/4882: 9E 50 38     STZ $3850,X
	LDA #$FC								;C2/4885: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X							;C2/4887: 9D 4D 38     STA $384D,X
	LDA #$07								;C2/488A: A9 07        LDA #$07
	STA GFXQueue.Type,X							;C2/488C: 9D 4E 38     STA $384E,X
	PLA 			;Proc or Wonder Magic				;C2/488F: 68           PLA 
	STA GFXQueue.Data1,X	;created command $00,FC,07,<Magic>,00		;C2/4890: 9D 4F 38     STA $384F,X
	LDA ProcSequence							;C2/4893: AD FA 79     LDA $79FA
	TAX 									;C2/4896: AA           TAX 
	STZ MultiTarget,X							;C2/4897: 9E 1C 7B     STZ $7B1C,X
	LDA #$10								;C2/489A: A9 10        LDA #$10
	STA TargetType,X							;C2/489C: 9D CC 7A     STA $7ACC,X
	LDA ProcSequence							;C2/489F: AD FA 79     LDA $79FA
	ASL 									;C2/48A2: 0A           ASL 
	TAX 									;C2/48A3: AA           TAX 
	LDA TempTargetBitmask							;C2/48A4: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X						;C2/48A7: 9D DC 7A     STA $7ADC,X
	STA TargetBitmask,X							;C2/48AA: 9D FC 7A     STA $7AFC,X
	LDA TempTargetBitmask+1							;C2/48AD: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X						;C2/48B0: 9D DD 7A     STA $7ADD,X
	STA TargetBitmask+1,X							;C2/48B3: 9D FD 7A     STA $7AFD,X
	INC ProcSequence							;C2/48B6: EE FA 79     INC $79FA
	JSR GFXCmdDamageNumbers	;creates GFX cmd $00,FC,06,00,00		;C2/48B9: 20 E3 98     JSR $98E3
.Ret	RTS 									;C2/48BC: 60           RTS 
%endsub()

%org($C248BD)
ProcessTurn:
	LDA AttackerIndex						;C2/48BD: A5 47        LDA $47      
	JSR CalculateCharOffset     					;C2/48BF: 20 EC 01     JSR $01EC    
	LDX AttackerOffset						;C2/48C2: A6 32        LDX $32      
	LDA CharStruct.CurHP,X						;C2/48C4: BD 06 20     LDA $2006,X
	STA CurrentHP							;C2/48C7: 8D 64 7C     STA $7C64
	LDA CharStruct.CurHP+1,X					;C2/48CA: BD 07 20     LDA $2007,X
	STA CurrentHP+1							;C2/48CD: 8D 65 7C     STA $7C65
	LDX CurrentHP							;C2/48D0: AE 64 7C     LDX $7C64
	CPX #$270F	;9999						;C2/48D3: E0 0F 27     CPX #$270F
	BCC +								;C2/48D6: 90 06        BCC $48DE
	LDX #$270F	;cap at 9999					;C2/48D8: A2 0F 27     LDX #$270F
	STX CurrentHP							;C2/48DB: 8E 64 7C     STX $7C64
+	LDX AttackerOffset       					;C2/48DE: A6 32        LDX $32      
	JSR CopyStatsWithBonuses     					;C2/48E0: 20 48 02     JSR $0248    
	JSR WipeDisplayStructures     					;C2/48E3: 20 18 02     JSR $0218    
	JSR WipeActionData						;C2/48E6: 20 8A 02     JSR $028A
	JSR DispatchCommand						;C2/48E9: 20 68 49     JSR $4968
	JSR ProcessCommands						;C2/48EC: 20 27 94     JSR $9427
	JSR CheckLearnBlue     						;C2/48EF: 20 10 4C     JSR $4C10    
	LDA WasMonsterReleased						;C2/48F2: AD 4F 7C     LDA $7C4F
	BEQ +								;C2/48F5: F0 03        BEQ $48FA
	JSR RestoreStatsAfterRelease					;C2/48F7: 20 2F 4A     JSR $4A2F
+	LDA ActionAnimShift						;C2/48FA: AD 9B 7C     LDA $7C9B
	BEQ +								;C2/48FD: F0 03        BEQ $4902
	JSR ShiftActionAnims						;C2/48FF: 20 23 49     JSR $4923
+	LDA #$0A	;C1 Routine: execute graphics script		;C2/4902: A9 0A        LDA #$0A
	JSR CallC1  							;C2/4904: 20 69 00     JSR $0069    
	LDA EncounterInfo.IntroFX					;C2/4907: AD EF 3E     LDA $3EEF
	BPL +								;C2/490A: 10 0B        BPL $4917
	LDA AttackerIndex      ;this section for credits demo		;C2/490C: A5 47        LDA $47      
	CMP #$04		;monster check				;C2/490E: C9 04        CMP #$04
	BCS +								;C2/4910: B0 05        BCS $4917
	LDA #$20							;C2/4912: A9 20        LDA #$20
	STA BattleOver		;battle ends after one action		;C2/4914: 8D DE 7B     STA $7BDE
+	LDA #$FF							;C2/4917: A9 FF        LDA #$FF
	STA ReleasedMonsterID						;C2/4919: 8D 4B 7C     STA $7C4B
	INC TurnProcessed						;C2/491C: EE 54 47     INC $4754
	STZ PendingReactions						;C2/491F: 9C 56 47     STZ $4756
	RTS 								;C2/4922: 60           RTS 
	
%org($C24923)
ShiftActionAnims:	
	LDA ActionAnimShift						;C2/4923: AD 9B 7C     LDA $7C9B
	BPL .Finish							;C2/4926: 10 31        BPL $4959
	LDA ActionAnim[0].TargetBits					;C2/4928: AD CF 3B     LDA $3BCF
	ORA ActionAnim[1].TargetBits					;C2/492B: 0D D6 3B     ORA $3BD6
	BEQ +								;C2/492E: F0 06        BEQ $4936
	LDA ActionAnim[0].OrigTargetBits				;C2/4930: AD CE 3B     LDA $3BCE
	STA ActionAnim[0].TargetBits					;C2/4933: 8D CF 3B     STA $3BCF
+	TDC 								;C2/4936: 7B           TDC 
	TAX 								;C2/4937: AA           TAX 
.ShiftActionAnims
	LDA ActionAnim[2].0,X						;C2/4938: BD DA 3B     LDA $3BDA,X
	STA ActionAnim[1].0,X						;C2/493B: 9D D3 3B     STA $3BD3,X
	INX 								;C2/493E: E8           INX 
	CPX #$0023	;35 bytes, which is 5 ActionAnim structures	;C2/493F: E0 23 00     CPX #$0023
	BNE .ShiftActionAnims						;C2/4942: D0 F4        BNE $4938

	LDA ActionAnimShift						;C2/4944: AD 9B 7C     LDA $7C9B
	AND #$40							;C2/4947: 29 40        AND #$40
	BEQ .Ret							;C2/4949: F0 1C        BEQ $4967
	LDA ActionAnim[1].TargetBits					;C2/494B: AD D6 3B     LDA $3BD6
	ORA ActionAnim[2].TargetBits					;C2/494E: 0D DD 3B     ORA $3BDD
	BEQ .Finish							;C2/4951: F0 06        BEQ $4959
	LDA ActionAnim[1].OrigTargetBits				;C2/4953: AD D5 3B     LDA $3BD5
	STA ActionAnim[1].TargetBits					;C2/4956: 8D D6 3B     STA $3BD6
.Finish
	TDC 								;C2/4959: 7B           TDC 
	TAX 								;C2/495A: AA           TAX 
.ShiftActionAnims2	
	LDA ActionAnim[3].0,X						;C2/495B: BD E1 3B     LDA $3BE1,X
	STA ActionAnim[2].0,X						;C2/495E: 9D DA 3B     STA $3BDA,X
	INX 								;C2/4961: E8           INX 
	CPX #$0023	;35 bytes, which is 5 ActionAnim structures	;C2/4962: E0 23 00     CPX #$0023
	BNE .ShiftActionAnims2						;C2/4965: D0 F4        BNE $495B
.Ret	RTS 								;C2/4967: 60           RTS 



%org($C24968)
;Dispatches Commands to their command routines
DispatchCommand:
	LDX AttackerOffset							;C2/4968: A6 32        LDX $32
	LDA CharStruct.Status1,X						;C2/496A: BD 1A 20     LDA $201A,X
	AND #$02			;Zombie					;C2/496D: 29 02        AND #$02
	BNE +									;C2/496F: D0 07        BNE $4978     
	LDA CharStruct.Status2,X						;C2/4971: BD 1B 20     LDA $201B,X
	AND #$18      			;Charm or Berserk			;C2/4974: 29 18        AND #$18      
	BEQ ++    								;C2/4976: F0 12        BEQ $498A     
+	LDA CharStruct.CmdCancelled,X					 	;C2/4978: BD 61 20     LDA $2061,X
	BNE ++				;already cancelled player command	;C2/497B: D0 0D        BNE $498A
	LDA #$01								;C2/497D: A9 01        LDA #$01
	STA CharStruct.CmdCancelled,X						;C2/497F: 9D 61 20     STA $2061,X   
	STZ CharStruct.Command,X   						;C2/4982: 9E 57 20     STZ $2057,X   
	LDA #$80								;C2/4985: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X   						;C2/4987: 9D 56 20     STA $2056,X   
++	LDA CharStruct.Status2,X						;C2/498A: BD 1B 20     LDA $201B,X
	AND #$40      			;Sleep					;C2/498D: 29 40        AND #$40      
	BEQ +     								;C2/498F: F0 08        BEQ $4999     
	STZ CharStruct.Command,X						;C2/4991: 9E 57 20     STZ $2057,X
	LDA #$80								;C2/4994: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X						;C2/4996: 9D 56 20     STA $2056,X
	
+	CPX #$0200    			;AttackerOffset is a monster		;C2/4999: E0 00 02     CPX #$0200    
	BCS .ActionReady							;C2/499C: B0 32        BCS $49D0
	LDA CharStruct.Command,X						;C2/499E: BD 57 20     LDA $2057,X
	BEQ .ActionReady							;C2/49A1: F0 2D        BEQ $49D0
	CMP #$25			;Hide					;C2/49A3: C9 25        CMP #$25
	BEQ .ActionReady							;C2/49A5: F0 29        BEQ $49D0
	CMP #$26			;Show					;C2/49A7: C9 26        CMP #$26
	BEQ .ActionReady							;C2/49A9: F0 25        BEQ $49D0
	CMP #$2B			;Mimic					;C2/49AB: C9 2B        CMP #$2B
	BEQ .ActionReady							;C2/49AD: F0 21        BEQ $49D0
	CMP #$4E			;Nothing 4E and above			;C2/49AF: C9 4E        CMP #$4E
	BCS .ActionReady							;C2/49B1: B0 1D        BCS $49D0
	LDA CharStruct.Status1,X						;C2/49B3: BD 1A 20     LDA $201A,X
	AND #$02			;Zombie					;C2/49B6: 29 02        AND #$02
	BNE .ActionReady							;C2/49B8: D0 16        BNE $49D0
	LDA CharStruct.Status2,X						;C2/49BA: BD 1B 20     LDA $201B,X
	AND #$18			;Charm or Berserk			;C2/49BD: 29 18        AND #$18
	BNE .ActionReady							;C2/49BF: D0 0F        BNE $49D0

	TDC 									;C2/49C1: 7B           TDC 
	TAY 									;C2/49C2: A8           TAY 
.CopyActionInfo		;copies 10 bytes of command and cursor selection info from CharStruct
	LDA CharStruct.ActionFlag,X						;C2/49C3: BD 56 20     LDA $2056,X
	STA !SavedActionMimic,Y		 					;C2/49C6: 99 D4 41     STA $41D4,Y
	INX 									;C2/49C9: E8           INX 
	INY 									;C2/49CA: C8           INY 
	CPY #$000A								;C2/49CB: C0 0A 00     CPY #$000A
	BNE .CopyActionInfo							;C2/49CE: D0 F3        BNE $49C3

.ActionReady
	LDX AttackerOffset							;C2/49D0: A6 32        LDX $32
	LDA CharStruct.Command,X						;C2/49D2: BD 57 20     LDA $2057,X
.CommandReady		;routine can be called from here directly.  If so, A is a command (mimic or a weapon proc)
	PHA 									;C2/49D5: 48           PHA 		
	REP #$20								;C2/49D6: C2 20        REP #$20		
	JSR ShiftMultiply_8							;C2/49D8: 20 B6 01     JSR $01B6	
	TAX 									;C2/49DB: AA           TAX 		
	LDA ROMAbilityInfo.CmdStatus,X	;holds command status and damage mod	;C2/49DC: BF E2 59 D1  LDA $D159E2,X	
	LDX AttackerOffset							;C2/49E0: A6 32        LDX $32		
	STA CharStruct.CmdStatus,X						;C2/49E2: 9D 1E 20     STA $201E,X	
	TDC 									;C2/49E5: 7B           TDC 		
	SEP #$20								;C2/49E6: E2 20        SEP #$20		
	PLA 									;C2/49E8: 68           PLA 		
	TAX 									;C2/49E9: AA           TAX 		
	LDA ROMCommandMap,X	;maps commands to command table..		;C2/49EA: BF 02 ED D0  LDA $D0ED02,X	
	STA CommandOffset	;mostly just decrements by 1, 			;C2/49EE: 8D 4D 47     STA $474D	
	ASL 			;except for magic or internal commands after	;C2/49F1: 0A           ASL 		
	TAX 									;C2/49F2: AA           TAX 
	LDA CommandTable,X							;C2/49F3: BF 94 4A C2  LDA $C24A94,X	
	STA $08									;C2/49F7: 85 08        STA $08		
	LDA CommandTable+1,X							;C2/49F9: BF 95 4A C2  LDA $C24A95,X
	STA $09									;C2/49FD: 85 09        STA $09		
	LDA.b #bank(CommandTable)						;C2/49FF: A9 C2        LDA #$C2
	STA $0A									;C2/4A01: 85 0A        STA $0A		
	STZ UnknownReaction							;C2/4A03: 9C FB 7B     STZ $7BFB	
	STZ DelayedFight							;C2/4A06: 9C FC 7B     STZ $7BFC	
	STZ SearchGFXQueue							;C2/4A09: 9C 03 7C     STZ $7C03	
	STZ MPTaken								;C2/4A0C: 9C 08 7C     STZ $7C08	
	STZ MessageBoxOffset							;C2/4A0F: 9C EF 3C     STZ $3CEF	
	STZ MessageBoxDataOffset						;C2/4A12: 9C F0 3C     STZ $3CF0	
	STZ WasMonsterReleased							;C2/4A15: 9C 4F 7C     STZ $7C4F	
	STZ ActionAnimShift							;C2/4A18: 9C 9B 7C     STZ $7C9B	
	STZ MissInactive							;C2/4A1B: 9C 9D 7C     STZ $7C9D	
	STZ HitsJumping								;C2/4A1E: 9C 9C 7C     STZ $7C9C	
	TDC 									;C2/4A21: 7B           TDC 		
	TAX 									;C2/4A22: AA           TAX 		
-	STZ HitsInactive,X							;C2/4A23: 9E EB 7B     STZ $7BEB,X	
	INX 									;C2/4A26: E8           INX 		
	CPX #$0010								;C2/4A27: E0 10 00     CPX #$0010	
	BNE -									;C2/4A2A: D0 F7        BNE $4A23	
	JMP [$0008]		;jumps to command from command table		;C2/4A2C: DC 08 00     JMP [$0008]	

%org($C24A2F)
RestoreStatsAfterRelease:
	LDA AttackerIndex       						;C2/4A2F: A5 47        LDA $47        
	JSR CalculateCharOffset   						;C2/4A31: 20 EC 01     JSR $01EC      
	LDX AttackerOffset    							;C2/4A34: A6 32        LDX $32        
	LDA SavedCharStats.Level						;C2/4A36: AD 00 26     LDA $2600
	STA CharStruct.Level,X							;C2/4A39: 9D 02 20     STA $2002,X
	LDA SavedCharStats.MonsterAttack					;C2/4A3C: AD 01 26     LDA $2601
	STA CharStruct.MonsterAttack,X						;C2/4A3F: 9D 44 20     STA $2044,X
	LDA SavedCharStats.MonsterM						;C2/4A42: AD 02 26     LDA $2602
	STA CharStruct.MonsterM,X						;C2/4A45: 9D 62 20     STA $2062,X
	LDA SavedCharStats.EquippedMag						;C2/4A48: AD 03 26     LDA $2603
	STA CharStruct.EquippedMag,X						;C2/4A4B: 9D 2B 20     STA $202B,X
	LDA SavedCharStats.CharRow						;C2/4A4E: AD 04 26     LDA $2604
	STA CharStruct.CharRow,X						;C2/4A51: 9D 00 20     STA $2000,X
	LDA CharStruct.Status1,X						;C2/4A54: BD 1A 20     LDA $201A,X
	ORA SavedCharStats.Status1						;C2/4A57: 0D 05 26     ORA $2605
	AND #$7F	;clear dead status					;C2/4A5A: 29 7F        AND #$7F
	STA CharStruct.Status1,X						;C2/4A5C: 9D 1A 20     STA $201A,X
	TDC 									;C2/4A5F: 7B           TDC 
	TAY 									;C2/4A60: A8           TAY 
.StatusLoop	;Adds original Status1-4, CmdStatus, DamageMod, Passives1-2, ElementUp
	LDA CharStruct.Status1,X						;C2/4A61: BD 1A 20     LDA $201A,X
	ORA SavedCharStats.Status1,Y						;C2/4A64: 19 05 26     ORA $2605,Y
	STA CharStruct.Status1,X						;C2/4A67: 9D 1A 20     STA $201A,X
	INX 									;C2/4A6A: E8           INX 
	INY 									;C2/4A6B: C8           INY 
	CPY #$0009								;C2/4A6C: C0 09 00     CPY #$0009
	BNE .StatusLoop								;C2/4A6F: D0 F0        BNE $4A61
	
	TDC 									;C2/4A71: 7B           TDC 
	TAY 									;C2/4A72: A8           TAY 
	LDX AttackerOffset    							;C2/4A73: A6 32        LDX $32        
.MSwordLoop
	LDA SavedCharStats.MSwordElemental1,Y					;C2/4A75: B9 0E 26     LDA $260E,Y
	STA CharStruct.MSwordElemental1,X					;C2/4A78: 9D 50 20     STA $2050,X
	INX 									;C2/4A7B: E8           INX 
	INY 									;C2/4A7C: C8           INY 
	CPY #$0006								;C2/4A7D: C0 06 00     CPY #$0006
	BNE .MSwordLoop								;C2/4A80: D0 F3        BNE $4A75

	TDC 									;C2/4A82: 7B           TDC 
	TAY 									;C2/4A83: A8           TAY 
	LDX AttackerOffset    	    						;C2/4A84: A6 32        LDX $32        
.MiscLoop	;copies Always Status, Bonus Stats, and Magic Sword Animation
	LDA SavedCharStats.AlwaysStatus1,Y					;C2/4A86: B9 14 26     LDA $2614,Y    
	STA CharStruct.AlwaysStatus1,X						;C2/4A89: 9D 70 20     STA $2070,X
	INX 									;C2/4A8C: E8           INX 
	INY 									;C2/4A8D: C8           INY 
	CPY #$000B								;C2/4A8E: C0 0B 00     CPY #$000B
	BNE .MiscLoop								;C2/4A91: D0 F3        BNE $4A86
	RTS 									;C2/4A93: 60           RTS 


%org($C24A94)
CommandTable:
%generatejumptable(CommandTable,$34)
;vanilla values:
;C2/4A94:              .DW $0511, $0570, $0791, $07A4, $45FF, $07A9, $07AE, $07CF
;C2/4AA4:              .DW $090B, $0933, $094E, $096F, $0990, $0AA4, $0ADC, $0AFA
;C2/4AB4:              .DW $0B0F, $0B6F, $0B7A, $0B9B, $0BBF, $0C67, $0C6F, $0DE4
;C2/4AC4:              .DW $0DA2, $0DC3, $0EE0, $0EFE, $0F1F, $0F40, $1125, $0570
;C2/4AD4:              .DW $1169, $118A, $11B2, $0511, $125E, $12B3, $5B9F, $5B9F
;C2/4AE4:              .DW $1306, $1333, $13CE, $5B9F, $0814, $09DD, $0A7D, $13EF
;C2/4AF4:              .DW $141D, $1425, $1490, $14B8, $16A2

%org($C24AFE)
;Retargets a single target attack if necessary (dead/hidden/etc)
CheckRetarget:
	LDX AttackerOffset							;C2/4AFE: A6 32	       LDX $32		
	PHX									;C2/4B00: DA	       PHX		
	STZ $0E									;C2/4B01: 64 0E        STZ $0E		
	LDA MonsterTargets							;C2/4B03: A5 65        LDA $65		
	BEQ .NoMon								;C2/4B05: F0 0B        BEQ $4B12	
	INC $0E			;flag for monsters targetted			;C2/4B07: E6 0E        INC $0E		
	JSR CountSetBits							;C2/4B09: 20 C3 01     JSR $01C3	
	DEX 									;C2/4B0C: CA           DEX 		
	BEQ .SingleTarget							;C2/4B0D: F0 13        BEQ $4B22	
	JMP .Finish		;abort if multiple monster targets 		;C2/4B0F: 4C D3 4B     JMP $4BD3	
.NoMon	LDA PartyTargets							;C2/4B12: A5 66        LDA $66		
	BNE .Party								;C2/4B14: D0 03        BNE $4B19	
	JMP .Finish		;abort if no targets selected			;C2/4B16: 4C D3 4B     JMP $4BD3	
.Party	JSR CountSetBits							;C2/4B19: 20 C3 01     JSR $01C3	
	DEX 									;C2/4B1C: CA           DEX 		
	BEQ .SingleTarget							;C2/4B1D: F0 03        BEQ $4B22	
	JMP .Finish		;abort if multiple party targets		;C2/4B1F: 4C D3 4B     JMP $4BD3	

.SingleTarget
	LDA MonsterTargets	;monsters 0-7					;C2/4B22: A5 65        LDA $65		
	PHA 									;C2/4B24: 48           PHA 		
	AND #$F0		;select monsters 0-3				;C2/4B25: 29 F0        AND #$F0		
	JSR ShiftDivide_16	;shift into slots 4-7				;C2/4B27: 20 BE 01     JSR $01BE	
	ORA PartyTargets	;party into slots 0-3				;C2/4B2A: 05 66        ORA $66		
	STA $10			;first byte of target bitmask			;C2/4B2C: 85 10        STA $10		
	PLA 									;C2/4B2E: 68           PLA 		
	JSR ShiftMultiply_16	;shift monsters 4-7 into slots 8-11		;C2/4B2F: 20 B5 01     JSR $01B5	
	STA $11			;second byte of target bitmask			;C2/4B32: 85 11        STA $11		
	TDC 									;C2/4B34: 7B           TDC 		
	TAX 									;C2/4B35: AA           TAX 		
.FindTargetLoop									
	ASL $11									;C2/4B36: 06 11        ASL $11		
	ROL $10									;C2/4B38: 26 10        ROL $10		
	BCS .FoundTarget							;C2/4B3A: B0 03        BCS $4B3F	
	INX 			;due to earlier checks				;C2/4B3C: E8           INX 		
	BRA .FindTargetLoop	;there should always be a target to escape loop	;C2/4B3D: 80 F7        BRA $4B36	
										
.FoundTarget								
	LDA ActiveParticipants,X	;is target active?			;C2/4B3F: BD C2 3E     LDA $3EC2,X	
	BEQ .Retarget								;C2/4B42: F0 19        BEQ $4B5D	
	TXA 									;C2/4B44: 8A           TXA 		
	JSR CalculateCharOffset							;C2/4B45: 20 EC 01     JSR $01EC	
	LDA CharStruct.Status1,X						;C2/4B48: BD 1A 20     LDA $201A,X	
	AND #$C0		;Dead or Stone	(but still active, somehow?)	;C2/4B4B: 29 C0        AND #$C0		
	BNE .Retarget								;C2/4B4D: D0 0E        BNE $4B5D	
	LDA CharStruct.Status4,X						;C2/4B4F: BD 1D 20     LDA $201D,X	
	AND #$81		;Erased or Hidden				;C2/4B52: 29 81        AND #$81		
	BNE .Retarget								;C2/4B54: D0 07        BNE $4B5D	
	LDA CharStruct.CmdStatus,X						;C2/4B56: BD 1E 20     LDA $201E,X	
	AND #$10		;Jumping					;C2/4B59: 29 10        AND #$10		
	BEQ .Finish		;target is fine, we're done			;C2/4B5B: F0 76        BEQ $4BD3
	
.Retarget									
	LDA $0E			;flag for monsters targetted			;C2/4B5D: A5 0E        LDA $0E		
	BNE .RetargetMonster							;C2/4B5F: D0 14        BNE $4B75	
	STZ $12									;C2/4B61: 64 12        STZ $12		
	LDA #$04								;C2/4B63: A9 04        LDA #$04		
	STA $13									;C2/4B65: 85 13        STA $13		
	JSR CheckValidTargetsExist	;checks 0-3 for party			;C2/4B67: 20 D7 4B     JSR $4BD7	
	BNE .Finish			;give up if it failed			;C2/4B6A: D0 67        BNE $4BD3	
	TDC 									;C2/4B6C: 7B           TDC 		
	TAX 									;C2/4B6D: AA           TAX 		
	LDA #$03								;C2/4B6E: A9 03        LDA #$03	
	JSR Random_X_A								;C2/4B70: 20 7C 00     JSR $007C	
	BRA .TryNewTarget							;C2/4B73: 80 21        BRA $4B96	
								;:skip3
.RetargetMonster
	LDA #$04								;C2/4B75: A9 04        LDA #$04	
	STA $12									;C2/4B77: 85 12        STA $12		
	LDA #$0C								;C2/4B79: A9 0C        LDA #$0C	
	STA $13									;C2/4B7B: 85 13        STA $13		
	JSR CheckValidTargetsExist	;checks 4-11 for monsters		;C2/4B7D: 20 D7 4B     JSR $4BD7	
	BNE .Finish			;give up if it failed			;C2/4B80: D0 51        BNE $4BD3	
	LDA SandwormBattle							;C2/4B82: AD 4C 7C     LDA $7C4C	
	BEQ +									;C2/4B85: F0 07        BEQ $4B8E	
	LDX #$0004		;only retarget to holes for sandworm fight	;C2/4B87: A2 04 00     LDX #$0004	
	LDA #$06								;C2/4B8A: A9 06        LDA #$06	
	BRA ++									;C2/4B8C: 80 05        BRA $4B93	
+	LDX #$0004		;otherwise retarget to any monster slot		;C2/4B8E: A2 04 00     LDX #$0004	
	LDA #$0B								;C2/4B91: A9 0B        LDA #$0B	
++	JSR Random_X_A								;C2/4B93: 20 7C 00     JSR $007C	

.TryNewTarget
	STA $10									;C2/4B96: 85 10        STA $10		
	TAX 									;C2/4B98: AA           TAX 		
	LDA ActiveParticipants,X						;C2/4B99: BD C2 3E     LDA $3EC2,X	
	BEQ .Retarget		;if we chose an invalid target, start over	;C2/4B9C: F0 BF        BEQ $4B5D	
	LDA $10									;C2/4B9E: A5 10        LDA $10		
	JSR CalculateCharOffset							;C2/4BA0: 20 EC 01     JSR $01EC	
	LDA CharStruct.Status1,X						;C2/4BA3: BD 1A 20     LDA $201A,X
	AND #$C0		;Stone or Dead					;C2/4BA6: 29 C0        AND #$C0	
	BNE .Retarget								;C2/4BA8: D0 B3        BNE $4B5D	
	LDA CharStruct.Status4,X						;C2/4BAA: BD 1D 20     LDA $201D,X	
	AND #$81		;Erased or Hidden				;C2/4BAD: 29 81        AND #$81	
	BNE .Retarget								;C2/4BAF: D0 AC        BNE $4B5D	
	LDA CharStruct.CmdStatus,X						;C2/4BB1: BD 1E 20     LDA $201E,X	
	AND #$10		;Jumping					;C2/4BB4: 29 10        AND #$10	
	BNE .Retarget								;C2/4BB6: D0 A5        BNE $4B5D	
	LDA $0E			;flag for monsters targetted			;C2/4BB8: A5 0E        LDA $0E		
	BNE .SetMonsterTargets							;C2/4BBA: D0 0B        BNE $4BC7	
	LDA $10									;C2/4BBC: A5 10        LDA $10		
	TAX 									;C2/4BBE: AA           TAX 		
	TDC 									;C2/4BBF: 7B           TDC 		
	JSR SetBit_X								;C2/4BC0: 20 D6 01     JSR $01D6	
	STA PartyTargets							;C2/4BC3: 85 66        STA $66		
	BRA .Finish								;C2/4BC5: 80 0C        BRA $4BD3	

.SetMonsterTargets								
	SEC 									;C2/4BC7: 38           SEC 		
	LDA $10									;C2/4BC8: A5 10        LDA $10		
	SBC #$04								;C2/4BCA: E9 04        SBC #$04	
	TAX 									;C2/4BCC: AA           TAX 		
	TDC 									;C2/4BCD: 7B           TDC 		
	JSR SetBit_X								;C2/4BCE: 20 D6 01     JSR $01D6	
	STA MonsterTargets							;C2/4BD1: 85 65        STA $65		
	
.Finish	PLX 			;original AttackerOffset			;C2/4BD3: FA           PLX 		
	STX AttackerOffset							;C2/4BD4: 86 32        STX $32		
	RTS 									;C2/4BD6: 60           RTS 		
								
%org($C24BD7)
;Checks if any of the slots in a range are valid targets
;$12 is the first target to consider
;$13 is where to stop (one past the targets to check)
;result is in A and NoValidTargets, and (as it's used) also the zero flag
;returns 0 if retargetting succeeded, 1 if not
;new target offset is in X
CheckValidTargetsExist:
	LDA $12									;C2/4BD7: A5 12        LDA $12		
	TAY 									;C2/4BD9: A8           TAY 		
	LDA ActiveParticipants,Y						;C2/4BDA: B9 C2 3E     LDA $3EC2,Y	
	BEQ .CheckNext								;C2/4BDD: F0 23        BEQ $4C02	
	LDA $12									;C2/4BDF: A5 12        LDA $12		
	REP #$20								;C2/4BE1: C2 20        REP #$20		
	JSR ShiftMultiply_128							;C2/4BE3: 20 B2 01     JSR $01B2	
	TAX 									;C2/4BE6: AA           TAX 		
	TDC 									;C2/4BE7: 7B           TDC 		
	SEP #$20								;C2/4BE8: E2 20        SEP #$20		
	LDA CharStruct.Status1,X						;C2/4BEA: BD 1A 20     LDA $201A,X	
	AND #$C0		;Dead or Stone					;C2/4BED: 29 C0        AND #$C0		
	BNE .CheckNext								;C2/4BEF: D0 11        BNE $4C02	
	LDA CharStruct.Status4,X						;C2/4BF1: BD 1D 20     LDA $201D,X	
	AND #$81		;Erased or Hidden				;C2/4BF4: 29 81        AND #$81		
	BNE .CheckNext								;C2/4BF6: D0 0A        BNE $4C02	
	LDA CharStruct.CmdStatus,X						;C2/4BF8: BD 1E 20     LDA $201E,X	
	AND #$10		;Jumping					;C2/4BFB: 29 10        AND #$10		
	BNE .CheckNext								;C2/4BFD: D0 03        BNE $4C02	
	TDC 									;C2/4BFF: 7B           TDC 		
	BRA .Finish								;C2/4C00: 80 0A        BRA $4C0C	

.CheckNext								
	INC $12									;C2/4C02: E6 12        INC $12		
	LDA $12									;C2/4C04: A5 12        LDA $12		
	CMP $13									;C2/4C06: C5 13        CMP $13		
	BNE CheckValidTargetsExist						;C2/4C08: D0 CD        BNE $4BD7	
	LDA #$01								;C2/4C0A: A9 01        LDA #$01		

.Finish								
	STA NoValidTargets							;C2/4C0C: 8D 29 7C     STA $7C29	
	RTS 									;C2/4C0F: 60           RTS 		

%org($C24C10)	
;Check if the last attack was learnable blue magic, 
;and queue it for learning if needed
CheckLearnBlue:	
	LDA AttackerIndex      							;C2/4C10: A5 47        LDA $47        
	CMP #$04		;monster check					;C2/4C12: C9 04        CMP #$04
	BCS .Monster      							;C2/4C14: B0 01        BCS $4C17      
	RTS 			;can only learn from monsters			;C2/4C16: 60           RTS 
.Monster
	SEC 									;C2/4C17: 38           SEC 
	SBC #$04		;now monster index				;C2/4C18: E9 04        SBC #$04
	JSR ShiftMultiply_16      						;C2/4C1A: 20 B5 01     JSR $01B5      
	REP #$20								;C2/4C1D: C2 20        REP #$20
	CLC 									;C2/4C1F: 18           CLC 
	ADC #MonsterMagic							;C2/4C20: 69 DE 41     ADC #$41DE
	STA $3D			;address of monster blue magic table?		;C2/4C23: 85 3D        STA $3D
	TDC 									;C2/4C25: 7B           TDC 
	SEP #$20								;C2/4C26: E2 20        SEP #$20
	TDC 									;C2/4C28: 7B           TDC 
	TAY 									;C2/4C29: A8           TAY 
	STY $3F			;spell table index 				;C2/4C2A: 84 3F        STY $3F
.CheckBlueLoop
	LDY $3F									;C2/4C2C: A4 3F        LDY $3F
	LDA ($3D),Y								;C2/4C2E: B1 3D        LDA ($3D),Y
	STA $08			;monster blue magic (potentially)		;C2/4C30: 85 08        STA $08
	BEQ .EarlyRet								;C2/4C32: F0 0F        BEQ $4C43
	CMP #$FF								;C2/4C34: C9 FF        CMP #$FF
	BEQ .EarlyRet								;C2/4C36: F0 0B        BEQ $4C43
	CMP #$82		;first blue magic				;C2/4C38: C9 82        CMP #$82
	BCC .NotBlue								;C2/4C3A: 90 04        BCC $4C40
	CMP #$A0		;after last blue magic				;C2/4C3C: C9 A0        CMP #$A0
	BCC .ValidBlue								;C2/4C3E: 90 04        BCC $4C44
.NotBlue
	JMP .NextSpell								;C2/4C40: 4C DA 4C     JMP $4CDA
.EarlyRet
	RTS 									;C2/4C43: 60           RTS 
.ValidBlue
	STZ $0E								;C2/4C44: 64 0E        STZ $0E
	LDA $3F			;spell table index 			;C2/4C46: A5 3F        LDA $3F
	TAX 								;C2/4C48: AA           TAX 
	LDA ROMTimes7,X  	;*7, size of ActionAnim struct		;C2/4C49: BF 85 EE D0  LDA $D0EE85,X  
	TAX 								;C2/4C4D: AA           TAX 
	LDA ActionAnim.TargetBits,X					;C2/4C4E: BD CF 3B     LDA $3BCF,X
	STA $0F			;target bits				;C2/4C51: 85 0F        STA $0F
	LDA ActionAnim.Flags,X 						;C2/4C53: BD CC 3B     LDA $3BCC,X    
	AND #$40		;target was a monster			;C2/4C56: 29 40        AND #$40
	BEQ +								;C2/4C58: F0 07        BEQ $4C61
	LDA ActionAnim.ReflecteeBits,X					;C2/4C5A: BD D1 3B     LDA $3BD1,X    
	STA $0E			;target after reflect			;C2/4C5D: 85 0E        STA $0E
	STZ $0F			;original target doesn't matter		;C2/4C5F: 64 0F        STZ $0F
+	LDA $0F								;C2/4C61: A5 0F        LDA $0F
	ORA $0E								;C2/4C63: 05 0E        ORA $0E
	STA $0E			;final target bits			;C2/4C65: 85 0E        STA $0E
	BEQ .NextSpell		;no targets				;C2/4C67: F0 71        BEQ $4CDA
	TDC 								;C2/4C69: 7B           TDC 
	TAX 								;C2/4C6A: AA           TAX 
	STX $10								;C2/4C6B: 86 10        STX $10
.TargetLoopLDX
	LDX $10								;C2/4C6D: A6 10        LDX $10
.TargetLoop
	ASL $0E								;C2/4C6F: 06 0E        ASL $0E
	INC $10								;C2/4C71: E6 10        INC $10
	BCS .TargetHit     						;C2/4C73: B0 08        BCS $4C7D      
	INX 								;C2/4C75: E8           INX 
	CPX #$0008     							;C2/4C76: E0 08 00     CPX #$0008     
	BNE .TargetLoop							;C2/4C79: D0 F4        BNE $4C6F
	BRA .NextSpell							;C2/4C7B: 80 5D        BRA $4CDA
.TargetHit
	REP #$20							;C2/4C7D: C2 20        REP #$20
	TXA 		;target index					;C2/4C7F: 8A           TXA 
	JSR ShiftMultiply_128						;C2/4C80: 20 B2 01     JSR $01B2      
	TAY 		;target offset					;C2/4C83: A8           TAY 
	TDC 								;C2/4C84: 7B           TDC 
	SEP #$20							;C2/4C85: E2 20        SEP #$20
	LDA CharStruct.Passives1,Y					;C2/4C87: B9 20 20     LDA $2020,Y    
	AND #$10	;learning					;C2/4C8A: 29 10        AND #$10
	BEQ .TargetLoopLDX						;C2/4C8C: F0 DF        BEQ $4C6D
	LDA $08		;monster blue magic				;C2/4C8E: A5 08        LDA $08
	REP #$20							;C2/4C90: C2 20        REP #$20
	JSR ShiftMultiply_8						;C2/4C92: 20 B6 01     JSR $01B6      
	TAX 								;C2/4C95: AA           TAX 
	TDC 								;C2/4C96: 7B           TDC 
	SEP #$20							;C2/4C97: E2 20        SEP #$20
	LDA ROMMagicInfo.Misc,X						;C2/4C99: BF 82 0B D1  LDA $D10B82,X  
	AND #$F0	;flags						;C2/4C9D: 29 F0        AND #$F0
	STA $10								;C2/4C9F: 85 10        STA $10
	BMI .NextSpell  ;monster bit (monster only?)			;C2/4CA1: 30 37        BMI $4CDA      
	AND #$40	;learnable					;C2/4CA3: 29 40        AND #$40
	BEQ +								;C2/4CA5: F0 04        BEQ $4CAB
	LDA #$64       	;100%						;C2/4CA7: A9 64        LDA #$64       
	BRA .CheckLearn							;C2/4CA9: 80 12        BRA $4CBD
+	LDA $10								;C2/4CAB: A5 10        LDA $10
	AND #$20	;learnable (never used)				;C2/4CAD: 29 20        AND #$20
	BEQ +								;C2/4CAF: F0 04        BEQ $4CB5
	LDA #$32       	;50% 						;C2/4CB1: A9 32        LDA #$32       
	BRA .CheckLearn							;C2/4CB3: 80 08        BRA $4CBD
+	LDA $10								;C2/4CB5: A5 10        LDA $10
	AND #$10	;learnable (never used)				;C2/4CB7: 29 10        AND #$10
	BEQ .NextSpell							;C2/4CB9: F0 1F        BEQ $4CDA
	LDA #$0A       	;10%						;C2/4CBB: A9 0A        LDA #$0A       
.CheckLearn
	STA $0E		;chance to learn				;C2/4CBD: 85 0E        STA $0E
	JSR Random_0_99      						;C2/4CBF: 20 A2 02     JSR $02A2      
	CMP $0E								;C2/4CC2: C5 0E        CMP $0E
	BCS .NextTarget							;C2/4CC4: B0 12        BCS $4CD8
	LDA BlueLearnedCount 						;C2/4CC6: AD 20 7C     LDA $7C20
	CMP #$08       	;max 8						;C2/4CC9: C9 08        CMP #$08       
	BEQ .Ret							;C2/4CCB: F0 12        BEQ $4CDF
	TAX 								;C2/4CCD: AA           TAX 
	LDA $08		;blue spell learned				;C2/4CCE: A5 08        LDA $08
	STA BlueLearned,X    						;C2/4CD0: 9D 21 7C     STA $7C21,X    
	INC BlueLearnedCount						;C2/4CD3: EE 20 7C     INC $7C20
	BRA .NextSpell							;C2/4CD6: 80 02        BRA $4CDA
.NextTarget
	BRA .TargetLoopLDX     						;C2/4CD8: 80 93        BRA $4C6D      
.NextSpell	
	INC $3F			;spell table index			;C2/4CDA: E6 3F        INC $3F
	JMP .CheckBlueLoop      					;C2/4CDC: 4C 2C 4C     JMP $4C2C      
.Ret	RTS 								;C2/4CDF: 60           RTS 


%org($C24CE0)
StartBattle:
	JSR InitBattle									;C2/4CE0: 20 0A 4F     JSR $4F0A	
	TDC 										;C2/4CE3: 7B           TDC 		
	TAX 										;C2/4CE4: AA           TAX 		
-	ADC $0000,X		;Sum first 1000 bytes of ram				;C2/4CE5: 7D 00 00     ADC $0000,X	
	INX 										;C2/4CE8: E8           INX 		
	CPX #$03E8									;C2/4CE9: E0 E8 03     CPX #$03E8	
	BNE -										;C2/4CEC: D0 F7        BNE $4CE5	
											;					
	ADC RNGSeed		;add RNG seed						;C2/4CEE: 6D F9 0A     ADC $0AF9	
	STA RNGA									;C2/4CF1: 85 3A        STA $3A		
											;					
-	ADC $0000,X		;Sum another 1000 bytes of ram				;C2/4CF3: 7D 00 00     ADC $0000,X	
	INX 										;C2/4CF6: E8           INX 		
	CPX #$07D0									;C2/4CF7: E0 D0 07     CPX #$07D0	
	BNE -										;C2/4CFA: D0 F7        BNE $4CF3	
											;					
	STA RNGB									;C2/4CFC: 85 3B        STA $3B		

	TDC										;C2/4CFE: 7B           TDC		
	TAX 										;C2/4CFF: AA           TAX 		
-	LDA !ROMGlobalTimer,X		;copies table of constants for status timers	;C2/4D00: BF 76 29 D1  LDA $D12976,X	
	STA !GlobalTimer,X								;C2/4D04: 9D D9 3E     STA $3ED9,X	
	INX 										;C2/4D07: E8           INX 		
	CPX #$000B									;C2/4D08: E0 0B 00     CPX #$000B	
	BNE -										;C2/4D0B: D0 F3        BNE $4D00	
											;					
	LDA Config1									;C2/4D0D: AD 70 09     LDA $0970	
	AND #$0F		;battle mode and speed					;C2/4D10: 29 0F        AND #$0F		
	TAX 										;C2/4D12: AA           TAX 		
	LDA ROMBattleSpeedTable,X							;C2/4D13: BF F2 EC D0  LDA $D0ECF2,X	
	STA ATBWaitTime									;C2/4D17: 8D D6 3E     STA $3ED6	
	REP #$20									;C2/4D1A: C2 20        REP #$20		

	LDA EncounterIndex								;C2/4D1C: AD F0 04     LDA $04F0	
	JSR ShiftMultiply_16								;C2/4D1F: 20 B5 01     JSR $01B5	
	TAX 										;C2/4D22: AA           TAX 		
	TDC 										;C2/4D23: 7B           TDC 		
	SEP #$20									;C2/4D24: E2 20        SEP #$20		
	TAY 										;C2/4D26: A8           TAY 		
											;					
-	LDA !ROMEncounterInfo,X							;C2/4D27: BF 00 30 D0  LDA $D03000,X	
	STA !EncounterInfo,Y	;copy encounter info from rom				;C2/4D2B: 99 EF 3E     STA $3EEF,Y	
	INY 										;C2/4D2E: C8           INY 		
	INX 										;C2/4D2F: E8           INX 		
	CPY #$0010									;C2/4D30: C0 10 00     CPY #$0010	
	BNE -										;C2/4D33: D0 F2        BNE $4D27	

	JSR CheckOneTimeEncounters							;C2/4D35: 20 25 4E     JSR $4E25	
	TDC 										;C2/4D38: 7B           TDC 		
	TAX 										;C2/4D39: AA           TAX 		
	TAY 										;C2/4D3A: A8           TAY 		

.CopyMonsterIDs
	LDA EncounterInfo.MonsterID,X							;C2/4D3B: BD F3 3E     LDA $3EF3,X	
	STA BattleMonsterID,Y								;C2/4D3E: 99 20 40     STA $4020,Y	
	CMP #$FF									;C2/4D41: C9 FF        CMP #$FF		
	BNE +										;C2/4D43: D0 05        BNE $4D4A	
	STA BattleMonsterID+1,Y								;C2/4D45: 99 21 40     STA $4021,Y	
	BRA ++										;C2/4D48: 80 0C        BRA $4D56	
+	LDA EncounterInfo.Flags								;C2/4D4A: AD FE 3E     LDA $3EFE	
	AND #$20		;boss battle						;C2/4D4D: 29 20        AND #$20		
	BEQ ++										;C2/4D4F: F0 05        BEQ $4D56	
	LDA #$01									;C2/4D51: A9 01        LDA #$01		
	STA BattleMonsterID+1,Y								;C2/4D53: 99 21 40     STA $4021,Y	
++	INX 										;C2/4D56: E8           INX 		
	INY 										;C2/4D57: C8           INY 		
	INY 										;C2/4D58: C8           INY 		
	CPY #$0010		;8 monster slots *2					;C2/4D59: C0 10 00     CPY #$0010	
	BNE .CopyMonsterIDs								;C2/4D5C: D0 DD        BNE $4D3B	

	TDC										;C2/4D5E: 7B           TDC		
	TAY										;C2/4D5F: A8           TAY		
	TAX 										;C2/4D60: AA           TAX 		
	STX $10										;C2/4D61: 86 10        STX $10		
	LDA #$D0									;C2/4D63: A9 D0        LDA #$D0		
	STA $14										;C2/4D65: 85 14        STA $14		
	LDY #$0000									;C2/4D67: A0 00 00     LDY #$0000	
	STY $12			;$12 now holds $D00000 address				;C2/4D6A: 84 12        STY $12		
	LDY $10										;C2/4D6C: A4 10        LDY $10		
	LDA BattleMonsterID+1,Y								;C2/4D6E: B9 21 40     LDA $4021,Y	
	BEQ .CopyMonsterStats								;C2/4D71: F0 09        BEQ $4D7C	
	LDA #$D0									;C2/4D73: A9 D0        LDA #$D0		
	STA $14			;set this again, for some reason			;C2/4D75: 85 14        STA $14		
	LDY #$2000		;shift to boss section of the table			;C2/4D77: A0 00 20     LDY #$2000	
	STY $12										;C2/4D7A: 84 12        STY $12		

.CopyMonsterStats
	LDY $10										;C2/4D7C: A4 10        LDY $10		
	LDA EncounterInfo.MonsterID,Y							;C2/4D7E: B9 F3 3E     LDA $3EF3,Y	
	REP #$20									;C2/4D81: C2 20        REP #$20		
	JSR ShiftMultiply_32								;C2/4D83: 20 B4 01     JSR $01B4	
	TAY 										;C2/4D86: A8           TAY 		
	TDC 										;C2/4D87: 7B           TDC 		
	SEP #$20									;C2/4D88: E2 20        SEP #$20		
	STZ $0E										;C2/4D8A: 64 0E        STZ $0E		
											;					
-	LDA [$12],Y		;ROMMonsterStats					;C2/4D8C: B7 12        LDA [$12],Y	
	STA !MonsterStats,X								;C2/4D8E: 9D FF 3E     STA $3EFF,X	
	INY 										;C2/4D91: C8           INY 		
	INX 										;C2/4D92: E8           INX 		
	INC $0E										;C2/4D93: E6 0E        INC $0E		
	LDA $0E										;C2/4D95: A5 0E        LDA $0E		
	CMP #$20		;struct is 32 bytes long				;C2/4D97: C9 20        CMP #$20		
	BNE -										;C2/4D99: D0 F1        BNE $4D8C	
											;					
	INC $10										;C2/4D9B: E6 10        INC $10		
	LDA $10										;C2/4D9D: A5 10        LDA $10		
	CMP #$08		;8 monsters						;C2/4D9F: C9 08        CMP #$08		
	BNE .CopyMonsterStats								;C2/4DA1: D0 D9        BNE $4D7C	
;set up visible and active monster tracking										;	
	TDC 										;C2/4DA3: 7B           TDC 		
	TAX 										;C2/4DA4: AA           TAX 		
	LDA EncounterInfo.Visible							;C2/4DA5: AD F2 3E     LDA $3EF2	
	STA MonstersVisibleUnused							;C2/4DA8: 8D FF 3F     STA $3FFF	
	STA MonstersVisible								;C2/4DAB: 8D 48 40     STA $4048	
	STA MonsterKillTracker								;C2/4DAE: 8D 09 7C     STA $7C09	
	PHA 										;C2/4DB1: 48           PHA 		
	EOR #$FF									;C2/4DB2: 49 FF        EOR #$FF		
	STA InactiveMonsters								;C2/4DB4: 8D 0A 7C     STA $7C0A	
	PLA 										;C2/4DB7: 68           PLA 		
											;					
-	ASL 										;C2/4DB8: 0A           ASL 		
	BCC +										;C2/4DB9: 90 03        BCC $4DBE	
	INC InitialMonsters,X								;C2/4DBB: FE 18 40     INC $4018,X	
+	INX 										;C2/4DBE: E8           INX 		
	CPX #$0008									;C2/4DBF: E0 08 00     CPX #$0008	
	BNE -										;C2/4DC2: D0 F4        BNE $4DB8	
											;					
	REP #$20									;C2/4DC4: C2 20        REP #$20		
	LDA EncounterIndex								;C2/4DC6: AD F0 04     LDA $04F0	
	JSR ShiftMultiply_8								;C2/4DC9: 20 B6 01     JSR $01B6	
	TAX 										;C2/4DCC: AA           TAX 		
	TDC 										;C2/4DCD: 7B           TDC 		
	SEP #$20									;C2/4DCE: E2 20        SEP #$20		
	TDC 										;C2/4DD0: 7B           TDC 		
	TAY 										;C2/4DD1: A8           TAY 		
;set up monster X/Y coordinates on screen											
-	LDA ROMMonsterCoordinates,X							;C2/4DD2: BF 00 89 D0  LDA $D08900,X	
	STA MonsterCoordinates,Y							;C2/4DD6: 99 00 40     STA $4000,Y	
	INX 										;C2/4DD9: E8           INX 		
	INY 										;C2/4DDA: C8           INY 		
	CPY #$0008									;C2/4DDB: C0 08 00     CPY #$0008	
	BNE -										;C2/4DDE: D0 F2        BNE $4DD2	
											;					
	TDC										;C2/4DE0: 7B           TDC		
	TAX 										;C2/4DE1: AA           TAX 		
;override monster ID $FF to be active
-	LDA EncounterInfo.MonsterID,X							;C2/4DE2: BD F3 3E     LDA $3EF3,X	
	CMP #$FF									;C2/4DE5: C9 FF        CMP #$FF		
	BNE +										;C2/4DE7: D0 09        BNE $4DF2	
	LDA MonsterKillTracker								;C2/4DE9: AD 09 7C     LDA $7C09	
	JSR SetBit_X									;C2/4DEC: 20 D6 01     JSR $01D6	
	STA MonsterKillTracker								;C2/4DEF: 8D 09 7C     STA $7C09	
+	INX 										;C2/4DF2: E8           INX 		
	CPX #$0008									;C2/4DF3: E0 08 00     CPX #$0008	
	BNE -										;C2/4DF6: D0 EA        BNE $4DE2
											;					
	JSR LoadStatsEquipmentAI							;C2/4DF8: 20 A2 3E     JSR $3EA2	
	JSR SetupInventoryMagic								;C2/4DFB: 20 AF 41     JSR $41AF	
	JSR RandomizeOrder								;C2/4DFE: 20 D2 1F     JSR $1FD2	
	JSR ResetATBAll									;C2/4E01: 20 47 24     JSR $2447	
	JSR UpdateMonsterList								;C2/4E04: 20 41 5A     JSR $5A41	
	JSR CopyHPMPStatus								;C2/4E07: 20 21 59     JSR $5921	
	JSR SetupMusic									;C2/4E0A: 20 5C 50     JSR $505C	
	JSR CheckAmbushes								;C2/4E0D: 20 7A 4F     JSR $4F7A	
	LDA #$02		;C1 routine: init battle graphics 			;C2/4E10: A9 02        LDA #$02
	JSR CallC1									;C2/4E12: 20 69 00     JSR $0069	
	JSR AdvanceStartingATB								;C2/4E15: 20 9F 4E     JSR $4E9F	
	LDA MessageBoxes								;C2/4E18: AD 5F 3C     LDA $3C5F	
	BEQ +										;C2/4E1B: F0 05        BEQ $4E22	
	LDA #$0A		;C1 routine: execute graphics script			;C2/4E1D: A9 0A        LDA #$0A		
	JSR CallC1									;C2/4E1F: 20 69 00     JSR $0069	
+	JMP MainBattleLoop								;C2/4E22: 4C 72 58     JMP $5872	

%org($C24E25)
;set up sandworm and one-time encounters
%sub(CheckOneTimeEncounters)
CheckOneTimeEncounters:
	LDA EncounterInfo.Flags							;C2/4E25: AD FE 3E     LDA $3EFE	
	AND #$10	;sandworm						;C2/4E28: 29 10        AND #$10		
	BEQ .OneTimeEncounters							;C2/4E2A: F0 04        BEQ $4E30	
	INC SandwormBattle							;C2/4E2C: EE 4C 7C     INC $7C4C	
	RTS									;C2/4E2F: 60           RTS		

.OneTimeEncounters
	TDC 									;C2/4E30: 7B           TDC 		
	TAX 									;C2/4E31: AA           TAX 		
	STX $10									;C2/4E32: 86 10        STX $10		

.CheckEncountersLoop													
	LDX $10									;C2/4E34: A6 10        LDX $10		
	LDA EncounterIndex							;C2/4E36: AD F0 04     LDA $04F0	
	CMP ROMOneTime.Encounter,X						;C2/4E39: DF E0 FF D0  CMP $D0FFE0,X	
	BNE .Next								;C2/4E3D: D0 33        BNE $4E72	
	LDA EncounterIndex+1							;C2/4E3F: AD F1 04     LDA $04F1	
	CMP ROMOneTime.Encounter+1,X						;C2/4E42: DF E1 FF D0  CMP $D0FFE1,X	
	BNE .Next								;C2/4E46: D0 2A        BNE $4E72	
	LDA ROMOneTime.Replacement,X						;C2/4E48: BF E2 FF D0  LDA $D0FFE2,X	
	STA $12									;C2/4E4C: 85 12        STA $12		
	LDA ROMOneTime.Replacement+1,X						;C2/4E4E: BF E3 FF D0  LDA $D0FFE3,X	
	STA $13									;C2/4E52: 85 13        STA $13		

	TXA 			;always 0-28 and a multiple of 4		;C2/4E54: 8A           TXA 		
	JSR ShiftDivide_4	;0-7						;C2/4E55: 20 C0 01     JSR $01C0	
;**optimize: this whole section is pointless, but maybe they had more than 8 of these at one point
	STZ $0E									;C2/4E58: 64 0E        STZ $0E		
	LSR 									;C2/4E5A: 4A           LSR 		
	ROR $0E									;C2/4E5B: 66 0E        ROR $0E		
	LSR 									;C2/4E5D: 4A           LSR 		
	ROR $0E									;C2/4E5E: 66 0E        ROR $0E		
	LSR 									;C2/4E60: 4A           LSR 		
	ROR $0E									;C2/4E61: 66 0E        ROR $0E		
	TAY 			;always 0					;C2/4E63: A8           TAY 		
	LDA $0E									;C2/4E64: A5 0E        LDA $0E		
	JSR ShiftDivide_32	;this recovers the original 0-7 number		;C2/4E66: 20 BD 01     JSR $01BD	
	TAX 									;C2/4E69: AA           TAX 		

	LDA BattleData.EventFlags+1,Y	;Y is always 0 here			;C2/4E6A: B9 85 7C     LDA $7C85,Y	
	JSR SelectBit_X			;selects event flag for this fight	;C2/4E6D: 20 DB 01     JSR $01DB	
	BNE .ChangeEncounter		;change the fight if we've done it	;C2/4E70: D0 0F        BNE $4E81	

.Next	INC $10									;C2/4E72: E6 10        INC $10		
	INC $10									;C2/4E74: E6 10        INC $10		
	INC $10									;C2/4E76: E6 10        INC $10		
	INC $10				;+4 for next encounter replacement	;C2/4E78: E6 10        INC $10		
	LDA $10									;C2/4E7A: A5 10        LDA $10		
	CMP #$20			;8 total replacements in table		;C2/4E7C: C9 20        CMP #$20		
	BNE .CheckEncountersLoop						;C2/4E7E: D0 B4        BNE $4E34	
	RTS 									;C2/4E80: 60           RTS 

.ChangeEncounter
	REP #$20								;C2/4E81: C2 20        REP #$20		
	LDA $12			;replacement encounter				;C2/4E83: A5 12        LDA $12		
	STA EncounterIndex							;C2/4E85: 8D F0 04     STA $04F0	
	JSR ShiftMultiply_16							;C2/4E88: 20 B5 01     JSR $01B5	
	TAX 									;C2/4E8B: AA           TAX 		
	TDC 									;C2/4E8C: 7B           TDC 		
	SEP #$20								;C2/4E8D: E2 20        SEP #$20		
	TAY 									;C2/4E8F: A8           TAY 		
															
-	LDA !ROMEncounterInfo,X							;C2/4E90: BF 00 30 D0  LDA $D03000,X	
	STA !EncounterInfo,Y							;C2/4E94: 99 EF 3E     STA $3EEF,Y	
	INY 									;C2/4E97: C8           INY 		
	INX 									;C2/4E98: E8           INX 		
	CPY #$0010		;16 byte struct					;C2/4E99: C0 10 00     CPY #$0010	
	BNE -									;C2/4E9C: D0 F2        BNE $4E90	
															
	RTS									;C2/4E9E: 60           RTS
%endsub()

%org($C24E9F)
;Advances ATB so that the lowest ATB gets their turn immediately
;also applies Masamune's Initiative effect but it's buggy
%sub(AdvanceStartingATB)
AdvanceStartingATB:
	LDA #$FF								;C2/4E9F: A9 FF        LDA #$FF	
	STA $0E									;C2/4EA1: 85 0E        STA $0E	
	TDC 									;C2/4EA3: 7B           TDC 	
	TAX 									;C2/4EA4: AA           TAX 	
	TAY 									;C2/4EA5: A8           TAY 	

.FindLowestATB													
	LDA ActiveParticipants,Y						;C2/4EA6: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextLowestATB							;C2/4EA9: F0 09        BEQ $4EB4
	LDA CurrentTimer.ATB,X							;C2/4EAB: BD 7F 3D     LDA $3D7F,X
	CMP $0E									;C2/4EAE: C5 0E        CMP $0E	
	BCS .NextLowestATB							;C2/4EB0: B0 02        BCS $4EB4
	STA $0E			;current lowest					;C2/4EB2: 85 0E        STA $0E	

.NextLowestATB													
	TXA 									;C2/4EB4: 8A           TXA 	
	CLC 									;C2/4EB5: 18           CLC 	
	ADC #$0B	;next char timer offset					;C2/4EB6: 69 0B        ADC #$0B	
	TAX 									;C2/4EB8: AA           TAX 	
	INY 									;C2/4EB9: C8           INY 	
	CPY #$000C	;12 participants					;C2/4EBA: C0 0C 00     CPY #$000C
	BNE .FindLowestATB							;C2/4EBD: D0 E7        BNE $4EA6
														
	SEC									;C2/4EBF: 38           SEC	
	LDA $0E		;lowest atb						;C2/4EC0: A5 0E        LDA $0E	
	SBC #$02	;-2							;C2/4EC2: E9 02        SBC #$02	
	BCS +									;C2/4EC4: B0 01        BCS $4EC7
	TDC		;min 0							;C2/4EC6: 7B           TDC	
+	STA $0E									;C2/4EC7: 85 0E        STA $0E	
	TDC 									;C2/4EC9: 7B           TDC 	
	TAX 									;C2/4ECA: AA           TAX 	
	TAY 									;C2/4ECB: A8           TAY 	

.SubtractLowestATB
	LDA ActiveParticipants,Y						;C2/4ECC: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextSubtractLowest							;C2/4ECF: F0 09        BEQ $4EDA
	SEC 									;C2/4ED1: 38           SEC 	
	LDA CurrentTimer.ATB,X							;C2/4ED2: BD 7F 3D     LDA $3D7F,X
	SBC $0E		;lowest ATB -2						;C2/4ED5: E5 0E        SBC $0E	
	STA CurrentTimer.ATB,X							;C2/4ED7: 9D 7F 3D     STA $3D7F,X

.NextSubtractLowest
	TXA 									;C2/4EDA: 8A           TXA 	
	CLC 									;C2/4EDB: 18           CLC 
	ADC #$0B	;next char timer offset					;C2/4EDC: 69 0B        ADC #$0B	
	TAX           								;C2/4EDE: AA           TAX           
	INY           								;C2/4EDF: C8           INY           
	CPY #$000C    	;12 participants					;C2/4EE0: C0 0C 00     CPY #$000C    
	BNE .SubtractLowestATB							;C2/4EE3: D0 E7        BNE $4ECC
														
	TDC									;C2/4EE5: 7B           TDC	
	TAX 									;C2/4EE6: AA           TAX 	
	TAY 									;C2/4EE7: A8           TAY 	

	;**bug: they forgot to init $0E to zero here,
	;so this writes 1 to random timer values after setting up initiative
	;luckily, the range it can reach is all within CurrentTimer and InitialTimer
	;and the 1s written there seem fairly harmless
	
.CheckInitiative	;this generally loops 200+ times due to the bug						   
	LDA EncounterInfo.IntroFX						;C2/4EE8: AD EF 3E     LDA $3EEF
	BMI .NextInitiative	;80h: credits demo battle			;C2/4EEB: 30 0C        BMI $4EF9
	LDA CharStruct.WeaponProperties,X					;C2/4EED: BD 38 20     LDA $2038,X
	AND #$20      		;initiative					;C2/4EF0: 29 20        AND #$20    
	BEQ .NextInitiative							;C2/4EF2: F0 05        BEQ $4EF9
	LDA #$01								;C2/4EF4: A9 01        LDA #$01	
	STA CurrentTimer.ATB,Y							;C2/4EF6: 99 7F 3D     STA $3D7F,Y

.NextInitiative													
	TYA 								 	;C2/4EF9: 98           TYA 	
	CLC           								;C2/4EFA: 18           CLC         
	ADC #$0B      	;next char timer offset					;C2/4EFB: 69 0B        ADC #$0B    
	TAY           								;C2/4EFD: A8           TAY         
	JSR NextCharOffset							;C2/4EFE: 20 E0 01     JSR $01E0
	INC $0E		;should be char index, but is likely >4			;C2/4F01: E6 0E        INC $0E	
	LDA $0E									;C2/4F03: A5 0E        LDA $0E	
	CMP #$04	;4 characters, will loop until the byte wraps around	;C2/4F05: C9 04        CMP #$04	
	BNE .CheckInitiative							;C2/4F07: D0 DF        BNE $4EE8
	RTS 									;C2/4F09: 60           RTS 
%endsub()



%org($C24F0A)
%sub(InitBattle)
InitBattle:
	LDX #$0067									;C2/4F0A: A2 67 00     LDX #$0067	
	TDC 										;C2/4F0D: 7B           TDC 		
-	STA $00,X	;Clears $00-67							;C2/4F0E: 95 00        STA $00,X	
	DEX 										;C2/4F10: CA           DEX 		
	BPL -										;C2/4F11: 10 FB        BPL $4F0E	
																
	LDX #$5CD7									;C2/4F13: A2 D7 5C     LDX #$5CD7	
	TDC 										;C2/4F16: 7B           TDC 		
																
-	STA $2000,X	;Clears all of the ram used in battle, except ResetBattle	;C2/4F17: 9D 00 20     STA $2000,X	
	DEX 										;C2/4F1A: CA           DEX 		
	BPL -										;C2/4F1B: 10 FA        BPL $4F17	
	TXA 		;A now $FF							;C2/4F1D: 8A           TXA 		
	STA ATBReadyQueue								;C2/4F1E: 8D A9 41     STA $41A9		
	STA ATBReadyQueue+1								;C2/4F21: 8D AA 41     STA $41AA		
	STA ATBReadyQueue+2								;C2/4F24: 8D AB 41     STA $41AB		
	STA ATBReadyQueue+3								;C2/4F27: 8D AC 41     STA $41AC		
	STA ATBReadyQueue+4								;C2/4F2A: 8D AD 41     STA $41AD		
	STA DisplayInfo.CurrentChar							;C2/4F2D: 8D CC 41     STA $41CC		
	STA ReleasedMonsterID								;C2/4F30: 8D 4B 7C     STA $7C4B		

	LDX #$01FF									;C2/4F33: A2 FF 01     LDX #$01FF	
-	STA !GFXQueue,X		;Init gfx queue to $FF, which is considered empty	;C2/4F36: 9D 4C 38     STA $384C,X	
	DEX 										;C2/4F39: CA           DEX 		
	BPL -										;C2/4F3A: 10 FA        BPL $4F36	
																
	TDC 										;C2/4F3C: 7B           TDC 		
	TAX 										;C2/4F3D: AA           TAX 		
-	LDA !FieldData,X	;copy data like Escape count and battle event flags	;C2/4F3E: BD B4 09     LDA $09B4,X	
	STA !BattleData,X	;from field structure to battle structure		;C2/4F41: 9D 74 7C     STA $7C74,X	
	INX 										;C2/4F44: E8           INX 		
	CPX #$0020									;C2/4F45: E0 20 00     CPX #$0020	
	BNE -										;C2/4F48: D0 F4        BNE $4F3E	
																
	LDA FieldTimerEnable								;C2/4F4A: AD FB 0A     LDA $0AFB	
	STA BattleTimerEnable								;C2/4F4D: 8D 94 7C     STA $7C94	
	LDA FieldTimer									;C2/4F50: AD FC 0A     LDA $0AFC	
	STA BattleTimer 								;C2/4F53: 8D 95 7C     STA $7C95	
	LDA FieldTimer+1								;C2/4F56: AD FD 0A     LDA $0AFD	
	STA BattleTimer+1								;C2/4F59: 8D 96 7C     STA $7C96	
	INC MonsterNextForm								;C2/4F5C: EE 72 7C     INC $7C72	
	LDA #$40			;set this bit for all monsters			;C2/4F5F: A9 40        LDA #$40		
	STA CharStruct[4].CharRow							;C2/4F61: 8D 00 22     STA $2200	
	STA CharStruct[5].CharRow							;C2/4F64: 8D 80 22     STA $2280	
	STA CharStruct[6].CharRow							;C2/4F67: 8D 00 23     STA $2300	
	STA CharStruct[7].CharRow							;C2/4F6A: 8D 80 23     STA $2380	
	STA CharStruct[8].CharRow							;C2/4F6D: 8D 00 24     STA $2400	
	STA CharStruct[9].CharRow							;C2/4F70: 8D 80 24     STA $2480	
	STA CharStruct[10].CharRow							;C2/4F73: 8D 00 25     STA $2500	
	STA CharStruct[11].CharRow							;C2/4F76: 8D 80 25     STA $2580	
	RTS 										;C2/4F79: 60           RTS 
%endsub()

%org($C24F7A)
;(check for and set up preemptive and back attacks)
CheckAmbushes:
	TDC 									;C2/4F7A: 7B           TDC 		
	TAX 									;C2/4F7B: AA           TAX 		
	TAY 									;C2/4F7C: A8           TAY 		

-	LDA CharStruct.CharRow,X						;C2/4F7D: BD 00 20     LDA $2000,X	
	STA SavedCharRow,Y							;C2/4F80: 99 1A 7C     STA $7C1A,Y
	JSR NextCharOffset							;C2/4F83: 20 E0 01     JSR $01E0	
	INY 									;C2/4F86: C8           INY 
	CPY #$0004	;4 characters						;C2/4F87: C0 04 00     CPY #$0004	
	BNE -									;C2/4F8A: D0 F1        BNE $4F7D	
	
	LDA BattleMonsterID+1	;indicates boss	Monster				;C2/4F8C: AD 21 40     LDA $4021	
	BNE .CheckBackAttack							;C2/4F8F: D0 12        BNE $4FA3	
	LDA CharStruct[0].Passives2						;C2/4F91: AD 21 20     LDA $2021	
	ORA CharStruct[1].Passives2						;C2/4F94: 0D A1 20     ORA $20A1
	ORA CharStruct[2].Passives2						;C2/4F97: 0D 21 21     ORA $2121
	ORA CharStruct[3].Passives2						;C2/4F9A: 0D A1 21     ORA $21A1
	STA $0E			;combined passives2				;C2/4F9D: 85 0E        STA $0E		
	AND #$04      		;caution					;C2/4F9F: 29 04        AND #$04      	
	BNE .CheckPreemptive							;C2/4FA1: D0 27        BNE $4FCA	

.CheckBackAttack							
	LDA EncounterInfo.Flags							;C2/4FA3: AD FE 3E     LDA $3EFE	
	BMI .BackAttack		;80h: Always Back Attack			;C2/4FA6: 30 1A        BMI $4FC2	
	LDA BattleMonsterID+1							;C2/4FA8: AD 21 40     LDA $4021	
	BNE .Finish		;boss						;C2/4FAB: D0 39        BNE $4FE6	
	LDA EncounterInfo.IntroFX						;C2/4FAD: AD EF 3E     LDA $3EEF	
	BMI .Finish		;80h: Credits Demo				;C2/4FB0: 30 34        BMI $4FE6	
	LDA ResetBattle								;C2/4FB2: AD D8 7C     LDA $7CD8		
	BNE .CheckPreemptive							;C2/4FB5: D0 13        BNE $4FCA	
	TDC 									;C2/4FB7: 7B           TDC 		
	TAX 									;C2/4FB8: AA           TAX 		
	LDA #$FF								;C2/4FB9: A9 FF        LDA #$FF		
	JSR Random_X_A     							;C2/4FBB: 20 7C 00     JSR $007C     	
	CMP #$10      		;16/256 chance, or 1 in 16			;C2/4FBE: C9 10        CMP #$10      	
	BCS .CheckPreemptive							;C2/4FC0: B0 08        BCS $4FCA	

.BackAttack														
	INC BackAttack								;C2/4FC2: EE 19 7C     INC $7C19	
	JSR SetupBackAttack							;C2/4FC5: 20 EA 4F     JSR $4FEA	
	BRA .Finish								;C2/4FC8: 80 1C        BRA $4FE6

.CheckPreemptive													
	LDA #$20	;32/256 by default, or 1 in 8				;C2/4FCA: A9 20        LDA #$20		
	STA $10		;preemptive chance					;C2/4FCC: 85 10        STA $10		
	LDA $0E		;combined passives2					;C2/4FCE: A5 0E        LDA $0E		
	AND #$02      	;pre-emptive						;C2/4FD0: 29 02        AND #$02      	
	BEQ +									;C2/4FD2: F0 04        BEQ $4FD8	
	LDA #$40	;64/256, or 1 in 4					;C2/4FD4: A9 40        LDA #$40		
	STA $10									;C2/4FD6: 85 10        STA $10		
+	TDC 									;C2/4FD8: 7B           TDC 		
	TAX 									;C2/4FD9: AA           TAX 		
	LDA #$FF								;C2/4FDA: A9 FF        LDA #$FF		
	JSR Random_X_A    							;C2/4FDC: 20 7C 00     JSR $007C     	
	CMP $10       	;preemptive chance					;C2/4FDF: C5 10        CMP $10       	
	BCS .Finish								;C2/4FE1: B0 03        BCS $4FE6	
	JSR Preemptive								;C2/4FE3: 20 01 50     JSR $5001	
							;:
.Finish	STZ ResetBattle								;C2/4FE6: 9C D8 7C     STZ $7CD8
	RTS 									;C2/4FE9: 60           RTS 

%org($C24FEA)
;(sets up back attack)
SetupBackAttack:
	LDA #$1C	;back attack message					;C2/4FEA: A9 1C        LDA #$1C		
	STA MessageBoxes							;C2/4FEC: 8D 5F 3C     STA $3C5F	
	TDC 									;C2/4FEF: 7B           TDC 		
	TAX 		;first character offset to adjust ATB			;C2/4FF0: AA           TAX 		
	TAY 		;timer offset						;C2/4FF1: A8           TAY 		
	STY $0E		;first char index to adjust				;C2/4FF2: 84 0E        STY $0E		
	LDA #$04								;C2/4FF4: A9 04        LDA #$04		
	STA $10		;char index to finish on				;C2/4FF6: 85 10        STA $10		
	STZ $12		;0 to flip rows						;C2/4FF8: 64 12        STZ $12		
	LDA #$3C								;C2/4FFA: A9 3C        LDA #$3C		
	STA $16		;ATB adjustment						;C2/4FFC: 85 16        STA $16		
	JMP AdjustATB								;C2/4FFE: 4C 1D 50     JMP $501D

%org($C25001)
;(sets up pre-emptive strikes)
Preemptive:
	LDA #$1B	;pre-emptive strike message				;C2/5001: A9 1B        LDA #$1B		
	STA MessageBoxes							;C2/5003: 8D 5F 3C     STA $3C5F	
	LDX #$0200	;first character offset to adjust ATB			;C2/5006: A2 00 02     LDX #$0200	
	LDY #$002C	;timer offset						;C2/5009: A0 2C 00     LDY #$002C	
	LDA #$04								;C2/500C: A9 04        LDA #$04		
	STA $0E		;first char index to adjust				;C2/500E: 85 0E        STA $0E		
	LDA #$0C								;C2/5010: A9 0C        LDA #$0C		
	STA $10		;char index to finish on				;C2/5012: 85 10        STA $10		
	STA $12		;don't flip rows					;C2/5014: 85 12        STA $12		
	LDA #$5A								;C2/5016: A9 5A        LDA #$5A	
	STA $16		;ATB adjustment						;C2/5018: 85 16        STA $16		
	JMP AdjustATB								;C2/501A: 4C 1D 50     JMP $501D

%org($C2501D)
;(finishes pre-emptive/back attack processing, but written such it could be used in different ways)
;X: first character offset to adjust ATB
;Y: timer offset
;$0E: first char index to adjust
;$10: char index to finish on
;$12: 0 to flip rows
;$16: ATB adjustment
AdjustATB:
	LDA CharStruct.WeaponProperties,X  					;C2/501D: BD 38 20     LDA $2038,X  	
	AND #$20	;initiative						;C2/5020: 29 20        AND #$20		
	BNE .SwapRow	;skips atb adjustment for back attack			;C2/5022: D0 11        BNE $5035	
	CLC 									;C2/5024: 18           CLC 		
	LDA CurrentTimer.ATB,Y							;C2/5025: B9 7F 3D     LDA $3D7F,Y	
	ADC $16									;C2/5028: 65 16        ADC $16		
	BCC +									;C2/502A: 90 02        BCC $502E	
	LDA #$FF	;cap at 255						;C2/502C: A9 FF        LDA #$FF		
+	STA CurrentTimer.ATB,Y							;C2/502E: 99 7F 3D     STA $3D7F,Y	
	LDA $12									;C2/5031: A5 12        LDA $12		
	BNE .Next								;C2/5033: D0 13        BNE $5048

.SwapRow														
	LDA CharStruct.CharRow,X						;C2/5035: BD 00 20     LDA $2000,X	
	AND #$7F								;C2/5038: 29 7F        AND #$7F		
	STA $14		;everything but row					;C2/503A: 85 14        STA $14		
	LDA CharStruct.CharRow,X						;C2/503C: BD 00 20     LDA $2000,X	
	AND #$80	;row							;C2/503F: 29 80        AND #$80		
	EOR #$80	;flip row						;C2/5041: 49 80        EOR #$80		
	ORA $14		;recombine						;C2/5043: 05 14        ORA $14		
	STA CharStruct.CharRow,X						;C2/5045: 9D 00 20     STA $2000,X	

.Next								
	JSR NextCharOffset							;C2/5048: 20 E0 01     JSR $01E0	
	TYA 									;C2/504B: 98           TYA 		
	CLC 									;C2/504C: 18           CLC 
	ADC #$0B	;next character timer offset				;C2/504D: 69 0B        ADC #$0B		
	TAY 									;C2/504F: A8           TAY 
	INC $0E		;char index						;C2/5050: E6 0E        INC $0E		
	LDA $0E									;C2/5052: A5 0E        LDA $0E
	CMP $10		;end index						;C2/5054: C5 10        CMP $10		
	BNE AdjustATB								;C2/5056: D0 C5        BNE $501D	
	TDC 									;C2/5058: 7B           TDC 		
	JMP GFXCmdMessageClearAnim						;C2/5059: 4C 47 58     JMP $5847	


%org($C2505C)
;set up combat music
SetupMusic:
	LDA EncounterInfo.Music							;C2/505C: AD FD 3E     LDA $3EFD	
	BMI .Ret								;C2/505F: 30 0E        BMI $506F	
	LDA EncounterInfo.Music							;C2/5061: AD FD 3E     LDA $3EFD	
	JSR ShiftDivide_8							;C2/5064: 20 BF 01     JSR $01BF	
	TAX 									;C2/5067: AA           TAX 		
	LDA ROMMusicTable,X							;C2/5068: BF DF EE D0  LDA $D0EEDF,X	
	JSR MusicChange								;C2/506C: 20 6E 00     JSR $006E	
.Ret	RTS 									;C2/506F: 60           RTS 

%org($C25070)
%sub(EndBattle)
EndBattle:
	JSR WipeDisplayStructures						;C2/5070: 20 18 02     JSR $0218      
	LDX #$0007		;clear 8 bytes					;C2/5073: A2 07 00     LDX #$0007
-	STZ FieldItemsWon,X							;C2/5076: 9E 3B 01     STZ $013B,X
	STZ BattleItemsWon,X							;C2/5079: 9E 66 7C     STZ $7C66,X
	DEX 									;C2/507C: CA           DEX 
	BPL -									;C2/507D: 10 F7        BPL $5076
	LDA ResetBattle								;C2/507F: AD D8 7C     LDA $7CD8
	BEQ .CheckDead								;C2/5082: F0 03        BEQ $5087
	JMP .Finish								;C2/5084: 4C 42 51     JMP $5142

.CheckDead
	LDA BattleOver								;C2/5087: AD DE 7B     LDA $7BDE
	AND #$40		;party dead					;C2/508A: 29 40        AND #$40
	BEQ .CheckEscaped							;C2/508C: F0 17        BEQ $50A5
	LDA #$01								;C2/508E: A9 01        LDA #$01
	JSR GFXCmdMessageClearAnim						;C2/5090: 20 47 58     JSR $5847
	LDA #$75    		;game over music				;C2/5093: A9 75        LDA #$75       
	JSR MusicChange								;C2/5095: 20 6E 00     JSR $006E      
	LDA #$01		;game over flag					;C2/5098: A9 01        LDA #$01
	STA BattleData.EventFlags						;C2/509A: 8D 84 7C     STA $7C84
	LDA #$2A		;message					;C2/509D: A9 2A        LDA #$2A
	STA MessageBoxes							;C2/509F: 8D 5F 3C     STA $3C5F
	JMP .MessageDisplay							;C2/50A2: 4C 17 51     JMP $5117

.CheckEscaped
	LDA BattleOver								;C2/50A5: AD DE 7B     LDA $7BDE
	AND #$01		;escaped					;C2/50A8: 29 01        AND #$01
	BEQ .CheckVictory  							;C2/50AA: F0 30        BEQ $50DC      
	LDA #$02		;escaped flag					;C2/50AC: A9 02        LDA #$02
	STA BattleData.EventFlags						;C2/50AE: 8D 84 7C     STA $7C84
	LDA #$80		;??						;C2/50B1: A9 80        LDA #$80
	STA ActionAnim.TargetBits						;C2/50B3: 8D CF 3B     STA $3BCF
	LDA #$0C		;C1 routine					;C2/50B6: A9 0C        LDA #$0C
	JSR CallC1   								;C2/50B8: 20 69 00     JSR $0069      
	JSR ResetStats								;C2/50BB: 20 5C 51     JSR $515C
	JSR ApplyPartyGear							;C2/50BE: 20 5E 9A     JSR $9A5E      
	JSR UpdateFieldData							;C2/50C1: 20 F4 51     JSR $51F4
	LDA #$2B		;message					;C2/50C4: A9 2B        LDA #$2B
	STA MessageBoxes							;C2/50C6: 8D 5F 3C     STA $3C5F
	TDC 									;C2/50C9: 7B           TDC 
	JSR GFXCmdMessageClearAnim						;C2/50CA: 20 47 58     JSR $5847
	CLC 									;C2/50CD: 18           CLC 
	LDA BattleData.Escapes							;C2/50CE: AD 75 7C     LDA $7C75      
	ADC #$01								;C2/50D1: 69 01        ADC #$01
	BCC +									;C2/50D3: 90 02        BCC $50D7
	LDA #$FF    		;255 cap					;C2/50D5: A9 FF        LDA #$FF       
+	STA BattleData.Escapes							;C2/50D7: 8D 75 7C     STA $7C75
	BRA .MessageDisplay							;C2/50DA: 80 3B        BRA $5117

.CheckVictory
	STZ BattleData.EventFlags	;victory				;C2/50DC: 9C 84 7C     STZ $7C84
	JSR ResetStats								;C2/50DF: 20 5C 51     JSR $515C
	LDA BattleOver								;C2/50E2: AD DE 7B     LDA $7BDE
	BPL .NoReward		;ended in a way other than enemies dying	;C2/50E5: 10 28        BPL $510F
	LDA EncounterInfo.Flags							;C2/50E7: AD FE 3E     LDA $3EFE
	AND #$02		;no reward flag					;C2/50EA: 29 02        AND #$02
	BNE .NoReward								;C2/50EC: D0 21        BNE $510F
	LDA EncounterInfo.Music							;C2/50EE: AD FD 3E     LDA $3EFD
	BMI +			;no track change				;C2/50F1: 30 05        BMI $50F8
	LDA #$70    		;victory music					;C2/50F3: A9 70        LDA #$70       
	JSR MusicChange   							;C2/50F5: 20 6E 00     JSR $006E      
+	LDA #$0D		;C1 routine					;C2/50F8: A9 0D        LDA #$0D
	JSR CallC1  								;C2/50FA: 20 69 00     JSR $0069      
	LDA #$01								;C2/50FD: A9 01        LDA #$01
	JSR GFXCmdMessageClearAnim						;C2/50FF: 20 47 58     JSR $5847
	LDA #$29		;message					;C2/5102: A9 29        LDA #$29
	STA MessageBoxes							;C2/5104: 8D 5F 3C     STA $3C5F
	LDA #$0A		;C1 routine: execute graphics script		;C2/5107: A9 0A        LDA #$0A
	JSR CallC1   								;C2/5109: 20 69 00     JSR $0069      
	JSR GetLootExp								;C2/510C: 20 A2 52     JSR $52A2
.NoReward
	JSR ApplyPartyGear   							;C2/510F: 20 5E 9A     JSR $9A5E      
	JSR UpdateFieldData							;C2/5112: 20 F4 51     JSR $51F4
	BRA .CleanupItems							;C2/5115: 80 05        BRA $511C

.MessageDisplay			;maybe also item drop window?
	LDA #$0A		;C1 routine: execute graphics script		;C2/5117: A9 0A        LDA #$0A
	JSR CallC1    								;C2/5119: 20 69 00     JSR $0069      

.CleanupItems
	JSL CleanupFieldItems_D0						;C2/511C: 22 78 EF D0  JSL $D0EF78    
	JSR MergeItemDupes							;C2/5120: 20 C2 51     JSR $51C2
	TDC 									;C2/5123: 7B           TDC 
	TAX 									;C2/5124: AA           TAX 

.CopyBattleData
	LDA !BattleData,X							;C2/5125: BD 74 7C     LDA $7C74,X
	STA !FieldData,X							;C2/5128: 9D B4 09     STA $09B4,X
	INX 									;C2/512B: E8           INX 
	CPX #$0020		;32 bytes data copied				;C2/512C: E0 20 00     CPX #$0020
	BNE .CopyBattleData							;C2/512F: D0 F4        BNE $5125

	LDA BattleTimer								;C2/5131: AD 95 7C     LDA $7C95
	STA FieldTimer								;C2/5134: 8D FC 0A     STA $0AFC
	LDA BattleTimer+1							;C2/5137: AD 96 7C     LDA $7C96
	STA FieldTimer+1							;C2/513A: 8D FD 0A     STA $0AFD
	LDA #$0E		;C1 routine					;C2/513D: A9 0E        LDA #$0E
	JSR CallC1   								;C2/513F: 20 69 00     JSR $0069       

.Finish
	TDC 									;C2/5142: 7B           TDC 
	TAX 									;C2/5143: AA           TAX 
-	ORA BattleItemsWon,X							;C2/5144: 1D 66 7C     ORA $7C66,X
	INX 									;C2/5147: E8           INX 
	CPX #$0008								;C2/5148: E0 08 00     CPX #$0008
	BNE -									;C2/514B: D0 F7        BNE $5144
	PHA 		;non-zero A means there was an item drop		;C2/514D: 48           PHA 
	PLA 									;C2/514E: 68           PLA 
	BNE .Ret								;C2/514F: D0 0A        BNE $515B
	LDA EncounterInfo.Music							;C2/5151: AD FD 3E     LDA $3EFD
	BMI .Ret	;no track change					;C2/5154: 30 05        BMI $515B
	LDA #$7F    								;C2/5156: A9 7F        LDA #$7F        
	JSR MusicChange								;C2/5158: 20 6E 00     JSR $006E       
.Ret	RTS 									;C2/515B: 60           RTS 
%endsub()


%org($C2515C)
ResetStats:
	TDC 									;C2/515C: 7B           TDC 
	TAY 									;C2/515D: A8           TAY 
	TAX 									;C2/515E: AA           TAX 
	STX $0E									;C2/515F: 86 0E        STX $0E

.CopyBaseStats
	LDA FieldChar.Level,Y							;C2/5161: B9 02 05     LDA $0502,Y
	STA CharStruct.Level,X  						;C2/5164: 9D 02 20     STA $2002,X    
	LDA FieldChar.BaseStr,Y							;C2/5167: B9 24 05     LDA $0524,Y
	STA CharStruct.BaseStr,X  						;C2/516A: 9D 24 20     STA $2024,X    
	LDA FieldChar.BaseAgi,Y							;C2/516D: B9 25 05     LDA $0525,Y
	STA CharStruct.BaseAgi,X  						;C2/5170: 9D 25 20     STA $2025,X    
	LDA FieldChar.BaseVit,Y							;C2/5173: B9 26 05     LDA $0526,Y
	STA CharStruct.BaseVit,X  						;C2/5176: 9D 26 20     STA $2026,X    
	LDA FieldChar.BaseMag,Y							;C2/5179: B9 27 05     LDA $0527,Y
	STA CharStruct.BaseMag,X  						;C2/517C: 9D 27 20     STA $2027,X    
	JSR NextCharOffset   							;C2/517F: 20 E0 01     JSR $01E0      
	REP #$20								;C2/5182: C2 20        REP #$20
	TYA 									;C2/5184: 98           TYA 
	CLC 									;C2/5185: 18           CLC 
	ADC #$0050		;size of FieldChar struct			;C2/5186: 69 50 00     ADC #$0050
	TAY          								;C2/5189: A8           TAY            
	TDC 									;C2/518A: 7B           TDC 
	SEP #$20								;C2/518B: E2 20        SEP #$20
	INC $0E									;C2/518D: E6 0E        INC $0E
	LDA $0E									;C2/518F: A5 0E        LDA $0E
	CMP #$04		;4 chars					;C2/5191: C9 04        CMP #$04
	BNE .CopyBaseStats   							;C2/5193: D0 CC        BNE $5161      

	TDC 									;C2/5195: 7B           TDC 
	TAX 									;C2/5196: AA           TAX 
	STX $0E									;C2/5197: 86 0E        STX $0E
	STX $10									;C2/5199: 86 10        STX $10

.ClearEffects
	LDX $0E									;C2/519B: A6 0E        LDX $0E
	STZ CharStruct.CmdStatus,X						;C2/519D: 9E 1E 20     STZ $201E,X    
	STZ CharStruct.DamageMod,X						;C2/51A0: 9E 1F 20     STZ $201F,X    
	STZ CharStruct.ElementUp,X						;C2/51A3: 9E 22 20     STZ $2022,X    
	TDC 									;C2/51A6: 7B           TDC 
	TAY 									;C2/51A7: A8           TAY 

.ClearResists	;resists, status immunities, weapon/armor properties
	STZ CharStruct.EAbsorb,X  						;C2/51A8: 9E 30 20     STZ $2030,X    
	INX 									;C2/51AB: E8           INX 
	INY 									;C2/51AC: C8           INY 
	CPY #$000A		;10 bytes data cleared				;C2/51AD: C0 0A 00     CPY #$000A
	BNE .ClearResists							;C2/51B0: D0 F6        BNE $51A8

	LDX $0E									;C2/51B2: A6 0E        LDX $0E
	JSR NextCharOffset							;C2/51B4: 20 E0 01     JSR $01E0      
	STX $0E									;C2/51B7: 86 0E        STX $0E
	INC $10									;C2/51B9: E6 10        INC $10
	LDA $10									;C2/51BB: A5 10        LDA $10
	CMP #$04		;4 chars					;C2/51BD: C9 04        CMP #$04
	BNE .ClearEffects    							;C2/51BF: D0 DA        BNE $519B      
	RTS 									;C2/51C1: 60           RTS 

%org($C251C2)
;Checks for any duplicate item ids, and merge them together if they match
MergeItemDupes:
	TDC 									;C2/51C2: 7B           TDC 
	TAX 									;C2/51C3: AA           TAX 
.BaseLoop
	TXY 									;C2/51C4: 9B           TXY 
	INY 									;C2/51C5: C8           INY 
.SearchLoop
	LDA FieldItems,X							;C2/51C6: BD 40 06     LDA $0640,X    
	BEQ .NextBaseItem							;C2/51C9: F0 22        BEQ $51ED
	CMP FieldItems,Y							;C2/51CB: D9 40 06     CMP $0640,Y
	BNE .NextSearchItem							;C2/51CE: D0 17        BNE $51E7
	CLC 									;C2/51D0: 18           CLC 
	LDA FieldItemsQty,X	;match, merge quantities into base item		;C2/51D1: BD 40 07     LDA $0740,X    
	ADC FieldItemsQty,Y							;C2/51D4: 79 40 07     ADC $0740,Y
	CMP #$63								;C2/51D7: C9 63        CMP #$63
	BCC +									;C2/51D9: 90 02        BCC $51DD
	LDA #$63		;max 99						;C2/51DB: A9 63        LDA #$63
+	STA FieldItemsQty,X							;C2/51DD: 9D 40 07     STA $0740,X
	TDC 			;clear dupe's old slot				;C2/51E0: 7B           TDC 
	STA FieldItems,Y							;C2/51E1: 99 40 06     STA $0640,Y
	STA FieldItemsQty,Y							;C2/51E4: 99 40 07     STA $0740,Y
.NextSearchItem
	INY 									;C2/51E7: C8           INY 
	CPY #$0100								;C2/51E8: C0 00 01     CPY #$0100
	BNE .SearchLoop								;C2/51EB: D0 D9        BNE $51C6
.NextBaseItem
	INX 									;C2/51ED: E8           INX 
	CPX #$00FF								;C2/51EE: E0 FF 00     CPX #$00FF
	BNE .BaseLoop								;C2/51F1: D0 D1        BNE $51C4
	RTS 									;C2/51F3: 60           RTS 

%org($C251F4)
;Restores original Max HP and resists
;Copies character stats and inventory from battle to field structures
;Updates play time frame count
UpdateFieldData:
	TDC 									;C2/51F4: 7B           TDC 
	TAX 									;C2/51F5: AA           TAX 
	TAY 									;C2/51F6: A8           TAY 
	STY $10									;C2/51F7: 84 10        STY $10
	STX $12									;C2/51F9: 86 12        STX $12

.CopyCharLoop
	STZ $0E									;C2/51FB: 64 0E        STZ $0E
	LDA $10			;char index					;C2/51FD: A5 10        LDA $10
	TAX 									;C2/51FF: AA           TAX 
	LDA GiantDrink,X 							;C2/5200: BD 59 7C     LDA $7C59,X   
	BEQ .ResetStatus							;C2/5203: F0 1B        BEQ $5220
	PHY 									;C2/5205: 5A           PHY 
	LDA $10									;C2/5206: A5 10        LDA $10
	ASL 									;C2/5208: 0A           ASL 
	TAY 									;C2/5209: A8           TAY 
	REP #$20								;C2/520A: C2 20        REP #$20
	LDA OriginalMaxHP,Y 	;resets giant drink hp increase			;C2/520C: B9 11 7C     LDA $7C11,Y   
	LDX $12			;char offset					;C2/520F: A6 12        LDX $12
	STA CharStruct.MaxHP,X							;C2/5211: 9D 08 20     STA $2008,X   
	CMP CharStruct.CurHP,X							;C2/5214: DD 06 20     CMP $2006,X
	BCS +									;C2/5217: B0 03        BCS $521C
	STA CharStruct.CurHP,X 							;C2/5219: 9D 06 20     STA $2006,X   
+	TDC 									;C2/521C: 7B           TDC 
	SEP #$20								;C2/521D: E2 20        SEP #$20
	PLY 									;C2/521F: 7A           PLY 

.ResetStatus			;keeps Status1 though
	LDX $12			;char offset					;C2/5220: A6 12        LDX $12
	STZ CharStruct.Status2,X 						;C2/5222: 9E 1B 20     STZ $201B,X   
	STZ CharStruct.Status3,X 						;C2/5225: 9E 1C 20     STZ $201C,X   
	STZ CharStruct.Status4,X 						;C2/5228: 9E 1D 20     STZ $201D,X   
	STZ CharStruct.CmdStatus,X						;C2/522B: 9E 1E 20     STZ $201E,X   
	LDX $10			;char index					;C2/522E: A6 10        LDX $10
	LDA SavedCharRow,X	 						;C2/5230: BD 1A 7C     LDA $7C1A,X   
	LDX $12									;C2/5233: A6 12        LDX $12
	STA CharStruct.CharRow,X						;C2/5235: 9D 00 20     STA $2000,X   

.CopyStats
	LDA !CharStruct,X							;C2/5238: BD 00 20     LDA $2000,X   
	STA !FieldChar,Y							;C2/523B: 99 00 05     STA $0500,Y
	INX 									;C2/523E: E8           INX 
	INY 									;C2/523F: C8           INY 
	INC $0E									;C2/5240: E6 0E        INC $0E
	LDA $0E									;C2/5242: A5 0E        LDA $0E
	CMP #$46		;70 bytes					;C2/5244: C9 46        CMP #$46
	BNE .CopyStats								;C2/5246: D0 F0        BNE $5238

	REP #$20								;C2/5248: C2 20        REP #$20
	TYA 									;C2/524A: 98           TYA 
	CLC 									;C2/524B: 18           CLC 
	ADC #$000A		;10 bytes, adding up to size of FieldChar	;C2/524C: 69 0A 00     ADC #$000A
	TAY 									;C2/524F: A8           TAY 
	TDC 									;C2/5250: 7B           TDC 
	SEP #$20								;C2/5251: E2 20        SEP #$20
	LDX $12									;C2/5253: A6 12        LDX $12
	JSR NextCharOffset							;C2/5255: 20 E0 01     JSR $01E0     
	STX $12									;C2/5258: 86 12        STX $12
	INC $10									;C2/525A: E6 10        INC $10
	LDA $10									;C2/525C: A5 10        LDA $10
	CMP #$04		;4 chars					;C2/525E: C9 04        CMP #$04
	BNE .CopyCharLoop							;C2/5260: D0 99        BNE $51FB

	LDX #$00FF								;C2/5262: A2 FF 00     LDX #$00FF
.CopyInventory
	LDA InventoryItems,X							;C2/5265: BD 34 27     LDA $2734,X
	STA FieldItems,X 							;C2/5268: 9D 40 06     STA $0640,X   
	BNE .CopyQty								;C2/526B: D0 03        BNE $5270
	TDC 			;Qty 0 for empty slot				;C2/526D: 7B           TDC 
	BRA +									;C2/526E: 80 03        BRA $5273
.CopyQty
	LDA InventoryQuantities,X						;C2/5270: BD 34 28     LDA $2834,X
+	STA FieldItemsQty,X 							;C2/5273: 9D 40 07     STA $0740,X   
	BNE +									;C2/5276: D0 03        BNE $527B
	STA FieldItems,X		;Empty slot for Qty 0			;C2/5278: 9D 40 06     STA $0640,X
+	DEX 									;C2/527B: CA           DEX 
	BPL .CopyInventory							;C2/527C: 10 E7        BPL $5265

	;update played time (32 bit frame count)
	REP #$20								;C2/527E: C2 20        REP #$20
	CLC 									;C2/5280: 18           CLC 
	LDA FieldFrameCount   							;C2/5281: AD 4A 09     LDA $094A     
	ADC.w BattleFrameCount 							;C2/5284: 6D 6E DB     ADC $DB6E     
	STA FieldFrameCount							;C2/5287: 8D 4A 09     STA $094A
	LDA FieldFrameCount+2  							;C2/528A: AD 4C 09     LDA $094C         
	ADC.w BattleFrameCount+2   						;C2/528D: 6D 70 DB     ADC $DB70         
	STA FieldFrameCount+2							;C2/5290: 8D 4C 09     STA $094C
	BCC +	  								;C2/5293: 90 09        BCC $529E         
	LDA #$FFFF								;C2/5295: A9 FF FF     LDA #$FFFF
	STA FieldFrameCount							;C2/5298: 8D 4A 09     STA $094A
	STA FieldFrameCount+2							;C2/529B: 8D 4C 09     STA $094C
+	TDC 									;C2/529E: 7B           TDC 
	SEP #$20								;C2/529F: E2 20        SEP #$20
	RTS 									;C2/52A1: 60           RTS 

%org($C252A2)
;Adds Gil, Exp and AP from monsters
;queues up any item drops to be collected later
;applies level and job level ups
%sub(GetLootExp)
GetLootExp:
	LDA MonsterKillTracker							;C2/52A2: AD 09 7C     LDA $7C09
	EOR #$FF								;C2/52A5: 49 FF        EOR #$FF
	STA MonsterKillTracker	;inverted, anything killed is now set		;C2/52A7: 8D 09 7C     STA $7C09
	JSR CountSetBits     							;C2/52AA: 20 C3 01     JSR $01C3      
	REP #$20								;C2/52AD: C2 20        REP #$20
	TXA 									;C2/52AF: 8A           TXA 
	CLC 									;C2/52B0: 18           CLC 
	ADC MonsterKillCount							;C2/52B1: 6D 4E 09     ADC $094E
	BCC +									;C2/52B4: 90 03        BCC $52B9
	LDA #$FFFF		;max 65535 tracked kills			;C2/52B6: A9 FF FF     LDA #$FFFF
+	STA MonsterKillCount							;C2/52B9: 8D 4E 09     STA $094E
	TDC 									;C2/52BC: 7B           TDC 
	SEP #$20								;C2/52BD: E2 20        SEP #$20
	TDC 									;C2/52BF: 7B           TDC 
	TAX 									;C2/52C0: AA           TAX 
	STX VictoryGil								;C2/52C1: 8E 0B 7C     STX $7C0B
	STX VictoryGil+2	;also clears first byte of VictoryExp		;C2/52C4: 8E 0D 7C     STX $7C0D
	STX VictoryExp+1							;C2/52C7: 8E 0F 7C     STX $7C0F
	STX TempMonsterIndex							;C2/52CA: 86 3D        STX $3D
	LDY #$0200		;first monster offset				;C2/52CC: A0 00 02     LDY #$0200
	STY TempMonsterOffset							;C2/52CF: 84 3F        STY $3F

.TallyLoot	;gil, exp and drops
	LDX TempMonsterIndex	;monster index					;C2/52D1: A6 3D        LDX $3D
	LDA MonsterKillTracker							;C2/52D3: AD 09 7C     LDA $7C09
	JSR SelectBit_X    							;C2/52D6: 20 DB 01     JSR $01DB      
	BEQ .NextLoot								;C2/52D9: F0 39        BEQ $5314
	CLC 									;C2/52DB: 18           CLC 
	LDA VictoryGil								;C2/52DC: AD 0B 7C     LDA $7C0B
	ADC CharStruct.RewardGil,Y						;C2/52DF: 79 69 20     ADC $2069,Y
	STA VictoryGil								;C2/52E2: 8D 0B 7C     STA $7C0B
	LDA VictoryGil+1							;C2/52E5: AD 0C 7C     LDA $7C0C
	ADC CharStruct.RewardGil+1,Y						;C2/52E8: 79 6A 20     ADC $206A,Y
	STA VictoryGil+1							;C2/52EB: 8D 0C 7C     STA $7C0C
	LDA VictoryGil+2							;C2/52EE: AD 0D 7C     LDA $7C0D
	ADC #$00		;for carry					;C2/52F1: 69 00        ADC #$00
	STA VictoryGil+2							;C2/52F3: 8D 0D 7C     STA $7C0D
	CLC 									;C2/52F6: 18           CLC 
	LDA VictoryExp								;C2/52F7: AD 0E 7C     LDA $7C0E
	ADC CharStruct.RewardExp,Y						;C2/52FA: 79 67 20     ADC $2067,Y
	STA VictoryExp								;C2/52FD: 8D 0E 7C     STA $7C0E
	LDA VictoryExp+1							;C2/5300: AD 0F 7C     LDA $7C0F
	ADC CharStruct.RewardExp+1,Y						;C2/5303: 79 68 20     ADC $2068,Y
	STA VictoryExp+1							;C2/5306: 8D 0F 7C     STA $7C0F
	LDA VictoryExp+2							;C2/5309: AD 10 7C     LDA $7C10
	ADC #$00		;for carry					;C2/530C: 69 00        ADC #$00
	STA VictoryExp+2							;C2/530E: 8D 10 7C     STA $7C10
	JSR DropMonsterLoot							;C2/5311: 20 9A 56     JSR $569A
.NextLoot
	LDY TempMonsterOffset							;C2/5314: A4 3F        LDY $3F
	REP #$20								;C2/5316: C2 20        REP #$20
	TYA 									;C2/5318: 98           TYA 
	CLC 									;C2/5319: 18           CLC 
	ADC #$0080		;next monster offset				;C2/531A: 69 80 00     ADC #$0080
	TAY 									;C2/531D: A8           TAY 
	TDC 									;C2/531E: 7B           TDC 
	SEP #$20								;C2/531F: E2 20        SEP #$20
	STY TempMonsterOffset							;C2/5321: 84 3F        STY $3F
	INC TempMonsterIndex	;monster index					;C2/5323: E6 3D        INC $3D
	LDA TempMonsterIndex							;C2/5325: A5 3D        LDA $3D
	CMP #$08		;8 monsters					;C2/5327: C9 08        CMP #$08
	BNE .TallyLoot								;C2/5329: D0 A6        BNE $52D1

	CLC 									;C2/532B: 18           CLC 
	LDA Gil									;C2/532C: AD 47 09     LDA $0947
	ADC VictoryGil								;C2/532F: 6D 0B 7C     ADC $7C0B
	STA Gil									;C2/5332: 8D 47 09     STA $0947
	LDA Gil+1								;C2/5335: AD 48 09     LDA $0948
	ADC VictoryGil+1							;C2/5338: 6D 0C 7C     ADC $7C0C
	STA Gil+1								;C2/533B: 8D 48 09     STA $0948
	LDA Gil+2								;C2/533E: AD 49 09     LDA $0949
	ADC VictoryGil+2							;C2/5341: 6D 0D 7C     ADC $7C0D
	STA Gil+2								;C2/5344: 8D 49 09     STA $0949
	SEC 			;cap gil at 9999999				;C2/5347: 38           SEC 
	LDA Gil									;C2/5348: AD 47 09     LDA $0947
	SBC #$7F								;C2/534B: E9 7F        SBC #$7F
	LDA Gil+1								;C2/534D: AD 48 09     LDA $0948
	SBC #$96								;C2/5350: E9 96        SBC #$96
	LDA Gil+2								;C2/5352: AD 49 09     LDA $0949
	SBC #$98								;C2/5355: E9 98        SBC #$98
	BCC .AddAP								;C2/5357: 90 0F        BCC $5368
	LDA #$7F								;C2/5359: A9 7F        LDA #$7F
	STA Gil									;C2/535B: 8D 47 09     STA $0947
	LDA #$96								;C2/535E: A9 96        LDA #$96
	STA Gil+1								;C2/5360: 8D 48 09     STA $0948
	LDA #$98								;C2/5363: A9 98        LDA #$98
	STA Gil+2								;C2/5365: 8D 49 09     STA $0949

.AddAP
	LDA EncounterInfo.AP							;C2/5368: AD F1 3E     LDA $3EF1
	TAX 									;C2/536B: AA           TAX 
	STX $0E			;encounter ap					;C2/536C: 86 0E        STX $0E
	TDC 									;C2/536E: 7B           TDC 
	TAX 									;C2/536F: AA           TAX 
	STX $10									;C2/5370: 86 10        STX $10
	STX $12									;C2/5372: 86 12        STX $12
.APLoop
	LDA $12			;char index					;C2/5374: A5 12        LDA $12
	TAY 									;C2/5376: A8           TAY 
	LDA ActiveParticipants,Y						;C2/5377: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextAP								;C2/537A: F0 15        BEQ $5391
	INC $10			;count of active chars				;C2/537C: E6 10        INC $10
	REP #$20								;C2/537E: C2 20        REP #$20
	CLC 									;C2/5380: 18           CLC 
	LDA CharStruct.AP,X							;C2/5381: BD 3B 20     LDA $203B,X
	ADC $0E			;encounter ap					;C2/5384: 65 0E        ADC $0E
	BCC +									;C2/5386: 90 03        BCC $538B
	LDA #$FFFF		;cap at 65535					;C2/5388: A9 FF FF     LDA #$FFFF
+	STA CharStruct.AP,X							;C2/538B: 9D 3B 20     STA $203B,X
	TDC 									;C2/538E: 7B           TDC 
	SEP #$20								;C2/538F: E2 20        SEP #$20
.NextAP
	JSR NextCharOffset							;C2/5391: 20 E0 01     JSR $01E0      
	INC $12			;char index					;C2/5394: E6 12        INC $12
	LDA $12									;C2/5396: A5 12        LDA $12
	CMP #$04		;4 chars					;C2/5398: C9 04        CMP #$04
	BNE .APLoop								;C2/539A: D0 D8        BNE $5374

	LDA VictoryExp								;C2/539C: AD 0E 7C     LDA $7C0E
	ORA VictoryExp+1							;C2/539F: 0D 0F 7C     ORA $7C0F
	ORA VictoryExp+2							;C2/53A2: 0D 10 7C     ORA $7C10
	BEQ +									;C2/53A5: F0 03        BEQ $53AA
	JSR DivideExp								;C2/53A7: 20 E6 57     JSR $57E6
+	LDA MonsterKillTracker							;C2/53AA: AD 09 7C     LDA $7C09
	BNE .AddExp								;C2/53AD: D0 09        BNE $53B8
	STZ VictoryExp		;didn't kill anything, so no exp		;C2/53AF: 9C 0E 7C     STZ $7C0E
	STZ VictoryExp+1							;C2/53B2: 9C 0F 7C     STZ $7C0F
	STZ VictoryExp+2							;C2/53B5: 9C 10 7C     STZ $7C10

.AddExp
	TDC 									;C2/53B8: 7B           TDC 
	TAX 									;C2/53B9: AA           TAX 
	STX $0E									;C2/53BA: 86 0E        STX $0E
.ExpLoop
	LDA $0E				;char index				;C2/53BC: A5 0E        LDA $0E
	TAY 									;C2/53BE: A8           TAY 
	LDA ActiveParticipants,Y						;C2/53BF: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextExp								;C2/53C2: F0 3D        BEQ $5401
	CLC 									;C2/53C4: 18           CLC 
	LDA CharStruct.Exp,X							;C2/53C5: BD 03 20     LDA $2003,X
	ADC VictoryExp								;C2/53C8: 6D 0E 7C     ADC $7C0E
	STA CharStruct.Exp,X							;C2/53CB: 9D 03 20     STA $2003,X
	LDA CharStruct.Exp+1,X							;C2/53CE: BD 04 20     LDA $2004,X
	ADC VictoryExp+1							;C2/53D1: 6D 0F 7C     ADC $7C0F
	STA CharStruct.Exp+1,X							;C2/53D4: 9D 04 20     STA $2004,X
	LDA CharStruct.Exp+2,X							;C2/53D7: BD 05 20     LDA $2005,X
	ADC VictoryExp+2							;C2/53DA: 6D 10 7C     ADC $7C10
	STA CharStruct.Exp+2,X							;C2/53DD: 9D 05 20     STA $2005,X
	SEC 									;C2/53E0: 38           SEC 
	LDA CharStruct.Exp,X		;cap exp at 9999999			;C2/53E1: BD 03 20     LDA $2003,X
	SBC #$7F								;C2/53E4: E9 7F        SBC #$7F
	LDA CharStruct.Exp+1,X							;C2/53E6: BD 04 20     LDA $2004,X
	SBC #$96								;C2/53E9: E9 96        SBC #$96
	LDA CharStruct.Exp+2,X							;C2/53EB: BD 05 20     LDA $2005,X
	SBC #$98								;C2/53EE: E9 98        SBC #$98
	BCC .NextExp								;C2/53F0: 90 0F        BCC $5401
	LDA #$7F								;C2/53F2: A9 7F        LDA #$7F
	STA CharStruct.Exp,X							;C2/53F4: 9D 03 20     STA $2003,X
	LDA #$96								;C2/53F7: A9 96        LDA #$96
	STA CharStruct.Exp+1,X							;C2/53F9: 9D 04 20     STA $2004,X
	LDA #$98								;C2/53FC: A9 98        LDA #$98
	STA CharStruct.Exp+2,X							;C2/53FE: 9D 05 20     STA $2005,X
.NextExp
	JSR NextCharOffset  							;C2/5401: 20 E0 01     JSR $01E0      
	INC $0E				;char index				;C2/5404: E6 0E        INC $0E
	LDA $0E									;C2/5406: A5 0E        LDA $0E
	CMP #$04								;C2/5408: C9 04        CMP #$04
	BNE .ExpLoop			;4 members				;C2/540A: D0 B0        BNE $53BC

;Display exp/gil/ap message boxes
	LDA #$FF			;flag for unused message box		;C2/540C: A9 FF        LDA #$FF
	STA MessageBoxes							;C2/540E: 8D 5F 3C     STA $3C5F
	LDA #$01								;C2/5411: A9 01        LDA #$01
	JSR GFXCmdMessageClearAnim						;C2/5413: 20 47 58     JSR $5847
	TDC 									;C2/5416: 7B           TDC 
	TAX 									;C2/5417: AA           TAX 
	LDA VictoryGil								;C2/5418: AD 0B 7C     LDA $7C0B
	STA MessageBoxData[0].0							;C2/541B: 8D BF 3C     STA $3CBF
	LDA VictoryGil+1							;C2/541E: AD 0C 7C     LDA $7C0C
	STA MessageBoxData[0].1							;C2/5421: 8D C0 3C     STA $3CC0
	LDA VictoryGil+2							;C2/5424: AD 0D 7C     LDA $7C0D
	STA MessageBoxData[0].2							;C2/5427: 8D C1 3C     STA $3CC1
	LDA VictoryGil								;C2/542A: AD 0B 7C     LDA $7C0B
	ORA VictoryGil+1							;C2/542D: 0D 0C 7C     ORA $7C0C
	ORA VictoryGil+2							;C2/5430: 0D 0D 7C     ORA $7C0D
	BEQ +									;C2/5433: F0 06        BEQ $543B
	LDA #$2C			;gil message				;C2/5435: A9 2C        LDA #$2C
	STA MessageBoxes,X							;C2/5437: 9D 5F 3C     STA $3C5F,X
	INX 				;increment message box slot if used	;C2/543A: E8           INX 
+	LDA VictoryExp								;C2/543B: AD 0E 7C     LDA $7C0E
	STA MessageBoxData[1].0		;data slots are hardcoded tho		;C2/543E: 8D C2 3C     STA $3CC2
	LDA VictoryExp+1		;..maybe they fix it later		;C2/5441: AD 0F 7C     LDA $7C0F
	STA MessageBoxData[1].1							;C2/5444: 8D C3 3C     STA $3CC3
	LDA VictoryExp+2							;C2/5447: AD 10 7C     LDA $7C10
	STA MessageBoxData[1].2							;C2/544A: 8D C4 3C     STA $3CC4
	LDA VictoryExp								;C2/544D: AD 0E 7C     LDA $7C0E
	ORA VictoryExp+1							;C2/5450: 0D 0F 7C     ORA $7C0F
	ORA VictoryExp+2							;C2/5453: 0D 10 7C     ORA $7C10
	BEQ +									;C2/5456: F0 06        BEQ $545E
	LDA #$2D			;exp message				;C2/5458: A9 2D        LDA #$2D
	STA MessageBoxes,X							;C2/545A: 9D 5F 3C     STA $3C5F,X
	INX 									;C2/545D: E8           INX 
+	LDA EncounterInfo.AP							;C2/545E: AD F1 3E     LDA $3EF1
	BEQ +									;C2/5461: F0 15        BEQ $5478
	STA MessageBoxData[2].0							;C2/5463: 8D C5 3C     STA $3CC5
	STZ MessageBoxData[2].1							;C2/5466: 9C C6 3C     STZ $3CC6
	STZ MessageBoxData[2].2							;C2/5469: 9C C7 3C     STZ $3CC7

	JSR CheckHideAP								;C2/546C: 20 74 56     JSR $5674
	LDA $0E				;result, 1 to hide AP			;C2/546F: A5 0E        LDA $0E
	BNE +									;C2/5471: D0 05        BNE $5478
	LDA #$2E			;ap message				;C2/5473: A9 2E        LDA #$2E
	STA MessageBoxes,X							;C2/5475: 9D 5F 3C     STA $3C5F,X
+	LDA MessageBoxes							;C2/5478: AD 5F 3C     LDA $3C5F
	CMP #$FF			;flag for unused message box		;C2/547B: C9 FF        CMP #$FF
	BEQ .Blue								;C2/547D: F0 0A        BEQ $5489
	LDA #$0A			;C1 routine: exec graphics script	;C2/547F: A9 0A        LDA #$0A
	JSR CallC1     								;C2/5481: 20 69 00     JSR $0069      
	LDA #$FF								;C2/5484: A9 FF        LDA #$FF
	STA MessageBoxes+1							;C2/5486: 8D 60 3C     STA $3C60

.Blue
	LDA BlueLearnedCount							;C2/5489: AD 20 7C     LDA $7C20
	BEQ .CheckLevelUp							;C2/548C: F0 52        BEQ $54E0
	TDC 									;C2/548E: 7B           TDC 
	TAX 									;C2/548F: AA           TAX 
	STX $3D									;C2/5490: 86 3D        STX $3D
.BlueLoop
	LDX $3D				;learned blue index			;C2/5492: A6 3D        LDX $3D
	LDA BlueLearned,X							;C2/5494: BD 21 7C     LDA $7C21,X
	BEQ .CheckLevelUp							;C2/5497: F0 47        BEQ $54E0
	CMP #$82			;first blue spell			;C2/5499: C9 82        CMP #$82
	BCC .CheckLevelUp							;C2/549B: 90 43        BCC $54E0
	CMP #$A0			;after blue spells			;C2/549D: C9 A0        CMP #$A0
	BCS .CheckLevelUp							;C2/549F: B0 3F        BCS $54E0
	STA MessageBoxData[0].0							;C2/54A1: 8D BF 3C     STA $3CBF
	STZ MessageBoxData[0].1							;C2/54A4: 9C C0 3C     STZ $3CC0
	STZ MessageBoxData[0].2							;C2/54A7: 9C C1 3C     STZ $3CC1
	STZ $0E									;C2/54AA: 64 0E        STZ $0E
	LSR 									;C2/54AC: 4A           LSR 
	ROR $0E									;C2/54AD: 66 0E        ROR $0E
	LSR 									;C2/54AF: 4A           LSR 
	ROR $0E									;C2/54B0: 66 0E        ROR $0E
	LSR 									;C2/54B2: 4A           LSR 
	ROR $0E									;C2/54B3: 66 0E        ROR $0E
	TAY 				;MagicBits offset			;C2/54B5: A8           TAY 
	LDA $0E									;C2/54B6: A5 0E        LDA $0E
	JSR ShiftDivide_32							;C2/54B8: 20 BD 01     JSR $01BD      
	TAX 				;MagicBits spell			;C2/54BB: AA           TAX 
	LDA MagicBits,Y   							;C2/54BC: B9 50 09     LDA $0950,Y    
	JSR SelectBit_X     							;C2/54BF: 20 DB 01     JSR $01DB      
	BNE .NextBlue			;already know this one			;C2/54C2: D0 18        BNE $54DC
	LDA MagicBits,Y								;C2/54C4: B9 50 09     LDA $0950,Y
	JSR SetBit_X    							;C2/54C7: 20 D6 01     JSR $01D6      
	STA MagicBits,Y								;C2/54CA: 99 50 09     STA $0950,Y
	LDA #$01								;C2/54CD: A9 01        LDA #$01
	JSR GFXCmdMessageClearAnim						;C2/54CF: 20 47 58     JSR $5847
	LDA #$32			;learned blue message			;C2/54D2: A9 32        LDA #$32
	STA MessageBoxes							;C2/54D4: 8D 5F 3C     STA $3C5F
	LDA #$0A			;C1 routine: exec graphics script	;C2/54D7: A9 0A        LDA #$0A
	JSR CallC1    								;C2/54D9: 20 69 00     JSR $0069      
.NextBlue
	INC $3D				;learned blue index			;C2/54DC: E6 3D        INC $3D
					;**bug: no range check	
					;..relies on the next byte never being a valid blue spell if 8 blue spells were used
					;..fortunately it seems to always be 0 or 1
	BRA .BlueLoop								;C2/54DE: 80 B2        BRA $5492


.CheckLevelUp
	TDC 									;C2/54E0: 7B           TDC 
	TAX 									;C2/54E1: AA           TAX 
	STX $3D									;C2/54E2: 86 3D        STX $3D
	STX $3F									;C2/54E4: 86 3F        STX $3F
.LevelLoop		;will run multiple times for a single character if they gain multiple levels at once
	LDA $3D				;char index				;C2/54E6: A5 3D        LDA $3D
	TAY 									;C2/54E8: A8           TAY 
	LDA ActiveParticipants,Y						;C2/54E9: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextChar								;C2/54EC: F0 5E        BEQ $554C
	LDX $3F				;char offset				;C2/54EE: A6 3F        LDX $3F
	LDA CharStruct.Level,X							;C2/54F0: BD 02 20     LDA $2002,X
	CMP #$63			;skip check if already 99		;C2/54F3: C9 63        CMP #$63
	BCS .NextChar								;C2/54F5: B0 55        BCS $554C
	TAX 									;C2/54F7: AA           TAX 
	STX $0E				;current level				;C2/54F8: 86 0E        STX $0E
	REP #$20								;C2/54FA: C2 20        REP #$20
	LDA $0E									;C2/54FC: A5 0E        LDA $0E
	ASL 									;C2/54FE: 0A           ASL 
	STA $10				;level *2				;C2/54FF: 85 10        STA $10
	CLC 									;C2/5501: 18           CLC 
	ADC $0E				;level *3				;C2/5502: 65 0E        ADC $0E
	TAX 									;C2/5504: AA           TAX 
	LDA ROMLevelExp,X							;C2/5505: BF 00 50 D1  LDA $D15000,X
	STA $0E				;required exp (low bytes)		;C2/5509: 85 0E        STA $0E
	TDC 									;C2/550B: 7B           TDC 
	SEP #$20								;C2/550C: E2 20        SEP #$20
	LDA ROMLevelExp+2,X							;C2/550E: BF 02 50 D1  LDA $D15002,X
	STA $12				;required exp (high byte)		;C2/5512: 85 12        STA $12
	LDX $3F				;char offset				;C2/5514: A6 3F        LDX $3F
	SEC 				;subtract requirement from current exp	;C2/5516: 38           SEC 
	LDA CharStruct.Exp,X							;C2/5517: BD 03 20     LDA $2003,X
	SBC $0E									;C2/551A: E5 0E        SBC $0E
	LDA CharStruct.Exp+1,X							;C2/551C: BD 04 20     LDA $2004,X
	SBC $0F									;C2/551F: E5 0F        SBC $0F
	LDA CharStruct.Exp+2,X							;C2/5521: BD 05 20     LDA $2005,X
	SBC $12									;C2/5524: E5 12        SBC $12
	BCC .NextChar			;not enough exp				;C2/5526: 90 24        BCC $554C
	JSR LevelUp								;C2/5528: 20 EC 56     JSR $56EC
	LDX $3F				;char offset				;C2/552B: A6 3F        LDX $3F
	INC CharStruct.Level,X							;C2/552D: FE 02 20     INC $2002,X
	LDX $3F				;still char offset			;C2/5530: A6 3F        LDX $3F
	LDA CharStruct.CharRow,X						;C2/5532: BD 00 20     LDA $2000,X
	AND #$07			;character bits				;C2/5535: 29 07        AND #$07
	STA MessageBoxData[0].0							;C2/5537: 8D BF 3C     STA $3CBF
	STZ MessageBoxData[0].1							;C2/553A: 9C C0 3C     STZ $3CC0
	STZ MessageBoxData[0].2							;C2/553D: 9C C1 3C     STZ $3CC1
	LDA #$2F			;level up message			;C2/5540: A9 2F        LDA #$2F
	STA MessageBoxes							;C2/5542: 8D 5F 3C     STA $3C5F
	LDA #$0A			;C1 routine: exec graphics command	;C2/5545: A9 0A        LDA #$0A
	JSR CallC1     								;C2/5547: 20 69 00     JSR $0069      
	BRA .LevelLoop								;C2/554A: 80 9A        BRA $54E6

.NextChar
	LDX $3F				;char offset				;C2/554C: A6 3F        LDX $
	JSR NextCharOffset							;C2/554E: 20 E0 01     JSR $01E0      
	STX $3F									;C2/5551: 86 3F        STX $3F
	INC $3D				;char index				;C2/5553: E6 3D        INC $3D
	LDA $3D									;C2/5555: A5 3D        LDA $3D
	CMP #$04			;4 chars to check			;C2/5557: C9 04        CMP #$04
	BNE .LevelLoop								;C2/5559: D0 8B        BNE $54E6

	TDC 									;C2/555B: 7B           TDC 
	TAX 									;C2/555C: AA           TAX 
	STX $3D									;C2/555D: 86 3D        STX $3D
	STX $3F									;C2/555F: 86 3F        STX $3F

.JobUpLoop
	LDA #$FF								;C2/5561: A9 FF        LDA #$FF
	STA MessageBoxes+1							;C2/5563: 8D 60 3C     STA $3C60
	STA MessageBoxes+2							;C2/5566: 8D 61 3C     STA $3C61
	LDA $3D									;C2/5569: A5 3D        LDA $3D
	TAY 									;C2/556B: A8           TAY 
	LDA ActiveParticipants,Y						;C2/556C: B9 C2 3E     LDA $3EC2,Y
	BNE .JobLevelLoop							;C2/556F: D0 03        BNE $5574
	JMP .NextJobCheck							;C2/5571: 4C 61 56     JMP $5661

.JobLevelLoop	;run multiple times in case we gained more than 1 job level
	LDX $3F				;char offset				;C2/5574: A6 3F        LDX $3F
	LDA CharStruct.JobLevel,X						;C2/5576: BD 3A 20     LDA $203A,X
	STA $10									;C2/5579: 85 10        STA $10
	LDA CharStruct.Job,X							;C2/557B: BD 01 20     LDA $2001,X
	CMP #$15			;freelancer/normal			;C2/557E: C9 15        CMP #$15
	BEQ .GoNextJobCheck							;C2/5580: F0 0C        BEQ $558E
	TAX 									;C2/5582: AA           TAX 
	ASL 									;C2/5583: 0A           ASL 
	STA $0E									;C2/5584: 85 0E        STA $0E
	LDA $10									;C2/5586: A5 10        LDA $10
	CMP ROMJobLevels,X							;C2/5588: DF EA 52 D1  CMP $D152EA,X
	BNE +									;C2/558C: D0 03        BNE $5591

.GoNextJobCheck 
	JMP .NextJobCheck							;C2/558E: 4C 61 56     JMP $5661

+	LDA $0E									;C2/5591: A5 0E        LDA $0E
	TAX 									;C2/5593: AA           TAX 
	LDA ROMJobPointers,X							;C2/5594: BF C0 52 D1  LDA $D152C0,X
	STA $12									;C2/5598: 85 12        STA $12
	LDA ROMJobPointers+1,X							;C2/559A: BF C1 52 D1  LDA $D152C1,X
	STA $13									;C2/559E: 85 13        STA $13
	LDA.b #bank(ROMJobPointers)						;C2/55A0: A9 D1        LDA #$D1
	STA $14									;C2/55A2: 85 14        STA $14
	LDA $10			;job level					;C2/55A4: A5 10        LDA $10
	ASL 									;C2/55A6: 0A           ASL 
	CLC 									;C2/55A7: 18           CLC 
	ADC $10			;job level*3					;C2/55A8: 65 10        ADC $10
	TAY 									;C2/55AA: A8           TAY 
	LDA [$12],Y								;C2/55AB: B7 12        LDA [$12],Y
	STA $10			;ap cost (low)					;C2/55AD: 85 10        STA $10
	INY 									;C2/55AF: C8           INY 
	LDA [$12],Y								;C2/55B0: B7 12        LDA [$12],Y
	STA $11			;ap cost (hi)					;C2/55B2: 85 11        STA $11
	INY 									;C2/55B4: C8           INY 
	LDA [$12],Y								;C2/55B5: B7 12        LDA [$12],Y
	STA $12			;ability					;C2/55B7: 85 12        STA $12
	LDX $3F			;char offset					;C2/55B9: A6 3F        LDX $3F
	SEC 									;C2/55BB: 38           SEC 
	LDA CharStruct.AP,X 							;C2/55BC: BD 3B 20     LDA $203B,X    
	SBC $10									;C2/55BF: E5 10        SBC $10
	LDA CharStruct.AP+1,X							;C2/55C1: BD 3C 20     LDA $203C,X
	SBC $11									;C2/55C4: E5 11        SBC $11
	BCS +									;C2/55C6: B0 03        BCS $55CB
	JMP .NextJobCheck	;not enough ap					;C2/55C8: 4C 61 56     JMP $5661
+	SEC 									;C2/55CB: 38           SEC 
	LDA CharStruct.AP,X							;C2/55CC: BD 3B 20     LDA $203B,X
	SBC $10									;C2/55CF: E5 10        SBC $10
	STA CharStruct.AP,X							;C2/55D1: 9D 3B 20     STA $203B,X
	LDA CharStruct.AP+1,X							;C2/55D4: BD 3C 20     LDA $203C,X
	SBC $11									;C2/55D7: E5 11        SBC $11
	STA CharStruct.AP+1,X							;C2/55D9: 9D 3C 20     STA $203C,X
	INC CharStruct.JobLevel,X						;C2/55DC: FE 3A 20     INC $203A,X
	LDA $3D			;char index					;C2/55DF: A5 3D        LDA $3D
	ASL 									;C2/55E1: 0A           ASL 
	TAX 									;C2/55E2: AA           TAX 
	LDA ROMAbilityListPointers,X						;C2/55E3: BF D3 EE D0  LDA $D0EED3,X   
	STA $0E			;now holds address of char's FieldAbilityList	;C2/55E7: 85 0E        STA $0E
	LDA ROMAbilityListPointers+1,X						;C2/55E9: BF D4 EE D0  LDA $D0EED4,X
	STA $0F									;C2/55ED: 85 0F        STA $0F
	LDA $12			;ability learned				;C2/55EF: A5 12        LDA $12
	BPL +     								;C2/55F1: 10 05        BPL $55F8       
	AND #$7F		;passive, this clears the passive flag bit	;C2/55F3: 29 7F        AND #$7F
	CLC 									;C2/55F5: 18           CLC 
	ADC #$4E      		;start at slot after the last active ability	;C2/55F6: 69 4E        ADC #$4E        
+	ASL 									;C2/55F8: 0A           ASL 
	TAX 									;C2/55F9: AA           TAX 
	LDA RomAbilityBitInfo,X 						;C2/55FA: BF 00 EC D0  LDA $D0EC00,X   
	TAY 			;offset of byte containing ability in list	;C2/55FE: A8           TAY 
	LDA RomAbilityBitInfo+1,X						;C2/55FF: BF 01 EC D0  LDA $D0EC01,X   
	TAX 			;bit number of ability				;C2/5603: AA           TAX 
	LDA ($0E),Y								;C2/5604: B1 0E        LDA ($0E),Y
	JSR SetBit_X   								;C2/5606: 20 D6 01     JSR $01D6       
	STA ($0E),Y		;ability now in known list			;C2/5609: 91 0E        STA ($0E),Y
	LDA $3D			;char index					;C2/560B: A5 3D        LDA $3D
	TAX 									;C2/560D: AA           TAX 
	INC FieldAbilityCount,X   						;C2/560E: FE F3 08     INC $08F3,X     
	LDX $3F			;char offset					;C2/5611: A6 3F        LDX $3F
	LDA CharStruct.CharRow,X						;C2/5613: BD 00 20     LDA $2000,X
	AND #$07		;character bits					;C2/5616: 29 07        AND #$07
	STA MessageBoxData[0].0							;C2/5618: 8D BF 3C     STA $3CBF
	STZ MessageBoxData[0].1							;C2/561B: 9C C0 3C     STZ $3CC0
	STZ MessageBoxData[0].2							;C2/561E: 9C C1 3C     STZ $3CC1
	LDA #$30		;job level up message				;C2/5621: A9 30        LDA #$30
	STA MessageBoxes							;C2/5623: 8D 5F 3C     STA $3C5F
	LDA #$0A		;c1 routine					;C2/5626: A9 0A        LDA #$0A
	JSR CallC1     								;C2/5628: 20 69 00     JSR $0069       
	LDA #$31		;ability learned message			;C2/562B: A9 31        LDA #$31
	STA MessageBoxes							;C2/562D: 8D 5F 3C     STA $3C5F
	LDA $12			;ability learned				;C2/5630: A5 12        LDA $12
	STA MessageBoxData[0].0							;C2/5632: 8D BF 3C     STA $3CBF
	CMP #$2C		;first normal magic command			;C2/5635: C9 2C        CMP #$2C
	BCC +									;C2/5637: 90 14        BCC $564D
	CMP #$4C		;end of normal magic commands			;C2/5639: C9 4C        CMP #$4C
	BCS +									;C2/563B: B0 10        BCS $564D
	SEC 									;C2/563D: 38           SEC 
	SBC #$2C		;adjust first magic command to start at 0	;C2/563E: E9 2C        SBC #$2C
	TAX 									;C2/5640: AA           TAX 
	LDA ROMJobMagicLevels,X	;look up table for magic level			;C2/5641: BF 06 EF D0  LDA $D0EF06,X
	STA MessageBoxData[1].0							;C2/5645: 8D C2 3C     STA $3CC2
	LDA #$33		;alternate ability learned message 		;C2/5648: A9 33        LDA #$33
	STA MessageBoxes	;..which shows magic level			;C2/564A: 8D 5F 3C     STA $3C5F
+	STZ MessageBoxData[0].1	;clear high bytes of message box data		;C2/564D: 9C C0 3C     STZ $3CC0
	STZ MessageBoxData[0].2							;C2/5650: 9C C1 3C     STZ $3CC1
	STZ MessageBoxData[1].1							;C2/5653: 9C C3 3C     STZ $3CC3
	STZ MessageBoxData[1].2							;C2/5656: 9C C4 3C     STZ $3CC4
	LDA #$0A		;c1 routine					;C2/5659: A9 0A        LDA #$0A
	JSR CallC1     								;C2/565B: 20 69 00     JSR $0069       
	JMP .JobLevelLoop							;C2/565E: 4C 74 55     JMP $5574

.NextJobCheck
	LDX $3F			;char offset					;C2/5661: A6 3F        LDX $3F
	JSR NextCharOffset    							;C2/5663: 20 E0 01     JSR $01E0       
	STX $3F									;C2/5666: 86 3F        STX $3F
	INC $3D			;next char index				;C2/5668: E6 3D        INC $3D
	LDA $3D									;C2/566A: A5 3D        LDA $3D
	CMP #$04		;4 chars to check				;C2/566C: C9 04        CMP #$04
	BEQ .Ret								;C2/566E: F0 03        BEQ $5673
	JMP .JobUpLoop								;C2/5670: 4C 61 55     JMP $5561
.Ret	RTS 									;C2/5673: 60           RTS 
%endsub()

%org($C25674)
;Sets a flag to hide AP display if all present/living characters are freelancers
CheckHideAP:
	PHX 									;C2/5674: DA           PHX 
	TDC 									;C2/5675: 7B           TDC 
	TAX 									;C2/5676: AA           TAX 
	TAY 									;C2/5677: A8           TAY 
	STX $0E									;C2/5678: 86 0E        STX $0E

.Loop	;searches for a character that's alive and not a freelancer
	LDA CharStruct.CharRow,X						;C2/567A: BD 00 20     LDA $2000,X
	AND #$40		;not on the team				;C2/567D: 29 40        AND #$40
	BNE .Next								;C2/567F: D0 0C        BNE $568D
	LDA CharStruct.Job,X							;C2/5681: BD 01 20     LDA $2001,X
	CMP #$15		;normal/freelancer				;C2/5684: C9 15        CMP #$15
	BEQ .Next								;C2/5686: F0 05        BEQ $568D
	LDA ActiveParticipants,Y						;C2/5688: B9 C2 3E     LDA $3EC2,Y
	BNE .Finish								;C2/568B: D0 0B        BNE $5698
.Next	JSR NextCharOffset   							;C2/568D: 20 E0 01     JSR $01E0       
	INY 									;C2/5690: C8           INY 
	CPY #$0004		;4 chars					;C2/5691: C0 04 00     CPY #$0004
	BNE .Loop								;C2/5694: D0 E4        BNE $567A

	INC $0E			;all chars dead or freelancer			;C2/5696: E6 0E        INC $0E
.Finish	PLX 									;C2/5698: FA           PLX 
	RTS 									;C2/5699: 60           RTS 

%org($C2569A)
DropMonsterLoot:
	LDA EncounterIndex+1							;C2/569A: AD F1 04     LDA $04F1
	BEQ .Normal								;C2/569D: F0 08        BEQ $56A7
	LDA EncounterIndex							;C2/569F: AD F0 04     LDA $04F0
	CMP #$BF		;sandworm fight					;C2/56A2: C9 BF        CMP #$BF
	BNE .Normal								;C2/56A4: D0 01        BNE $56A7
	RTS 			;you get nothing				;C2/56A6: 60           RTS 

.Normal
	TDC 									;C2/56A7: 7B           TDC 
	TAX 									;C2/56A8: AA           TAX 
	LDA #$FF								;C2/56A9: A9 FF        LDA #$FF
	JSR Random_X_A    	;0..255						;C2/56AB: 20 7C 00     JSR $007C       
	STA $0E			;random roll					;C2/56AE: 85 0E        STA $0E
	LDA TempMonsterIndex	;monster index					;C2/56B0: A5 3D        LDA $3D
	ASL 									;C2/56B2: 0A           ASL 
	TAX 									;C2/56B3: AA           TAX 
	REP #$20								;C2/56B4: C2 20        REP #$20
	LDA BattleMonsterID,X							;C2/56B6: BD 20 40     LDA $4020,X
	JSR ShiftMultiply_4							;C2/56B9: 20 B7 01     JSR $01B7       
	TAX 									;C2/56BC: AA           TAX 
	TDC 									;C2/56BD: 7B           TDC 
	SEP #$20								;C2/56BE: E2 20        SEP #$20
	LDY TempMonsterIndex							;C2/56C0: A4 3D        LDY $3D
	LDA ROMLoot.AlwaysDrop,X						;C2/56C2: BF 03 50 D0  LDA $D05003,X
	BEQ .CheckRare								;C2/56C6: F0 0C        BEQ $56D4
	CMP #$80								;C2/56C8: C9 80        CMP #$80
	BEQ .CheckRare								;C2/56CA: F0 08        BEQ $56D4
	CMP #$FF								;C2/56CC: C9 FF        CMP #$FF
	BEQ .CheckRare								;C2/56CE: F0 04        BEQ $56D4
	STA BattleItemsWon,Y							;C2/56D0: 99 66 7C     STA $7C66,Y
	RTS 									;C2/56D3: 60           RTS 

.CheckRare	;only checked if AlwaysDrop is $00, $80, or $FF (empty or Item FF)
	LDA $0E			;random roll					;C2/56D4: A5 0E        LDA $0E
	CMP #$10		;16/256 chance					;C2/56D6: C9 10        CMP #$10
	BCS .Ret								;C2/56D8: B0 11        BCS $56EB
	LDA ROMLoot.RareDrop,X							;C2/56DA: BF 02 50 D0  LDA $D05002,X
	BEQ .Ret								;C2/56DE: F0 0B        BEQ $56EB
	CMP #$80								;C2/56E0: C9 80        CMP #$80
	BEQ .Ret								;C2/56E2: F0 07        BEQ $56EB
	CMP #$FF								;C2/56E4: C9 FF        CMP #$FF
	BEQ .Ret								;C2/56E6: F0 03        BEQ $56EB
	STA BattleItemsWon,Y							;C2/56E8: 99 66 7C     STA $7C66,Y
.Ret	RTS 									;C2/56EB: 60           RTS 

%org($C256EC)
;Applies HP/MP and other changes for a character level up
%sub(LevelUp)
LevelUp:
	LDX $10		;old level*2					;C2/56EC: A6 10        LDX $10
	LDA ROMLevelHP,X						;C2/56EE: BF 29 51 D1  LDA $D15129,X
	STA $0E								;C2/56F2: 85 0E        STA $0E
	STA $2A								;C2/56F4: 85 2A        STA $2A
	LDA ROMLevelHP+1,X						;C2/56F6: BF 2A 51 D1  LDA $D1512A,X
	STA $0F								;C2/56FA: 85 0F        STA $0F
	STA $2B								;C2/56FC: 85 2B        STA $2B
	LDX $3F		;char offset					;C2/56FE: A6 3F        LDX $3F
	LDA CharStruct.BaseVit,X					;C2/5700: BD 26 20     LDA $2026,X
	TAX 								;C2/5703: AA           TAX 
	STX $2C								;C2/5704: 86 2C        STX $2C
	JSR Multiply_16bit	;Rom HP * Vit				;C2/5706: 20 D2 00     JSR $00D2       
	LDX #$0005							;C2/5709: A2 05 00     LDX #$0005
-	;loop divides by 32
	LSR $31								;C2/570C: 46 31        LSR $31
	ROR $30								;C2/570E: 66 30        ROR $30
	ROR $2F								;C2/5710: 66 2F        ROR $2F
	ROR $2E								;C2/5712: 66 2E        ROR $2E
	DEX 								;C2/5714: CA           DEX 
	BNE -								;C2/5715: D0 F5        BNE $570C

	LDX $3F		;char offset					;C2/5717: A6 3F        LDX $3F
	REP #$20							;C2/5719: C2 20        REP #$20
	CLC 								;C2/571B: 18           CLC 
	LDA $0E		;rom hp						;C2/571C: A5 0E        LDA $0E
	ADC $2E		;+ (rom hp * vit)/32				;C2/571E: 65 2E        ADC $2E
	CMP #$270F							;C2/5720: C9 0F 27     CMP #$270F
	BCC +								;C2/5723: 90 03        BCC $5728
	LDA #$270F	;max 9999					;C2/5725: A9 0F 27     LDA #$270F
+	STA $08								;C2/5728: 85 08        STA $08
	LDA #$270F							;C2/572A: A9 0F 27     LDA #$270F
	STA $0A		;save 9999 cap for later routine		;C2/572D: 85 0A        STA $0A
	TDC 								;C2/572F: 7B           TDC 
	SEP #$20							;C2/5730: E2 20        SEP #$20
	TDC 								;C2/5732: 7B           TDC 
	TAY 								;C2/5733: A8           TAY 

.CheckHPCommands	;looks for HP up passives in command slots
	LDA CharStruct.BattleCommands,X					;C2/5734: BD 16 20     LDA $2016,X
	CMP #$8E	;after HP +30%					;C2/5737: C9 8E        CMP #$8E
	BCS .NextHPCommandCheck						;C2/5739: B0 0F        BCS $574A
	CMP #$8B	;HP +10%					;C2/573B: C9 8B        CMP #$8B
	BCC .NextHPCommandCheck						;C2/573D: 90 0B        BCC $574A
	PHX 								;C2/573F: DA           PHX 
	LDX $10		;old level*2					;C2/5740: A6 10        LDX $10
	PHX 								;C2/5742: DA           PHX 
	JSR ApplyHPMPPassives						;C2/5743: 20 C7 57     JSR $57C7
	PLX 								;C2/5746: FA           PLX 
	STX $10								;C2/5747: 86 10        STX $10
	PLX 								;C2/5749: FA           PLX 

.NextHPCommandCheck
	INX 								;C2/574A: E8           INX 
	INY 								;C2/574B: C8           INY 
	CPY #$0004							;C2/574C: C0 04 00     CPY #$0004
	BNE .CheckHPCommands						;C2/574F: D0 E3        BNE $5734

	LDX $3F		;char offset					;C2/5751: A6 3F        LDX $3F

	;**bug: updates max hp without updating the value saved if giant drink was used
	LDA $08		;new hp						;C2/5753: A5 08        LDA $08
	STA CharStruct.MaxHP,X						;C2/5755: 9D 08 20     STA $2008,X
	LDA $09								;C2/5758: A5 09        LDA $09
	STA CharStruct.MaxHP+1,X					;C2/575A: 9D 09 20     STA $2009,X

	;Max MP
	LDX $10		;old level*2					;C2/575D: A6 10        LDX $10
	LDA ROMLevelMP,X						;C2/575F: BF EF 51 D1  LDA $D151EF,X
	STA $0E								;C2/5763: 85 0E        STA $0E
	STA $2A								;C2/5765: 85 2A        STA $2A
	LDA ROMLevelMP+1,X						;C2/5767: BF F0 51 D1  LDA $D151F0,X
	STA $0F								;C2/576B: 85 0F        STA $0F
	STA $2B								;C2/576D: 85 2B        STA $2B

	LDX $3F		;char offset					;C2/576F: A6 3F        LDX $3F
	LDA CharStruct.BaseMag,X					;C2/5771: BD 27 20     LDA $2027,X
	TAX 								;C2/5774: AA           TAX 
	STX $2C								;C2/5775: 86 2C        STX $2C
	JSR Multiply_16bit	;Rom MP * Mag				;C2/5777: 20 D2 00     JSR $00D2    
	LDX #$0005							;C2/577A: A2 05 00     LDX #$0005
-	;loop divides by 32
	LSR $31								;C2/577D: 46 31        LSR $31
	ROR $30								;C2/577F: 66 30        ROR $30
	ROR $2F								;C2/5781: 66 2F        ROR $2F
	ROR $2E								;C2/5783: 66 2E        ROR $2E
	DEX 								;C2/5785: CA           DEX 
	BNE -								;C2/5786: D0 F5        BNE $577D

	LDX $3F		;char offset					;C2/5788: A6 3F        LDX $3F
	REP #$20							;C2/578A: C2 20        REP #$20
	CLC 								;C2/578C: 18           CLC 
	LDA $0E		;rom mp						;C2/578D: A5 0E        LDA $0E
	ADC $2E		;+ (rom mp * mag)/32				;C2/578F: 65 2E        ADC $2E
	CMP #$03E7	;cap at 999					;C2/5791: C9 E7 03     CMP #$03E7
	BCC +								;C2/5794: 90 03        BCC $5799
	LDA #$03E7							;C2/5796: A9 E7 03     LDA #$03E7
+	STA $08								;C2/5799: 85 08        STA $08
	LDA #$03E7							;C2/579B: A9 E7 03     LDA #$03E7
	STA $0A		;save 999 cap for later routine			;C2/579E: 85 0A        STA $0A
	TDC 								;C2/57A0: 7B           TDC 
	SEP #$20							;C2/57A1: E2 20        SEP #$20
	TDC 								;C2/57A3: 7B           TDC 
	TAY 								;C2/57A4: A8           TAY 

.CheckMPCommands	
	LDA CharStruct.BattleCommands,X					;C2/57A5: BD 16 20     LDA $2016,X
	CMP #$90	;after mp +30%					;C2/57A8: C9 90        CMP #$90
	BCS .NextMPCommandCheck						;C2/57AA: B0 07        BCS $57B3
	CMP #$8E	;mp +10%					;C2/57AC: C9 8E        CMP #$8E
	BCC .NextMPCommandCheck						;C2/57AE: 90 03        BCC $57B3
	JSR ApplyHPMPPassives						;C2/57B0: 20 C7 57     JSR $57C7
.NextMPCommandCheck
	INX 								;C2/57B3: E8           INX 
	INY 								;C2/57B4: C8           INY 
	CPY #$0004							;C2/57B5: C0 04 00     CPY #$0004
	BNE .CheckMPCommands		 				;C2/57B8: D0 EB        BNE $57A5

	LDX $3F		;char offset					;C2/57BA: A6 3F        LDX $3F
	LDA $08		;new mp						;C2/57BC: A5 08        LDA $08
	STA CharStruct.MaxMP,X						;C2/57BE: 9D 0C 20     STA $200C,X
	LDA $09								;C2/57C1: A5 09        LDA $09
	STA CharStruct.MaxMP+1,X					;C2/57C3: 9D 0D 20     STA $200D,X
	RTS 								;C2/57C6: 60           RTS 
%endsub()

%org($C257C7)
ApplyHPMPPassives:
	PHX 							;C2/57C7: DA           PHX 
	PHY 							;C2/57C8: 5A           PHY 
	SEC 							;C2/57C9: 38           SEC 
	SBC #$8B	;hp +10% command/passive		;C2/57CA: E9 8B        SBC #$8B
	TAX 							;C2/57CC: AA           TAX 
	LDA HPMPMultTable,X					;C2/57CD: BF E1 57 C2  LDA $C257E1,X
	TAX 							;C2/57D1: AA           TAX 
	STX $2A							;C2/57D2: 86 2A        STX $2A
	LDX $08		;new base hp				;C2/57D4: A6 08        LDX $08
	STX $2C							;C2/57D6: 86 2C        STX $2C
	JSR Multiply_16bit	;base hp * 10, 20 or 30		;C2/57D8: 20 D2 00     JSR $00D2       
	JSR ApplyPercentage					;C2/57DB: 20 91 04     JSR $0491
	PLY 							;C2/57DE: 7A           PLY 
	PLX 							;C2/57DF: FA           PLX 
	RTS 							;C2/57E0: 60           RTS 

%org($C257E1)
;****
HPMPMultTable:
db $0A,$14,$1E,$0A,$1E	;HP 10, 20, 30 then MP 10, 30		;C2/57E1: 0A 14 1E 0A 1E

%org($C257E6)
;Divides Exp for party members
;minimum 1 exp per char(this isn't called if total exp is 0)
%sub(DivideExp)
DivideExp:
	LDX $10			;count of active chars				;C2/57E6: A6 10        LDX $10
	PHX 									;C2/57E8: DA           PHX 

	LDX #$000F								;C2/57E9: A2 0F 00     LDX #$000F
-	STZ $0E,X		;clear $0E-1D					;C2/57EC: 74 0E        STZ $0E,X
	DEX 									;C2/57EE: CA           DEX 
	BPL -									;C2/57EF: 10 FB        BPL $57EC

	PLX 									;C2/57F1: FA           PLX 
	STX $12			;count of active chars, divisor			;C2/57F2: 86 12        STX $12
	LDX VictoryExp								;C2/57F4: AE 0E 7C     LDX $7C0E
	STX $0E									;C2/57F7: 86 0E        STX $0E
	LDA VictoryExp+2							;C2/57F9: AD 10 7C     LDA $7C10
	STA $10									;C2/57FC: 85 10        STA $10


;32 bit division routine
;Dividend: 	$0E-11
;Divisor: 	$12-15
;Quotient: 	$16-19
;Remainder: 	$1A-1C
	REP #$20								;C2/57FE: C2 20        REP #$20
	CLC 									;C2/5800: 18           CLC 
	LDX #$0020								;C2/5801: A2 20 00     LDX #$0020
-	ROL $0E									;C2/5804: 26 0E        ROL $0E
	ROL $10									;C2/5806: 26 10        ROL $10
	ROL $1A									;C2/5808: 26 1A        ROL $1A
	ROL $1C									;C2/580A: 26 1C        ROL $1C
	SEC 									;C2/580C: 38           SEC 
	LDA $1A									;C2/580D: A5 1A        LDA $1A
	SBC $12									;C2/580F: E5 12        SBC $12
	STA $1A									;C2/5811: 85 1A        STA $1A
	LDA $1C									;C2/5813: A5 1C        LDA $1C
	SBC $14									;C2/5815: E5 14        SBC $14
	STA $1C									;C2/5817: 85 1C        STA $1C
	BCS +									;C2/5819: B0 0D        BCS $5828
	LDA $1A									;C2/581B: A5 1A        LDA $1A
	ADC $12									;C2/581D: 65 12        ADC $12
	STA $1A									;C2/581F: 85 1A        STA $1A
	LDA $1C									;C2/5821: A5 1C        LDA $1C
	ADC $14									;C2/5823: 65 14        ADC $14
	STA $1C									;C2/5825: 85 1C        STA $1C
	CLC 									;C2/5827: 18           CLC 
+	ROL $16									;C2/5828: 26 16        ROL $16
	ROL $18									;C2/582A: 26 18        ROL $18
	DEX 									;C2/582C: CA           DEX 
	BNE -									;C2/582D: D0 D5        BNE $5804
	TDC 									;C2/582F: 7B           TDC 
	SEP #$20								;C2/5830: E2 20        SEP #$20
;Division ends here

	LDA $16			;quotient, exp to distribute			;C2/5832: A5 16        LDA $16
	ORA $17									;C2/5834: 05 17        ORA $17
	ORA $18									;C2/5836: 05 18        ORA $18
	BNE +									;C2/5838: D0 02        BNE $583C
	INC $16			;min 1 						;C2/583A: E6 16        INC $16
+	LDX $16									;C2/583C: A6 16        LDX $16
	STX VictoryExp								;C2/583E: 8E 0E 7C     STX $7C0E
	LDA $18									;C2/5841: A5 18        LDA $18
	STA VictoryExp+2							;C2/5843: 8D 10 7C     STA $7C10
	RTS 									;C2/5846: 60           RTS 
%endsub()

%org($C25847)
;puts a GFX command on the top of the queue to display a message
;then clear ActionAnim sturcture
;used for back and pre-emptive attacks, and attempting to flee a battle you can't run from
;00,FC,05,<A>,00
GFXCmdMessageClearAnim:
	STA GFXQueue.Data1							;C2/5847: 8D 4F 38     STA $384F
	STZ GFXQueue.Flag							;C2/584A: 9C 4C 38     STZ $384C
	LDA #$FC								;C2/584D: A9 FC        LDA #$FC
	STA GFXQueue.Cmd							;C2/584F: 8D 4D 38     STA $384D
	LDA #$05								;C2/5852: A9 05        LDA #$05
	STA GFXQueue.Type							;C2/5854: 8D 4E 38     STA $384E
	STZ GFXQueue.Data2							;C2/5857: 9C 50 38     STZ $3850
	LDA #$20								;C2/585A: A9 20        LDA #$20
	STA ActionAnim.Flags							;C2/585C: 8D CC 3B     STA $3BCC
	STZ ActionAnim.OrigAttacker						;C2/585F: 9C CD 3B     STZ $3BCD
	STZ ActionAnim.OrigTargetBits						;C2/5862: 9C CE 3B     STZ $3BCE
	STZ ActionAnim.TargetBits						;C2/5865: 9C CF 3B     STZ $3BCF
	STZ ActionAnim.ReflectorBits						;C2/5868: 9C D0 3B     STZ $3BD0
	STZ ActionAnim.ReflecteeBits						;C2/586B: 9C D1 3B     STZ $3BD1
	STZ ActionAnim.CoveredBits						;C2/586E: 9C D2 3B     STZ $3BD2
	RTS 									;C2/5871: 60           RTS 

%org($C25872)
MainBattleLoop:
	TDC 									;C2/5872: 7B           TDC 		
	TAX 									;C2/5873: AA           TAX 		
										;:											
-	LDA !MenuDataC1,X	;Data from C1 bank graphics/menu routines	;C2/5874: BD B0 41     LDA $41B0,X	
	STA !MenuData,X								;C2/5877: 9D BE 41     STA $41BE,X	
	INX 									;C2/587A: E8           INX 
	CPX #$000E	;15 bytes copied					;C2/587B: E0 0E 00     CPX #$000E
	BNE -									;C2/587E: D0 F4        BNE $5874
										;;					
	LDA ResetBattle								;C2/5880: AD D8 7C     LDA $7CD8	
	BNE .EndBattle								;C2/5883: D0 6C        BNE $58F1	
	INC BattleTickerA							;C2/5885: EE 53 7C     INC $7C53	
	LDA BattleTickerA							;C2/5888: AD 53 7C     LDA $7C53	
	CMP #$04								;C2/588B: C9 04        CMP #$04		
	BNE +									;C2/588D: D0 08        BNE $5897	
	STZ BattleTickerA							;C2/588F: 9C 53 7C     STZ $7C53	
	INC BattleTickerB	;only 1 when A is 0, 25% of the time		;C2/5892: EE 54 7C     INC $7C54	
	BRA ++									;C2/5895: 80 03        BRA $589A
+	STZ BattleTickerB							;C2/5897: 9C 54 7C     STZ $7C54	

++	LDA CurrentlyReacting							;C2/589A: AD 4E 47     LDA $474E	
	BNE .SkipMonsterUpdate							;C2/589D: D0 06        BNE $58A5	
	JSR CheckMonsterDeath							;C2/589F: 20 65 62     JSR $6265	
	JSR UpdateMonsterList							;C2/58A2: 20 41 5A     JSR $5A41	
.SkipMonsterUpdate
	JSR CheckPartyDeath							;C2/58A5: 20 57 62     JSR $6257
	LDA CurrentlyReacting							;C2/58A8: AD 4E 47     LDA $474E
	BEQ +									;C2/58AB: F0 07        BEQ $58B4
	LDA ReactingIndex							;C2/58AD: AD 55 47     LDA $4755
	CMP #$04								;C2/58B0: C9 04        CMP #$04
	BCC ++									;C2/58B2: 90 03        BCC $58B7
+	JSR HandleATBMenu							;C2/58B4: 20 6C 17     JSR $176C
++	JSR CopyHPMPStatus							;C2/58B7: 20 21 59     JSR $5921

.WaitLoop								
	LDA #$03	;c1 routine: wait one frame			;C2/58BA: A9 03        LDA #$03
	JSR CallC1							;C2/58BC: 20 69 00     JSR $0069
	JSR CheckBattleEnd						;C2/58BF: 20 B4 5A     JSR $5AB4
	LDA BattleOver							;C2/58C2: AD DE 7B     LDA $7BDE
	BNE .EndBattle							;C2/58C5: D0 2A        BNE $58F1
	LDA WaitModePause						;C2/58C7: AD 52 7C     LDA $7C52
	BNE .WaitLoop							;C2/58CA: D0 EE        BNE $58BA

	JSR UpdateMonsterRows						;C2/58CC: 20 6C 5B     JSR $5B6C
	LDA CurrentlyReacting						;C2/58CF: AD 4E 47     LDA $474E
	BNE +								;C2/58D2: D0 08        BNE $58DC
	JSR ATBWait							;C2/58D4: 20 32 24     JSR $2432
	BNE .NextLoop							;C2/58D7: D0 12        BNE $58EB
	JSR HandleUncontrolledParty					;C2/58D9: 20 C4 1D     JSR $1DC4
+	STZ TurnProcessed						;C2/58DC: 9C 54 47     STZ $4754
	JSR UpdateTimers						;C2/58DF: 20 0B 20     JSR $200B
	JSR FindEndedTimers						;C2/58E2: 20 B2 20     JSR $20B2
	JSR ApplyTimerEffects						;C2/58E5: 20 77 21     JSR $2177
	JSR HandleReactions						;C2/58E8: 20 E3 35     JSR $35E3

.NextLoop								
	JSR Random_0_99		;consumes a random number		;C2/58EB: 20 A2 02     JSR $02A2
	JMP MainBattleLoop						;C2/58EE: 4C 72 58     JMP $5872

.EndBattle								
	LDA #$03	;C1 routine: wait one frame			;C2/58F1: A9 03        LDA #$03
	JSR CallC1							;C2/58F3: 20 69 00     JSR $0069
	LDA DisplayInfo.CurrentChar					;C2/58F6: AD CC 41     LDA $41CC
	CMP #$FF	;no menu open					;C2/58F9: C9 FF        CMP #$FF
	BEQ .MenuClosed							;C2/58FB: F0 12        BEQ $590F
	STA MenuCurrentChar						;C2/58FD: 85 70        STA $70
	LDA GearChanged							;C2/58FF: AD 7D 7B     LDA $7B7D
	BEQ +								;C2/5902: F0 06        BEQ $590A
	JSR ReplaceHands						;C2/5904: 20 3A 9F     JSR $9F3A
	JSR ApplyGear							;C2/5907: 20 6F 9A     JSR $9A6F

+	LDA #$01	;C1 routine: close menu				;C2/590A: A9 01        LDA #$01
	JSR CallC1							;C2/590C: 20 69 00     JSR $0069

.MenuClosed
	JSR EndBattle							;C2/590F: 20 70 50     JSR $5070
	TDC 								;C2/5912: 7B           TDC 
	TAX 								;C2/5913: AA           TAX 
-	LDA BattleItemsWon,X						;C2/5914: BD 66 7C     LDA $7C66,X
	STA FieldItemsWon,X						;C2/5917: 9D 3B 01     STA $013B,X
	INX 								;C2/591A: E8           INX 
	CPX #$0008							;C2/591B: E0 08 00     CPX #$0008
	BNE -								;C2/591E: D0 F4        BNE $5914
	RTS 								;C2/5920: 60           RTS 

%org($C25921)
;(Copy Current/Max HP/MP for players and merge status with always-status for players/monsters)
CopyHPMPStatus:
	TDC 									;C2/5921: 7B           TDC 		
	TAX 									;C2/5922: AA           TAX 		
	TAY 									;C2/5923: A8           TAY 		
	STX $10									;C2/5924: 86 10        STX $10		
	REP #$20								;C2/5926: C2 20        REP #$20		

.CopyAllVitals
	STZ $0E		;stat index						;C2/5928: 64 0E        STZ $0E		

.CopyVitals		;copies current/max HP/MP									
	LDA CharStruct.CurHP,X							;C2/592A: BD 06 20     LDA $2006,X	
	STA CharVitals.CurHP,Y							;C2/592D: 99 2C 38     STA $382C,Y	
	INX 									;C2/5930: E8           INX 
	INX 									;C2/5931: E8           INX 
	INY 									;C2/5932: C8           INY 
	INY 									;C2/5933: C8           INY 
	INC $0E		;next stat						;C2/5934: E6 0E        INC $0E		
	LDA $0E									;C2/5936: A5 0E        LDA $0E
	CMP #$0004	;4 stats						;C2/5938: C9 04 00     CMP #$0004	
	BNE .CopyVitals								;C2/593B: D0 ED        BNE $592A	
										;.					
	CLC 									;C2/593D: 18           CLC 		
	TXA 									;C2/593E: 8A           TXA 		
	ADC #$0078	;next character offset					;C2/593F: 69 78 00     ADC #$0078	
	TAX 									;C2/5942: AA           TAX 		
	CPY #$0020	;stop when 32 bytes have been copied (8 * 4 chars)	;C2/5943: C0 20 00     CPY #$0020	
	BNE .CopyAllVitals							;C2/5946: D0 E0        BNE $5928	
										;.					
	TDC 									;C2/5948: 7B           TDC 		
	SEP #$20								;C2/5949: E2 20        SEP #$20		
	LDA EncounterInfo.IntroFX						;C2/594B: AD EF 3E     LDA $3EEF	
	BPL +			;80h: credits demo battle			;C2/594E: 10 03        BPL $5953	
	JMP .MonsterStatus							;C2/5950: 4C E7 59     JMP $59E7	
										;:
+	TDC 									;C2/5953: 7B           TDC 		
	TAX 									;C2/5954: AA           TAX 		
	TAY 									;C2/5955: A8           TAY 		
	STZ $0E									;C2/5956: 64 0E        STZ $0E		

.CheckMergePartyStatus
	PHX 									;C2/5958: DA           PHX 		
	PHY 									;C2/5959: 5A           PHY 		
	LDA CharStruct.Status1,X						;C2/595A: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/595D: 1D 70 20     ORA $2070,X	
	AND #$02	;zombie							;C2/5960: 29 02        AND #$02		
	BNE .PartyStatus							;C2/5962: D0 24        BNE $5988	
	LDA CharStruct.Status2,X						;C2/5964: BD 1B 20     LDA $201B,X	
	ORA CharStruct.AlwaysStatus2,X						;C2/5967: 1D 71 20     ORA $2071,X
	AND #$78	;sleep/para/charm/berserk				;C2/596A: 29 78        AND #$78		
	BNE .PartyStatus							;C2/596C: D0 1A        BNE $5988	
	LDA CharStruct.Status4,X						;C2/596E: BD 1D 20     LDA $201D,X	
	AND #$04	;singing						;C2/5971: 29 04        AND #$04		
	BNE .PartyStatus							;C2/5973: D0 13        BNE $5988	
	LDA $0E									;C2/5975: A5 0E        LDA $0E		
	TAX 									;C2/5977: AA           TAX 		
	JSR GetTimerOffset	;Y = Timer Offset				;C2/5978: 20 07 02     JSR $0207	
	LDA EnableTimer.ATB,Y							;C2/597B: B9 FB 3C     LDA $3CFB,Y	
	AND #$40								;C2/597E: 29 40        AND #$40		
	BNE .PartyStatus							;C2/5980: D0 06        BNE $5988	
	LDA CurrentTimer.ATB,Y							;C2/5982: B9 7F 3D     LDA $3D7F,Y	
	STA ATB,X								;C2/5985: 9D D0 3E     STA $3ED0,X	

.PartyStatus														
	PLY 									;C2/5988: 7A           PLY 		
	PLX 									;C2/5989: FA           PLX 		
	LDA CharStruct.Status1,X						;C2/598A: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/598D: 1D 70 20     ORA $2070,X
	STA CombinedStatus.S1,Y							;C2/5990: 99 7E 7B     STA $7B7E,Y	
	LDA CharStruct.Status2,X						;C2/5993: BD 1B 20     LDA $201B,X	
	ORA CharStruct.AlwaysStatus2,X						;C2/5996: 1D 71 20     ORA $2071,X
	STA $10									;C2/5999: 85 10        STA $10		
	AND #$08	;berserk						;C2/599B: 29 08        AND #$08		
	BEQ .DoneBerserk							;C2/599D: F0 0D        BEQ $59AC	
	LDA CharStruct.Job,X							;C2/599F: BD 01 20     LDA $2001,X	
	CMP #$06	;berserker						;C2/59A2: C9 06        CMP #$06
	BNE .DoneBerserk							;C2/59A4: D0 06        BNE $59AC	
	LDA $10									;C2/59A6: A5 10        LDA $10
	AND #$F7	;clear berserk bit					;C2/59A8: 29 F7        AND #$F7		
	STA $10									;C2/59AA: 85 10        STA $10
.DoneBerserk								
	LDA CharStruct.Status4,X						;C2/59AC: BD 1D 20     LDA $201D,X	
	ORA CharStruct.AlwaysStatus4,X						;C2/59AF: 1D 73 20     ORA $2073,X
	STA CombinedStatus.S4,Y							;C2/59B2: 99 81 7B     STA $7B81,Y	
	AND #$80	;erased							;C2/59B5: 29 80        AND #$80		
	BEQ .NotErased								;C2/59B7: F0 0F        BEQ $59C8	
	STA CombinedStatus.S4,Y							;C2/59B9: 99 81 7B     STA $7B81,Y	
	TDC 									;C2/59BC: 7B           TDC 		
	STA CombinedStatus.S1,Y							;C2/59BD: 99 7E 7B     STA $7B7E,Y	
	STA CombinedStatus.S2,Y							;C2/59C0: 99 7F 7B     STA $7B7F,Y	
	STA CombinedStatus.S3,Y							;C2/59C3: 99 80 7B     STA $7B80,Y	
	BRA .NextParty								;C2/59C6: 80 0E        BRA $59D6
.NotErased														
	LDA $10		;combined status2 without berserk			;C2/59C8: A5 10        LDA $10		
	STA CombinedStatus.S2,Y							;C2/59CA: 99 7F 7B     STA $7B7F,Y	
	LDA CharStruct.Status3,X						;C2/59CD: BD 1C 20     LDA $201C,X	
	ORA CharStruct.AlwaysStatus3,X						;C2/59D0: 1D 72 20     ORA $2072,X	
	STA CombinedStatus.S3,Y							;C2/59D3: 99 80 7B     STA $7B80,Y	

.NextParty									;:
	INC $0E									;C2/59D6: E6 0E        INC $0E		
	INY 									;C2/59D8: C8           INY 
	INY 									;C2/59D9: C8           INY 
	INY 									;C2/59DA: C8           INY 
	INY 									;C2/59DB: C8           INY 		
	JSR NextCharOffset							;C2/59DC: 20 E0 01     JSR $01E0	
	CPY #$0010	;4 * 4 chars						;C2/59DF: C0 10 00     CPY #$0010	
	BEQ .MonsterStatus							;C2/59E2: F0 03        BEQ $59E7	
	JMP .CheckMergePartyStatus						;C2/59E4: 4C 58 59     JMP $5958	

.MonsterStatus
	LDY #$0004								;C2/59E7: A0 04 00     LDY #$0004
	STY $0E									;C2/59EA: 84 0E        STY $0E		
	TDC									;C2/59EC: 7B           TDC		
	TAY									;C2/59ED: A8           TAY		

.MonsterStatusLoop
	PHY 									;C2/59EE: 5A           PHY 		
	LDY $0E									;C2/59EF: A4 0E        LDY $0E		
	LDA ActiveParticipants,Y						;C2/59F1: B9 C2 3E     LDA $3EC2,Y	
	BNE .ActiveMonster							;C2/59F4: D0 17        BNE $5A0D	
	PLY 									;C2/59F6: 7A           PLY 		
	LDA CombinedStatus[8].S1,Y	;8 is first monster entry		;C2/59F7: B9 9E 7B     LDA $7B9E,Y	
	AND #$30	;keep toad/mini						;C2/59FA: 29 30        AND #$30		
	ORA #$80	;set dead						;C2/59FC: 09 80        ORA #$80		
	STA CombinedStatus[8].S1,Y						;C2/59FE: 99 9E 7B     STA $7B9E,Y	
	TDC 									;C2/5A01: 7B           TDC 		
	STA CombinedStatus[8].S2,Y						;C2/5A02: 99 9F 7B     STA $7B9F,Y	
	STA CombinedStatus[8].S3,Y						;C2/5A05: 99 A0 7B     STA $7BA0,Y
	STA CombinedStatus[8].S4,Y						;C2/5A08: 99 A1 7B     STA $7BA1,Y
	BRA .NextMonster							;C2/5A0B: 80 25        BRA $5A32	

.ActiveMonster														
	PLY 									;C2/5A0D: 7A           PLY 		
	LDA CharStruct.Status1,X						;C2/5A0E: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/5A11: 1D 70 20     ORA $2070,X	
	STA CombinedStatus[8].S1,Y						;C2/5A14: 99 9E 7B     STA $7B9E,Y	
	LDA CharStruct.Status2,X						;C2/5A17: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/5A1A: 1D 71 20     ORA $2071,X
	STA CombinedStatus[8].S2,Y						;C2/5A1D: 99 9F 7B     STA $7B9F,Y	
	LDA CharStruct.Status3,X						;C2/5A20: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X						;C2/5A23: 1D 72 20     ORA $2072,X
	STA CombinedStatus[8].S3,Y						;C2/5A26: 99 A0 7B     STA $7BA0,Y	
	LDA CharStruct.Status4,X						;C2/5A29: BD 1D 20     LDA $201D,X
	ORA CharStruct.AlwaysStatus4,X						;C2/5A2C: 1D 73 20     ORA $2073,X
	STA CombinedStatus[8].S4,Y						;C2/5A2F: 99 A1 7B     STA $7BA1,Y	

.NextMonster									;:
	INC $0E									;C2/5A32: E6 0E        INC $0E		
	INY 									;C2/5A34: C8           INY 
	INY 									;C2/5A35: C8           INY 
	INY 									;C2/5A36: C8           INY 
	INY 									;C2/5A37: C8           INY 		
	JSR NextCharOffset							;C2/5A38: 20 E0 01     JSR $01E0	
	CPY #$0020	;4 * 8 monsters						;C2/5A3B: C0 20 00     CPY #$0020	
	BNE .MonsterStatusLoop							;C2/5A3E: D0 AE        BNE $59EE	
	RTS									;C2/5A40: 60           RTS


%org($C25A41)
;Setup displayed monster slots (4 types and quantities)
UpdateMonsterList:
	TDC									;C2/5A41: 7B           TDC		
	TAX 									;C2/5A42: AA           TAX 		
	TAY 									;C2/5A43: A8           TAY 		
	STX MonsterSlots[0].ID							;C2/5A44: 8E 38 40     STX $4038	
	STX MonsterSlots[0].Count						;C2/5A47: 8E 3A 40     STX $403A
	STX MonsterSlots[1].ID	 						;C2/5A4A: 8E 3C 40     STX $403C
	STX MonsterSlots[1].Count						;C2/5A4D: 8E 3E 40     STX $403E
	STX MonsterSlots[2].ID	 						;C2/5A50: 8E 40 40     STX $4040
	STX MonsterSlots[2].Count						;C2/5A53: 8E 42 40     STX $4042
	STX MonsterSlots[3].ID	 						;C2/5A56: 8E 44 40     STX $4044
	STX MonsterSlots[3].Count 						;C2/5A59: 8E 46 40     STX $4046
	STZ MonstersVisible							;C2/5A5C: 9C 48 40     STZ $4048	
	STX $10		;monster index						;C2/5A5F: 86 10        STX $10		
	DEY 		;$FFFF, or -1						;C2/5A61: 88           DEY 		
	STY $0E		;$FF, nothing or not displayed				;C2/5A62: 84 0E        STY $0E		
	DEY 									;C2/5A64: 88           DEY 
	DEY 									;C2/5A65: 88           DEY 
	DEY 		;FFFC, or -4	(so when it adds 4 we start at 0)	;C2/5A66: 88           DEY 		

.AddMonster										
	LDX $10		;monster index						;C2/5A67: A6 10        LDX $10		
	LDA ActiveParticipants+4,X	;monster part of table			;C2/5A69: BD C6 3E     LDA $3EC6,X	
	BEQ .Next								;C2/5A6C: F0 3D        BEQ $5AAB	
	LDA MonstersVisible							;C2/5A6E: AD 48 40     LDA $4048
	JSR SetBit_X								;C2/5A71: 20 D6 01     JSR $01D6	
	STA MonstersVisible							;C2/5A74: 8D 48 40     STA $4048
	TXA 									;C2/5A77: 8A           TXA 		
	CLC 									;C2/5A78: 18           CLC 		
	ADC #$04	;shift to char index					;C2/5A79: 69 04        ADC #$04		
	JSR CalculateCharOffset							;C2/5A7B: 20 EC 01     JSR $01EC	
	LDA CharStruct.Status1,X						;C2/5A7E: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/5A81: 1D 70 20     ORA $2070,X	
	AND #$30	;toad / mini						;C2/5A84: 29 30        AND #$30		
	BNE .Next								;C2/5A86: D0 23        BNE $5AAB	
	LDA $10		;monster index						;C2/5A88: A5 10        LDA $10		
	ASL 									;C2/5A8A: 0A           ASL 		
	TAX 									;C2/5A8B: AA           TAX 		
	LDA MonsterNameID,X							;C2/5A8C: BD 08 40     LDA $4008,X	
	CMP $0E		;previous monster name ID				;C2/5A8F: C5 0E        CMP $0E		
	BEQ .AddCount								;C2/5A91: F0 0F        BEQ $5AA2	
	INY 									;C2/5A93: C8           INY 
	INY 									;C2/5A94: C8           INY 
	INY 									;C2/5A95: C8           INY 
	INY 		;next MonsterSlots entry				;C2/5A96: C8           INY 
	STA MonsterSlots.ID,Y							;C2/5A97: 99 38 40     STA $4038,Y	
	STA $0E		;saved monster name ID					;C2/5A9A: 85 0E        STA $0E
	LDA BattleMonsterID+1		;copy boss byte				;C2/5A9C: AD 21 40     LDA $4021	
	STA MonsterSlots.ID+1,Y							;C2/5A9F: 99 39 40     STA $4039,Y	

.AddCount
	CLC 									;C2/5AA2: 18           CLC 
	LDA MonsterSlots.Count,Y						;C2/5AA3: B9 3A 40     LDA $403A,Y	
	ADC #$01								;C2/5AA6: 69 01        ADC #$01	
	STA MonsterSlots.Count,Y						;C2/5AA8: 99 3A 40     STA $403A,Y

.Next								
	INC $10		;next monster index					;C2/5AAB: E6 10        INC $10		
	LDA $10									;C2/5AAD: A5 10        LDA $10
	CMP #$08	;8 monsters						;C2/5AAF: C9 08        CMP #$08	
	BNE .AddMonster								;C2/5AB1: D0 B4        BNE $5A67	
	RTS 									;C2/5AB3: 60           RTS 

%org($C25AB4)
;checks if the battle ended via timer, death, victory, or escape
CheckBattleEnd:
	TDC 								;C2/5AB4: 7B           TDC 
	TAX 								;C2/5AB5: AA           TAX 
	TAY 								;C2/5AB6: A8           TAY 
	LDA BattleOver  	;check if it's already ending		;C2/5AB7: AD DE 7B     LDA $7BDE     
	BEQ .CheckTimer							;C2/5ABA: F0 01        BEQ $5ABD
	RTS								;C2/5ABC: 60           RTS

.CheckTimer								
	LDA BattleTimerEnable						;C2/5ABD: AD 94 7C     LDA $7C94
	CMP #$02							;C2/5AC0: C9 02        CMP #$02
	BNE .CheckParty							;C2/5AC2: D0 0E        BNE $5AD2
	LDA BattleTimer							;C2/5AC4: AD 95 7C     LDA $7C95
	ORA BattleTimer+1						;C2/5AC7: 0D 96 7C     ORA $7C96
	BNE .CheckParty							;C2/5ACA: D0 06        BNE $5AD2
	LDA #$20		;end via timer				;C2/5ACC: A9 20        LDA #$20
	STA BattleOver							;C2/5ACE: 8D DE 7B     STA $7BDE     
	RTS								;C2/5AD1: 60           RTS

.CheckParty									
	LDA ActiveParticipants,Y					;C2/5AD2: B9 C2 3E     LDA $3EC2,Y   
	BEQ .NextParty  						;C2/5AD5: F0 0A        BEQ $5AE1     
	LDA CharStruct.Status1,X					;C2/5AD7: BD 1A 20     LDA $201A,X   
	ORA CharStruct.AlwaysStatus1,X					;C2/5ADA: 1D 70 20     ORA $2070,X
	AND #$02	;zombies are active but don't count		;C2/5ADD: 29 02        AND #$02
	BEQ .CheckHideFlee  						;C2/5ADF: F0 0F        BEQ $5AF0     
.NextParty
	JSR NextCharOffset  						;C2/5AE1: 20 E0 01     JSR $01E0     
	INY 								;C2/5AE4: C8           INY 
	CPY #$0004							;C2/5AE5: C0 04 00     CPY #$0004
	BNE .CheckParty							;C2/5AE8: D0 E8        BNE $5AD2
	LDA #$40	;end via party ko				;C2/5AEA: A9 40        LDA #$40
	STA BattleOver	  						;C2/5AEC: 8D DE 7B     STA $7BDE     
	RTS								;C2/5AEF: 60           RTS

.CheckHideFlee		;X and Y start where they left off from the party checks
	LDA ActiveParticipants,Y					;C2/5AF0: B9 C2 3E     LDA $3EC2,Y   
	BEQ .NextHide							;C2/5AF3: F0 07        BEQ $5AFC
	LDA CharStruct.Status4,X					;C2/5AF5: BD 1D 20     LDA $201D,X   
	AND #$01	;hidden						;C2/5AF8: 29 01        AND #$01
	BEQ .CheckMonsters						;C2/5AFA: F0 0E        BEQ $5B0A     
.NextHide
	JSR NextCharOffset 						;C2/5AFC: 20 E0 01     JSR $01E0     
	INY 								;C2/5AFF: C8           INY 
	CPY #$0004							;C2/5B00: C0 04 00     CPY #$0004
	BNE .CheckHideFlee						;C2/5B03: D0 EB        BNE $5AF0
	LDA EncounterInfo.FleeChance					;C2/5B05: AD F0 3E     LDA $3EF0     
	BPL .FleeSuccess  ;80h = can't run				;C2/5B08: 10 58        BPL $5B62     

.CheckMonsters
	LDY #$0004 	;first monster index				;C2/5B0A: A0 04 00     LDY #$0004    
	LDX #$0200 	;first monster offset				;C2/5B0D: A2 00 02     LDX #$0200    
.MonsterLoop
	LDA ActiveParticipants,Y					;C2/5B10: B9 C2 3E     LDA $3EC2,Y   
	BEQ .NextMonster						;C2/5B13: F0 0A        BEQ $5B1F
	LDA CharStruct.Status1,X					;C2/5B15: BD 1A 20     LDA $201A,X   
	ORA CharStruct.AlwaysStatus1,X					;C2/5B18: 1D 70 20     ORA $2070,X
	AND #$02	;zombie monsters don't exist, but check anyway	;C2/5B1B: 29 02        AND #$02
	BEQ .CheckFlee  						;C2/5B1D: F0 0F        BEQ $5B2E     
.NextMonster
	JSR NextCharOffset 						;C2/5B1F: 20 E0 01     JSR $01E0     
	INY 								;C2/5B22: C8           INY 
	CPY #$000C	;12 slots					;C2/5B23: C0 0C 00     CPY #$000C
	BNE .MonsterLoop						;C2/5B26: D0 E8        BNE $5B10
	LDA #$80	;victory					;C2/5B28: A9 80        LDA #$80
	STA BattleOver  						;C2/5B2A: 8D DE 7B     STA $7BDE     
	RTS								;C2/5B2D: 60           RTS

.CheckFlee									
	LDA FleeTickerActive						;C2/5B2E: AD 4E 7C     LDA $7C4E
	BEQ .ResetFleeTicker						;C2/5B31: F0 35        BEQ $5B68
	LDA FleeSuccess							;C2/5B33: AD E8 7B     LDA $7BE8
	BMI .FleeSuccess	;80h: exit cast				;C2/5B36: 30 2A        BMI $5B62
	BEQ .ResetFleeTicker						;C2/5B38: F0 2E        BEQ $5B68
	LDA EncounterInfo.FleeChance					;C2/5B3A: AD F0 3E     LDA $3EF0
	BPL .AdvanceTicker 						;C2/5B3D: 10 11        BPL $5B50     
	JSR WipeDisplayStructures  					;C2/5B3F: 20 18 02     JSR $0218     
	TDC 								;C2/5B42: 7B           TDC 
	JSR GFXCmdMessageClearAnim					;C2/5B43: 20 47 58     JSR $5847
	LDA #$20   	;can't run message				;C2/5B46: A9 20        LDA #$20      
	STA MessageBoxes						;C2/5B48: 8D 5F 3C     STA $3C5F
	LDA #$0A	;C1 routine: execute graphics script		;C2/5B4B: A9 0A        LDA #$0A
	JMP CallC1							;C2/5B4D: 4C 69 00     JMP $0069     
.AdvanceTicker
	INC FleeTicker 							;C2/5B50: EE 5F 7C     INC $7C5F
	LDA FleeTicker 							;C2/5B53: AD 5F 7C     LDA $7C5F
	CMP #$14	;20 ticks before flee attempt			;C2/5B56: C9 14        CMP #$14
	BNE .Ret							;C2/5B58: D0 11        BNE $5B6B
	JSR Random_0_99  						;C2/5B5A: 20 A2 02     JSR $02A2     
	CMP EncounterInfo.FleeChance					;C2/5B5D: CD F0 3E     CMP $3EF0
	BCS .ResetFleeTicker						;C2/5B60: B0 06        BCS $5B68
.FleeSuccess
	LDA #$01	;escaped					;C2/5B62: A9 01        LDA #$01
	STA BattleOver							;C2/5B64: 8D DE 7B     STA $7BDE
	RTS 								;C2/5B67: 60           RTS 
.ResetFleeTicker
	STZ FleeTicker							;C2/5B68: 9C 5F 7C     STZ $7C5F
.Ret	RTS 								;C2/5B6B: 60           RTS 

%org($C25B6C)
UpdateMonsterRows:
	LDA #$0B	;C1 routine					;C2/5B6C: A9 0B        LDA #$0B
	JSR CallC1    							;C2/5B6E: 20 69 00     JSR $0069     
	TDC 								;C2/5B71: 7B           TDC 
	TAX 								;C2/5B72: AA           TAX 
	LDY #$0200	;first monster offset				;C2/5B73: A0 00 02     LDY #$0200
.Loop
	LDA CharStruct.CharRow,Y  					;C2/5B76: B9 00 20     LDA $2000,Y   
	AND #$7F	;clear row bit (front row)			;C2/5B79: 29 7F        AND #$7F
	STA CharStruct.CharRow,Y					;C2/5B7B: 99 00 20     STA $2000,Y
	LDA C1Temp	;seems to have bits set for front row monsters	;C2/5B7E: A5 70        LDA $70
	JSR SelectBit_X    						;C2/5B80: 20 DB 01     JSR $01DB     
	BNE .Next							;C2/5B83: D0 08        BNE $5B8D
	LDA CharStruct.CharRow,Y  					;C2/5B85: B9 00 20     LDA $2000,Y   
	ORA #$80	;set row bit (back row)				;C2/5B88: 09 80        ORA #$80
	STA CharStruct.CharRow,Y					;C2/5B8A: 99 00 20     STA $2000,Y
.Next
	REP #$20							;C2/5B8D: C2 20        REP #$20
	TYA 								;C2/5B8F: 98           TYA 
	CLC 								;C2/5B90: 18           CLC 
	ADC #$0080	;next monster offset				;C2/5B91: 69 80 00     ADC #$0080
	TAY 								;C2/5B94: A8           TAY 
	TDC 								;C2/5B95: 7B           TDC 
	SEP #$20							;C2/5B96: E2 20        SEP #$20
	INX 								;C2/5B98: E8           INX 
	CPX #$0008	;8 monsters					;C2/5B99: E0 08 00     CPX #$0008
	BNE .Loop							;C2/5B9C: D0 D8        BNE $5B76
	RTS 								;C2/5B9E: 60           RTS 

;Command $27 (Dummy02)
;Command $28 (Sing)
;Command $2C-$4D (Magic)
MagicCommand:
#CommandTable26:
#CommandTable27:
#CommandTable2B:		
	LDA AttackerIndex						;C2/5B9F: A5 47        LDA $47       
	CMP #$04	;monster check					;C2/5BA1: C9 04        CMP #$04
	BCC .Party							;C2/5BA3: 90 03        BCC $5BA8
	JMP .Monster							;C2/5BA5: 4C 50 5C     JMP $5C50
.Party	STZ TempAttachedSpell						;C2/5BA8: 64 20        STZ $20
	STZ TempSkipNaming						;C2/5BAA: 64 21        STZ $21
	LDX AttackerOffset						;C2/5BAC: A6 32        LDX $32       
	LDA CharStruct.MonsterTargets,X					;C2/5BAE: BD 58 20     LDA $2058,X
	STA MonsterTargets						;C2/5BB1: 85 65        STA $65
	LDA CharStruct.PartyTargets,X					;C2/5BB3: BD 59 20     LDA $2059,X
	STA PartyTargets						;C2/5BB6: 85 66        STA $66
	LDA CharStruct.SelectedItem,X					;C2/5BB8: BD 5A 20     LDA $205A,X
	STA TempSpell							;C2/5BBB: 8D 22 27     STA $2722
	LDA CharStruct.ActionFlag,X					;C2/5BBE: BD 56 20     LDA $2056,X
	AND #$08	;X-Magic					;C2/5BC1: 29 08        AND #$08
	BEQ .CastSpell1							;C2/5BC3: F0 27        BEQ $5BEC
	LDA PartyTargets						;C2/5BC5: A5 66        LDA $66
	BEQ .CastSpell1							;C2/5BC7: F0 23        BEQ $5BEC
	LDA CharStruct.PartyTargets,X					;C2/5BC9: BD 59 20     LDA $2059,X
	CMP CharStruct.SecondPartyTargets,X				;C2/5BCC: DD 5E 20     CMP $205E,X
	BNE .CastSpell1	;if x-magic targetting the same party member	;C2/5BCF: D0 1B        BNE $5BEC
	LDA TempSpell	;check spell	 				;C2/5BD1: AD 22 27     LDA $2722
	CMP #$19	;Life						;C2/5BD4: C9 19        CMP #$19
	BEQ .CheckDeath							;C2/5BD6: F0 11        BEQ $5BE9
	CMP #$21	;Life2						;C2/5BD8: C9 21        CMP #$21
	BEQ .CheckDeath							;C2/5BDA: F0 0D        BEQ $5BE9
	CMP #$54	;Phoenix					;C2/5BDC: C9 54        CMP #$54
	BEQ .CheckDeath							;C2/5BDE: F0 09        BEQ $5BE9
	CMP #$1D	;Heal/Esuna					;C2/5BE0: C9 1D        CMP #$1D
	BNE .CastSpell1							;C2/5BE2: D0 08        BNE $5BEC
.Stone	INC SpellCheckStone	;set variables to confirm they still 	;C2/5BE4: EE 98 7C     INC $7C98
	BRA .CastSpell1		;have the relevant status		;C2/5BE7: 80 03        BRA $5BEC
.CheckDeath	
	INC SpellCheckDeath						;C2/5BE9: EE 99 7C     INC $7C99

.CastSpell1
	STZ TempIsEffect						;C2/5BEC: 9C 23 27     STZ $2723
	JSR CastSpell							;C2/5BEF: 20 E1 5C     JSR $5CE1
	LDA TempAttachedSpell	;attached spell for phoenix		;C2/5BF2: A5 20        LDA $20
	BEQ .CastSpell2							;C2/5BF4: F0 15        BEQ $5C0B
	LDA TempAttachedSpell						;C2/5BF6: A5 20        LDA $20
	STA TempSpell							;C2/5BF8: 8D 22 27     STA $2722
	STZ TempIsEffect						;C2/5BFB: 9C 23 27     STZ $2723
	LDA TempMonsterTargets						;C2/5BFE: A5 23        LDA $23
	STA MonsterTargets						;C2/5C00: 85 65        STA $65
	LDA TempPartyTargets						;C2/5C02: A5 22        LDA $22
	STA PartyTargets						;C2/5C04: 85 66        STA $66
	INC TempSkipNaming						;C2/5C06: E6 21        INC $21
	JSR CastSpell							;C2/5C08: 20 E1 5C     JSR $5CE1

.CastSpell2
	LDX AttackerOffset						;C2/5C0B: A6 32        LDX $32       
	LDA CharStruct.ActionFlag,X					;C2/5C0D: BD 56 20     LDA $2056,X
	AND #$08	;X-Magic					;C2/5C10: 29 08        AND #$08
	BEQ .Finish							;C2/5C12: F0 33        BEQ $5C47
	STZ TempAttachedSpell						;C2/5C14: 64 20        STZ $20
	STZ TempSkipNaming						;C2/5C16: 64 21        STZ $21
	LDA CharStruct.SecondMonsterTargets,X				;C2/5C18: BD 5D 20     LDA $205D,X
	STA MonsterTargets						;C2/5C1B: 85 65        STA $65
	LDA CharStruct.SecondPartyTargets,X				;C2/5C1D: BD 5E 20     LDA $205E,X
	STA PartyTargets						;C2/5C20: 85 66        STA $66
	LDA CharStruct.SecondSelectedItem,X				;C2/5C22: BD 5F 20     LDA $205F,X
	STA TempSpell							;C2/5C25: 8D 22 27     STA $2722
	STZ TempIsEffect						;C2/5C28: 9C 23 27     STZ $2723
	JSR CastSpell							;C2/5C2B: 20 E1 5C     JSR $5CE1
	LDA TempAttachedSpell	;attached spell for phoenix fire	;C2/5C2E: A5 20        LDA $20
	BEQ .Finish							;C2/5C30: F0 15        BEQ $5C47
	LDA TempAttachedSpell						;C2/5C32: A5 20        LDA $20
	STA TempSpell							;C2/5C34: 8D 22 27     STA $2722
	STZ TempIsEffect						;C2/5C37: 9C 23 27     STZ $2723
	LDA TempMonsterTargets						;C2/5C3A: A5 23        LDA $23
	STA MonsterTargets						;C2/5C3C: 85 65        STA $65
	LDA TempPartyTargets						;C2/5C3E: A5 22        LDA $22
	STA PartyTargets						;C2/5C40: 85 66        STA $66
	INC TempSkipNaming						;C2/5C42: E6 21        INC $21
	JSR CastSpell							;C2/5C44: 20 E1 5C     JSR $5CE1

.Finish	STZ SpellCheckDeath						;C2/5C47: 9C 99 7C     STZ $7C99
	STZ SpellCheckStone						;C2/5C4A: 9C 98 7C     STZ $7C98
	JMP .Ret							;C2/5C4D: 4C E0 5C     JMP $5CE0

.Monster
	SEC 								;C2/5C50: 38           SEC 
	LDA AttackerIndex						;C2/5C51: A5 47        LDA $47       
	SBC #$04							;C2/5C53: E9 04        SBC #$04
	ASL 								;C2/5C55: 0A           ASL 
	TAX 		;monster index					;C2/5C56: AA           TAX 
	LDA ROMTimes100w,X						;C2/5C57: BF 95 EE D0  LDA $D0EE95,X
	STA $0E		;monster index *100				;C2/5C5B: 85 0E        STA $0E
	LDA ROMTimes100w+1,X						;C2/5C5D: BF 96 EE D0  LDA $D0EE96,X
	STA $0F								;C2/5C61: 85 0F        STA $0F
	TDC 								;C2/5C63: 7B           TDC 
	TAY 								;C2/5C64: A8           TAY 
	LDX $0E		;monster index *100				;C2/5C65: A6 0E        LDX $0E
-	LDA !MonsterAIScript,X						;C2/5C67: BD 67 43     LDA $4367,X
	STA !GFXQueue,Y							;C2/5C6A: 99 4C 38     STA $384C,Y
	INX 								;C2/5C6D: E8           INX 
	INY 								;C2/5C6E: C8           INY 
	CPY #$0064	;copy 100 bytes of commands			;C2/5C6F: C0 64 00     CPY #$0064
	BNE -								;C2/5C72: D0 F3        BNE $5C67

	INC SearchGFXQueue						;C2/5C74: EE 03 7C     INC $7C03
	STZ $1E								;C2/5C77: 64 1E        STZ $1E
	SEC 								;C2/5C79: 38           SEC 
	LDA AttackerIndex						;C2/5C7A: A5 47        LDA $47       
	SBC #$04	;monster index					;C2/5C7C: E9 04        SBC #$04
	JSR ShiftMultiply_16    					;C2/5C7E: 20 B5 01     JSR $01B5     
	TAX 								;C2/5C81: AA           TAX 
	STX $0E		;monster index *16				;C2/5C82: 86 0E        STX $0E
	REP #$20							;C2/5C84: C2 20        REP #$20
	CLC 								;C2/5C86: 18           CLC 
	ADC #MonsterMagic						;C2/5C87: 69 DE 41     ADC #$41DE
	TAX 								;C2/5C8A: AA           TAX 
	STX MMOffset		;MonsterMagic offset			;C2/5C8B: 86 3D        STX $3D
	LDA $0E								;C2/5C8D: A5 0E        LDA $0E
	ASL 		;monster index *32				;C2/5C8F: 0A           ASL 
	CLC 								;C2/5C90: 18           CLC 
	ADC #!MMTargets							;C2/5C91: 69 5E 42     ADC #$425E
	TAX 								;C2/5C94: AA           TAX 
	STX MMTargetOffset	;MonsterMagic Targets offset		;C2/5C95: 86 3F        STX $3F
	TDC 								;C2/5C97: 7B           TDC 
	SEP #$20							;C2/5C98: E2 20        SEP #$20

.CastNextMonsterSpell
	LDA $1E								;C2/5C9A: A5 1E        LDA $1E
	TAY 								;C2/5C9C: A8           TAY 
	LDA (MMOffset),Y	;MonsterMagic				;C2/5C9D: B1 3D        LDA ($3D),Y
	CMP #$FF							;C2/5C9F: C9 FF        CMP #$FF
	BEQ .Ret							;C2/5CA1: F0 3D        BEQ $5CE0
	STA TempSpell							;C2/5CA3: 8D 22 27     STA $2722
	CMP #$E9	;banish						;C2/5CA6: C9 E9        CMP #$E9
	BNE +								;C2/5CA8: D0 03        BNE $5CAD
	INC UnknownReaction						;C2/5CAA: EE FB 7B     INC $7BFB
+	LDA TempSpell							;C2/5CAD: AD 22 27     LDA $2722
	CMP #$A8	;interceptor rocket				;C2/5CB0: C9 A8        CMP #$A8
	BNE +								;C2/5CB2: D0 03        BNE $5CB7
	INC HitsJumping							;C2/5CB4: EE 9C 7C     INC $7C9C
+	LDA TempSpell							;C2/5CB7: AD 22 27     LDA $2722
	CMP #$83	;roulette					;C2/5CBA: C9 83        CMP #$83
	BNE +								;C2/5CBC: D0 03        BNE $5CC1
	INC MissInactive						;C2/5CBE: EE 9D 7C     INC $7C9D
+	STZ TempAttachedSpell						;C2/5CC1: 64 20        STZ $20
	STZ TempSkipNaming						;C2/5CC3: 64 21        STZ $21
	LDA $1E								;C2/5CC5: A5 1E        LDA $1E
	ASL 								;C2/5CC7: 0A           ASL 
	TAY 								;C2/5CC8: A8           TAY 
	LDA (MMTargetOffset),Y	;MonsterMagic Party Targets		;C2/5CC9: B1 3F        LDA ($3F),Y
	STA PartyTargets						;C2/5CCB: 85 66        STA $66
	INY 								;C2/5CCD: C8           INY 
	LDA (MMTargetOffset),Y	;MonsterMagic Monster Targets		;C2/5CCE: B1 3F        LDA ($3F),Y
	STA MonsterTargets						;C2/5CD0: 85 65        STA $65
	STZ TempIsEffect						;C2/5CD2: 9C 23 27     STZ $2723
	JSR CastSpell							;C2/5CD5: 20 E1 5C     JSR $5CE1
	INC $1E								;C2/5CD8: E6 1E        INC $1E
	LDA $1E								;C2/5CDA: A5 1E        LDA $1E
	CMP #$10	;can cast up to 16 spells			;C2/5CDC: C9 10        CMP #$10
	BNE .CastNextMonsterSpell					;C2/5CDE: D0 BA        BNE $5C9A
.Ret	RTS 								;C2/5CE0: 60           RTS 

%org($C25CE1)
;does everything needed to cast a spell or use a magic-like ability
;
;loads spell data into attack info structures and other variables
;fixes up targetting as needed
;displays needed messages and animations
%sub(CastSpell)
CastSpell:
	LDA TempIsEffect						;C2/5CE1: AD 23 27     LDA $2723
	BNE .LoadEffect							;C2/5CE4: D0 24        BNE $5D0A
	LDA TempSpell							;C2/5CE6: AD 22 27     LDA $2722
	CMP #$F1	;Spell $F1 pulls data for $78 instead		;C2/5CE9: C9 F1        CMP #$F1
	BNE +								;C2/5CEB: D0 02        BNE $5CEF
	LDA #$78							;C2/5CED: A9 78        LDA #$78
+	REP #$20							;C2/5CEF: C2 20        REP #$20
	JSR ShiftMultiply_8       					;C2/5CF1: 20 B6 01     JSR $01B6      
	TAX 								;C2/5CF4: AA           TAX 
	TDC 								;C2/5CF5: 7B           TDC 
	SEP #$20							;C2/5CF6: E2 20        SEP #$20
	TDC 								;C2/5CF8: 7B           TDC 
	TAY 								;C2/5CF9: A8           TAY 
-	LDA !ROMMagicInfo,X						;C2/5CFA: BF 80 0B D1  LDA $D10B80,X
	STA !TempMagicInfo,Y						;C2/5CFE: 99 2A 26     STA $262A,Y
	INX 								;C2/5D01: E8           INX 
	INY 								;C2/5D02: C8           INY 
	CPY #$0008	;8 bytes in magic info struct			;C2/5D03: C0 08 00     CPY #$0008
	BNE -								;C2/5D06: D0 F2        BNE $5CFA
	BRA .DataLoaded							;C2/5D08: 80 1C        BRA $5D26

.LoadEffect
	LDA TempSpell							;C2/5D0A: AD 22 27     LDA $2722
	REP #$20							;C2/5D0D: C2 20        REP #$20
	JSR ShiftMultiply_8       					;C2/5D0F: 20 B6 01     JSR $01B6      
	TAX 								;C2/5D12: AA           TAX 
	TDC 								;C2/5D13: 7B           TDC 
	SEP #$20							;C2/5D14: E2 20        SEP #$20
	TDC 								;C2/5D16: 7B           TDC 
	TAY 								;C2/5D17: A8           TAY 
-	LDA !ROMEffectInfo,X						;C2/5D18: BF B1 6A D1  LDA $D16AB1,X
	STA !TempMagicInfo,Y						;C2/5D1C: 99 2A 26     STA $262A,Y
	INX 								;C2/5D1F: E8           INX 
	INY 								;C2/5D20: C8           INY 
	CPY #$0008	;8 bytes in magic info struct			;C2/5D21: C0 08 00     CPY #$0008
	BNE -								;C2/5D24: D0 F2        BNE $5D18

.DataLoaded
	LDA TempIsEffect						;C2/5D26: AD 23 27     LDA $2723
	BNE .CopyMagicInfo						;C2/5D29: D0 0E        BNE $5D39
	LDA TempSpell							;C2/5D2B: AD 22 27     LDA $2722
	CMP #$48	;first summon spell				;C2/5D2E: C9 48        CMP #$48
	BCC .CopyMagicInfo						;C2/5D30: 90 07        BCC $5D39
	CMP #$57	;after last summon spell			;C2/5D32: C9 57        CMP #$57
	BCS .CopyMagicInfo						;C2/5D34: B0 03        BCS $5D39
	JSR PrepSummon							;C2/5D36: 20 A3 60     JSR $60A3

.CopyMagicInfo
	JSR SelectCurrentProcSequence	;Y = ProcSequence*12		;C2/5D39: 20 23 99     JSR $9923
	TDC 								;C2/5D3C: 7B           TDC 
	TAX 								;C2/5D3D: AA           TAX 
-	LDA !TempMagicInfo,X						;C2/5D3E: BD 2A 26     LDA $262A,X
	STA !AttackInfo,Y						;C2/5D41: 99 FC 79     STA $79FC,Y
	INX 								;C2/5D44: E8           INX 
	INY 								;C2/5D45: C8           INY 
	CPX #$0005	;copy first 5 bytes to start of struct		;C2/5D46: E0 05 00     CPX #$0005
	BNE -								;C2/5D49: D0 F3        BNE $5D3E
	INY 		;skip 4 bytes in destination			;C2/5D4B: C8           INY 
	INY 								;C2/5D4C: C8           INY 
	INY 								;C2/5D4D: C8           INY 
	INY 								;C2/5D4E: C8           INY 
-	LDA !TempMagicInfo,X						;C2/5D4F: BD 2A 26     LDA $262A,X
	STA !AttackInfo,Y						;C2/5D52: 99 FC 79     STA $79FC,Y
	INX 								;C2/5D55: E8           INX 
	INY 								;C2/5D56: C8           INY 
	CPX #$0008							;C2/5D57: E0 08 00     CPX #$0008
	BNE -		;copy remaining 3 bytes to end of struct	;C2/5D5A: D0 F3        BNE $5D4F
	LDA TempMagicInfo.Misc						;C2/5D5C: AD 2C 26     LDA $262C
	AND #$07	;number of hits -1				;C2/5D5F: 29 07        AND #$07
	BEQ .SingleHit							;C2/5D61: F0 04        BEQ $5D67
	JSR CastMultiHitSpell						;C2/5D63: 20 75 5F     JSR $5F75
	RTS 								;C2/5D66: 60           RTS 

.SingleHit
	JSR CheckMultiTarget						;C2/5D67: 20 C2 02     JSR $02C2
	BNE .MultiTarget						;C2/5D6A: D0 3F        BNE $5DAB
	LDA TempMagicInfo.AtkType					;C2/5D6C: AD 2E 26     LDA $262E
	BPL .CheckSpecialVars						;C2/5D6F: 10 0B        BPL $5D7C
.HitsInactive
	LDA ProcSequence						;C2/5D71: AD FA 79     LDA $79FA
	TAX 								;C2/5D74: AA           TAX 
	LDA #$01							;C2/5D75: A9 01        LDA #$01
	STA HitsInactive,X						;C2/5D77: 9D EB 7B     STA $7BEB,X
	BRA .BuildTargetBitmask						;C2/5D7A: 80 4A        BRA $5DC6

.CheckSpecialVars
	LDA SpellCheckDeath						;C2/5D7C: AD 99 7C     LDA $7C99
	BNE .CheckDeath							;C2/5D7F: D0 13        BNE $5D94
	LDA SpellCheckStone						;C2/5D81: AD 98 7C     LDA $7C98
	BEQ .CheckTarget						;C2/5D84: F0 16        BEQ $5D9C
.CheckStone
	JSR GetPartyTargetOffset					;C2/5D86: 20 4E 61     JSR $614E
	LDA CharStruct.Status1,X					;C2/5D89: BD 1A 20     LDA $201A,X
	BMI .CheckTarget	;if dead				;C2/5D8C: 30 0E        BMI $5D9C
	AND #$40							;C2/5D8E: 29 40        AND #$40
	BNE .HitsInactive	;if stone				;C2/5D90: D0 DF        BNE $5D71
	BRA .CheckTarget						;C2/5D92: 80 08        BRA $5D9C

.CheckDeath
	JSR GetPartyTargetOffset					;C2/5D94: 20 4E 61     JSR $614E
	LDA CharStruct.Status1,X					;C2/5D97: BD 1A 20     LDA $201A,X
	BMI .HitsInactive						;C2/5D9A: 30 D5        BMI $5D71

.CheckTarget
	JSR CheckRetarget						;C2/5D9C: 20 FE 4A     JSR $4AFE
	LDA NoValidTargets						;C2/5D9F: AD 29 7C     LDA $7C29
	BEQ .BuildTargetBitmask						;C2/5DA2: F0 22        BEQ $5DC6
.NoTargets
	LDA #$F1							;C2/5DA4: A9 F1        LDA #$F1
	STA TempSpell							;C2/5DA6: 8D 22 27     STA $2722
	BRA .BuildTargetBitmask						;C2/5DA9: 80 1B        BRA $5DC6

.MultiTarget
	LDA TempMagicInfo.AtkType					;C2/5DAB: AD 2E 26     LDA $262E
	BPL .RemoveInactive						;C2/5DAE: 10 0B        BPL $5DBB
	LDA ProcSequence						;C2/5DB0: AD FA 79     LDA $79FA
	TAX 								;C2/5DB3: AA           TAX 
	LDA #$01							;C2/5DB4: A9 01        LDA #$01
	STA HitsInactive,X						;C2/5DB6: 9D EB 7B     STA $7BEB,X
	BRA .BuildTargetBitmask						;C2/5DB9: 80 0B        BRA $5DC6
.RemoveInactive
	JSR RemoveInactiveTargets					;C2/5DBB: 20 CF 02     JSR $02CF
	LDA NoValidTargets						;C2/5DBE: AD 29 7C     LDA $7C29
	BNE .NoTargets							;C2/5DC1: D0 E1        BNE $5DA4
	JSR CheckMultiTarget						;C2/5DC3: 20 C2 02     JSR $02C2

.BuildTargetBitmask
	JSR BuildTargetBitmask						;C2/5DC6: 20 A9 02     JSR $02A9
	LDA TempIsEffect						;C2/5DC9: AD 23 27     LDA $2723
	BNE .CheckMagicAnimTable					;C2/5DCC: D0 31        BNE $5DFF
	LDA TempSpell							;C2/5DCE: AD 22 27     LDA $2722
	CMP #$80	;monster fight					;C2/5DD1: C9 80        CMP #$80
	BEQ .Fight							;C2/5DD3: F0 04        BEQ $5DD9
	CMP #$DE	;strong fight?	vacuum wave?			;C2/5DD5: C9 DE        CMP #$DE
	BNE .NotFight							;C2/5DD7: D0 1C        BNE $5DF5

.Fight	JSR FindOpenGFXQueueSlot       					;C2/5DD9: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/5DDC: 9E 4C 38     STZ $384C,X
	LDA #$FC	;exec graphics command				;C2/5DDF: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/5DE1: 9D 4D 38     STA $384D,X
	LDA #$01	;ability/command anim				;C2/5DE4: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/5DE6: 9D 4E 38     STA $384E,X
	LDA #$04							;C2/5DE9: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/5DEB: 9D 4F 38     STA $384F,X
	TDC 								;C2/5DEE: 7B           TDC 
	STA GFXQueue.Data2,X						;C2/5DEF: 9D 50 38     STA $3850,X
	JMP .TargettingStatus						;C2/5DF2: 4C BE 5E     JMP $5EBE

.NotFight
	LDA TempSpell							;C2/5DF5: AD 22 27     LDA $2722
	CMP #$F1							;C2/5DF8: C9 F1        CMP #$F1
	BNE .CheckMagicAnimTable					;C2/5DFA: D0 03        BNE $5DFF
	JMP .TargettingStatus						;C2/5DFC: 4C BE 5E     JMP $5EBE

.CheckMagicAnimTable
	LDA TempSkipNaming						;C2/5DFF: A5 21        LDA $21
	BNE .MagicAnim							;C2/5E01: D0 2C        BNE $5E2F
	LDA TempIsEffect						;C2/5E03: AD 23 27     LDA $2723
	BNE .CheckType							;C2/5E06: D0 47        BNE $5E4F
	LDA TempSpell							;C2/5E08: AD 22 27     LDA $2722
	CMP #$82	;first blue spell				;C2/5E0B: C9 82        CMP #$82
	BCC .CheckType	 						;C2/5E0D: 90 40        BCC $5E4F
	STZ $0E								;C2/5E0F: 64 0E        STZ $0E
	SEC 								;C2/5E11: 38           SEC 
	SBC #$80	;high bit always 0 now				;C2/5E12: E9 80        SBC #$80
	LSR 								;C2/5E14: 4A           LSR 
	ROR $0E								;C2/5E15: 66 0E        ROR $0E
	LSR 								;C2/5E17: 4A           LSR 
	ROR $0E								;C2/5E18: 66 0E        ROR $0E
	LSR 								;C2/5E1A: 4A           LSR 
	ROR $0E								;C2/5E1B: 66 0E        ROR $0E
	TAX 		;high 5 bits of spell, determines byte 0-15	;C2/5E1D: AA           TAX 
	LDA ROMMagicAnim,X						;C2/5E1E: BF 81 29 D1  LDA $D12981,X
	PHA 								;C2/5E22: 48           PHA 
	LDA $0E								;C2/5E23: A5 0E        LDA $0E
	JSR ShiftDivide_32						;C2/5E25: 20 BD 01     JSR $01BD       
	TAX 		;low 3 bits of spell, determines which bit	;C2/5E28: AA           TAX 
	PLA 								;C2/5E29: 68           PLA 
	JSR SelectBit_X       						;C2/5E2A: 20 DB 01     JSR $01DB       
	BEQ .CheckType							;C2/5E2D: F0 20        BEQ $5E4F

.MagicAnim	;rom has this spell flagged for animation type 7 (most magic spells)
	LDA TempIsEffect						;C2/5E2F: AD 23 27     LDA $2723
	BNE .CheckType							;C2/5E32: D0 1B        BNE $5E4F
	JSR FindOpenGFXQueueSlot       					;C2/5E34: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/5E37: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Data2,X						;C2/5E3A: 9E 50 38     STZ $3850,X
	LDA #$FC	; exec graphics command				;C2/5E3D: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/5E3F: 9D 4D 38     STA $384D,X
	LDA #$07	; magic animation				;C2/5E42: A9 07        LDA #$07
	STA GFXQueue.Type,X						;C2/5E44: 9D 4E 38     STA $384E,X
	LDA TempSpell							;C2/5E47: AD 22 27     LDA $2722
	STA GFXQueue.Data1,X						;C2/5E4A: 9D 4F 38     STA $384F,X
	BRA .TargettingStatus						;C2/5E4D: 80 6F        BRA $5EBE

.CheckType
	LDA #$00							;C2/5E4F: A9 00        LDA #$00
	STA $0E								;C2/5E51: 85 0E        STA $0E
	LDA TempSpell							;C2/5E53: AD 22 27     LDA $2722
	STA Temp+1							;C2/5E56: 8D 21 26     STA $2621
	LDA TempIsEffect						;C2/5E59: AD 23 27     LDA $2723
	BNE .AttackOrEffect						;C2/5E5C: D0 32        BNE $5E90
	LDA TempSpell							;C2/5E5E: AD 22 27     LDA $2722
	CMP #$81	;monster specialty				;C2/5E61: C9 81        CMP #$81
	BNE .AttackOrEffect						;C2/5E63: D0 2B        BNE $5E90

.Specialty
	LDA #$03							;C2/5E65: A9 03        LDA #$03
	STA Temp							;C2/5E67: 8D 20 26     STA $2620
	LDX AttackerOffset						;C2/5E6A: A6 32        LDX $32         
	LDA CharStruct.SpecialtyName,X					;C2/5E6C: BD 7F 20     LDA $207F,X
	STA Temp+1							;C2/5E6F: 8D 21 26     STA $2621
	JSR GFXCmdAttackNameFromTemp					;C2/5E72: 20 2F 99     JSR $992F
	JSR FindOpenGFXQueueSlot   					;C2/5E75: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/5E78: 9E 4C 38     STZ $384C,X
	LDA #$FC	;exec graphics command				;C2/5E7B: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/5E7D: 9D 4D 38     STA $384D,X
	LDA #$01	;ability/command anim				;C2/5E80: A9 01        LDA #$01
	STA GFXQueue.Type,X						;C2/5E82: 9D 4E 38     STA $384E,X
	LDA #$04							;C2/5E85: A9 04        LDA #$04
	STA GFXQueue.Data1,X						;C2/5E87: 9D 4F 38     STA $384F,X
	TDC 								;C2/5E8A: 7B           TDC 
	STA GFXQueue.Data2,X						;C2/5E8B: 9D 50 38     STA $3850,X
	BRA .TargettingStatus						;C2/5E8E: 80 2E        BRA $5EBE

.AttackOrEffect:
	LDA TempIsEffect						;C2/5E90: AD 23 27     LDA $2723
	BEQ +								;C2/5E93: F0 06        BEQ $5E9B
	LDA #$02							;C2/5E95: A9 02        LDA #$02
	STA $0E								;C2/5E97: 85 0E        STA $0E
	LDA #$02							;C2/5E99: A9 02        LDA #$02
+	STA Temp							;C2/5E9B: 8D 20 26     STA $2620
	LDA TempSkipNaming						;C2/5E9E: A5 21        LDA $21
	BNE +		;skips naming the attack a second time		;C2/5EA0: D0 03        BNE $5EA5
	JSR GFXCmdAttackNameFromTemp					;C2/5EA2: 20 2F 99     JSR $992F
+	JSR FindOpenGFXQueueSlot    					;C2/5EA5: 20 FA 98     JSR $98FA       
	STZ GFXQueue.Flag,X						;C2/5EA8: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Data2,X						;C2/5EAB: 9E 50 38     STZ $3850,X
	LDA #$FC	;exec graphics command				;C2/5EAE: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/5EB0: 9D 4D 38     STA $384D,X
	LDA $0E		;attack or special ability effect, depending	;C2/5EB3: A5 0E        LDA $0E
	STA GFXQueue.Type,X						;C2/5EB5: 9D 4E 38     STA $384E,X
	LDA Temp+1	;spell id					;C2/5EB8: AD 21 26     LDA $2621
	STA GFXQueue.Data1,X						;C2/5EBB: 9D 4F 38     STA $384F,X

.TargettingStatus
	LDA ProcSequence						;C2/5EBE: AD FA 79     LDA $79FA
	TAX 								;C2/5EC1: AA           TAX 
	LDA TempMagicInfo.AtkType					;C2/5EC2: AD 2E 26     LDA $262E
	AND #$7F							;C2/5EC5: 29 7F        AND #$7F
	STA AtkType,X							;C2/5EC7: 9D 2D 7B     STA $7B2D,X
	LDA TempTargetting						;C2/5ECA: AD A0 26     LDA $26A0
	STA MultiTarget,X						;C2/5ECD: 9D 1C 7B     STA $7B1C,X
	BEQ +								;C2/5ED0: F0 05        BEQ $5ED7
	INC MultiTarget,X						;C2/5ED2: FE 1C 7B     INC $7B1C,X
	LDA #$80							;C2/5ED5: A9 80        LDA #$80
+	STA TargetType,X						;C2/5ED7: 9D CC 7A     STA $7ACC,X
	LDA ProcSequence						;C2/5EDA: AD FA 79     LDA $79FA
	ASL 								;C2/5EDD: 0A           ASL 
	TAX 								;C2/5EDE: AA           TAX 
	LDA TempTargetBitmask						;C2/5EDF: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/5EE2: 9D DC 7A     STA $7ADC,X
	STA TargetBitmask,X						;C2/5EE5: 9D FC 7A     STA $7AFC,X
	LDA TempTargetBitmask+1						;C2/5EE8: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/5EEB: 9D DD 7A     STA $7ADD,X
	STA TargetBitmask+1,X						;C2/5EEE: 9D FD 7A     STA $7AFD,X
	INC ProcSequence						;C2/5EF1: EE FA 79     INC $79FA
	LDA TempIsEffect						;C2/5EF4: AD 23 27     LDA $2723
	BNE .DisplayDamage						;C2/5EF7: D0 61        BNE $5F5A
	LDA TempSpell							;C2/5EF9: AD 22 27     LDA $2722
	CMP #$F1							;C2/5EFC: C9 F1        CMP #$F1
	BEQ .IsToadOK							;C2/5EFE: F0 25        BEQ $5F25
	LDX AttackerOffset						;C2/5F00: A6 32        LDX $32        
	CMP #$82	;first blue magic				;C2/5F02: C9 82        CMP #$82
	BCS .CheckToad							;C2/5F04: B0 15        BCS $5F1B
	CMP #$80	;monster fight or specialty			;C2/5F06: C9 80        CMP #$80
	BCS .DisplayDamage						;C2/5F08: B0 50        BCS $5F5A
	LDA CharStruct.Status2,X					;C2/5F0A: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/5F0D: 1D 71 20     ORA $2071,X
	AND #$04	;mute						;C2/5F10: 29 04        AND #$04
	BNE .Ineffective						;C2/5F12: D0 31        BNE $5F45
	LDA Void							;C2/5F14: AD E6 7B     LDA $7BE6
	AND #$40	;void						;C2/5F17: 29 40        AND #$40
	BNE .Ineffective						;C2/5F19: D0 2A        BNE $5F45

.CheckToad
	LDA CharStruct.Status1,X					;C2/5F1B: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/5F1E: 1D 70 20     ORA $2070,X
	AND #$20	;toad						;C2/5F21: 29 20        AND #$20
	BEQ .DisplayDamage						;C2/5F23: F0 35        BEQ $5F5A

.IsToadOK	;spell is F1, or (spell is >$82 AND we're a frog), or (spell is <$80, and not muted, and we're a frog)
	LDA TempSpell							;C2/5F25: AD 22 27     LDA $2722
	STZ $0E								;C2/5F28: 64 0E        STZ $0E
	LSR 								;C2/5F2A: 4A           LSR 
	ROR $0E								;C2/5F2B: 66 0E        ROR $0E
	LSR 								;C2/5F2D: 4A           LSR 
	ROR $0E								;C2/5F2E: 66 0E        ROR $0E
	LSR 								;C2/5F30: 4A           LSR 
	ROR $0E								;C2/5F31: 66 0E        ROR $0E
	TAX 		;magic byte offset 0-31				;C2/5F33: AA           TAX 
	LDA $0E								;C2/5F34: A5 0E        LDA $0E
	JSR ShiftDivide_32     						;C2/5F36: 20 BD 01     JSR $01BD       
	TAY 		;magic bit					;C2/5F39: A8           TAY 
	PHY 								;C2/5F3A: 5A           PHY 
	LDA ROMToadOK,X							;C2/5F3B: BF 58 EF D0  LDA $D0EF58,X
	PLX 								;C2/5F3F: FA           PLX 
	JSR SelectBit_X      						;C2/5F40: 20 DB 01     JSR $01DB       
	BNE .DisplayDamage						;C2/5F43: D0 15        BNE $5F5A

.Ineffective
	LDA MessageBoxOffset						;C2/5F45: AD EF 3C     LDA $3CEF
	TAX 								;C2/5F48: AA           TAX 
	LDA #$1D        ;ineffective					;C2/5F49: A9 1D        LDA #$1D        
	STA MessageBoxes,X						;C2/5F4B: 9D 5F 3C     STA $3C5F,X
	LDA ProcSequence						;C2/5F4E: AD FA 79     LDA $79FA
	DEC 	;Procsequence already advanced, rolling back 		;C2/5F51: 3A           DEC 
	TAX 								;C2/5F52: AA           TAX 
	LDA #$7E	;always miss attack type			;C2/5F53: A9 7E        LDA #$7E
	STA AtkType,X							;C2/5F55: 9D 2D 7B     STA $7B2D,X
	BRA .Finish							;C2/5F58: 80 17        BRA $5F71

.DisplayDamage
	JSR GFXCmdDamageNumbers						;C2/5F5A: 20 E3 98     JSR $98E3
	LDA MessageBoxOffset						;C2/5F5D: AD EF 3C     LDA $3CEF
	TAY 								;C2/5F60: A8           TAY 
	REP #$20							;C2/5F61: C2 20        REP #$20
	LDA TempSpell							;C2/5F63: AD 22 27     LDA $2722
	TAX 								;C2/5F66: AA           TAX 
	TDC 								;C2/5F67: 7B           TDC 
	SEP #$20							;C2/5F68: E2 20        SEP #$20
	LDA ROMBattleMessageOffsets,X   				;C2/5F6A: BF 40 38 D1  LDA $D13840,X   
	STA MessageBoxes,Y						;C2/5F6E: 99 5F 3C     STA $3C5F,Y

.Finish	JSR GFXCmdMessage						;C2/5F71: 20 4C 99     JSR $994C
	RTS 								;C2/5F74: 60           RTS 
%endsub()


%org($C25F75)
;Casts multi-hit spells like Meteo.  Code suggests there's at least one like that in the effect magic
CastMultiHitSpell:
	STA TempNumHits	;number of hits	(-1?)				;C2/5F75: 85 41        STA $41
	LDA TempIsEffect						;C2/5F77: AD 23 27     LDA $2723
	BEQ .NormalMagic						;C2/5F7A: F0 09        BEQ $5F85
	LDA #$02	;Effect magic animation				;C2/5F7C: A9 02        LDA #$02
	STA $0E								;C2/5F7E: 85 0E        STA $0E
	STA Temp							;C2/5F80: 8D 20 26     STA $2620
	BRA +								;C2/5F83: 80 07        BRA $5F8C
.NormalMagic
	LDA #$00	;normal magic animation				;C2/5F85: A9 00        LDA #$00
	STA $0E								;C2/5F87: 85 0E        STA $0E
	STA Temp							;C2/5F89: 8D 20 26     STA $2620
+
	LDA TempSpell							;C2/5F8C: AD 22 27     LDA $2722
	STA Temp+1	;spell to cast					;C2/5F8F: 8D 21 26     STA $2621
	JSR GFXCmdAttackNameFromTemp					;C2/5F92: 20 2F 99     JSR $992F
	JSR FindOpenGFXQueueSlot    					;C2/5F95: 20 FA 98     JSR $98FA      
	STZ GFXQueue.Flag,X						;C2/5F98: 9E 4C 38     STZ $384C,X
	STZ GFXQueue.Data2,X						;C2/5F9B: 9E 50 38     STZ $3850,X
	LDA #$FC	;exec graphics command				;C2/5F9E: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/5FA0: 9D 4D 38     STA $384D,X
	LDA $0E		;attack or special animation			;C2/5FA3: A5 0E        LDA $0E
	STA GFXQueue.Type,X						;C2/5FA5: 9D 4E 38     STA $384E,X
	LDA Temp+1	;spell to cast					;C2/5FA8: AD 21 26     LDA $2621
	STA GFXQueue.Data1,X						;C2/5FAB: 9D 4F 38     STA $384F,X
	LDA TempNumHits							;C2/5FAE: A5 41        LDA $41
	STA $0E		;attacks remaining				;C2/5FB0: 85 0E        STA $0E

.CopyAttacks		;one copy into AttackInfo table for each TempNumHits (which is actual hits -1)
			;first copy was already made before this was called (and Y is kept from that)
	TDC 								;C2/5FB2: 7B           TDC 
	TAX 								;C2/5FB3: AA           TAX 
-	LDA !TempMagicInfo,X						;C2/5FB4: BD 2A 26     LDA $262A,X
	STA !AttackInfo,Y						;C2/5FB7: 99 FC 79     STA $79FC,Y
	INX 								;C2/5FBA: E8           INX 
	INY 								;C2/5FBB: C8           INY 
	CPX #$0005	;first 5 bytes to start of struct		;C2/5FBC: E0 05 00     CPX #$0005
	BNE -								;C2/5FBF: D0 F3        BNE $5FB4
	INY 		;advance 4 bytes in destination			;C2/5FC1: C8           INY 
	INY 								;C2/5FC2: C8           INY 
	INY 								;C2/5FC3: C8           INY 
	INY 								;C2/5FC4: C8           INY 
-	LDA !TempMagicInfo,X						;C2/5FC5: BD 2A 26     LDA $262A,X
	STA !AttackInfo,Y						;C2/5FC8: 99 FC 79     STA $79FC,Y
	INX 								;C2/5FCB: E8           INX 
	INY 								;C2/5FCC: C8           INY 
	CPX #$0008	;remaining 3 bytes to end of struct		;C2/5FCD: E0 08 00     CPX #$0008
	BNE -								;C2/5FD0: D0 F3        BNE $5FC5
	DEC $0E		;attacks remaining				;C2/5FD2: C6 0E        DEC $0E
	LDA $0E								;C2/5FD4: A5 0E        LDA $0E
	BNE .CopyAttacks						;C2/5FD6: D0 DA        BNE $5FB2

	STZ $1A		;flag for not enough mp				;C2/5FD8: 64 1A        STZ $1A
	LDA AttackInfo.MPCost						;C2/5FDA: AD FF 79     LDA $79FF
	AND #$7F							;C2/5FDD: 29 7F        AND #$7F
	TAX 								;C2/5FDF: AA           TAX 
	STX $0E		;mp cost					;C2/5FE0: 86 0E        STX $0E
	LDX AttackerOffset						;C2/5FE2: A6 32        LDX $32          
	LDA CharStruct.ArmorProperties,X				;C2/5FE4: BD 39 20     LDA $2039,X
	AND #$08	;half mp					;C2/5FE7: 29 08        AND #$08
	BEQ +								;C2/5FE9: F0 06        BEQ $5FF1
	LSR $0E		;halve						;C2/5FEB: 46 0E        LSR $0E
	BCC +								;C2/5FED: 90 02        BCC $5FF1
	INC $0E		;round up					;C2/5FEF: E6 0E        INC $0E
+	REP #$20							;C2/5FF1: C2 20        REP #$20
	SEC 								;C2/5FF3: 38           SEC 
	LDA CharStruct.CurMP,X						;C2/5FF4: BD 0A 20     LDA $200A,X
	SBC $0E		;mp cost					;C2/5FF7: E5 0E        SBC $0E
	BCC .NoMP							;C2/5FF9: 90 08        BCC $6003
	STA CharStruct.CurMP,X						;C2/5FFB: 9D 0A 20     STA $200A,X
	TDC 								;C2/5FFE: 7B           TDC 
	SEP #$20							;C2/5FFF: E2 20        SEP #$20
	BRA .ProcessHits						;C2/6001: 80 05        BRA $6008
.NoMP	TDC 								;C2/6003: 7B           TDC 
	SEP #$20							;C2/6004: E2 20        SEP #$20
	INC $1A		;not enough mp					;C2/6006: E6 1A        INC $1A

.ProcessHits		;sets up targetting and attack type for TempNumHits + 1 attacks
	LDA MonsterTargets						;C2/6008: A5 65        LDA $65
	BEQ .Party							;C2/600A: F0 10        BEQ $601C
	TDC 								;C2/600C: 7B           TDC 
	TAX 								;C2/600D: AA           TAX 
	LDA #$07							;C2/600E: A9 07        LDA #$07
	JSR Random_X_A	;0..7 random monster				;C2/6010: 20 7C 00     JSR $007C      
	TAX 								;C2/6013: AA           TAX 
	TDC 								;C2/6014: 7B           TDC 
	JSR SetBit_X   							;C2/6015: 20 D6 01     JSR $01D6      
	STA MonsterTargets						;C2/6018: 85 65        STA $65
	BRA .TargetSet							;C2/601A: 80 0E        BRA $602A
.Party
	TDC 								;C2/601C: 7B           TDC 
	TAX 								;C2/601D: AA           TAX 
	LDA #$03							;C2/601E: A9 03        LDA #$03
	JSR Random_X_A   ;0..3 random party member			;C2/6020: 20 7C 00     JSR $007C      
	TAX 								;C2/6023: AA           TAX 
	TDC 								;C2/6024: 7B           TDC 
	JSR SetBit_X    						;C2/6025: 20 D6 01     JSR $01D6      
	STA PartyTargets						;C2/6028: 85 66        STA $66
.TargetSet
	JSR CheckRetarget						;C2/602A: 20 FE 4A     JSR $4AFE
	LDA NoValidTargets						;C2/602D: AD 29 7C     LDA $7C29
	BEQ .ValidTarget						;C2/6030: F0 05        BEQ $6037
	LDA #$7E	;always miss attack type			;C2/6032: A9 7E        LDA #$7E
	STA TempMagicInfo.AtkType					;C2/6034: 8D 2E 26     STA $262E
.ValidTarget
	JSR BuildTargetBitmask						;C2/6037: 20 A9 02     JSR $02A9
	LDX AttackerOffset						;C2/603A: A6 32        LDX $32        
	LDA CharStruct.Status2,X					;C2/603C: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/603F: 1D 71 20     ORA $2071,X
	AND #$04	;mute						;C2/6042: 29 04        AND #$04
	BNE .Fail							;C2/6044: D0 11        BNE $6057
	LDA Void							;C2/6046: AD E6 7B     LDA $7BE6
	AND #$40	;void						;C2/6049: 29 40        AND #$40
	BNE .Fail							;C2/604B: D0 0A        BNE $6057
	LDA CharStruct.Status1,X					;C2/604D: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/6050: 1D 70 20     ORA $2070,X
	AND #$20	;toad						;C2/6053: 29 20        AND #$20
	BEQ +								;C2/6055: F0 05        BEQ $605C
.Fail	LDA #$7E	;always miss attack type			;C2/6057: A9 7E        LDA #$7E
	STA TempMagicInfo.AtkType					;C2/6059: 8D 2E 26     STA $262E
+	LDA ProcSequence						;C2/605C: AD FA 79     LDA $79FA
	TAX 								;C2/605F: AA           TAX 
	LDA TempMagicInfo.AtkType					;C2/6060: AD 2E 26     LDA $262E
	AND #$7F							;C2/6063: 29 7F        AND #$7F
	STA AtkType,X							;C2/6065: 9D 2D 7B     STA $7B2D,X
	LDA $1A		;not enough mp					;C2/6068: A5 1A        LDA $1A
	BEQ +								;C2/606A: F0 05        BEQ $6071
	LDA #$7E	;always miss attack type			;C2/606C: A9 7E        LDA #$7E
	STA AtkType,X							;C2/606E: 9D 2D 7B     STA $7B2D,X
+	STZ MultiTarget,X						;C2/6071: 9E 1C 7B     STZ $7B1C,X
	STZ TargetType,X						;C2/6074: 9E CC 7A     STZ $7ACC,X
	LDA ProcSequence						;C2/6077: AD FA 79     LDA $79FA
	ASL 								;C2/607A: 0A           ASL 
	TAX 								;C2/607B: AA           TAX 
	LDA TempTargetBitmask						;C2/607C: AD 20 27     LDA $2720
	STA CommandTargetBitmask,X					;C2/607F: 9D DC 7A     STA $7ADC,X
	STA TargetBitmask,X						;C2/6082: 9D FC 7A     STA $7AFC,X
	LDA TempTargetBitmask+1						;C2/6085: AD 21 27     LDA $2721
	STA CommandTargetBitmask+1,X					;C2/6088: 9D DD 7A     STA $7ADD,X
	STA TargetBitmask+1,X						;C2/608B: 9D FD 7A     STA $7AFD,X
	INC ProcSequence						;C2/608E: EE FA 79     INC $79FA
	LDA TempIsEffect						;C2/6091: AD 23 27     LDA $2723
	BEQ +								;C2/6094: F0 03        BEQ $6099
	JSR GFXCmdDamageNumbers	;only need this for effect spells?	;C2/6096: 20 E3 98     JSR $98E3
+	DEC TempNumHits							;C2/6099: C6 41        DEC $41
	LDA TempNumHits							;C2/609B: A5 41        LDA $41
	BMI .Ret							;C2/609D: 30 03        BMI $60A2
	JMP .ProcessHits						;C2/609F: 4C 08 60     JMP $6008
.Ret	RTS 								;C2/60A2: 60           RTS 

%org($C260A3)
;Loads correct spell info for summon magic
PrepSummon:
	CLC 								;C2/60A3: 18           CLC 
	LDA TempSpell							;C2/60A4: AD 22 27     LDA $2722
	ADC #$17	;shifts id to the actual spell effect		;C2/60A7: 69 17        ADC #$17
	STA TempSpell	;Shiva -> Diamond Dust, for example		;C2/60A9: 8D 22 27     STA $2722
	CMP #$6B	;Phoenix (fire portion)				;C2/60AC: C9 6B        CMP #$6B
	BEQ .Phoenix							;C2/60AE: F0 1D        BEQ $60CD
	CMP #$6A	;Odin						;C2/60B0: C9 6A        CMP #$6A
	BEQ .Odin							;C2/60B2: F0 2F        BEQ $60E3
	CMP #$5F	;Chocobo					;C2/60B4: C9 5F        CMP #$5F
	BEQ .Chocobo							;C2/60B6: F0 03        BEQ $60BB
	JMP .Finish							;C2/60B8: 4C 31 61     JMP $6131

.Chocobo
	JSR Random_0_99      						;C2/60BB: 20 A2 02     JSR $02A2      
	CMP #$08	;8% fat						;C2/60BE: C9 08        CMP #$08
	BCS .Finish							;C2/60C0: B0 6F        BCS $6131
	LDA #$6E	;fat chocobo					;C2/60C2: A9 6E        LDA #$6E
	STA TempSpell							;C2/60C4: 8D 22 27     STA $2722
	LDA #$FF	;all targets					;C2/60C7: A9 FF        LDA #$FF
	STA MonsterTargets						;C2/60C9: 85 65        STA $65
	BRA .Finish							;C2/60CB: 80 64        BRA $6131

.Phoenix
	LDA MonsterTargets						;C2/60CD: A5 65        LDA $65
	STA TempMonsterTargets						;C2/60CF: 85 23        STA $23
	LDA PartyTargets						;C2/60D1: A5 66        LDA $66
	STA TempPartyTargets						;C2/60D3: 85 22        STA $22
	LDA #$FF	;all targets					;C2/60D5: A9 FF        LDA #$FF
	STA MonsterTargets						;C2/60D7: 85 65        STA $65
	STZ PartyTargets						;C2/60D9: 64 66        STZ $66
	LDA #$70	;phoenix (life portion)				;C2/60DB: A9 70        LDA #$70
	STA TempAttachedSpell						;C2/60DD: 85 20        STA $20
	LDX AttackerOffset						;C2/60DF: A6 32        LDX $32        
	BRA .Finish							;C2/60E1: 80 4E        BRA $6131

.Odin
	TDC 								;C2/60E3: 7B           TDC 
	TAY 								;C2/60E4: A8           TAY 
	TAX 								;C2/60E5: AA           TAX 
.CheckMonsters
	LDA ActiveParticipants+4,Y					;C2/60E6: B9 C6 3E     LDA $3EC6,Y
	BEQ .NextMonster						;C2/60E9: F0 07        BEQ $60F2
	LDA CharStruct[4].CreatureType,X				;C2/60EB: BD 65 22     LDA $2265,X
	AND #$20	;heavy						;C2/60EE: 29 20        AND #$20
	BNE .Gungnir							;C2/60F0: D0 2C        BNE $611E
.NextMonster
	JSR NextCharOffset      					;C2/60F2: 20 E0 01     JSR $01E0      
	INY 								;C2/60F5: C8           INY 
	CPY #$0008	;8 monsters					;C2/60F6: C0 08 00     CPY #$0008
	BNE .CheckMonsters						;C2/60F9: D0 EB        BNE $60E6

	CLC 								;C2/60FB: 18           CLC 
	LDA Level							;C2/60FC: AD E5 7B     LDA $7BE5
	ADC #$50	;level+80					;C2/60FF: 69 50        ADC #$50
	SEC 								;C2/6101: 38           SEC 
	SBC CharStruct[4].Level		;first monster's level		;C2/6102: ED 02 22     SBC $2202
	BCS +								;C2/6105: B0 02        BCS $6109
	LDA #$01	;min 1						;C2/6107: A9 01        LDA #$01
+	CMP #$63							;C2/6109: C9 63        CMP #$63
	BCC +								;C2/610B: 90 02        BCC $610F
	LDA #$63	;max 99						;C2/610D: A9 63        LDA #$63
+	STA $0E								;C2/610F: 85 0E        STA $0E
	JSR Random_0_99      						;C2/6111: 20 A2 02     JSR $02A2      
	CMP $0E								;C2/6114: C5 0E        CMP $0E
	BCS .Gungnir							;C2/6116: B0 06        BCS $611E
	LDA #$FF	;all targets					;C2/6118: A9 FF        LDA #$FF
	STA MonsterTargets						;C2/611A: 85 65        STA $65
	BRA .Finish							;C2/611C: 80 13        BRA $6131

.Gungnir
	LDA #$6F	;gungnir					;C2/611E: A9 6F        LDA #$6F
	STA TempSpell							;C2/6120: 8D 22 27     STA $2722
	TDC 								;C2/6123: 7B           TDC 
	TAX 								;C2/6124: AA           TAX 
	LDA #$07							;C2/6125: A9 07        LDA #$07
	JSR Random_X_A  ;0..7 random monster				;C2/6127: 20 7C 00     JSR $007C      
	TAX 								;C2/612A: AA           TAX 
	TDC 								;C2/612B: 7B           TDC 
	JSR SetBit_X   							;C2/612C: 20 D6 01     JSR $01D6      
	STA MonsterTargets						;C2/612F: 85 65        STA $65

.Finish
	LDA TempSpell							;C2/6131: AD 22 27     LDA $2722
	REP #$20							;C2/6134: C2 20        REP #$20
	JSR ShiftMultiply_8     					;C2/6136: 20 B6 01     JSR $01B6      
	TAX 								;C2/6139: AA           TAX 
	TDC 								;C2/613A: 7B           TDC 
	SEP #$20							;C2/613B: E2 20        SEP #$20
	TDC 								;C2/613D: 7B           TDC 
	TAY 								;C2/613E: A8           TAY 
-	LDA !ROMMagicInfo,X						;C2/613F: BF 80 0B D1  LDA $D10B80,X
	STA !TempMagicInfo,Y						;C2/6143: 99 2A 26     STA $262A,Y
	INX 								;C2/6146: E8           INX 
	INY 								;C2/6147: C8           INY 
	CPY #$0008	;8 bytes magic data				;C2/6148: C0 08 00     CPY #$0008
	BNE -								;C2/614B: D0 F2        BNE $613F
	RTS 								;C2/614D: 60           RTS 

%org($C2614E)
;Gets the CharStruct offset of the first party member target in PartyTargets ($66)
;Will infinite loop if there are no targets
GetPartyTargetOffset:
	TDC 								;C2/614E: 7B           TDC 
	TAX 								;C2/614F: AA           TAX 
	LDA PartyTargets						;C2/6150: A5 66        LDA $66
-	ASL 								;C2/6152: 0A           ASL 
	BCS +								;C2/6153: B0 03        BCS $6158
	INX 								;C2/6155: E8           INX 
	BRA -								;C2/6156: 80 FA        BRA $6152
+	TXA 								;C2/6158: 8A           TXA 
	REP #$20							;C2/6159: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/615B: 20 B2 01     JSR $01B2      
	TAX 								;C2/615E: AA           TAX 
	TDC 								;C2/615F: 7B           TDC 
	SEP #$20							;C2/6160: E2 20        SEP #$20
	RTS 								;C2/6162: 60           RTS 

%org($C26163)
;Haste or Slow Modifier
;(A=A/2 if Haste, A=A*2 if Slow, Min 1, Max 255)
%sub(HasteSlowMod)
HasteSlowMod:
	PHA 								;C2/6163: 48           PHA 
	LDA CharStruct.Status3,X					;C2/6164: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/6167: 1D 72 20     ORA $2072,X
	AND #$08   	;haste						;C2/616A: 29 08        AND #$08     
	BEQ .CheckSlow							;C2/616C: F0 06        BEQ $6174
	PLA 								;C2/616E: 68           PLA 
	LSR        	;half duration					;C2/616F: 4A           LSR          
	BNE ++								;C2/6170: D0 01        BNE $6173
	INC        	;min 1						;C2/6172: 1A           INC          
++	PHA 								;C2/6173: 48           PHA 
.CheckSlow
	LDA CharStruct.Status3,X					;C2/6174: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/6177: 1D 72 20     ORA $2072,X
	AND #$04   	;slow						;C2/617A: 29 04        AND #$04     
	BEQ +								;C2/617C: F0 07        BEQ $6185
	PLA 								;C2/617E: 68           PLA 
	ASL        	;double duration				;C2/617F: 0A           ASL          
	BCC ++								;C2/6180: 90 02        BCC $6184
	LDA #$FF   	;max 255					;C2/6182: A9 FF        LDA #$FF     
++	PHA 								;C2/6184: 48           PHA 
+	PLA 								;C2/6185: 68           PLA 
	BNE .Ret							;C2/6186: D0 01        BNE $6189
	INC 		;min 1, again					;C2/6188: 1A           INC 
.Ret	RTS 								;C2/6189: 60           RTS 
%endsub()

%org($C2618A)
;Properly kills the target indexed in A	
;clears status, makes sure hp is 0 unless erased, handles monster control
;Params: A: char index 0-11
KillCharacter:
	PHA 								;C2/618A: 48           PHA 
	PHA 								;C2/618B: 48           PHA 
	STZ MonsterDead							;C2/618C: 64 70        STZ $70
	TAX 								;C2/618E: AA           TAX 
	LDA ActiveParticipants,X					;C2/618F: BD C2 3E     LDA $3EC2,X
	BNE .Active							;C2/6192: D0 01        BNE $6195
	RTS 								;C2/6194: 60           RTS 

.Active								;
	STZ ActiveParticipants,X					;C2/6195: 9E C2 3E     STZ $3EC2,X
	PLA 								;C2/6198: 68           PLA 
	JSR ResetATB							;C2/6199: 20 82 24     JSR $2482
	TDC 								;C2/619C: 7B           TDC 
	STA EnableTimer.Stop,Y						;C2/619D: 99 F1 3C     STA $3CF1,Y
	STA EnableTimer.Poison,Y					;C2/61A0: 99 F2 3C     STA $3CF2,Y
	STA EnableTimer.Reflect,Y					;C2/61A3: 99 F3 3C     STA $3CF3,Y
	STA EnableTimer.Countdown,Y					;C2/61A6: 99 F4 3C     STA $3CF4,Y
	STA EnableTimer.Mute,Y						;C2/61A9: 99 F5 3C     STA $3CF5,Y
	STA EnableTimer.HPLeak,Y					;C2/61AC: 99 F6 3C     STA $3CF6,Y
	STA EnableTimer.Old,Y						;C2/61AF: 99 F7 3C     STA $3CF7,Y
	STA EnableTimer.Regen,Y						;C2/61B2: 99 F8 3C     STA $3CF8,Y
	STA EnableTimer.Sing,Y						;C2/61B5: 99 F9 3C     STA $3CF9,Y
	STA EnableTimer.Paralyze,Y					;C2/61B8: 99 FA 3C     STA $3CFA,Y
	LDX AttackerOffset						;C2/61BB: A6 32        LDX $32
	STZ CharStruct.Status2,X					;C2/61BD: 9E 1B 20     STZ $201B,X
	STZ CharStruct.Status3,X					;C2/61C0: 9E 1C 20     STZ $201C,X
	STZ CharStruct.CmdStatus,X					;C2/61C3: 9E 1E 20     STZ $201E,X
	STZ CharStruct.DamageMod,X					;C2/61C6: 9E 1F 20     STZ $201F,X
	LDA CharStruct.Status4,X					;C2/61C9: BD 1D 20     LDA $201D,X
	AND #$FB	;clear singing					;C2/61CC: 29 FB        AND #$FB
	STA CharStruct.Status4,X					;C2/61CE: 9D 1D 20     STA $201D,X
	LDA CharStruct.Status4,X					;C2/61D1: BD 1D 20     LDA $201D,X
	AND #$80	;erased						;C2/61D4: 29 80        AND #$80
	BNE +								;C2/61D6: D0 06        BNE $61DE
	STZ CharStruct.CurHP,X						;C2/61D8: 9E 06 20     STZ $2006,X
	STZ CharStruct.CurHP+1,X					;C2/61DB: 9E 07 20     STZ $2007,X
+	PLA 								;C2/61DE: 68           PLA 
	PHA 								;C2/61DF: 48           PHA 
	CMP #$04	;monster check					;C2/61E0: C9 04        CMP #$04
	BCS .Monster							;C2/61E2: B0 43        BCS $6227
	TAY 								;C2/61E4: A8           TAY 
	LDA ControlTarget,Y						;C2/61E5: B9 3A 7C     LDA $7C3A,Y
	PHA 								;C2/61E8: 48           PHA 
	TDC 								;C2/61E9: 7B           TDC 
	STA ControlTarget,Y						;C2/61EA: 99 3A 7C     STA $7C3A,Y
	STA ControlCommand,Y						;C2/61ED: 99 3E 7C     STA $7C3E,Y
	PLA 								;C2/61F0: 68           PLA 
	REP #$20							;C2/61F1: C2 20        REP #$20
	JSR ShiftMultiply_128	;offset of control target		;C2/61F3: 20 B2 01     JSR $01B2
	TAY 								;C2/61F6: A8           TAY 
	TDC 								;C2/61F7: 7B           TDC 
	SEP #$20							;C2/61F8: E2 20        SEP #$20
	LDA CharStruct.Status4,Y					;C2/61FA: B9 1D 20     LDA $201D,Y
	AND #$DF		;clear controlled			;C2/61FD: 29 DF        AND #$DF
	STA CharStruct.Status4,Y					;C2/61FF: 99 1D 20     STA $201D,Y
	LDA CharStruct.Status4,X					;C2/6202: BD 1D 20     LDA $201D,X
	AND #$80		;erased					;C2/6205: 29 80        AND #$80
	BEQ .Dead							;C2/6207: F0 0A        BEQ $6213
	LDA CharStruct.Status1,X					;C2/6209: BD 1A 20     LDA $201A,X
	AND #$F3		;clear zombie/poison			;C2/620C: 29 F3        AND #$F3
	STA CharStruct.Status1,X					;C2/620E: 9D 1A 20     STA $201A,X
	BRA .Erased							;C2/6211: 80 0A        BRA $621D
.Dead	
	LDA CharStruct.Status1,X					;C2/6213: BD 1A 20     LDA $201A,X
	AND #$F3		;clear zombie/poison			;C2/6216: 29 F3        AND #$F3
	ORA #$80		;set dead				;C2/6218: 09 80        ORA #$80
	STA CharStruct.Status1,X					;C2/621A: 9D 1A 20     STA $201A,X
.Erased	
	LDA CharStruct.Status4,X					;C2/621D: BD 1D 20     LDA $201D,X
	AND #$80		;clear all but erased			;C2/6220: 29 80        AND #$80
	STA CharStruct.Status4,X					;C2/6222: 9D 1D 20     STA $201D,X
	PLA 								;C2/6225: 68           PLA 
	RTS 								;C2/6226: 60           RTS 

.Monster								;
	LDA CharStruct.Status1,X					;C2/6227: BD 1A 20     LDA $201A,X
	AND #$30		;keep toad/mini				;C2/622A: 29 30        AND #$30
	ORA #$80		;set dead				;C2/622C: 09 80        ORA #$80
	STA CharStruct.Status1,X					;C2/622E: 9D 1A 20     STA $201A,X
	STZ CharStruct.Status4,X					;C2/6231: 9E 1D 20     STZ $201D,X
	PLA 								;C2/6234: 68           PLA 
	PHA 								;C2/6235: 48           PHA 
	SEC 								;C2/6236: 38           SEC 
	SBC #$04							;C2/6237: E9 04        SBC #$04
	TAX 			;monster index				;C2/6239: AA           TAX 
	TDC 								;C2/623A: 7B           TDC 
	JSR SetBit_X							;C2/623B: 20 D6 01     JSR $01D6
	STA MonsterDead							;C2/623E: 85 70        STA $70
	PLA 								;C2/6240: 68           PLA 
	STA $0E								;C2/6241: 85 0E        STA $0E
	TDC 								;C2/6243: 7B           TDC 
	TAX 								;C2/6244: AA           TAX 
.FindController		;monster is dead, clear anyone who was controlling them
	LDA ControlTarget,X						;C2/6245: BD 3A 7C     LDA $7C3A,X
	CMP $0E								;C2/6248: C5 0E        CMP $0E
	BNE .Next							;C2/624A: D0 04        BNE $6250
	STZ ControlTarget,X						;C2/624C: 9E 3A 7C     STZ $7C3A,X
	RTS 								;C2/624F: 60           RTS 
.Next
	INX 								;C2/6250: E8           INX 
	CPX #$0004							;C2/6251: E0 04 00     CPX #$0004
	BNE .FindController						;C2/6254: D0 EF        BNE $6245
	RTS 								;C2/6256: 60           RTS 


%org($C26257)
CheckPartyDeath:
	STZ TempStartIndex						;C2/6257: 9C 20 27     STZ $2720
	LDA #$04							;C2/625A: A9 04        LDA #$04
	STA TempStopIndex						;C2/625C: 8D 21 27     STA $2721
	STZ TempIsMonster						;C2/625F: 9C 22 27     STZ $2722
	JMP CheckForDeath						;C2/6262: 4C 72 62     JMP $6272

%org($C26265)
CheckMonsterDeath:
	LDA #$04		;first monster slot			;C2/6265: A9 04        LDA #$04		
	STA TempStartIndex						;C2/6267: 8D 20 27     STA $2720	
	LDA #$0C		;12 total slots				;C2/626A: A9 0C        LDA #$0C
	STA TempStopIndex						;C2/626C: 8D 21 27     STA $2721
	STA TempIsMonster						;C2/626F: 8D 22 27     STA $2722
	;continues into next routine
%org($C26272)
CheckForDeath:	;called here by another routine, for party instead of monsters
	LDA TempStartIndex						;C2/6272: AD 20 27     LDA $2720
	TAX 								;C2/6275: AA           TAX 
	STX $0E								;C2/6276: 86 0E        STX $0E		
	JSR CalculateCharOffset						;C2/6278: 20 EC 01     JSR $01EC	

.Loop
	LDA QuickTurns							;C2/627B: AD 51 7C     LDA $7C51	
	BEQ .CheckActive						;C2/627E: F0 31        BEQ $62B1	
	LDA $0E								;C2/6280: A5 0E        LDA $0E		
	CMP QuickCharIndex						;C2/6282: CD B6 7C     CMP $7CB6
	BNE .CheckActive						;C2/6285: D0 2A        BNE $62B1
	LDA CharStruct.Status1,X					;C2/6287: BD 1A 20     LDA $201A,X
	AND #$C2	;dead/stone/zombie				;C2/628A: 29 C2        AND #$C2
	BNE .CancelQuick						;C2/628C: D0 1D        BNE $62AB
	LDA CharStruct.Status2,X					;C2/628E: BD 1B 20     LDA $201B,X
	AND #$78	;sleep/paralyze/charm/berserk			;C2/6291: 29 78        AND #$78
	BNE .CancelQuick						;C2/6293: D0 16        BNE $62AB
	LDA CharStruct.Status3,X					;C2/6295: BD 1C 20     LDA $201C,X
	AND #$10	;stop						;C2/6298: 29 10        AND #$10
	BNE .CancelQuick						;C2/629A: D0 0F        BNE $62AB
	LDA CharStruct.Status4,X					;C2/629C: BD 1D 20     LDA $201D,X
	AND #$84	;erased/singing					;C2/629F: 29 84        AND #$84
	BNE .CancelQuick						;C2/62A1: D0 08        BNE $62AB
	LDA CharStruct.CurHP,X						;C2/62A3: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/62A6: 1D 07 20     ORA $2007,X
	BNE .CheckActive						;C2/62A9: D0 06        BNE $62B1
.CancelQuick									
	STZ QuickTurns							;C2/62AB: 9C 51 7C     STZ $7C51
	JSR ClearQuick							;C2/62AE: 20 E4 24     JSR $24E4

.CheckActive
	LDY $0E								;C2/62B1: A4 0E        LDY $0E
	LDA ActiveParticipants,Y					;C2/62B3: B9 C2 3E     LDA $3EC2,Y
	BNE +								;C2/62B6: D0 03        BNE $62BB
	JMP .NextChar							;C2/62B8: 4C F8 63     JMP $63F8
+	LDA TempIsMonster						;C2/62BB: AD 22 27     LDA $2722
	BNE .CheckHPLeak						;C2/62BE: D0 41        BNE $6301

.CheckControl		
	LDA CharStruct.Status1,X					;C2/62C0: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/62C3: 1D 70 20     ORA $2070,X
	AND #$C2	;dead/stone/zombie				;C2/62C6: 29 C2        AND #$C2
	BNE .CancelControl						;C2/62C8: D0 18        BNE $62E2
	LDA CharStruct.Status2,X					;C2/62CA: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/62CD: 1D 71 20     ORA $2071,X
	AND #$78	;sleep/paralyze/charm/berserk			;C2/62D0: 29 78        AND #$78
	BNE .CancelControl						;C2/62D2: D0 0E        BNE $62E2
	LDA CharStruct.Status3,X					;C2/62D4: BD 1C 20     LDA $201C,X
	AND #$10	;stop						;C2/62D7: 29 10        AND #$10
	BNE .CancelControl						;C2/62D9: D0 07        BNE $62E2
	LDA CharStruct.Status4,X					;C2/62DB: BD 1D 20     LDA $201D,X
	AND #$80	;erased						;C2/62DE: 29 80        AND #$80
	BEQ .CheckHPLeak						;C2/62E0: F0 1F        BEQ $6301
.CancelControl
	LDY $0E								;C2/62E2: A4 0E        LDY $0E
	LDA ControlTarget,Y						;C2/62E4: B9 3A 7C     LDA $7C3A,Y
	PHA 								;C2/62E7: 48           PHA 
	TDC 								;C2/62E8: 7B           TDC 
	STA ControlTarget,Y						;C2/62E9: 99 3A 7C     STA $7C3A,Y
	STA ControlCommand,Y						;C2/62EC: 99 3E 7C     STA $7C3E,Y
	PLA 								;C2/62EF: 68           PLA 
	REP #$20							;C2/62F0: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/62F2: 20 B2 01     JSR $01B2
	TAY 								;C2/62F5: A8           TAY 
	TDC 								;C2/62F6: 7B           TDC 
	SEP #$20							;C2/62F7: E2 20        SEP #$20
	LDA CharStruct.Status4,Y	;of control target		;C2/62F9: B9 1D 20     LDA $201D,Y
	AND #$DF	;clear controlled				;C2/62FC: 29 DF        AND #$DF
	STA CharStruct.Status4,Y					;C2/62FE: 99 1D 20     STA $201D,Y
	
.CheckHPLeak
	LDA CharStruct.Status4,X					;C2/6301: BD 1D 20     LDA $201D,X
	ORA CharStruct.AlwaysStatus4,X					;C2/6304: 1D 73 20     ORA $2073,X
	AND #$08	;hp leak					;C2/6307: 29 08        AND #$08
	BEQ .DoneLeak							;C2/6309: F0 2C        BEQ $6337
	LDA BattleTickerB	;1 every 4 ticks			;C2/630B: AD 54 7C     LDA $7C54
	BEQ .DoneLeak							;C2/630E: F0 27        BEQ $6337
	LDA CharStruct.CmdStatus,X					;C2/6310: BD 1E 20     LDA $201E,X
	AND #$10		;jumping				;C2/6313: 29 10        AND #$10
	BNE .DoneLeak							;C2/6315: D0 20        BNE $6337
	REP #$20							;C2/6317: C2 20        REP #$20
	LDA CharStruct.CurHP,X						;C2/6319: BD 06 20     LDA $2006,X
	BEQ +								;C2/631C: F0 04        BEQ $6322
	DEC 								;C2/631E: 3A           DEC 
	STA CharStruct.CurHP,X						;C2/631F: 9D 06 20     STA $2006,X
+	TDC 								;C2/6322: 7B           TDC 
	SEP #$20							;C2/6323: E2 20        SEP #$20
	LDA CharStruct.Status4,X					;C2/6325: BD 1D 20     LDA $201D,X
	AND #$01		;hiding					;C2/6328: 29 01        AND #$01
	BEQ .DoneLeak							;C2/632A: F0 0B        BEQ $6337
	LDA CharStruct.CurHP,X						;C2/632C: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/632F: 1D 07 20     ORA $2007,X
	BNE .DoneLeak							;C2/6332: D0 03        BNE $6337
	INC CharStruct.CurHP,X	;min 1 hp if hiding			;C2/6334: FE 06 20     INC $2006,X

.DoneLeak
	LDA EncounterIndex						;C2/6337: AD F0 04     LDA $04F0
	CMP #$F7							;C2/633A: C9 F7        CMP #$F7
	BNE +								;C2/633C: D0 07        BNE $6345
	LDA EncounterIndex+1						;C2/633E: AD F1 04     LDA $04F1
	CMP #$01							;C2/6341: C9 01        CMP #$01
	BEQ .CheckCriticalHP   	;encounter $1F7 is Galuf vs Exdeath	;C2/6343: F0 0B        BEQ $6350
+	LDA CharStruct.CurHP,X						;C2/6345: BD 06 20     LDA $2006,X
	ORA CharStruct.CurHP+1,X					;C2/6348: 1D 07 20     ORA $2007,X
	BNE .CheckCriticalHP						;C2/634B: D0 03        BNE $6350
	JMP .DeadZero							;C2/634D: 4C D1 63     JMP $63D1

.CheckCriticalHP
	REP #$20							;C2/6350: C2 20        REP #$20
	LDA CharStruct.MaxHP,X						;C2/6352: BD 08 20     LDA $2008,X
	JSR ShiftDivide_8						;C2/6355: 20 BF 01     JSR $01BF
	CMP CharStruct.CurHP,X						;C2/6358: DD 06 20     CMP $2006,X
	BCC .CheckHP							;C2/635B: 90 0D        BCC $636A
	TDC 								;C2/635D: 7B           TDC 
	SEP #$20							;C2/635E: E2 20        SEP #$20
	LDA CharStruct.Status4,X					;C2/6360: BD 1D 20     LDA $201D,X
	ORA #$02		;critical hp				;C2/6363: 09 02        ORA #$02
	STA CharStruct.Status4,X					;C2/6365: 9D 1D 20     STA $201D,X
	BRA .CheckDeadStatus						;C2/6368: 80 19        BRA $6383

.CheckHP
	LDA CharStruct.CurHP,X						;C2/636A: BD 06 20     LDA $2006,X
	CMP CharStruct.MaxHP,X						;C2/636D: DD 08 20     CMP $2008,X
	BCC +								;C2/6370: 90 06        BCC $6378
	LDA CharStruct.MaxHP,X						;C2/6372: BD 08 20     LDA $2008,X
	STA CharStruct.CurHP,X	;cap at max hp				;C2/6375: 9D 06 20     STA $2006,X
+	TDC 								;C2/6378: 7B           TDC 
	SEP #$20							;C2/6379: E2 20        SEP #$20
	LDA CharStruct.Status4,X					;C2/637B: BD 1D 20     LDA $201D,X
	AND #$FD		;clear critical hp status		;C2/637E: 29 FD        AND #$FD
	STA CharStruct.Status4,X					;C2/6380: 9D 1D 20     STA $201D,X

.CheckDeadStatus	
	LDA CharStruct.Status1,X					;C2/6383: BD 1A 20     LDA $201A,X
	AND #$80		;dead					;C2/6386: 29 80        AND #$80
	BNE .Dead							;C2/6388: D0 40        BNE $63CA
	LDA CharStruct.Status1,X					;C2/638A: BD 1A 20     LDA $201A,X
	AND #$40		;stone					;C2/638D: 29 40        AND #$40
	BNE .StoneErased						;C2/638F: D0 11        BNE $63A2
	LDA CharStruct.Status4,X					;C2/6391: BD 1D 20     LDA $201D,X
	BPL .NextChar		;continue if erased			;C2/6394: 10 62        BPL $63F8
	LDA SandwormBattle	;another sandworm erased special case	;C2/6396: AD 4C 7C     LDA $7C4C
	BNE .NextChar							;C2/6399: D0 5D        BNE $63F8
	PHX 								;C2/639B: DA           PHX 
	LDA $0E			;current char index			;C2/639C: A5 0E        LDA $0E
	JSR KillCharacter						;C2/639E: 20 8A 61     JSR $618A
	PLX 								;C2/63A1: FA           PLX 
.StoneErased
	LDY $0E								;C2/63A2: A4 0E        LDY $0E
	TDC 								;C2/63A4: 7B           TDC 
	STA ActiveParticipants,Y					;C2/63A5: 99 C2 3E     STA $3EC2,Y
	LDA CharStruct.Status1,X					;C2/63A8: BD 1A 20     LDA $201A,X
	AND #$74		;keep stone/toad/mini/poison		;C2/63AB: 29 74        AND #$74
	STA CharStruct.Status1,X					;C2/63AD: 9D 1A 20     STA $201A,X
	LDA CharStruct.Status2,X					;C2/63B0: BD 1B 20     LDA $201B,X
	AND #$A4		;keep old/paralyze/mute			;C2/63B3: 29 A4        AND #$A4
	STA CharStruct.Status2,X					;C2/63B5: 9D 1B 20     STA $201B,X
	LDA CharStruct.Status3,X					;C2/63B8: BD 1C 20     LDA $201C,X
	AND #$91		;keep reflect/stop/regen		;C2/63BB: 29 91        AND #$91
	STA CharStruct.Status3,X					;C2/63BD: 9D 1C 20     STA $201C,X
	LDA CharStruct.Status4,X					;C2/63C0: BD 1D 20     LDA $201D,X
	AND #$9B		;clear false image/control/sing		;C2/63C3: 29 9B        AND #$9B
	STA CharStruct.Status4,X					;C2/63C5: 9D 1D 20     STA $201D,X
	BRA .NextChar							;C2/63C8: 80 2E        BRA $63F8
	
.Dead	
	TDC 								;C2/63CA: 7B           TDC 
	STA CharStruct.CurHP,X						;C2/63CB: 9D 06 20     STA $2006,X
	STA CharStruct.CurHP+1,X					;C2/63CE: 9D 07 20     STA $2007,X
.DeadZero
	LDA CharStruct.Status1,X					;C2/63D1: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/63D4: 1D 70 20     ORA $2070,X
	AND #$02		;Zombie					;C2/63D7: 29 02        AND #$02
	BNE .NextChar							;C2/63D9: D0 1D        BNE $63F8
	PHX 								;C2/63DB: DA           PHX 
	LDA $0E								;C2/63DC: A5 0E        LDA $0E
	CMP #$04		;monster check				;C2/63DE: C9 04        CMP #$04
	BCC .Party							;C2/63E0: 90 10        BCC $63F2
	SEC 								;C2/63E2: 38           SEC 
	SBC #$04							;C2/63E3: E9 04        SBC #$04
	TAX 			;monster index				;C2/63E5: AA           TAX 
	LDA MonsterKillTracker						;C2/63E6: AD 09 7C     LDA $7C09
	JSR ClearBit_X							;C2/63E9: 20 D1 01     JSR $01D1
	ORA InactiveMonsters						;C2/63EC: 0D 0A 7C     ORA $7C0A
	STA MonsterKillTracker						;C2/63EF: 8D 09 7C     STA $7C09
.Party
	LDA $0E								;C2/63F2: A5 0E        LDA $0E
	JSR KillCharacter						;C2/63F4: 20 8A 61     JSR $618A
	PLX 								;C2/63F7: FA           PLX 

.NextChar
	JSR NextCharOffset						;C2/63F8: 20 E0 01     JSR $01E0
	INC $0E								;C2/63FB: E6 0E        INC $0E
	LDA $0E			;char index				;C2/63FD: A5 0E        LDA $0E
	CMP TempStopIndex						;C2/63FF: CD 21 27     CMP $2721
	BEQ .Ret							;C2/6402: F0 03        BEQ $6407
	JMP .Loop							;C2/6404: 4C 7B 62     JMP $627B
.Ret	RTS 								;C2/6407: 60           RTS 


%org($C26408)
SetupAndLaunchAttack:
	JSR ClearAttackData							;C2/6408: 20 23 65     JSR $6523
	JSR CopyAttackParams							;C2/640B: 20 3A 65     JSR $653A
	LDX AttackerOffset							;C2/640E: A6 32        LDX $32
	JSR CopyStatsWithBonuses						;C2/6410: 20 48 02     JSR $0248
	STZ SandwormHitFlag							;C2/6413: 9C 61 7C     STZ $7C61
	LDA SandwormBattle							;C2/6416: AD 4C 7C     LDA $7C4C
	BEQ .Normal								;C2/6419: F0 19        BEQ $6434

	;this section only applies to sandworm fight
	LDA TargetIndex								;C2/641B: A5 48        LDA $48
	CMP #$07		;first possible worm position			;C2/641D: C9 07        CMP #$07
	BCC .Normal								;C2/641F: 90 13        BCC $6434
	CMP #$0A		;past last worm position			;C2/6421: C9 0A        CMP #$0A
	BCS .Normal								;C2/6423: B0 0F        BCS $6434
	STA SandwormHitIndex							;C2/6425: 8D 60 7C     STA $7C60
	INC SandwormHitFlag							;C2/6428: EE 61 7C     INC $7C61
	LDA #$0A		;apply attack to hardcoded "real" sandworm spot	;C2/642B: A9 0A        LDA #$0A
	STA TargetIndex								;C2/642D: 85 48        STA $48
	LDX #$0500								;C2/642F: A2 00 05     LDX #$0500
	STX TargetOffset							;C2/6432: 86 49        STX $49

.Normal
	LDA TargetIndex								;C2/6434: A5 48        LDA $48
	TAX 									;C2/6436: AA           TAX 
	LDA ActiveParticipants,X						;C2/6437: BD C2 3E     LDA $3EC2,X
	BEQ .TargetNotActive							;C2/643A: F0 25        BEQ $6461
	LDX TargetOffset							;C2/643C: A6 49        LDX $49
	LDA CharStruct.Status1,X						;C2/643E: BD 1A 20     LDA $201A,X
	AND #$C0		;stone or dead					;C2/6441: 29 C0        AND #$C0
	BNE .TargetNotActive							;C2/6443: D0 1C        BNE $6461
	LDA CharStruct.Status4,X						;C2/6445: BD 1D 20     LDA $201D,X
	AND #$01		;hidden	 					;C2/6448: 29 01        AND #$01
	BNE .TargetNotActive							;C2/644A: D0 15        BNE $6461
	LDA CharStruct.CmdStatus,X						;C2/644C: BD 1E 20     LDA $201E,X
	AND #$10		;jumping					;C2/644F: 29 10        AND #$10
	BNE .TargetNotActive							;C2/6451: D0 0E        BNE $6461
	LDA SandwormBattle		;why does sandworm have a special case	;C2/6453: AD 4C 7C     LDA $7C4C
	BNE .Continue			;for erased?				;C2/6456: D0 3E        BNE $6496
	LDA CharStruct.Status4,X						;C2/6458: BD 1D 20     LDA $201D,X
	AND #$80		;erased						;C2/645B: 29 80        AND #$80
	BNE .Miss		;						;C2/645D: D0 30        BNE $648F
	BRA .Continue								;C2/645F: 80 35        BRA $6496

.TargetNotActive
	LDX TargetOffset							;C2/6461: A6 49        LDX $49
	LDA CharStruct.Status4,X						;C2/6463: BD 1D 20     LDA $201D,X
	AND #$80		;erased						;C2/6466: 29 80        AND #$80
	BNE .Miss								;C2/6468: D0 25        BNE $648F
	LDA CharStruct.CmdStatus,X						;C2/646A: BD 1E 20     LDA $201E,X
	AND #$10		;jumping					;C2/646D: 29 10        AND #$10
	BEQ +									;C2/646F: F0 07        BEQ $6478
	LDA HitsJumping								;C2/6471: AD 9C 7C     LDA $7C9C
	BNE .Continue								;C2/6474: D0 20        BNE $6496
	BRA .Miss								;C2/6476: 80 17        BRA $648F
+
	LDA MissInactive							;C2/6478: AD 9D 7C     LDA $7C9D
	BNE .Miss								;C2/647B: D0 12        BNE $648F
	LDA MultiCommand							;C2/647D: AD 2C 7B     LDA $7B2C
	TAX 									;C2/6480: AA           TAX 
	LDA HitsInactive,X							;C2/6481: BD EB 7B     LDA $7BEB,X
	BNE .Continue								;C2/6484: D0 10        BNE $6496
	LDA AtkType,X								;C2/6486: BD 2D 7B     LDA $7B2D,X
	AND #$7F								;C2/6489: 29 7F        AND #$7F
	CMP #$60		;hide/show monsters				;C2/648B: C9 60        CMP #$60
	BEQ .Continue								;C2/648D: F0 07        BEQ $6496
.Miss
	STZ MissInactive							;C2/648F: 9C 9D 7C     STZ $7C9D
	INC AtkMissed								;C2/6492: E6 56        INC $56
	BRA .GoApplyDamage							;C2/6494: 80 19        BRA $64AF

.Continue
	STZ HitsJumping								;C2/6496: 9C 9C 7C     STZ $7C9C
	LDX TargetOffset							;C2/6499: A6 49        LDX $49
	LDA CharStruct.CharRow,X						;C2/649B: BD 00 20     LDA $2000,X
	AND #$40		;not on the team? 				;C2/649E: 29 40        AND #$40
	BNE .Miss								;C2/64A0: D0 ED        BNE $648F
	LDA FleeSuccess								;C2/64A2: AD E8 7B     LDA $7BE8
	BMI .Miss		;80h means Exit	was cast			;C2/64A5: 30 E8        BMI $648F
	LDA ResetBattle								;C2/64A7: AD D8 7C     LDA $7CD8
	BNE .Miss		;Reset was cast					;C2/64AA: D0 E3        BNE $648F
	JSR DispatchAttack							;C2/64AC: 20 B2 64     JSR $64B2
.GoApplyDamage
	JMP ApplyDamage								;C2/64AF: 4C 4D 65     JMP $654D

%org($C264B2)
DispatchAttack:
	LDX TargetOffset							;C2/64B2: A6 49        LDX $49
	LDA CharStruct.Status3,X						;C2/64B4: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X						;C2/64B7: 1D 72 20     ORA $2072,X
	AND #$02		;Invulnerable					;C2/64BA: 29 02        AND #$02
	BEQ .NotInvuln								;C2/64BC: F0 0F        BEQ $64CD
	LDA MultiCommand							;C2/64BE: AD 2C 7B     LDA $7B2C
	TAX 									;C2/64C1: AA           TAX 
	LDA AtkType,X								;C2/64C2: BD 2D 7B     LDA $7B2D,X
	AND #$7F								;C2/64C5: 29 7F        AND #$7F
	CMP #$60		;hide/show monsters				;C2/64C7: C9 60        CMP #$60
	BNE .InvulnOrFake							;C2/64C9: D0 0E        BNE $64D9
	BRA .Finish								;C2/64CB: 80 31        BRA $64FE

.NotInvuln
	LDX TargetOffset							;C2/64CD: A6 49        LDX $49
	LDA CharStruct.Status4,X						;C2/64CF: BD 1D 20     LDA $201D,X
	ORA CharStruct.AlwaysStatus4,X						;C2/64D2: 1D 73 20     ORA $2073,X
	AND #$40		;False Image					;C2/64D5: 29 40        AND #$40
	BEQ .NotFalseImage							;C2/64D7: F0 1E        BEQ $64F7

.InvulnOrFake
	LDX AttackerOffset							;C2/64D9: A6 32        LDX $32
	LDA CharStruct.Command,X						;C2/64DB: BD 57 20     LDA $2057,X
	CMP #$1D		;Catch						;C2/64DE: C9 1D        CMP #$1D
	BNE .DoNothing								;C2/64E0: D0 11        BNE $64F3
	LDA MultiCommand							;C2/64E2: AD 2C 7B     LDA $7B2C
	TAX 									;C2/64E5: AA           TAX 
	LDA AtkType,X								;C2/64E6: BD 2D 7B     LDA $7B2D,X
	AND #$7F								;C2/64E9: 29 7F        AND #$7F
	CMP #$60		;hide/show monster				;C2/64EB: C9 60        CMP #$60
	BEQ .Finish								;C2/64ED: F0 0F        BEQ $64FE
	LDA #$7E		;this attack type always misses			;C2/64EF: A9 7E        LDA #$7E
	BRA .Finish								;C2/64F1: 80 0B        BRA $64FE
.DoNothing
	LDA #$7F		;this attack type does nothing			;C2/64F3: A9 7F        LDA #$7F
	BRA .Finish								;C2/64F5: 80 07        BRA $64FE

.NotFalseImage
	LDA MultiCommand							;C2/64F7: AD 2C 7B     LDA $7B2C
	TAX 									;C2/64FA: AA           TAX 
	LDA AtkType,X								;C2/64FB: BD 2D 7B     LDA $7B2D,X
.Finish
	AND #$7F								;C2/64FE: 29 7F        AND #$7F
	CMP #$7F								;C2/6500: C9 7F        CMP #$7F
	BNE +									;C2/6502: D0 04        BNE $6508
	LDA #$75		;Convert type 7F to 75 (does nothing)		;C2/6504: A9 75        LDA #$75
	BRA ++									;C2/6506: 80 06        BRA $650E
+	CMP #$7E								;C2/6508: C9 7E        CMP #$7E
	BNE ++									;C2/650A: D0 02        BNE $650E
	LDA #$74		;Convert type 7E to 74 (always miss)		;C2/650C: A9 74        LDA #$74
++	ASL 									;C2/650E: 0A           ASL 
	TAX 									;C2/650F: AA           TAX 
	LDA AtkTypeJumpTable,X							;C2/6510: BF 21 7B C2  LDA $C27B21,X
	STA $08									;C2/6514: 85 08        STA $08
	LDA AtkTypeJumpTable+1,X						;C2/6516: BF 22 7B C2  LDA $C27B22,X
	STA $09									;C2/651A: 85 09        STA $09
	LDA.b #bank(AtkTypeJumpTable)						;C2/651C: A9 C2        LDA #$C2
	STA $0A									;C2/651E: 85 0A        STA $0A
	JMP [$0008]		;jump to routine from attack type table		;C2/6520: DC 08 00     JMP [$0008]

%org($C26523)
ClearAttackData:	
	LDX #$0017	;clears $4D through $64, vars used by attack types	;C2/6523: A2 17 00     LDX #$0017
-	STZ $4D,X								;C2/6526: 74 4D        STZ $4D,X
	DEX 									;C2/6528: CA           DEX 
	BPL -									;C2/6529: 10 FB        BPL $6526
	TXA 		;A is now $FF						;C2/652B: 8A           TXA 
	LDX #$0011								;C2/652C: A2 11 00     LDX #$0011
.ClearDamageData	;Wipes $7B69-$7B7A with $FF, used for final damage/healing amounts
	STA BaseDamage,X							;C2/652F: 9D 69 7B     STA $7B69,X
	DEX 									;C2/6532: CA           DEX 
	BPL .ClearDamageData							;C2/6533: 10 FA        BPL $652F
	TDC 									;C2/6535: 7B           TDC 
	STA StatusFixedDur							;C2/6536: 8D D7 3E     STA $3ED7
	RTS 									;C2/6539: 60           RTS 

%org($C2653A)
CopyAttackParams:
	LDA AttackerOffset2							;C2/653A: A5 39        LDA $39
	TAX 									;C2/653C: AA           TAX 
	LDA AttackInfo.Param1,X							;C2/653D: BD 05 7A     LDA $7A05,X
	STA Param1								;C2/6540: 85 57        STA $57
	LDA AttackInfo.Param2,X							;C2/6542: BD 06 7A     LDA $7A06,X
	STA Param2								;C2/6545: 85 58        STA $58
	LDA AttackInfo.Param3,X							;C2/6547: BD 07 7A     LDA $7A07,X
	STA Param3								;C2/654A: 85 59        STA $59
	RTS 									;C2/654C: 60           RTS 

%org($C2654D)
;Applies damage to both displayed damage and actual character health
;also sets up display of the various types of evasion
ApplyDamage:
	LDA AtkMissed								;C2/654D: A5 56        LDA $56
	BEQ .NotMiss								;C2/654F: F0 44        BEQ $6595
	LDA TargetIndex								;C2/6551: A5 48        LDA $48
	CMP #$04		;monster check					;C2/6553: C9 04        CMP #$04
	BCS .DoneBlocking							;C2/6555: B0 29        BCS $6580
	LDA ShieldBlock								;C2/6557: A5 5D        LDA $5D
	CMP #$07		;aegis shield block				;C2/6559: C9 07        CMP #$07
	BNE .BlockNotAegis							;C2/655B: D0 12        BNE $656F
	LDA TargetIndex								;C2/655D: A5 48        LDA $48
	TAX 									;C2/655F: AA           TAX 
	TDC 									;C2/6560: 7B           TDC 
	JSR SetBit_X								;C2/6561: 20 D6 01     JSR $01D6
	PHA 									;C2/6564: 48           PHA 
	LDA MultiCommand							;C2/6565: AD 2C 7B     LDA $7B2C
	TAX 									;C2/6568: AA           TAX 
	PLA 									;C2/6569: 68           PLA 
	STA AegisBlockTarget,X							;C2/656A: 9D 4C 3C     STA $3C4C,X
	BRA .DoneBlocking							;C2/656D: 80 11        BRA $6580

.BlockNotAegis
	LDA MultiCommand							;C2/656F: AD 2C 7B     LDA $7B2C
	TAX 									;C2/6572: AA           TAX 
	LDA SwordBlock								;C2/6573: A5 5A        LDA $5A
	ORA KnifeBlock								;C2/6575: 05 5B        ORA $5B
	ORA ElfCape								;C2/6577: 05 5C        ORA $5C
	ORA ShieldBlock								;C2/6579: 05 5D        ORA $5D
	ORA BladeGrasp								;C2/657B: 05 5E        ORA $5E
	STA BlockType,X								;C2/657D: 9D 3C 3C     STA $3C3C,X

.DoneBlocking
	LDX #$0006								;C2/6580: A2 06 00     LDX #$0006
.ClearCommandLoop
	STZ !CurrentCommand,X							;C2/6583: 9E 46 47     STZ $4746,X
	DEX 									;C2/6586: CA           DEX 
	BPL .ClearCommandLoop							;C2/6587: 10 FA        BPL $6583
	LDA AtkMissed								;C2/6589: A5 56        LDA $56
	BPL .AfterMiss								;C2/658B: 10 2A        BPL $65B7
	LDX #$4000								;C2/658D: A2 00 40     LDX #$4000
	STX DamageToTarget	;if AtkMissed bit 80h set, sets a flag          ;C2/6590: 8E 6D 7B     STX $7B6D
	BRA .AfterMiss								;C2/6593: 80 22        BRA $65B7

.NotMiss
	LDA AtkElement								;C2/6595: A5 4D        LDA $4D
	STA CurrentCommand.Element						;C2/6597: 8D 49 47     STA $4749
	LDA TargetIndex								;C2/659A: A5 48        LDA $48
	CMP #$04		;monster check					;C2/659C: C9 04        CMP #$04
	BCC .Party								;C2/659E: 90 0F        BCC $65AF
	LDA SandwormHitFlag							;C2/65A0: AD 61 7C     LDA $7C61
	BEQ +									;C2/65A3: F0 05        BEQ $65AA
	LDA SandwormHitIndex							;C2/65A5: AD 60 7C     LDA $7C60
	BRA ++									;C2/65A8: 80 02        BRA $65AC
+	LDA TargetIndex								;C2/65AA: A5 48        LDA $48
++	SEC 									;C2/65AC: 38           SEC 
	SBC #$04		;now monster index				;C2/65AD: E9 04        SBC #$04
.Party				;or party index
	TAX 									;C2/65AF: AA           TAX 
	TDC 									;C2/65B0: 7B           TDC 
	JSR SetBit_X								;C2/65B1: 20 D6 01     JSR $01D6
	STA TargetBitMaskSmall							;C2/65B4: 8D 41 7B     STA $7B41
.AfterMiss
	LDA MultiDamage	;calculation for GetDamageDisplayOffset later 		;C2/65B7: AD FB 79     LDA $79FB
	STA $24									;C2/65BA: 85 24        STA $24
	LDA #$18		;24						;C2/65BC: A9 18        LDA #$18
	STA $25									;C2/65BE: 85 25        STA $25
	JSR Multiply_8bit							;C2/65C0: 20 F1 00     JSR $00F1

.CheckDamageAttacker
	LDX DamageToAttacker							;C2/65C3: AE 6B 7B     LDX $7B6B
	BMI .CheckDamageTarget		;if high bit set			;C2/65C6: 30 2B        BMI $65F3
	LDA AttackerIndex							;C2/65C8: A5 47        LDA $47
	JSR GetDamageDisplayOffset	;sets X					;C2/65CA: 20 5C 68     JSR $685C
	LDA DamageToAttacker							;C2/65CD: AD 6B 7B     LDA $7B6B
	STA DisplayDamage,X							;C2/65D0: 9D 4C 3A     STA $3A4C,X
	LDA DamageToAttacker+1							;C2/65D3: AD 6C 7B     LDA $7B6C
	STA DisplayDamage+1,X							;C2/65D6: 9D 4D 3A     STA $3A4D,X
	AND #$40								;C2/65D9: 29 40        AND #$40
	BNE .CheckDamageTarget		;if 40h set				;C2/65DB: D0 16        BNE $65F3
	REP #$20								;C2/65DD: C2 20        REP #$20
	LDX AttackerOffset							;C2/65DF: A6 32        LDX $32
	SEC 									;C2/65E1: 38           SEC 
	LDA CharStruct.CurHP,X							;C2/65E2: BD 06 20     LDA $2006,X
	SBC DamageToAttacker							;C2/65E5: ED 6B 7B     SBC $7B6B
	BEQ ++									;C2/65E8: F0 02        BEQ $65EC
	BCS +									;C2/65EA: B0 01        BCS $65ED
++	TDC 			;0 HP						;C2/65EC: 7B           TDC 
+	STA CharStruct.CurHP,X	;new HP total					;C2/65ED: 9D 06 20     STA $2006,X
	TDC 									;C2/65F0: 7B           TDC 
	SEP #$20								;C2/65F1: E2 20        SEP #$20

.CheckDamageTarget
	LDX DamageToTarget							;C2/65F3: AE 6D 7B     LDX $7B6D
	BPL +									;C2/65F6: 10 03        BPL $65FB
	JMP .CheckHealAttacker							;C2/65F8: 4C E8 66     JMP $66E8
+	BNE .DamageTarget							;C2/65FB: D0 1E        BNE $661B
	LDA CurrentCommand.ID						;C2/65FD: AD 46 47     LDA $4746
	CMP #$2B		;Magic of any kind				;C2/6600: C9 2B        CMP #$2B
	BEQ .Magic								;C2/6602: F0 09        BEQ $660D
	TAX 									;C2/6604: AA           TAX 
	LDA ROMFightCommands,X		;per-command table, 0 or 1		;C2/6605: BF 26 EF D0  LDA $D0EF26,X
	BEQ .DamageTarget							;C2/6609: F0 10        BEQ $661B
	BRA +									;C2/660B: 80 0B        BRA $6618
.Magic
	LDA CurrentCommand.Magic						;C2/660D: AD 47 47     LDA $4747
	CMP #$81								;C2/6610: C9 81        CMP #$81
	BEQ +									;C2/6612: F0 04        BEQ $6618
	CMP #$80								;C2/6614: C9 80        CMP #$80
	BNE .DamageTarget							;C2/6616: D0 03        BNE $661B
+	INC FightFlag								;C2/6618: EE 40 7B     INC $7B40

.DamageTarget
	LDA SandwormHitFlag							;C2/661B: AD 61 7C     LDA $7C61
	BEQ +									;C2/661E: F0 05        BEQ $6625
	LDA SandwormHitIndex							;C2/6620: AD 60 7C     LDA $7C60
	BRA ++									;C2/6623: 80 02        BRA $6627
+	LDA TargetIndex								;C2/6625: A5 48        LDA $48
++	JSR GetDamageDisplayOffset	;sets X					;C2/6627: 20 5C 68     JSR $685C


.CheckReflectStacking		;this section handles when a target takes damage multiple times in one cast due to reflect
	LDA Reflected								;C2/662A: AD 46 7B     LDA $7B46
	BEQ .NoReflect								;C2/662D: F0 4A        BEQ $6679
	REP #$20								;C2/662F: C2 20        REP #$20
	LDA DisplayDamage,X							;C2/6631: BD 4C 3A     LDA $3A4C,X
	CMP #$FFFF			;indicates an uninitialized value here	;C2/6634: C9 FF FF     CMP #$FFFF
	BEQ .AbortReflect		;was reflected but no multi damage yet  ;C2/6637: F0 3D        BEQ $6676
	LDA DisplayDamage,X							;C2/6639: BD 4C 3A     LDA $3A4C,X
	AND #$3FFF			;clear flags				;C2/663C: 29 FF 3F     AND #$3FFF
	STA $0E				;existing damage without flags		;C2/663F: 85 0E        STA $0E
	LDA DisplayDamage,X							;C2/6641: BD 4C 3A     LDA $3A4C,X
	AND #$8000								;C2/6644: 29 00 80     AND #$8000
	STA $10				;healing flag				;C2/6647: 85 10        STA $10
	CLC 									;C2/6649: 18           CLC 
	LDA DamageToTarget							;C2/664A: AD 6D 7B     LDA $7B6D
	AND #$3FFF			;clear flag bits			;C2/664D: 29 FF 3F     AND #$3FFF
	ADC $0E				;add existing damage without flags	;C2/6650: 65 0E        ADC $0E
	CMP #$270F			;9999					;C2/6652: C9 0F 27     CMP #$270F
	BCC +									;C2/6655: 90 12        BCC $6669
	SEC 									;C2/6657: 38           SEC 
	SBC #$270F			;-9999					;C2/6658: E9 0F 27     SBC #$270F
	STA $12				;damage overflowing 9999		;C2/665B: 85 12        STA $12
	SEC 									;C2/665D: 38           SEC 
	LDA DamageToTarget		;damage including flags			;C2/665E: AD 6D 7B     LDA $7B6D
	SBC $12				;-damage overflowing 9999		;C2/6661: E5 12        SBC $12
	STA DamageToTarget		;9999 cap preserving flags 		;C2/6663: 8D 6D 7B     STA $7B6D
	LDA #$270F								;C2/6666: A9 0F 27     LDA #$270F
+	ORA $10				;healing flag				;C2/6669: 05 10        ORA $10
	STA DisplayDamage,X							;C2/666B: 9D 4C 3A     STA $3A4C,X
	TDC 									;C2/666E: 7B           TDC 
	SEP #$20								;C2/666F: E2 20        SEP #$20
	LDA DisplayDamage+1,X							;C2/6671: BD 4D 3A     LDA $3A4D,X
	BRA .CheckEarthWall							;C2/6674: 80 0F        BRA $6685
.AbortReflect
	TDC 									;C2/6676: 7B           TDC 
	SEP #$20								;C2/6677: E2 20        SEP #$20
.NoReflect
	LDA DamageToTarget							;C2/6679: AD 6D 7B     LDA $7B6D
	STA DisplayDamage,X							;C2/667C: 9D 4C 3A     STA $3A4C,X
	LDA DamageToTarget+1							;C2/667F: AD 6E 7B     LDA $7B6E
	STA DisplayDamage+1,X							;C2/6682: 9D 4D 3A     STA $3A4D,X

.CheckEarthWall
	AND #$40								;C2/6685: 29 40        AND #$40
	BNE .CheckHealAttacker							;C2/6687: D0 5F        BNE $66E8
	LDA TargetIndex								;C2/6689: A5 48        LDA $48
	CMP #$04		;monster check					;C2/668B: C9 04        CMP #$04
	BCS .ApplyDamage							;C2/668D: B0 34        BCS $66C3
	LDA CurrentCommand.Magic						;C2/668F: AD 47 47     LDA $4747
	CMP #$80		;monster fight					;C2/6692: C9 80        CMP #$80
	BEQ .EarthWall								;C2/6694: F0 08        BEQ $669E
	CMP #$DE		;strong fight?	vacuum wave?			;C2/6696: C9 DE        CMP #$DE
	BEQ .EarthWall								;C2/6698: F0 04        BEQ $669E
	CMP #$81		;monster specialty				;C2/669A: C9 81        CMP #$81
	BNE .ApplyDamage							;C2/669C: D0 25        BNE $66C3

.EarthWall
	LDA EarthWallHP								;C2/669E: AD 1E 7C     LDA $7C1E
	ORA EarthWallHP+1							;C2/66A1: 0D 1F 7C     ORA $7C1F
	BEQ .ApplyDamage							;C2/66A4: F0 1D        BEQ $66C3
	REP #$20								;C2/66A6: C2 20        REP #$20
	SEC 									;C2/66A8: 38           SEC 
	LDA EarthWallHP								;C2/66A9: AD 1E 7C     LDA $7C1E
	SBC DamageToTarget							;C2/66AC: ED 6D 7B     SBC $7B6D
	BCS +									;C2/66AF: B0 01        BCS $66B2
	TDC 									;C2/66B1: 7B           TDC 
+	STA EarthWallHP								;C2/66B2: 8D 1E 7C     STA $7C1E
	TDC 									;C2/66B5: 7B           TDC 
	SEP #$20								;C2/66B6: E2 20        SEP #$20
	LDA MultiCommand							;C2/66B8: AD 2C 7B     LDA $7B2C
	TAX 									;C2/66BB: AA           TAX 
	LDA #$04								;C2/66BC: A9 04        LDA #$04
	STA BlockType,X								;C2/66BE: 9D 3C 3C     STA $3C3C,X
	BRA .CheckHealAttacker							;C2/66C1: 80 25        BRA $66E8

.ApplyDamage
	LDA DamageToTarget							;C2/66C3: AD 6D 7B     LDA $7B6D
	ORA DamageToTarget+1							;C2/66C6: 0D 6E 7B     ORA $7B6E
	STA CurrentCommand.Damage						;C2/66C9: 8D 4C 47     STA $474C
	LDA TargetIndex								;C2/66CC: A5 48        LDA $48
	CMP #$04		;monster check					;C2/66CE: C9 04        CMP #$04
	BCC +			;but it doesn't matter?				;C2/66D0: 90 00        BCC $66D2
+	REP #$20								;C2/66D2: C2 20        REP #$20
	LDX TargetOffset							;C2/66D4: A6 49        LDX $49
	SEC 									;C2/66D6: 38           SEC 
	LDA CharStruct.CurHP,X							;C2/66D7: BD 06 20     LDA $2006,X
	SBC DamageToTarget							;C2/66DA: ED 6D 7B     SBC $7B6D
	BEQ +									;C2/66DD: F0 02        BEQ $66E1
	BCS ++									;C2/66DF: B0 01        BCS $66E2
+	TDC 			;min 0						;C2/66E1: 7B           TDC 
++	STA CharStruct.CurHP,X							;C2/66E2: 9D 06 20     STA $2006,X
	TDC 									;C2/66E5: 7B           TDC 
	SEP #$20								;C2/66E6: E2 20        SEP #$20
	
.CheckHealAttacker
	LDX HealingToAttacker							;C2/66E8: AE 6F 7B     LDX $7B6F
	BMI .CheckHealTarget							;C2/66EB: 30 35        BMI $6722
	LDA AttackerIndex							;C2/66ED: A5 47        LDA $47
	JSR GetDamageDisplayOffset	;sets X					;C2/66EF: 20 5C 68     JSR $685C
	LDA HealingToAttacker							;C2/66F2: AD 6F 7B     LDA $7B6F
	STA DisplayDamage,X							;C2/66F5: 9D 4C 3A     STA $3A4C,X
	LDA HealingToAttacker+1							;C2/66F8: AD 70 7B     LDA $7B70
	ORA #$80			;set heal flag				;C2/66FB: 09 80        ORA #$80
	STA DisplayDamage+1,X							;C2/66FD: 9D 4D 3A     STA $3A4D,X
	REP #$20								;C2/6700: C2 20        REP #$20
	LDA HealingToAttacker							;C2/6702: AD 6F 7B     LDA $7B6F
	AND #$3FFF			;clear flag bits			;C2/6705: 29 FF 3F     AND #$3FFF
	STA $0E				;Healing without flags			;C2/6708: 85 0E        STA $0E
	LDX AttackerOffset							;C2/670A: A6 32        LDX $32
	CLC 									;C2/670C: 18           CLC 
	LDA CharStruct.CurHP,X							;C2/670D: BD 06 20     LDA $2006,X
	ADC $0E				;Healing without flags			;C2/6710: 65 0E        ADC $0E
	BCS +				;check overflow				;C2/6712: B0 05        BCS $6719
	CMP CharStruct.MaxHP,X		;check max hp				;C2/6714: DD 08 20     CMP $2008,X
	BCC ++									;C2/6717: 90 03        BCC $671C
+	LDA CharStruct.MaxHP,X		;cap at max hp				;C2/6719: BD 08 20     LDA $2008,X
++	STA CharStruct.CurHP,X							;C2/671C: 9D 06 20     STA $2006,X
	TDC 									;C2/671F: 7B           TDC 
	SEP #$20								;C2/6720: E2 20        SEP #$20

.CheckHealTarget	
	LDX HealingToTarget							;C2/6722: AE 71 7B     LDX $7B71
	BMI .CheckHealAttackerMP						;C2/6725: 30 3F        BMI $6766
	LDA SandwormHitFlag							;C2/6727: AD 61 7C     LDA $7C61
	BEQ +									;C2/672A: F0 05        BEQ $6731
	LDA SandwormHitIndex							;C2/672C: AD 60 7C     LDA $7C60
	BRA ++									;C2/672F: 80 02        BRA $6733
+	LDA TargetIndex								;C2/6731: A5 48        LDA $48
++	JSR GetDamageDisplayOffset						;C2/6733: 20 5C 68     JSR $685C
	LDA HealingToTarget							;C2/6736: AD 71 7B     LDA $7B71
	STA DisplayDamage,X							;C2/6739: 9D 4C 3A     STA $3A4C,X
	LDA HealingToTarget+1							;C2/673C: AD 72 7B     LDA $7B72
	ORA #$80			;set healing flag			;C2/673F: 09 80        ORA #$80
	STA DisplayDamage+1,X							;C2/6741: 9D 4D 3A     STA $3A4D,X
	REP #$20								;C2/6744: C2 20        REP #$20
	LDA HealingToTarget							;C2/6746: AD 71 7B     LDA $7B71
	AND #$3FFF			;clear flag bits			;C2/6749: 29 FF 3F     AND #$3FFF
	STA $0E				;healing without flags			;C2/674C: 85 0E        STA $0E
	LDX TargetOffset							;C2/674E: A6 49        LDX $49
	CLC 									;C2/6750: 18           CLC 
	LDA CharStruct.CurHP,X							;C2/6751: BD 06 20     LDA $2006,X
	ADC $0E				;healing without flags			;C2/6754: 65 0E        ADC $0E
	BCS +				;check overflow				;C2/6756: B0 05        BCS $675D
	CMP CharStruct.MaxHP,X		;check max hp				;C2/6758: DD 08 20     CMP $2008,X
	BCC ++									;C2/675B: 90 03        BCC $6760
+	LDA CharStruct.MaxHP,X		;cap at max hp				;C2/675D: BD 08 20     LDA $2008,X
++	STA CharStruct.CurHP,X							;C2/6760: 9D 06 20     STA $2006,X
	TDC 									;C2/6763: 7B           TDC 
	SEP #$20								;C2/6764: E2 20        SEP #$20

.CheckHealAttackerMP
	LDX HealingToAttackerMP							;C2/6766: AE 73 7B     LDX $7B73
	BMI .CheckHealTargetMP							;C2/6769: 30 33        BMI $679E
	LDA AttackerIndex							;C2/676B: A5 47        LDA $47
	JSR GetDamageDisplayOffset						;C2/676D: 20 5C 68     JSR $685C
	LDA HealingToAttackerMP							;C2/6770: AD 73 7B     LDA $7B73
	STA DisplayDamage,X							;C2/6773: 9D 4C 3A     STA $3A4C,X
	LDA HealingToAttackerMP+1						;C2/6776: AD 74 7B     LDA $7B74
	ORA #$80			;healing flag				;C2/6779: 09 80        ORA #$80
	STA DisplayDamage+1,X							;C2/677B: 9D 4D 3A     STA $3A4D,X
	REP #$20								;C2/677E: C2 20        REP #$20
	LDA HealingToAttackerMP							;C2/6780: AD 73 7B     LDA $7B73
	AND #$3FFF			;clear flag bits			;C2/6783: 29 FF 3F     AND #$3FFF
	STA $0E				;healing without flags			;C2/6786: 85 0E        STA $0E
	LDX AttackerOffset							;C2/6788: A6 32        LDX $32
	CLC 									;C2/678A: 18           CLC 
	LDA CharStruct.CurMP,X							;C2/678B: BD 0A 20     LDA $200A,X
	ADC $0E				;healing without flags			;C2/678E: 65 0E        ADC $0E
	CMP CharStruct.MaxMP,X							;C2/6790: DD 0C 20     CMP $200C,X
	BCC +									;C2/6793: 90 03        BCC $6798
	LDA CharStruct.MaxMP,X		;cap at max mp				;C2/6795: BD 0C 20     LDA $200C,X
+	STA CharStruct.CurMP,X							;C2/6798: 9D 0A 20     STA $200A,X
	TDC 									;C2/679B: 7B           TDC 
	SEP #$20								;C2/679C: E2 20        SEP #$20
	
.CheckHealTargetMP	
	LDX HealingToTargetMP							;C2/679E: AE 75 7B     LDX $7B75
	BMI .CheckDamageAttackerMP						;C2/67A1: 30 3D        BMI $67E0
	LDA SandwormHitFlag							;C2/67A3: AD 61 7C     LDA $7C61
	BEQ +									;C2/67A6: F0 05        BEQ $67AD
	LDA SandwormHitIndex							;C2/67A8: AD 60 7C     LDA $7C60
	BRA ++									;C2/67AB: 80 02        BRA $67AF
+	LDA TargetIndex								;C2/67AD: A5 48        LDA $48
++	JSR GetDamageDisplayOffset						;C2/67AF: 20 5C 68     JSR $685C
	LDA HealingToTargetMP							;C2/67B2: AD 75 7B     LDA $7B75
	STA DisplayDamage,X							;C2/67B5: 9D 4C 3A     STA $3A4C,X
	LDA HealingToTargetMP+1							;C2/67B8: AD 76 7B     LDA $7B76
	ORA #$80			;healing flag				;C2/67BB: 09 80        ORA #$80
	STA DisplayDamage+1,X							;C2/67BD: 9D 4D 3A     STA $3A4D,X
	REP #$20								;C2/67C0: C2 20        REP #$20
	LDA HealingToTargetMP							;C2/67C2: AD 75 7B     LDA $7B75
	AND #$3FFF			;clear flag bits			;C2/67C5: 29 FF 3F     AND #$3FFF
	STA $0E				;healing without flags			;C2/67C8: 85 0E        STA $0E
	LDX TargetOffset							;C2/67CA: A6 49        LDX $49
	CLC 									;C2/67CC: 18           CLC 
	LDA CharStruct.CurMP,X							;C2/67CD: BD 0A 20     LDA $200A,X
	ADC $0E				;healing without flags			;C2/67D0: 65 0E        ADC $0E
	CMP CharStruct.MaxMP,X							;C2/67D2: DD 0C 20     CMP $200C,X
	BCC +									;C2/67D5: 90 03        BCC $67DA
	LDA CharStruct.MaxMP,X		;cap at max mp				;C2/67D7: BD 0C 20     LDA $200C,X
+	STA CharStruct.CurMP,X							;C2/67DA: 9D 0A 20     STA $200A,X
	TDC 									;C2/67DD: 7B           TDC 
	SEP #$20								;C2/67DE: E2 20        SEP #$20
	
.CheckDamageAttackerMP
	LDX DamageToAttackerMP							;C2/67E0: AE 77 7B     LDX $7B77
	BMI .CheckDamageTargetMP						;C2/67E3: 30 2C        BMI $6811
	LDA AttackerIndex							;C2/67E5: A5 47        LDA $47
	JSR GetDamageDisplayOffset						;C2/67E7: 20 5C 68     JSR $685C
	LDA DamageToAttackerMP							;C2/67EA: AD 77 7B     LDA $7B77
	STA DisplayDamage,X							;C2/67ED: 9D 4C 3A     STA $3A4C,X
	LDA DamageToAttackerMP+1						;C2/67F0: AD 78 7B     LDA $7B78
	STA DisplayDamage+1,X							;C2/67F3: 9D 4D 3A     STA $3A4D,X
	REP #$20								;C2/67F6: C2 20        REP #$20
	LDA DamageToAttackerMP							;C2/67F8: AD 77 7B     LDA $7B77
	AND #$3FFF			;clear flag bits			;C2/67FB: 29 FF 3F     AND #$3FFF
	STA $0E				;damage without flags			;C2/67FE: 85 0E        STA $0E
	LDX AttackerOffset							;C2/6800: A6 32        LDX $32
	SEC 									;C2/6802: 38           SEC 
	LDA CharStruct.CurMP,X							;C2/6803: BD 0A 20     LDA $200A,X
	SBC $0E				;damage without flags			;C2/6806: E5 0E        SBC $0E
	BCS +									;C2/6808: B0 01        BCS $680B
	TDC 				;min 0					;C2/680A: 7B           TDC 
+	STA CharStruct.CurMP,X							;C2/680B: 9D 0A 20     STA $200A,X
	TDC 									;C2/680E: 7B           TDC 
	SEP #$20								;C2/680F: E2 20        SEP #$20
	
.CheckDamageTargetMP
	LDX DamageToTargetMP							;C2/6811: AE 79 7B     LDX $7B79
	BMI .CheckZombie							;C2/6814: 30 36        BMI $684C
	LDA SandwormHitFlag							;C2/6816: AD 61 7C     LDA $7C61
	BEQ +									;C2/6819: F0 05        BEQ $6820
	LDA SandwormHitIndex							;C2/681B: AD 60 7C     LDA $7C60
	BRA ++									;C2/681E: 80 02        BRA $6822
+	LDA TargetIndex								;C2/6820: A5 48        LDA $48
++	JSR GetDamageDisplayOffset						;C2/6822: 20 5C 68     JSR $685C
	LDA DamageToTargetMP							;C2/6825: AD 79 7B     LDA $7B79
	STA DisplayDamage,X							;C2/6828: 9D 4C 3A     STA $3A4C,X
	LDA DamageToTargetMP+1							;C2/682B: AD 7A 7B     LDA $7B7A
	STA DisplayDamage+1,X							;C2/682E: 9D 4D 3A     STA $3A4D,X
	REP #$20								;C2/6831: C2 20        REP #$20
	LDA DamageToTargetMP							;C2/6833: AD 79 7B     LDA $7B79
	AND #$3FFF			;clear flag bits			;C2/6836: 29 FF 3F     AND #$3FFF
	STA $0E				;damage without flags			;C2/6839: 85 0E        STA $0E
	LDX TargetOffset							;C2/683B: A6 49        LDX $49
	SEC 									;C2/683D: 38           SEC 
	LDA CharStruct.CurMP,X							;C2/683E: BD 0A 20     LDA $200A,X
	SBC $0E				;damage without flags			;C2/6841: E5 0E        SBC $0E
	BCS +									;C2/6843: B0 01        BCS $6846
	TDC 				;min 0					;C2/6845: 7B           TDC 
+	STA CharStruct.CurMP,X							;C2/6846: 9D 0A 20     STA $200A,X
	TDC 									;C2/6849: 7B           TDC 
	SEP #$20								;C2/684A: E2 20        SEP #$20

.CheckZombie
	LDX TargetOffset							;C2/684C: A6 49        LDX $49
	LDA CharStruct.Status1,X						;C2/684E: BD 1A 20     LDA $201A,X
	AND #$02			;zombie					;C2/6851: 29 02        AND #$02
	BEQ .Ret								;C2/6853: F0 06        BEQ $685B
	STZ CharStruct.CurHP,X		;zombies always have 0 HP		;C2/6855: 9E 06 20     STZ $2006,X
	STZ CharStruct.CurHP+1,X						;C2/6858: 9E 07 20     STZ $2007,X
.Ret	RTS 									;C2/685B: 60           RTS 

%org($C2685C)
;odd utility routine
;X = D0ED79[A]*2 + ($26)
;contents of that table are 8 9 10 11 0 1 2 3 4 5 6 7
;so effectively adjusts the index so party members are after monsters
;then doubles it to access a 16 bit structure
;then adjusts it by another offset cacluated earlier ($79FB) * 24
GetDamageDisplayOffset:
	TAX 						;C2/685C: AA           TAX 
	LDA ROMCombatantReorder,X			;C2/685D: BF 79 ED D0  LDA $D0ED79,X
	ASL 						;C2/6861: 0A           ASL 
	REP #$20					;C2/6862: C2 20        REP #$20
	CLC 						;C2/6864: 18           CLC 
	ADC $26						;C2/6865: 65 26        ADC $26
	TAX 						;C2/6867: AA           TAX 
	TDC 						;C2/6868: 7B           TDC 
	SEP #$20					;C2/6869: E2 20        SEP #$20
	RTS 						;C2/686B: 60           RTS 

%org($C2686C)
;Attack Type 00
;Not sure what this is for, doesn't do much
Attack00:
        INC UnknownReaction                                     ;C2/686C: EE FB 7B     INC $7BFB
        RTS                                            		;C2/686F: 60           RTS 

%org($C26870)
;Attack Type 01 (Monster Fight)
Attack01:
	JSR SetHit100andTargetEvade				;C2/6870: 20 47 7C     JSR $7C47  	
	JSR HitPhysical						;C2/6873: 20 BE 7E     JSR $7EBE  	
	LDA AtkMissed						;C2/6876: A5 56        LDA $56    	
	BNE .Miss						;C2/6878: D0 19        BNE $6893	
	JSR MonsterDamage					;C2/687A: 20 27 82     JSR $8227  	
	JSR BackRowMod						;C2/687D: 20 9B 83     JSR $839B  	
	JSR CommandMod						;C2/6880: 20 BD 83     JSR $83BD  	
	JSR TargetStatusModPhys					;C2/6883: 20 12 85     JSR $8512  	
	JSR AttackerStatusModPhys				;C2/6886: 20 33 85     JSR $8533  	
	JSR MagicSwordMod					;C2/6889: 20 84 86     JSR $8684  	
	LDA AtkMissed						;C2/688C: A5 56        LDA $56		
	BNE .Miss						;C2/688E: D0 03        BNE $6893
	JMP CalcFinalDamageMSword				;C2/6890: 4C 11 88     JMP $8811  	
.Miss	LDA #$80						;C2/6893: A9 80        LDA #$80		
	STA AtkMissed						;C2/6895: 85 56        STA $56		
	RTS 							;C2/6897: 60           RTS 

%org($C26898)
;Attack Type 02 (Monster Specialty)
;Param3: Status (special format)
Attack02:
	LDX AttackerOffset					;C2/6898: A6 32        LDX $32
	LDA CharStruct.Specialty,X 				;C2/689A: BD 6E 20     LDA $206E,X  (Attacker Specialty Effects)
	BMI +	  						;C2/689D: 30 0A        BMI $68A9    (Check for Autohit)
	JSR SetHit100andTargetEvade				;C2/689F: 20 47 7C     JSR $7C47    (Hit = 100, Evade = Evade)
	JSR HitPhysical						;C2/68A2: 20 BE 7E     JSR $7EBE    (Hit Determination for physical)
	LDA AtkMissed						;C2/68A5: A5 56        LDA $56
	BNE .Miss						;C2/68A7: D0 34        BNE $68DD
+	JSR CheckTargetImage					;C2/68A9: 20 E2 7D     JSR $7DE2    (Check for Image)
	LDA AtkMissed						;C2/68AC: A5 56        LDA $56
	BNE .Miss						;C2/68AE: D0 2D        BNE $68DD
	JSR MonsterDamage					;C2/68B0: 20 27 82     JSR $8227    (Monster Damage Formula)
	JSR BackRowMod 						;C2/68B3: 20 9B 83     JSR $839B    (Back Row Modifications)
	JSR CommandMod 						;C2/68B6: 20 BD 83     JSR $83BD    (Command Modifications)
	JSR TargetStatusModPhys					;C2/68B9: 20 12 85     JSR $8512    (Target Status Effect Modifiers)
	JSR AttackerStatusModPhys				;C2/68BC: 20 33 85     JSR $8533    (Attacker Status Effect Modifiers)
	JSR SpecialtyMod					;C2/68BF: 20 AF 84     JSR $84AF    (Specialy Effect Modifier to damage)
	JSR MagicSwordMod					;C2/68C2: 20 84 86     JSR $8684    (Magic Sword Modifiers)
	LDA AtkMissed						;C2/68C5: A5 56        LDA $56
	BNE .Miss						;C2/68C7: D0 14        BNE $68DD
	JSR CalcFinalDamageMSword				;C2/68C9: 20 11 88     JSR $8811    (Calculate Final Damage)
	LDA TargetIndex						;C2/68CC: A5 48        LDA $48
	CMP #$04						;C2/68CE: C9 04        CMP #$04
	BCS +   						;C2/68D0: B0 08        BCS $68DA    (If target is a Monster)
	LDA EarthWallHP						;C2/68D2: AD 1E 7C     LDA $7C1E
	ORA EarthWallHP+1   					;C2/68D5: 0D 1F 7C     ORA $7C1F    (Check if Earth Wall is Up)
	BNE .Ret						;C2/68D8: D0 07        BNE $68E1
+	JMP ApplySpecialtyEffects				;C2/68DA: 4C 2F 8C     JMP $8C2F    (Apply Monster Specialty Effects)
.Miss	LDA #$80						;C2/68DD: A9 80        LDA #$80
	STA AtkMissed						;C2/68DF: 85 56        STA $56
.Ret	RTS 							;C2/68E1: 60           RTS 

%org($C268E2)
;Attack Type 03 (Magic Sword Level 1)
;Param1: Magic Sword Param
;Param2: Element
;Param3: Status
Attack03:
	JSR RemoveMagicSword					;C2/68E2: 20 E9 90     JSR $90E9
	LDX TargetOffset					;C2/68E5: A6 49        LDX $49
	LDA Param1						;C2/68E7: A5 57        LDA $57
	STA CharStruct.MSwordAnim,X				;C2/68E9: 9D 7A 20     STA $207A,X
	LDA Param2						;C2/68EC: A5 58        LDA $58
	STA CharStruct.MSwordElemental1,X			;C2/68EE: 9D 50 20     STA $2050,X
	LDA Param3						;C2/68F1: A5 59        LDA $59
	STA CharStruct.MSwordStatus1,X				;C2/68F3: 9D 53 20     STA $2053,X
	RTS 							;C2/68F6: 60           RTS 

%org($C268F7)
;Attack Type 04 (Magic Sword Level 2)
;Param1: Magic Sword Param
;Param2: Element
;Param3: Status
Attack04:
	JSR RemoveMagicSword					;C2/68F7: 20 E9 90     JSR $90E9
	LDX TargetOffset					;C2/68FA: A6 49        LDX $49
	LDA Param1						;C2/68FC: A5 57        LDA $57
	STA CharStruct.MSwordAnim,X				;C2/68FE: 9D 7A 20     STA $207A,X
	LDA Param2						;C2/6901: A5 58        LDA $58
	STA CharStruct.MSwordElemental2,X			;C2/6903: 9D 51 20     STA $2051,X
	LDA Param3						;C2/6906: A5 59        LDA $59
	STA CharStruct.MSwordStatus2,X				;C2/6908: 9D 54 20     STA $2054,X
	RTS 							;C2/690B: 60           RTS 

%org($C2690C)
;Attack Type 05 (Magic Sword Level 3)
;Param1: Magic Sword Param
;Param2: Element
;Param3: Status
Attack05:
	JSR RemoveMagicSword					;C2/690C: 20 E9 90     JSR $90E9
	LDX TargetOffset					;C2/690F: A6 49        LDX $49
	LDA Param1						;C2/6911: A5 57        LDA $57
	STA CharStruct.MSwordAnim,X				;C2/6913: 9D 7A 20     STA $207A,X
	LDA Param2						;C2/6916: A5 58        LDA $58
	STA CharStruct.MSwordElemental3,X			;C2/6918: 9D 52 20     STA $2052,X
	LDA Param3						;C2/691B: A5 59        LDA $59
	STA CharStruct.MSwordStatusSpecial,X			;C2/691D: 9D 55 20     STA $2055,X
	RTS 							;C2/6920: 60           RTS 

%org($C26921)
;Attack Type 06 (Magic Attack)
;Param2: Spell Power
;Param3: Element
Attack06:
	JSR CheckAegis 						;C2/6921: 20 97 7C     JSR $7C97   (Aegis Shield Check)
	LDA AtkMissed						;C2/6924: A5 56        LDA $56
	BNE .Miss						;C2/6926: D0 1A        BNE $6942
	LDA Param3						;C2/6928: A5 59        LDA $59
	STA AtkElement						;C2/692A: 85 4D        STA $4D
	JSR NormalMagicDamage  					;C2/692C: 20 30 7F     JSR $7F30   (Magic Damage Formula)
	JSR MultiTargetMod					;C2/692F: 20 66 83     JSR $8366   (Multitargetting Modifier to Damage)
	JSR TargetStatusModMag  				;C2/6932: 20 F3 84     JSR $84F3   (Target Status Effect Modifiers to Magic Damage)
	JSR ElementUpMod					;C2/6935: 20 6D 86     JSR $866D   (Magic Element Up Modifer)
	JSR ElementDamageModMag					;C2/6938: 20 6E 87     JSR $876E   (Magic Attack Elemental Modifiers)
	LDA AtkMissed						;C2/693B: A5 56        LDA $56
	BNE .Miss						;C2/693D: D0 03        BNE $6942
	JSR CalcFinalDamage  					;C2/693F: 20 05 8A     JSR $8A05   (Calculate Magic Final Damage)
.Miss	LDA MagicNull						;C2/6942: AD 97 7C     LDA $7C97
	BEQ .Return						;C2/6945: F0 02        BEQ $6949
	STZ AtkMissed 						;C2/6947: 64 56        STZ $56     
.Return	RTS 							;C2/6949: 60           RTS 

%org($C2694A)
;Attack Type 07 (Gravity)
;Param1: Hit%
;Param2: *Fraction/16
;Param3: Status 2
Attack07:
	JSR HitMagicConditionalAutohit				;C2/694A: 20 81 7E     JSR $7E81    (Hit determination for Magic attacks)
	LDA AtkMissed						;C2/694D: A5 56        LDA $56
	BNE .Return						;C2/694F: D0 1F        BNE $6970
	LDX TargetOffset					;C2/6951: A6 49        LDX $49
	LDA CharStruct.CreatureType,X				;C2/6953: BD 65 20     LDA $2065,X
	AND #$20   			;heavy			;C2/6956: 29 20        AND #$20     (Target Creature Type = Heavy?)
	BNE .Miss						;C2/6958: D0 14        BNE $696E
	JSR GravityDamage  					;C2/695A: 20 74 88     JSR $8874    (Gravity attack damage)
.Status
	LDA AtkMissed						;C2/695D: A5 56        LDA $56
	BNE .Return						;C2/695F: D0 0F        BNE $6970
	LDA #$3C			;60			;C2/6961: A9 3C        LDA #$3C
	STA Param2						;C2/6963: 85 58        STA $58
	JSR CalcStatusDuration					;C2/6965: 20 7D 8B     JSR $8B7D    (Status Duration Determination)
	JSR ApplyStatus2					;C2/6968: 20 2E 8D     JSR $8D2E    (Apply Status Effect 2)
	STZ AtkMissed 						;C2/696B: 64 56        STZ $56      
	RTS 							;C2/696D: 60           RTS 
								;
.Miss	INC AtkMissed 						;C2/696E: E6 56        INC $56      (Attack Misses)
.Return	RTS 							;C2/6970: 60           RTS 

%org($C26971)
;Attack Type 08 (Flare)
;Param2: Spell Power
;Param3: Element
%sub(Attack08)
Attack08:
	LDA Param3						;C2/6971: A5 59        LDA $59
	STA AtkElement						;C2/6973: 85 4D        STA $4D
	JSR FlareMagicDamage					;C2/6975: 20 6A 7F     JSR $7F6A  (Flare Magic damage formula)
	JSR MultiTargetMod					;C2/6978: 20 66 83     JSR $8366  (Multitargetting Modifier to Damage)
	JSR TargetStatusModMag					;C2/697B: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JSR ElementUpMod					;C2/697E: 20 6D 86     JSR $866D  (Magic Element Up Modifer)
	JSR ElementDamageModMag					;C2/6981: 20 6E 87     JSR $876E  (Magic Attack Elemental Modifiers)
	LDA AtkMissed						;C2/6984: A5 56        LDA $56
	BNE +							;C2/6986: D0 03        BNE $698B
	JSR CalcFinalDamage					;C2/6988: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
+	LDA MagicNull						;C2/698B: AD 97 7C     LDA $7C97
	BEQ .Return						;C2/698E: F0 02        BEQ $6992
	STZ AtkMissed						;C2/6990: 64 56        STZ $56
.Return	RTS 							;C2/6992: 60           RTS 
%endsub()

%org($C26993)
;Attack Type 09 (Random)
;Param2: M
;Param3: Element
Attack09:
	LDA Param3						;C2/6993: A5 59        LDA $59
	STA AtkElement						;C2/6995: 85 4D        STA $4D
	JSR RandomMagicDamage					;C2/6997: 20 A7 7F     JSR $7FA7  (Random Magic damage formula)
	JSR MultiTargetMod					;C2/699A: 20 66 83     JSR $8366  (Multitargetting Modifier to Damage)
	JSR TargetStatusModMag					;C2/699D: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JSR ElementUpMod					;C2/69A0: 20 6D 86     JSR $866D  (Magic Element Up Modifer)
	JSR ElementDamageModMag					;C2/69A3: 20 6E 87     JSR $876E  (Magic Attack Elemental Modifiers)
	LDA AtkMissed						;C2/69A6: A5 56        LDA $56
	BNE +							;C2/69A8: D0 03        BNE $69AD
	JSR CalcFinalDamage					;C2/69AA: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
+	LDA MagicNull						;C2/69AD: AD 97 7C     LDA $7C97
	BEQ .Return						;C2/69B0: F0 02        BEQ $69B4
	STZ AtkMissed						;C2/69B2: 64 56        STZ $56
.Return	RTS 							;C2/69B4: 60           RTS 

%org($C269B5)
;Attack Type 0A  (Physical Magic)
;Param1: Hit%
;Param2: Spell Power
;Param3: Element
Attack0A:
	JSR HitPhysicalMagic					;C2/69B5: 20 1B 7F     JSR $7F1B   (Hit Determination for Physical Magic)
	LDA AtkMissed						;C2/69B8: A5 56        LDA $56
	BNE .Miss						;C2/69BA: D0 17        BNE $69D3
	LDA Param3						;C2/69BC: A5 59        LDA $59
	STA AtkElement						;C2/69BE: 85 4D        STA $4D
	JSR PhysicalMagicDamage					;C2/69C0: 20 C2 7F     JSR $7FC2   (Physical magic damage formula)
	JSR TargetStatusModPhys					;C2/69C3: 20 12 85     JSR $8512   (Target Status Effect Modifiers to Damage)
	JSR ElementUpMod					;C2/69C6: 20 6D 86     JSR $866D   (Magic Element Up Modifers)
	JSR ElementDamageModMag					;C2/69C9: 20 6E 87     JSR $876E   (Magic Attack Element Modifiers)
	LDA AtkMissed						;C2/69CC: A5 56        LDA $56
	BNE .Miss						;C2/69CE: D0 03        BNE $69D3
	JSR CalcFinalDamage					;C2/69D0: 20 05 8A     JSR $8A05   (Calculate Magic Final Damage)
.Miss	LDA MagicNull						;C2/69D3: AD 97 7C     LDA $7C97
	BEQ .Return						;C2/69D6: F0 02        BEQ $69DA
	STZ AtkMissed						;C2/69D8: 64 56        STZ $56
.Return	RTS 							;C2/69DA: 60           RTS 

%org($C269DB)
;Attack Type 0B (Level Based Damage)
;Param1: Element
;Param2: Type+Status%
;Param3: Status 1 or 2
Attack0B:
	JSR CheckAegis 						;C2/69DB: 20 97 7C     JSR $7C97  (Aegis Shield Check)
	LDA AtkMissed						;C2/69DE: A5 56        LDA $56
	BNE .Miss						;C2/69E0: D0 1D        BNE $69FF
	JSR LevelDamage						;C2/69E2: 20 05 82     JSR $8205  (Level based damage formula)
	JSR MultiTargetMod					;C2/69E5: 20 66 83     JSR $8366  (Multitargetting Modifications to Damage)
	JSR TargetStatusModMag					;C2/69E8: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	LDA Param1						;C2/69EB: A5 57        LDA $57
	STA AtkElement						;C2/69ED: 85 4D        STA $4D
	JSR ElementUpMod					;C2/69EF: 20 6D 86     JSR $866D  (Magic Element Up Modifers)
	JSR ElementDamageModMag					;C2/69F2: 20 6E 87     JSR $876E  (Magic Attack Element Modifiers)
	LDA AtkMissed						;C2/69F5: A5 56        LDA $56
	BNE .Miss						;C2/69F7: D0 06        BNE $69FF
	JSR CalcFinalDamage					;C2/69F9: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	JSR ApplyConditionalStatus				;C2/69FC: 20 F9 8B     JSR $8BF9  (Apply Bow Status Effects)
.Miss	LDA MagicNull						;C2/69FF: AD 97 7C     LDA $7C97
	BEQ .Ret						;C2/6A02: F0 02        BEQ $6A06
	STZ AtkMissed						;C2/6A04: 64 56        STZ $56
.Ret	RTS 							;C2/6A06: 60           RTS 

%org($C26A07)
;Attack Type 0C (Flare w/HP Leak)
;Param1: Element
;Param2: Spell Power
;Param3: HP Leak Duration
%sub(Attack0C)
Attack0C:
	JSR CheckAegis 						;C2/6A07: 20 97 7C     JSR $7C97    (Aegis Shield Check)
	LDA AtkMissed						;C2/6A0A: A5 56        LDA $56
	BNE .Miss						;C2/6A0C: D0 26        BNE $6A34
	LDA Param1						;C2/6A0E: A5 57        LDA $57
	STA AtkElement						;C2/6A10: 85 4D        STA $4D
	JSR FlareMagicDamage					;C2/6A12: 20 6A 7F     JSR $7F6A    (Flare Magic Damage Formula)
	JSR MultiTargetMod 					;C2/6A15: 20 66 83     JSR $8366    (Multitargetting modifier to Damage)
	JSR TargetStatusModMag					;C2/6A18: 20 F3 84     JSR $84F3    (Target Status Effect Modifiers to Magic Damage)
	JSR ElementUpMod					;C2/6A1B: 20 6D 86     JSR $866D    (Magic Element Up Modifier to Damage)
	JSR ElementDamageModMag					;C2/6A1E: 20 6E 87     JSR $876E    (Magic Element Modifier to Damage)
	LDA AtkMissed						;C2/6A21: A5 56        LDA $56
	BNE .Miss						;C2/6A23: D0 0F        BNE $6A34
	JSR CalcFinalDamage					;C2/6A25: 20 05 8A     JSR $8A05    (Calculate Magic Final Damage)
	LDA Param3						;C2/6A28: A5 59        LDA $59
	STA StatusDuration					;C2/6A2A: 8D D8 3E     STA $3ED8    (Status Duration = Parameter 3)
	LDA #$08			;HP Leak		;C2/6A2D: A9 08        LDA #$08
	STA Param3						;C2/6A2F: 85 59        STA $59
	JSR ApplyStatus4					;C2/6A31: 20 05 8E     JSR $8E05    (Apply Status Effect 4)
.Miss	LDA MagicNull						;C2/6A34: AD 97 7C     LDA $7C97
	BEQ .Ret						;C2/6A37: F0 02        BEQ $6A3B
	STZ AtkMissed						;C2/6A39: 64 56        STZ $56
.Ret	RTS 							;C2/6A3B: 60           RTS 
%endsub()

%org($C26A3C)
;Attack Type 0D (Drain)
;Param1: Hit%
;Param2: *Spell Power
Attack0D:
	LDX AttackerOffset					;C2/6A3C: A6 32        LDX $32
	LDA CharStruct.DamageMod,X				;C2/6A3E: BD 1F 20     LDA $201F,X   (Check for Autohit)
	BMI .Hit		;check for autohit		;C2/6A41: 30 07        BMI $6A4A
	JSR HitMagicConditionalAutohit				;C2/6A43: 20 81 7E     JSR $7E81     (Magic Hit Determination, Autohit Party)
	LDA AtkMissed						;C2/6A46: A5 56        LDA $56
	BNE .Miss						;C2/6A48: D0 09        BNE $6A53
.Hit	JSR NormalMagicDamage					;C2/6A4A: 20 30 7F     JSR $7F30     (Magic Damage Formula)
	JSR TargetStatusModMag 					;C2/6A4D: 20 F3 84     JSR $84F3     (Target Status Effect Modifiers to Magic Damage)
	JMP DrainDamage						;C2/6A50: 4C 26 89     JMP $8926     (Magic Sword Drain)
.Miss	;we failed hit check, but some commands need to report miss differently	
	LDA AttackerIndex					;C2/6A53: A5 47        LDA $47
	CMP #$04						;C2/6A55: C9 04        CMP #$04
	BCS .Ret  		;check if monster		;C2/6A57: B0 0B        BCS $6A64     (If Attacker is a Monster)
	LDX AttackerOffset					;C2/6A59: A6 32        LDX $32
	LDA CharStruct.ActionFlag,X				;C2/6A5B: BD 56 20     LDA $2056,X
	BPL .Ret						;C2/6A5E: 10 04        BPL $6A64
	LDA #$80						;C2/6A60: A9 80        LDA #$80
	STA AtkMissed						;C2/6A62: 85 56        STA $56
.Ret	RTS 							;C2/6A64: 60           RTS 

%org($C26A65)
;Attack Type 0E (Psyche)
;Param1: Hit%
;Param2: *Spell Power
Attack0E:
	JSR HitMagicConditionalAutohit				;C2/6A65: 20 81 7E     JSR $7E81   (Magic Hit Determination, Auto hit Party)
	LDA AtkMissed						;C2/6A68: A5 56        LDA $56
	BNE .Ret						;C2/6A6A: D0 09        BNE $6A75
	JSR FlareMagicDamage					;C2/6A6C: 20 6A 7F     JSR $7F6A   (Flare Magic Damage Formula)
	JSR TargetStatusModMag					;C2/6A6F: 20 F3 84     JSR $84F3   (Target Status Effect Modifiers to Magic Damage)
	JSR PsycheDamage					;C2/6A72: 20 85 89     JSR $8985   (Psyche Damage)
.Ret	RTS 							;C2/6A75: 60           RTS 

%org($C26A76)
;Attack Type 0F (Reduce HP to Critical)
;Param1: Hit%
;Param2: *conditional autohit flag
Attack0F:
	JSR HitMagicConditionalAutohit				;C2/6A76: 20 81 7E     JSR $7E81   (Magic Hit Determination, Auto hit Party)
	LDA AtkMissed						;C2/6A79: A5 56        LDA $56
	BNE +							;C2/6A7B: D0 03        BNE $6A80
	JSR SetHPCritical					;C2/6A7D: 20 FD 88     JSR $88FD   (Reduce HP to Critical)
+	RTS 							;C2/6A80: 60           RTS 

%org($C26A81)
;Attack Type 10 (Heal)
;Param2: Spell Power
Attack10:
	JSR NormalMagicDamage					;C2/6A81: 20 30 7F     JSR $7F30   (Magic Damage Formula)
	TDC 							;C2/6A84: 7B           TDC 
	TAX 							;C2/6A85: AA           TAX 
	STX Defense  						;C2/6A86: 86 54        STX $54     (Defense = 0)
	JSR MultiTargetMod					;C2/6A88: 20 66 83     JSR $8366   (Multitargetting modifier to Damage)
	JMP CureTarget						;C2/6A8B: 4C C1 88     JMP $88C1   (Heal or Damage Undead)

%org($C26A8E)
;Attack Type 11 (Full Heal)
;Param2: Spell Power
Attack11:
	JSR NormalMagicDamage					;C2/6A8E: 20 30 7F     JSR $7F30   (Magic Damage Formula)
	TDC 							;C2/6A91: 7B           TDC 
	TAX 							;C2/6A92: AA           TAX 
	STX Defense    					;C2/6A93: 86 54        STX $54     (Defense = 0)
	LDA MultiCommand					;C2/6A95: AD 2C 7B     LDA $7B2C
	ASL 							;C2/6A98: 0A           ASL 
	TAX 							;C2/6A99: AA           TAX 
	LDA TargetBitmask,X					;C2/6A9A: BD FC 7A     LDA $7AFC,X
	AND #$F0						;C2/6A9D: 29 F0        AND #$F0
	BNE +			;player targets in A		;C2/6A9F: D0 14        BNE $6AB5
	LDA TargetBitmask,X					;C2/6AA1: BD FC 7A     LDA $7AFC,X
	AND #$0F						;C2/6AA4: 29 0F        AND #$0F
	JSR ShiftMultiply_16					;C2/6AA6: 20 B5 01     JSR $01B5   (x16)
	STA $0E							;C2/6AA9: 85 0E        STA $0E
	LDA TargetBitmask+1,X					;C2/6AAB: BD FD 7A     LDA $7AFD,X
	AND #$F0						;C2/6AAE: 29 F0        AND #$F0
	JSR ShiftDivide_16					;C2/6AB0: 20 BE 01     JSR $01BE   (Divide by 16)
	ORA $0E			;A now has monsters in order	;C2/6AB3: 05 0E        ORA $0E
+	JSR CountSetBits					;C2/6AB5: 20 C3 01     JSR $01C3
	DEX 							;C2/6AB8: CA           DEX 
	BEQ +							;C2/6AB9: F0 06        BEQ $6AC1
	JSR MultiTargetMod					;C2/6ABB: 20 66 83     JSR $8366   (Multitargetting modifier to Damage)
	JMP CureTarget  					;C2/6ABE: 4C C1 88     JMP $88C1   (Heal or Damage Undead)
+	JMP FullCureTarget  					;C2/6AC1: 4C DE 88     JMP $88DE   (Fully Heal or Reduce HP to Critical to Undead)

%org($C26AC4)
;Attack Type 12 (Status Effect 1)
;Param1: Hit%
;Param3: Status 1
Attack12:
	JSR HitMagic						;C2/6AC4: 20 F6 7E     JSR $7EF6   (Hit Determination for Magic)
	LDA AtkMissed						;C2/6AC7: A5 56        LDA $56
	BNE +							;C2/6AC9: D0 03        BNE $6ACE
	JSR ApplyStatus1					;C2/6ACB: 20 AC 8C     JSR $8CAC   (Apply Status Effect 1)
+	RTS 							;C2/6ACE: 60           RTS 

%org($C26ACF)
;Attack Type 13 (Status Effect 2)
;Param1: Hit%
;Param2: Duration
;Param3: Status 2
Attack13:
	JSR HitMagic 						;C2/6ACF: 20 F6 7E     JSR $7EF6   (Hit Determination for Magic)
	LDA AtkMissed						;C2/6AD2: A5 56        LDA $56
	BNE +							;C2/6AD4: D0 06        BNE $6ADC
	JSR CalcStatusDuration					;C2/6AD6: 20 7D 8B     JSR $8B7D   (Status Effect Duration Determination)
	JSR ApplyStatus2					;C2/6AD9: 20 2E 8D     JSR $8D2E   (Apply Status Effect 2)
+	RTS 							;C2/6ADC: 60           RTS 
      
%org($C26ADD)
;Attack Type 14 (Status Effect 3)
;Param1: Hit%
;Param2: Duration
;Param3: Status 3
Attack14:
	JSR HitMagic 						;C2/6ADD: 20 F6 7E     JSR $7EF6   (Hit Determination for Magic)
	LDA AtkMissed						;C2/6AE0: A5 56        LDA $56
	BNE +							;C2/6AE2: D0 06        BNE $6AEA
	JSR CalcStatusDuration					;C2/6AE4: 20 7D 8B     JSR $8B7D   (Status Effect Duration Determination)
	JSR ApplyStatus3 					;C2/6AE7: 20 CB 8D     JSR $8DCB   (Apply Status Effect 3)
+	RTS 							;C2/6AEA: 60           RTS 

%org($C26AEB)
;Attack Type 15 (Status Effect 1 Toggle)
;Param1: Hit%
;Param2: *conditional autohit flag
;Param3: Status 1
Attack15:
	JSR HitMagicConditionalAutohit				;C2/6AEB: 20 81 7E     JSR $7E81   (Magic Hit Determination, Auto hit Party)
	LDA AtkMissed						;C2/6AEE: A5 56        LDA $56
	BNE +							;C2/6AF0: D0 03        BNE $6AF5
	JSR ToggleStatus1					;C2/6AF2: 20 25 8E     JSR $8E25   (Toggle Status Effect 1)
+	RTS 							;C2/6AF5: 60           RTS 

%org($C26AF6)
;Attack Type 16 (Status Effect 3, Mutually exclusive statuses)
;Param1: Hit%
;Param2: Allowed Status 3
;Param3: Applied Status 3
Attack16:
	JSR HitMagic						;C2/6AF6: 20 F6 7E     JSR $7EF6   (Hit Determination for Magic)
	LDA AtkMissed						;C2/6AF9: A5 56        LDA $56
	BNE +							;C2/6AFB: D0 03        BNE $6B00
	JSR ApplyStatus3Exclusive				;C2/6AFD: 20 51 8E     JSR $8E51   (Apply Stats Effect 3, mutually exclusive Statuses)
+	RTS 							;C2/6B00: 60           RTS 

%org($C26B01)
;Attack Type 17 (Status Effect 1, or Heals Undead to Max HP)
;Param1: Hit%
;Param2: *conditional autohit flag
;Param3: Status 1
Attack17:
	LDX TargetOffset					;C2/6B01: A6 49        LDX $49
	LDA CharStruct.CreatureType,X 				;C2/6B03: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01			;undead creature	;C2/6B06: 29 01        AND #$01
	BNE .Undead						;C2/6B08: D0 07        BNE $6B11
	LDA CharStruct.ArmorProperties,X 			;C2/6B0A: BD 39 20     LDA $2039,X   (Check Target Armour Special Effect Byte)
	AND #$02    			;undead armor		;C2/6B0D: 29 02        AND #$02      (Check if Undead)
	BEQ .NotUndead						;C2/6B0F: F0 0C        BEQ $6B1D
.Undead
	REP #$20						;C2/6B11: C2 20        REP #$20
	LDA CharStruct.MaxHP,X					;C2/6B13: BD 08 20     LDA $2008,X
	STA CharStruct.CurHP,X 					;C2/6B16: 9D 06 20     STA $2006,X   (Fully Heal HP)
	TDC 							;C2/6B19: 7B           TDC 
	SEP #$20						;C2/6B1A: E2 20        SEP #$20
	RTS 							;C2/6B1C: 60           RTS 
.NotUndead							;
	JSR HitMagicConditionalAutohit				;C2/6B1D: 20 81 7E     JSR $7E81     (Hit Determination for Magic)
	LDA AtkMissed						;C2/6B20: A5 56        LDA $56
	BNE .Ret						;C2/6B22: D0 0D        BNE $6B31
	LDA TargetIndex						;C2/6B24: A5 48        LDA $48
	TAY 							;C2/6B26: A8           TAY 
	LDA ActiveParticipants,Y				;C2/6B27: B9 C2 3E     LDA $3EC2,Y
	BEQ .Miss						;C2/6B2A: F0 03        BEQ $6B2F
	JMP ApplyStatus1					;C2/6B2C: 4C AC 8C     JMP $8CAC     (Apply Status Effect 1)
.Miss	INC AtkMissed						;C2/6B2F: E6 56        INC $56
.Ret	RTS 							;C2/6B31: 60           RTS 

%org($C26B32)
;Attack Type 18 (Kill, Miss vs. Heavy)
;Param1: Hit%
;Param2: *conditional autohit flag
Attack18:
	JMP KillNonHeavy						;C2/6B32: 4C 82 8F     JMP $8F82     (Kill target, miss if Heavy)

%org($C26B35)
;Attack Type 19 (Remove Statuses)
;Param1: Status 1
;Param2: Status 2
;Param3: Status 3
Attack19:
	LDX AttackerOffset						;C2/6B35: A6 32        LDX $32
	LDA CharStruct.Status2,X					;C2/6B37: BD 1B 20     LDA $201B,X
	AND #$10   			;charm				;C2/6B3A: 29 10        AND #$10      (Check if Attacker Status2 = Charm?)
	BEQ +								;C2/6B3C: F0 03        BEQ $6B41
	INC AtkMissed							;C2/6B3E: E6 56        INC $56
	RTS 								;C2/6B40: 60           RTS 

+	JSR RemoveStatus3						;C2/6B41: 20 6E 8F     JSR $8F6E     (Remove Status 3)
	LDA Param2							;C2/6B44: A5 58        LDA $58
	STA Param3							;C2/6B46: 85 59        STA $59
	JSR RemoveStatus2						;C2/6B48: 20 11 8F     JSR $8F11     (Remove Status 2)
	LDA Param1							;C2/6B4B: A5 57        LDA $57
	STA Param3							;C2/6B4D: 85 59        STA $59
	JMP RemoveStatus1						;C2/6B4F: 4C B6 8E     JMP $8EB6     (Remove Status 1)

%org($C26B52)
;Attack Type 1A (Revive)
;Revive target, kills non-heavy undead
;Param1: Hit% vs undead, high bit autohit
;Param2: High bit autohit unless monster vs party, also high bit restores to Max MP
;Param3: Fraction/4 of MaxHP to recover
Attack1A:
	LDX TargetOffset						;C2/6B52: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/6B54: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01				;undead	creature	;C2/6B57: 29 01        AND #$01
	BNE .Kill							;C2/6B59: D0 07        BNE $6B62
	LDA CharStruct.ArmorProperties,X				;C2/6B5B: BD 39 20     LDA $2039,X   (Check Target Armour Special Effect Byte)
	AND #$02   				;undead armor		;C2/6B5E: 29 02        AND #$02      (Check if Undead)
	BEQ .CheckDead							;C2/6B60: F0 04        BEQ $6B66
.Kill	JSR KillNonHeavy  						;C2/6B62: 20 82 8F     JSR $8F82     (Kill target, miss if Heavy)
	RTS 								;C2/6B65: 60           RTS 
.CheckDead
	LDX TargetOffset						;C2/6B66: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/6B68: BD 1A 20     LDA $201A,X
	AND #$80   				;dead			;C2/6B6B: 29 80        AND #$80      
	BNE .Revive  							;C2/6B6D: D0 03        BNE $6B72     (Miss if Target is not Dead)
	INC AtkMissed							;C2/6B6F: E6 56        INC $56
	RTS 								;C2/6B71: 60           RTS 
.Revive       
	JSR ReviveTarget						;C2/6B72: 20 AA 8F     JSR $8FAA     (Revive Target)
	LDA Param2							;C2/6B75: A5 58        LDA $58
	BPL .Ret							;C2/6B77: 10 03        BPL $6B7C
	JSR FullMPHeal 							;C2/6B79: 20 F7 89     JSR $89F7     (Fully Heal MP)
.Ret	RTS 								;C2/6B7C: 60           RTS 

%org($C26B7D)
;Attack Type 1B (Drain to party)
;Used by Sylph (and only Sylph?)
;Param2: Spell Power
Attack1B:
	LDA MultiDamage			;this calculates an offset	;C2/6B7D: AD FB 79     LDA $79FB
	STA $24				;to display healing later	;C2/6B80: 85 24        STA $24
	LDA #$18			;24				;C2/6B82: A9 18        LDA #$18
	STA $25								;C2/6B84: 85 25        STA $25
	JSR Multiply_8bit						;C2/6B86: 20 F1 00     JSR $00F1
	LDX $26								;C2/6B89: A6 26        LDX $26
	PHX 								;C2/6B8B: DA           PHX 
	JSR NormalMagicDamage						;C2/6B8C: 20 30 7F     JSR $7F30    (Magic Damage Formula)
	JSR TargetStatusModMag						;C2/6B8F: 20 F3 84     JSR $84F3    (Target Status Effect Modifiers to Magic Damage)
	JSR CalcFinalDamage   						;C2/6B92: 20 05 8A     JSR $8A05    (Calculate Magic Final Damage)
	REP #$20							;C2/6B95: C2 20        REP #$20
	LDA DamageToTarget						;C2/6B97: AD 6D 7B     LDA $7B6D
	JSR ShiftDivide_4						;C2/6B9A: 20 C0 01     JSR $01C0    Final Damage = Final Damage / 4
	STA $0E				;healing value in $0E		;C2/6B9D: 85 0E        STA $0E
	TDC 								;C2/6B9F: 7B           TDC 
	SEP #$20							;C2/6BA0: E2 20        SEP #$20
	PLX 								;C2/6BA2: FA           PLX 
	STX $26								;C2/6BA3: 86 26        STX $26
	TDC 								;C2/6BA5: 7B           TDC 
	TAY 								;C2/6BA6: A8           TAY 
	TAX 								;C2/6BA7: AA           TAX 
	STX $10								;C2/6BA8: 86 10        STX $10
.PartyLoop				;operates on all 4 party members
	LDA ActiveParticipants,Y					;C2/6BAA: B9 C2 3E     LDA $3EC2,Y
	BEQ .NextChar							;C2/6BAD: F0 3F        BEQ $6BEE
	LDX $10								;C2/6BAF: A6 10        LDX $10
	LDA CharStruct.Status1,X					;C2/6BB1: BD 1A 20     LDA $201A,X
	AND #$C0    			;dead or stone			;C2/6BB4: 29 C0        AND #$C0     (Check if Dead or Stone)
	BNE .NextChar							;C2/6BB6: D0 36        BNE $6BEE
	LDA CharStruct.Status4,X					;C2/6BB8: BD 1D 20     LDA $201D,X
	AND #$81			;erased or hidden		;C2/6BBB: 29 81        AND #$81
	BNE .NextChar							;C2/6BBD: D0 2F        BNE $6BEE
	LDA CharStruct.CmdStatus,X					;C2/6BBF: BD 1E 20     LDA $201E,X
	AND #$10			;jumping			;C2/6BC2: 29 10        AND #$10
	BNE .NextChar							;C2/6BC4: D0 28        BNE $6BEE
	REP #$20							;C2/6BC6: C2 20        REP #$20
	CLC 								;C2/6BC8: 18           CLC 
	LDA CharStruct.CurHP,X						;C2/6BC9: BD 06 20     LDA $2006,X
	ADC $0E     							;C2/6BCC: 65 0E        ADC $0E       (Heal Current HP)
	BCS +				;cap overflow			;C2/6BCE: B0 05        BCS $6BD5
	CMP CharStruct.MaxHP,X						;C2/6BD0: DD 08 20     CMP $2008,X
	BCC ++								;C2/6BD3: 90 03        BCC $6BD8
+	LDA CharStruct.MaxHP,X						;C2/6BD5: BD 08 20     LDA $2008,X
++	STA CharStruct.CurHP,X 						;C2/6BD8: 9D 06 20     STA $2006,X   (Don't Heal above Max HP)
	TDC 								;C2/6BDB: 7B           TDC 
	SEP #$20							;C2/6BDC: E2 20        SEP #$20
	TYA 								;C2/6BDE: 98           TYA 
	JSR GetDamageDisplayOffset					;C2/6BDF: 20 5C 68     JSR $685C
	LDA $0E								;C2/6BE2: A5 0E        LDA $0E
	STA DisplayDamage,X		;stores healing	for display	;C2/6BE4: 9D 4C 3A     STA $3A4C,X
	LDA $0F								;C2/6BE7: A5 0F        LDA $0F
	ORA #$80			;flag for healing		;C2/6BE9: 09 80        ORA #$80
	STA DisplayDamage+1,X						;C2/6BEB: 9D 4D 3A     STA $3A4D,X
.NextChar
	LDX $10								;C2/6BEE: A6 10        LDX $10
	JSR NextCharOffset						;C2/6BF0: 20 E0 01     JSR $01E0
	STX $10								;C2/6BF3: 86 10        STX $10
	INY 								;C2/6BF5: C8           INY 
	CPY #$0004							;C2/6BF6: C0 04 00     CPY #$0004
	BNE .PartyLoop							;C2/6BF9: D0 AF        BNE $6BAA
	RTS 								;C2/6BFB: 60           RTS 

%org($C26BFC)
;Attack Type 1C (Grant Elemental Absorption, Immunity, or Weakness)
;Param1: Absorb
;Param2: Immune
;Param3: Weak
Attack1C:
	LDX TargetOffset						;C2/6BFC: A6 49        LDX $49
	LDA CharStruct.EAbsorb,X					;C2/6BFE: BD 30 20     LDA $2030,X
	ORA Param1							;C2/6C01: 05 57        ORA $57
	STA CharStruct.EAbsorb,X					;C2/6C03: 9D 30 20     STA $2030,X  (Grant Elemental Absorption)
	LDA CharStruct.EImmune,X					;C2/6C06: BD 32 20     LDA $2032,X
	ORA Param2							;C2/6C09: 05 58        ORA $58
	STA CharStruct.EImmune,X					;C2/6C0B: 9D 32 20     STA $2032,X  (Grant Elemental Immunity)
	LDA CharStruct.EWeak,X						;C2/6C0E: BD 34 20     LDA $2034,X
	ORA Param3							;C2/6C11: 05 59        ORA $59
	STA CharStruct.EWeak,X						;C2/6C13: 9D 34 20     STA $2034,X  (Grant ELemental Weakness)
	RTS 								;C2/6C16: 60           RTS 

%org($C26C17)
;Attack Type 1D (Scan Monster)
;Param1: 	80h miss vs bosses
;		40h scans level
;		20h scans current and max hp
;		08h scans element weakness (and status effects 1 and 2, due to a bug)
;		04h (should scan status effects 1 and 2, but does nothing due to a bug)
;**bug: 	status scan checks the wrong bit
%sub(Attack1D)
Attack1D:
	JSR SetupMsgBoxIndexes	;prepares things in case of x-magic	;C2/6C17: 20 65 99     JSR $9965
	STX $0E			;$7B2C*24				;C2/6C1A: 86 0E        STX $0E
	STY $10			;$7B2C*12, this saved var isn't used	;C2/6C1C: 84 10        STY $10
	LDA Param1							;C2/6C1E: A5 57        LDA $57
	BPL +	  							;C2/6C20: 10 08        BPL $6C2A    (If $57 < 80h)
	LDA BattleMonsterID+1						;C2/6C22: AD 21 40     LDA $4021
	BEQ +	  							;C2/6C25: F0 03        BEQ $6C2A    (If monster index < 255 (i.e. not a boss))
	JMP .Miss 							;C2/6C27: 4C E1 6C     JMP $6CE1    (Scan misses)
+	LDA Param1							;C2/6C2A: A5 57        LDA $57
	AND #$40							;C2/6C2C: 29 40        AND #$40
	BEQ +								;C2/6C2E: F0 16        BEQ $6C46
	LDA #$11		;message to display			;C2/6C30: A9 11        LDA #$11
	STA MessageBoxes,X						;C2/6C32: 9D 5F 3C     STA $3C5F,X
	INC $0E								;C2/6C35: E6 0E        INC $0E
	LDX TargetOffset						;C2/6C37: A6 49        LDX $49
	LDA CharStruct.Level,X						;C2/6C39: BD 02 20     LDA $2002,X  (Scan Level)
	STA MessageBoxData[0].0,Y	;numbers used in message box	;C2/6C3C: 99 BF 3C     STA $3CBF,Y
	TDC 								;C2/6C3F: 7B           TDC 
	STA MessageBoxData[0].1,Y	;these are each 3 bytes long	;C2/6C40: 99 C0 3C     STA $3CC0,Y
	STA MessageBoxData[0].2,Y					;C2/6C43: 99 C1 3C     STA $3CC1,Y
+	LDA Param1							;C2/6C46: A5 57        LDA $57
	AND #$20							;C2/6C48: 29 20        AND #$20
	BEQ +								;C2/6C4A: F0 45        BEQ $6C91
	LDX $0E								;C2/6C4C: A6 0E        LDX $0E
	LDA #$12		;message to display			;C2/6C4E: A9 12        LDA #$12
	STA MessageBoxes,X						;C2/6C50: 9D 5F 3C     STA $3C5F,X
	INC $0E								;C2/6C53: E6 0E        INC $0E
	LDX TargetOffset						;C2/6C55: A6 49        LDX $49
	LDA CharStruct.CmdImmunity,X					;C2/6C57: BD 66 20     LDA $2066,X
	BPL ++  							;C2/6C5A: 10 16        BPL $6C72     (If Target Immune to HP Scan)
	LDA #$FF		;fill results with $FF if scan immune	;C2/6C5C: A9 FF        LDA #$FF
	STA MessageBoxData[1].0,Y					;C2/6C5E: 99 C2 3C     STA $3CC2,Y
	STA MessageBoxData[1].1,Y					;C2/6C61: 99 C3 3C     STA $3CC3,Y
	STA MessageBoxData[1].2,Y					;C2/6C64: 99 C4 3C     STA $3CC4,Y
	STA MessageBoxData[2].0,Y					;C2/6C67: 99 C5 3C     STA $3CC5,Y
	STA MessageBoxData[2].1,Y					;C2/6C6A: 99 C6 3C     STA $3CC6,Y
	STA MessageBoxData[2].2,Y					;C2/6C6D: 99 C7 3C     STA $3CC7,Y
	BRA +								;C2/6C70: 80 1F        BRA $6C91
++	LDA CharStruct.CurHP,X						;C2/6C72: BD 06 20     LDA $2006,X
	STA MessageBoxData[1].0,Y					;C2/6C75: 99 C2 3C     STA $3CC2,Y
	LDA CharStruct.CurHP+1,X					;C2/6C78: BD 07 20     LDA $2007,X
	STA MessageBoxData[1].1,Y					;C2/6C7B: 99 C3 3C     STA $3CC3,Y
	LDA CharStruct.MaxHP,X						;C2/6C7E: BD 08 20     LDA $2008,X
	STA MessageBoxData[2].0,Y					;C2/6C81: 99 C5 3C     STA $3CC5,Y
	LDA CharStruct.MaxHP+1,X					;C2/6C84: BD 09 20     LDA $2009,X
	STA MessageBoxData[2].1,Y					;C2/6C87: 99 C6 3C     STA $3CC6,Y
	TDC 								;C2/6C8A: 7B           TDC 
	STA MessageBoxData[1].2,Y					;C2/6C8B: 99 C4 3C     STA $3CC4,Y
	STA MessageBoxData[2].2,Y					;C2/6C8E: 99 C7 3C     STA $3CC7,Y
+	LDA Param1							;C2/6C91: A5 57        LDA $57
	AND #$08							;C2/6C93: 29 08        AND #$08
	BEQ +								;C2/6C95: F0 1E        BEQ $6CB5
	LDX TargetOffset						;C2/6C97: A6 49        LDX $49
	LDA CharStruct.EWeak,X						;C2/6C99: BD 34 20     LDA $2034,X  (Scan Weakness)
	STA $12								;C2/6C9C: 85 12        STA $12
	LDX $0E								;C2/6C9E: A6 0E        LDX $0E
	TDC 								;C2/6CA0: 7B           TDC 
	TAY 								;C2/6CA1: A8           TAY 
	LDA #$12		;message to display (incremented later)	;C2/6CA2: A9 12        LDA #$12
.EleLoop				;loop through elements
	INC 								;C2/6CA4: 1A           INC 
	ASL $12								;C2/6CA5: 06 12        ASL $12
	BCC ++								;C2/6CA7: 90 06        BCC $6CAF
	STA MessageBoxes,X						;C2/6CA9: 9D 5F 3C     STA $3C5F,X
	INX 								;C2/6CAC: E8           INX 
	INC $0E								;C2/6CAD: E6 0E        INC $0E
++	INY 								;C2/6CAF: C8           INY 
	CPY #$0008							;C2/6CB0: C0 08 00     CPY #$0008
	BNE .EleLoop							;C2/6CB3: D0 EF        BNE $6CA4
+	LDA Param1							;C2/6CB5: A5 57        LDA $57
	AND #$08		;this is a bug and should check for $04	;C2/6CB7: 29 08        AND #$08
	BEQ .Ret							;C2/6CB9: F0 25        BEQ $6CE0
	LDX TargetOffset						;C2/6CBB: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/6CBD: BD 1A 20     LDA $201A,X  (Scan Status Effect 1)
	STA $13								;C2/6CC0: 85 13        STA $13
	LDA CharStruct.Status2,X					;C2/6CC2: BD 1B 20     LDA $201B,X  (Scan Status Effect 2)
	STA $12								;C2/6CC5: 85 12        STA $12
	LDX $0E								;C2/6CC7: A6 0E        LDX $0E
	TDC 								;C2/6CC9: 7B           TDC 
	TAY 								;C2/6CCA: A8           TAY 
	LDA #$00		;message to display (incremented later)	;C2/6CCB: A9 00        LDA #$00
.StatusLoop			;loop through status effects (1 and 2)
	INC 								;C2/6CCD: 1A           INC 
	ASL $12								;C2/6CCE: 06 12        ASL $12
	ROL $13								;C2/6CD0: 26 13        ROL $13
	BCC +								;C2/6CD2: 90 06        BCC $6CDA
	STA MessageBoxes,X						;C2/6CD4: 9D 5F 3C     STA $3C5F,X
	INX 								;C2/6CD7: E8           INX 
	INC $0E								;C2/6CD8: E6 0E        INC $0E
+	INY 								;C2/6CDA: C8           INY 
	CPY #$0010							;C2/6CDB: C0 10 00     CPY #$0010
	BNE .StatusLoop							;C2/6CDE: D0 ED        BNE $6CCD
.Ret	RTS								;C2/6CE0: 60           RTS
									;
.Miss	INC AtkMissed							;C2/6CE1: E6 56        INC $56
	RTS								;C2/6CE3: 60           RTS
%endsub()

%org($C26CE4)
;Attack Type 1E (Drag)
;Sets battle speed
Attack1E:
	LDX #$0004							;C2/6CE4: A2 04 00     LDX #$0004
	LDA ROMBattleSpeedTable,X					;C2/6CE7: BF F2 EC D0  LDA $D0ECF2,X
	STA ATBWaitTime							;C2/6CEB: 8D D6 3E     STA $3ED6
	RTS 								;C2/6CEE: 60           RTS 

%org($C26CEF)
;Attack Type 1F (Void)
;Param1: Success rate
Attack1F:
	LDA EncounterInfo.Flags						;C2/6CEF: AD FE 3E     LDA $3EFE
	AND #$40   		;can't use void				;C2/6CF2: 29 40        AND #$40     Check if Boss Battle
	BNE .Miss							;C2/6CF4: D0 35        BNE $6D2B
	JSR Random_0_99							;C2/6CF6: 20 A2 02     JSR $02A2    (0..99)
	CMP Param1							;C2/6CF9: C5 57        CMP $57
	BCS .Miss							;C2/6CFB: B0 2E        BCS $6D2B
	LDA Void							;C2/6CFD: AD E6 7B     LDA $7BE6
	ORA #$40   							;C2/6D00: 09 40        ORA #$40      OR $7BE6 with 40h
	STA Void							;C2/6D02: 8D E6 7B     STA $7BE6
	TDC 								;C2/6D05: 7B           TDC 
	TAX 								;C2/6D06: AA           TAX 
	TAY 								;C2/6D07: A8           TAY 
.Loop	;X= CharStruct Offset, Y = Timer Offset, $0E loop index (hopefully initialized to 0 elsewhere?)
	LDA CharStruct.Status4,X					;C2/6D08: BD 1D 20     LDA $201D,X
	AND #$FB		;clear singing status			;C2/6D0B: 29 FB        AND #$FB
	STA CharStruct.Status4,X					;C2/6D0D: 9D 1D 20     STA $201D,X
	TDC 								;C2/6D10: 7B           TDC 
	STA EnableTimer.Sing,Y						;C2/6D11: 99 F9 3C     STA $3CF9,Y
	STA CurrentTimer.Sing,Y						;C2/6D14: 99 7D 3D     STA $3D7D,Y
	STA InitialTimer.Sing,Y						;C2/6D17: 99 01 3E     STA $3E01,Y
	JSR NextCharOffset	;next CharStruct			;C2/6D1A: 20 E0 01     JSR $01E0
	CLC 								;C2/6D1D: 18           CLC 
	TYA 								;C2/6D1E: 98           TYA 
	ADC #$0B		;next char for timers			;C2/6D1F: 69 0B        ADC #$0B
	TAY 								;C2/6D21: A8           TAY 
	INC $0E								;C2/6D22: E6 0E        INC $0E
	LDA $0E								;C2/6D24: A5 0E        LDA $0E
	CMP #$0C		;12					;C2/6D26: C9 0C        CMP #$0C
	BNE .Loop		;12 loops, one for each participant	;C2/6D28: D0 DE        BNE $6D08
	RTS 								;C2/6D2A: 60           RTS 
									
.Miss	INC AtkMissed							;C2/6D2B: E6 56        INC $56
	RTS 								;C2/6D2D: 60           RTS 

%org($C26D2E)
;Attack Type 20 (Exit)
;Param1: Success Rate
Attack20:
	LDA EncounterInfo.FleeChance					;C2/6D2E: AD F0 3E     LDA $3EF0
	BMI .Miss		;80h = can't run			;C2/6D31: 30 0D        BMI $6D40  (Check if can run)
	JSR Random_0_99  						;C2/6D33: 20 A2 02     JSR $02A2  (0..99)
	CMP Param1							;C2/6D36: C5 57        CMP $57
	BCS .Miss							;C2/6D38: B0 06        BCS $6D40
	LDA #$80							;C2/6D3A: A9 80        LDA #$80
	STA FleeSuccess							;C2/6D3C: 8D E8 7B     STA $7BE8
	RTS 								;C2/6D3F: 60           RTS 
								
.Miss	INC AtkMissed							;C2/6D40: E6 56        INC $56
	JSR SetupMsgBoxIndexes						;C2/6D42: 20 65 99     JSR $9965
	LDA #$20		;message to display			;C2/6D45: A9 20        LDA #$20
	STA MessageBoxes,X						;C2/6D47: 9D 5F 3C     STA $3C5F,X
	RTS 								;C2/6D4A: 60           RTS 

%org($C26D4B)
;Attack Type 21 (Reset)
Attack21:
	LDA TerrainType							;C2/6D4B: AD F2 04     LDA $04F2
	CMP #$1F		;special case, changes terrain on reset	;C2/6D4E: C9 1F        CMP #$1F
	BNE +			;.. likely neoexdeath back to tree	;C2/6D50: D0 05        BNE $6D57
	LDA #$1C							;C2/6D52: A9 1C        LDA #$1C
	STA TerrainType							;C2/6D54: 8D F2 04     STA $04F2
+	INC ResetBattle							;C2/6D57: EE D8 7C     INC $7CD8
	RTS 								;C2/6D5A: 60           RTS 

%org($C26D5B)
;Attack Type 22 (Quick)
Attack22:
	LDA AttackerIndex						;C2/6D5B: A5 47        LDA $47
	CMP #$04   		;4+ is monster				;C2/6D5D: C9 04        CMP #$04    (Only works on party members)
	BCS .Miss							;C2/6D5F: B0 05        BCS $6D66
	LDA QuickTurns  	;miss if already Quick			;C2/6D61: AD 51 7C     LDA $7C51   (Check if already casted Quick)
	BEQ +								;C2/6D64: F0 03        BEQ $6D69
.Miss	INC AtkMissed							;C2/6D66: E6 56        INC $56
	RTS 								;C2/6D68: 60           RTS 
									;
+	TDC 								;C2/6D69: 7B           TDC 
	TAX 								;C2/6D6A: AA           TAX 
.Loop				;Freezes time for everyone
	INC QuickTimeFrozen,X						;C2/6D6B: FE AB 3E     INC $3EAB,X
	INX 								;C2/6D6E: E8           INX 
	CPX #$000C							;C2/6D6F: E0 0C 00     CPX #$000C
	BNE .Loop							;C2/6D72: D0 F7        BNE $6D6B
	
	LDA AttackerIndex						;C2/6D74: A5 47        LDA $47
	STA QuickCharIndex						;C2/6D76: 8D B6 7C     STA $7CB6
	TAX 								;C2/6D79: AA           TAX 
	STZ QuickTimeFrozen,X	;unfreeze Quick guy			;C2/6D7A: 9E AB 3E     STZ $3EAB,X
	LDA #$03		;3 turns because this one counts	;C2/6D7D: A9 03        LDA #$03
	STA QuickTurns							;C2/6D7F: 8D 51 7C     STA $7C51
	RTS 								;C2/6D82: 60           RTS 

%org($C26D83)
%sub(Attack23)
;Attack Type 23 (Earth Wall)
;Param2: Spell Power
Attack23:
	LDA EarthWallHP 						;C2/6D83: AD 1E 7C     LDA $7C1E   (Miss if already a current Wall)
	ORA EarthWallHP+1						;C2/6D86: 0D 1F 7C     ORA $7C1F
	BNE .Miss							;C2/6D89: D0 1C        BNE $6DA7
	LDA Param2							;C2/6D8B: A5 58        LDA $58
	STA $24								;C2/6D8D: 85 24        STA $24
	LDA Level 							;C2/6D8F: AD E5 7B     LDA $7BE5   (Level)
	STA $25								;C2/6D92: 85 25        STA $25
	JSR Multiply_8bit  						;C2/6D94: 20 F1 00     JSR $00F1   (Level * Parameter 2)
	CLC 								;C2/6D97: 18           CLC 
	LDA $26			;add 1000 in 8 bit mode for some reason	;C2/6D98: A5 26        LDA $26
	ADC #$E8		;232					;C2/6D9A: 69 E8        ADC #$E8
	STA EarthWallHP							;C2/6D9C: 8D 1E 7C     STA $7C1E
	LDA $27								;C2/6D9F: A5 27        LDA $27
	ADC #$03		;768					;C2/6DA1: 69 03        ADC #$03
	STA EarthWallHP+1						;C2/6DA3: 8D 1F 7C     STA $7C1F   Wall HP = 1000 + (Level * Parameter 2)
	RTS 								;C2/6DA6: 60           RTS 

.Miss	INC.w AtkMissed							;C2/6DA7: EE 56 00     INC $0056
	RTS 								;C2/6DAA: 60           RTS 
%endsub()

%org($C26DAB)
;Attack Type 24 (Potions)
Attack24:
	JSR ItemFormula							;C2/6DAB: 20 52 82     JSR $8252  (Healing Damage Formula)
	JSR MedicineMod 						;C2/6DAE: 20 CF 84     JSR $84CF  (Medicine modifier to damage)
	JMP CureTarget 							;C2/6DB1: 4C C1 88     JMP $88C1  (Heal or Damage Undead)

%org($C26DB4)
;Attack Type 25 (Ethers)
Attack25:
	JSR ItemFormula							;C2/6DB4: 20 52 82     JSR $8252  (Healing damage formula)
	JSR MedicineMod							;C2/6DB7: 20 CF 84     JSR $84CF  (Medicine modifier to damage)
	JMP MPHeal							;C2/6DBA: 4C DE 89     JMP $89DE  (MP Heal)

%org($C26DBD)
;Attack Type 26 (Full Restore)
;Param1:	80h Restore Full HP
;		40h Restore Full MP
;		20h Restore Half of max HP and MP
Attack26:
	LDA Param1							;C2/6DBD: A5 57        LDA $57
	BPL +								;C2/6DBF: 10 03        BPL $6DC4
	JSR FullCureTarget						;C2/6DC1: 20 DE 88     JSR $88DE  (Full Heal or Reduce HP to Critical for Undead)
+	LDA Param1							;C2/6DC4: A5 57        LDA $57
	AND #$40							;C2/6DC6: 29 40        AND #$40
	BEQ +								;C2/6DC8: F0 03        BEQ $6DCD
	JSR FullMPHeal							;C2/6DCA: 20 F7 89     JSR $89F7  (Fully Heal MP)
+	LDA Param1							;C2/6DCD: A5 57        LDA $57
	AND #$20							;C2/6DCF: 29 20        AND #$20
	BEQ .Ret							;C2/6DD1: F0 03        BEQ $6DD6
	JSR RestoreHalfMax	;restores hp and mp			;C2/6DD3: 20 4D 8B     JSR $8B4D  (Calculate Damage = Target Max HP / 2)
.Ret	RTS 								;C2/6DD6: 60           RTS 

%org($C26DD7)
;Attack Type 27 (Status Effects ignoring Immunity)
;Param1: Status1
;Param2: Status2
;Param3: Status3
Attack27:
	LDA #$5A		;90					;C2/6DD7: A9 5A        LDA #$5A
	STA StatusDuration						;C2/6DD9: 8D D8 3E     STA $3ED8  (Status Duration = 90)
	JSR ApplyStatus3Bypass						;C2/6DDC: 20 CD 90     JSR $90CD  (Apply Status 3 to Target, bypass Status Immunity)
	LDA Param2							;C2/6DDF: A5 58        LDA $58
	STA Param3							;C2/6DE1: 85 59        STA $59
	JSR ApplyStatus2Bypass						;C2/6DE3: 20 39 90     JSR $9039  (Apply Status 2 to Target, bypass Status Immunity)
	LDA Param1							;C2/6DE6: A5 57        LDA $57
	STA Param3							;C2/6DE8: 85 59        STA $59
	JMP ApplyStatus1Bypass						;C2/6DEA: 4C 2B 90     JMP $902B  (Apply Status 1 to Target, bypass Status Immunity)

%org($C26DED)
%sub(Attack28)
;Attack Type 28 (Direct Magic Damage)
;Param1: Hit%
;Damage = Param2 + Param3*256
Attack28:
	JSR HitMagic 							;C2/6DED: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed							;C2/6DF0: A5 56        LDA $56
	BNE .Ret							;C2/6DF2: D0 1D        BNE $6E11
	LDA Param2							;C2/6DF4: A5 58        LDA $58
	TAX 								;C2/6DF6: AA           TAX 
	STX $0E								;C2/6DF7: 86 0E        STX $0E
	LDA Param3							;C2/6DF9: A5 59        LDA $59
	REP #$20							;C2/6DFB: C2 20        REP #$20
	JSR ShiftMultiply_256						;C2/6DFD: 20 B1 01     JSR $01B1
	CLC 								;C2/6E00: 18           CLC 
	ADC $0E   							;C2/6E01: 65 0E        ADC $0E     (Damage = Parameter 3 & Parameter 2)
	CMP #$270F		;cap at 9999				;C2/6E03: C9 0F 27     CMP #$270F
	BCC +								;C2/6E06: 90 03        BCC $6E0B
	LDA #$270F							;C2/6E08: A9 0F 27     LDA #$270F
+	STA DamageToTarget						;C2/6E0B: 8D 6D 7B     STA $7B6D    (Max Damage = 9999)
	TDC 								;C2/6E0E: 7B           TDC 
	SEP #$20							;C2/6E0F: E2 20        SEP #$20
.Ret	RTS 								;C2/6E11: 60           RTS 
%endsub()

%org($C26E12)
;Attack Type 29 (Apply Status 4, miss vs Heavy)
;Param1: Hit%
;Param2: Duration
;Param3: Status 4
Attack29:
	LDX TargetOffset						;C2/6E12: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/6E14: BD 65 20     LDA $2065,X
	AND #$20   			;heavy				;C2/6E17: 29 20        AND #$20      (Target Creature Type = Heavy?)
	BNE .Miss							;C2/6E19: D0 0F        BNE $6E2A
	JSR HitMagic  							;C2/6E1B: 20 F6 7E     JSR $7EF6     (Hit Determination for Magic)
	LDA AtkMissed							;C2/6E1E: A5 56        LDA $56
	BNE .Ret							;C2/6E20: D0 0A        BNE $6E2C
	LDA Param2							;C2/6E22: A5 58        LDA $58
	STA StatusDuration						;C2/6E24: 8D D8 3E     STA $3ED8     (Status Duration = Parameter 2)
	JMP ApplyStatus4						;C2/6E27: 4C 05 8E     JMP $8E05     (Apply Status Effect 4)
.Miss	INC AtkMissed    						;C2/6E2A: E6 56        INC $56       (Attack Misses)
.Ret	RTS 								;C2/6E2C: 60           RTS 

%org($C26E2D)
;Attack Type 2A (% of Max HP)
;Param1: Element
;Param2: Fraction/16
;Param3: HP Leak Duration
%sub(Attack2A)
Attack2A:
	LDA Param1						;C2/6E2D: A5 57        LDA $57
	STA AtkElement						;C2/6E2F: 85 4D        STA $4D
	JSR ElementDamageModPercent				;C2/6E31: 20 B5 87     JSR $87B5  (Magic Attack Element Modifiers (ii))
	LDA AtkMissed						;C2/6E34: A5 56        LDA $56
	BNE .Ret						;C2/6E36: D0 13        BNE $6E4B
	JSR CalcDamageMaxHP					;C2/6E38: 20 4E 8A     JSR $8A4E  (Calculate Damage from % of Target Max HP)
	LDA Param3						;C2/6E3B: A5 59        LDA $59
	BEQ .Ret						;C2/6E3D: F0 0C        BEQ $6E4B
	LDA Param3						;C2/6E3F: A5 59        LDA $59
	STA StatusDuration					;C2/6E41: 8D D8 3E     STA $3ED8   (Status Duration = Parameter 3)
	LDA #$08		;HP Leak			;C2/6E44: A9 08        LDA #$08
	STA Param3						;C2/6E46: 85 59        STA $59
	JSR ApplyStatus4					;C2/6E48: 20 05 8E     JSR $8E05   (Apply Status Effect 4)
.Ret	RTS 							;C2/6E4B: 60           RTS 
%endsub()

%org($C26E4C)
;Attack Type 2B (Damage % on Attacker Current HP)
;Param1: Element
;Param2: Fraction/16
;Param3: Status 1 (to attacker)
Attack2B:
	LDA Param1						;C2/6E4C: A5 57        LDA $57
	STA AtkElement						;C2/6E4E: 85 4D        STA $4D
	JSR ElementDamageModPercent				;C2/6E50: 20 B5 87     JSR $87B5   (Elemental Modifiers to Damage)
	LDA AtkMissed						;C2/6E53: A5 56        LDA $56
	BNE .Ret						;C2/6E55: D0 06        BNE $6E5D
	JSR CalcDamageAttackerCurHP				;C2/6E57: 20 9D 8A     JSR $8A9D   (Calculate Damage from % of Attacker Current HP)
	JSR ApplyStatus1AttackerBypass				;C2/6E5A: 20 DB 90     JSR $90DB   (Apply Status 1 to Attacker, bypass Status Immunity)
.Ret	RTS 							;C2/6E5D: 60           RTS 

%org($C26E5E)
;Attack Type 2C (50/50 chance of Status 1 or Status 2)
;Param1: Status 1
;Param2: Status 2 Duration
;Param3: Status 2
Attack2C:
	JSR Random_0_99						;C2/6E5E: 20 A2 02     JSR $02A2  (0..99)
	CMP #$32		;50				;C2/6E61: C9 32        CMP #$32
	BCS .S2							;C2/6E63: B0 07        BCS $6E6C
	LDA Param1						;C2/6E65: A5 57        LDA $57
	STA Param3						;C2/6E67: 85 59        STA $59
	JMP ApplyStatus1					;C2/6E69: 4C AC 8C     JMP $8CAC  (Apply Status Effect 1)
.S2	JSR CalcStatusDuration					;C2/6E6C: 20 7D 8B     JSR $8B7D  (Status Effect Duration Determination)
	JMP ApplyStatus2					;C2/6E6F: 4C 2E 8D     JMP $8D2E  (Apply Status Effect 2)

%org($C26E72)
;Attack Type 2D (Ground Magic)
;Param2: Spell Power
;Param3: Element
Attack2D:
	JSR CheckFloat 						;C2/6E72: 20 03 7E     JSR $7E03  (Check for Target Float to Miss)
	LDA AtkMissed						;C2/6E75: A5 56        LDA $56
	BNE .Miss						;C2/6E77: D0 1A        BNE $6E93
	LDA Param3						;C2/6E79: A5 59        LDA $59
	STA AtkElement						;C2/6E7B: 85 4D        STA $4D
	JSR NormalMagicDamage					;C2/6E7D: 20 30 7F     JSR $7F30  (Magic damage formula)
	JSR MultiTargetMod 					;C2/6E80: 20 66 83     JSR $8366  (Multitargetting Modifications to Damage)
	JSR TargetStatusModMag					;C2/6E83: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JSR ElementUpMod					;C2/6E86: 20 6D 86     JSR $866D  (Magic Element Up Modifers)
	JSR ElementDamageModMag					;C2/6E89: 20 6E 87     JSR $876E  (Magic Attack Element Modifiers)
	LDA AtkMissed						;C2/6E8C: A5 56        LDA $56
	BNE .Miss						;C2/6E8E: D0 03        BNE $6E93
	JSR CalcFinalDamage					;C2/6E90: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
.Miss	LDA MagicNull						;C2/6E93: AD 97 7C     LDA $7C97
	BEQ .Ret						;C2/6E96: F0 02        BEQ $6E9A
	STZ AtkMissed						;C2/6E98: 64 56        STZ $56
.Ret	RTS 							;C2/6E9A: 60           RTS 

%org($C26E9B)
;Attack Type 2E (Phys Magic w/ Status 1) (Reaper's Sword)
;Param1: Hit%
;Param2: Spell Power
;Param3: Status 1
Attack2E:
	JSR HitPhysicalMagic					;C2/6E9B: 20 1B 7F     JSR $7F1B  (Hit Determination for physical Magic)
	LDA AtkMissed						;C2/6E9E: A5 56        LDA $56
	BNE .Ret						;C2/6EA0: D0 0E        BNE $6EB0
	JSR PhysicalMagicDamage					;C2/6EA2: 20 C2 7F     JSR $7FC2  (Physical magic damage formula)
	JSR TargetStatusModPhys					;C2/6EA5: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR CalcFinalDamage					;C2/6EA8: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	JSR ApplyStatus1					;C2/6EAB: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
	STZ AtkMissed						;C2/6EAE: 64 56        STZ $56
.Ret	RTS 							;C2/6EB0: 60           RTS 
;

%org($C26EB1)
;Attack Type 2F (Status 1 to Creature Type, unused)
;Param1: Creature Type
;Param3: Status 1
%sub(Attack2F)
Attack2F:
	JSR CheckCreatureType					;C2/6EB1: 20 5B 7E     JSR $7E5B  (Creature Type Hit Determination)
	LDA AtkMissed						;C2/6EB4: A5 56        LDA $56
	BNE .Ret						;C2/6EB6: D0 03        BNE $6EBB
	JSR ApplyStatus1					;C2/6EB8: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
.Ret	RTS 							;C2/6EBB: 60           RTS 
%endsub()

%org($C26EBC)
;Attack Type 30 (Fists)
;Param1: Crit%
Attack30:
	JSR SetHit100andTargetEvade				;C2/6EBC: 20 47 7C     JSR $7C47  (Hit = 100, Evade = Evade)
	JSR HitPhysical						;C2/6EBF: 20 BE 7E     JSR $7EBE  (Hit Determination for physical)
	LDA AtkMissed						;C2/6EC2: A5 56        LDA $56
	BEQ .Hit						;C2/6EC4: F0 05        BEQ $6ECB
	LDA #$80						;C2/6EC6: A9 80        LDA #$80
	STA AtkMissed						;C2/6EC8: 85 56        STA $56
	RTS 							;C2/6ECA: 60           RTS 
.Hit								;
	JSR FistDamage 						;C2/6ECB: 20 3E 80     JSR $803E  (Fists Damage Formula)
	JSR BackRowMod 						;C2/6ECE: 20 9B 83     JSR $839B  (Check Back Row Modifications)
	JSR CommandMod 						;C2/6ED1: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR TargetStatusModPhys					;C2/6ED4: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys				;C2/6ED7: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JSR CheckCrit 						;C2/6EDA: 20 DF 87     JSR $87DF  (Check for Critical)
	JSR CalcFinalDamage					;C2/6EDD: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	RTS 							;C2/6EE0: 60           RTS 

%org($C26EE1)
;Attack Type 31 (Swords)
;Param1: Element
;Param2/3: Proc% and Proc, not handled here
%sub(Attack31)
Attack31:
	JSR SetHit100andTargetEvade					;C2/6EE1: 20 47 7C     JSR $7C47  (Hit = 100%, Evade = Evade%)
	JSR HitPhysical							;C2/6EE4: 20 BE 7E     JSR $7EBE  Hit% Determination for physical
	LDA AtkMissed							;C2/6EE7: A5 56        LDA $56
	BNE .Miss							;C2/6EE9: D0 2E        BNE $6F19
.Hit	JSR SwordDamage							;C2/6EEB: 20 FC 7F     JSR $7FFC  (Sword Damage Formula)
.Row	JSR BackRowMod							;C2/6EEE: 20 9B 83     JSR $839B  (Check Back Row Modifications)
.Cmd	JSR CommandMod							;C2/6EF1: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR DoubleGripMod						;C2/6EF4: 20 30 84     JSR $8430  (Check Double Grip Modifier)
	JSR TargetStatusModPhys						;C2/6EF7: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys					;C2/6EFA: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
.MSword	JSR MagicSwordMod						;C2/6EFD: 20 84 86     JSR $8684  (Check Magic Sword Modifiers)
.Finish	LDA TargetDead							;C2/6F00: A5 61        LDA $61
	BNE .Ret							;C2/6F02: D0 19        BNE $6F1D
	LDA AtkMissed							;C2/6F04: A5 56        LDA $56
	BNE .Miss							;C2/6F06: D0 11        BNE $6F19
	LDA Param1							;C2/6F08: A5 57        LDA $57
	STA AtkElement  						;C2/6F0A: 85 4D        STA $4D    
	JSR ElementDamageModPhys					;C2/6F0C: 20 34 87     JSR $8734  (Check Attack Element Modifiers)
	LDA AtkMissed							;C2/6F0F: A5 56        LDA $56
	BNE .Miss							;C2/6F11: D0 06        BNE $6F19
	JSR CalcFinalDamageMSword					;C2/6F13: 20 11 88     JSR $8811  (Calculate Final Damage)
	JMP ApplyMSwordStatus						;C2/6F16: 4C CF 8B     JMP $8BCF  (Check for Magic Sword Status Effects)
.Miss	LDA #$80							;C2/6F19: A9 80        LDA #$80
	STA AtkMissed							;C2/6F1B: 85 56        STA $56    (Attack Misses, Set $56 to 128)
.Ret	RTS 								;C2/6F1D: 60           RTS 
%endsub()

%org($C26F1E)
;Attack Type 32 (Knives)
;Param1: Element
;Param2/3: Proc% and Proc, not handled here
Attack32:
	JSR SetHit100andHalfTargetEvade					;C2/6F1E: 20 53 7C     JSR $7C53  Hit = 100%, Evade = Evade/2
	JSR HitPhysical							;C2/6F21: 20 BE 7E     JSR $7EBE  Hit% Determination for physical
	LDA AtkMissed							;C2/6F24: A5 56        LDA $56
	BNE .Miss							;C2/6F26: D0 2B        BNE $6F53
	JSR KnifeDamage							;C2/6F28: 20 D4 80     JSR $80D4  (Knives Damage Formula)
	JSR BackRowMod							;C2/6F2B: 20 9B 83     JSR $839B  (Check Back Row Modifications)
	JSR CommandMod 							;C2/6F2E: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR TargetStatusModPhys						;C2/6F31: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys					;C2/6F34: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JSR MagicSwordMod						;C2/6F37: 20 84 86     JSR $8684  (Check Magic Sword Modifiers)
	LDA TargetDead							;C2/6F3A: A5 61        LDA $61
	BNE .Ret							;C2/6F3C: D0 19        BNE $6F57
	LDA AtkMissed							;C2/6F3E: A5 56        LDA $56
	BNE .Miss							;C2/6F40: D0 11        BNE $6F53
	LDA Param1							;C2/6F42: A5 57        LDA $57
	STA AtkElement							;C2/6F44: 85 4D        STA $4D
	JSR ElementDamageModPhys					;C2/6F46: 20 34 87     JSR $8734  (Check Attack Element Modifiers)
	LDA AtkMissed							;C2/6F49: A5 56        LDA $56
	BNE .Miss							;C2/6F4B: D0 06        BNE $6F53
	JSR CalcFinalDamageMSword					;C2/6F4D: 20 11 88     JSR $8811  (Calculate Final Damage)
	JMP ApplyMSwordStatus 						;C2/6F50: 4C CF 8B     JMP $8BCF  (Check for Magic Sword Status Effects)
.Miss	LDA #$80							;C2/6F53: A9 80        LDA #$80
	STA AtkMissed							;C2/6F55: 85 56        STA $56
.Ret	RTS 								;C2/6F57: 60           RTS 

%org($C26F58)
;Attack Type 33 (Spears)
;Param1: Element
;Param2/3: Proc% and Proc, not handled here
%sub(Attack33)
Attack33:
	JSR SetHit100andTargetEvade 					;C2/6F58: 20 47 7C     JSR $7C47  (Hit = 100%, Evade = Evade%)
	JSR HitPhysical  						;C2/6F5B: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/6F5E: A5 56        LDA $56
	BNE .Miss							;C2/6F60: D0 1D        BNE $6F7F
	JSR SwordDamage 						;C2/6F62: 20 FC 7F     JSR $7FFC  (Sword Damage Formula)
	JSR CommandMod  						;C2/6F65: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR CheckJump  							;C2/6F68: 20 52 84     JSR $8452  (Check for Jump?)
	JSR TargetStatusModPhys 					;C2/6F6B: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys  					;C2/6F6E: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	LDA Param1							;C2/6F71: A5 57        LDA $57
	STA AtkElement							;C2/6F73: 85 4D        STA $4D
	JSR ElementDamageModPhys					;C2/6F75: 20 34 87     JSR $8734  (Check Attack Element Modifiers)
	LDA AtkMissed							;C2/6F78: A5 56        LDA $56
	BNE .Miss							;C2/6F7A: D0 03        BNE $6F7F
	JMP CalcFinalDamage  						;C2/6F7C: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/6F7F: A9 80        LDA #$80
	STA AtkMissed							;C2/6F81: 85 56        STA $56
.Ret	RTS 								;C2/6F83: 60           RTS 
%endsub()

%org($C26F84)
;Attack Type 34 (Axes)
;Param1: Hit%
;Param2/3: Proc% and Proc, not handled here
%sub(Attack34)
Attack34:
	JSR SetHitParam1andTargetEvade					;C2/6F84: 20 60 7C     JSR $7C60  (Hit = 1st Parameter, Evade = Evade)
	JSR HitPhysical							;C2/6F87: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/6F8A: A5 56        LDA $56
	BNE .Miss							;C2/6F8C: D0 15        BNE $6FA3
	JSR AxeDamage							;C2/6F8E: 20 2B 81     JSR $812B  (Axes damage formula)
	JSR BackRowMod							;C2/6F91: 20 9B 83     JSR $839B  (Check Back Row Modifications)
	JSR CommandMod							;C2/6F94: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR DoubleGripMod						;C2/6F97: 20 30 84     JSR $8430  (Check Double Grip Modifiers to Damage)
	JSR TargetStatusModPhys 					;C2/6F9A: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys					;C2/6F9D: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JMP CalcFinalDamage  						;C2/6FA0: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/6FA3: A9 80        LDA #$80
	STA AtkMissed							;C2/6FA5: 85 56        STA $56
.Ret	RTS 								;C2/6FA7: 60           RTS 
%endsub()

%org($C26FA8)
;Attack Type 35 (Bows with Status)
;Param1: 	Hit%
;Param2:  	High Bit determines Status type 1 or 2
;		Lower 7 bits are Status Hit%
;Param3: 	Status (type 1 or 2 depending on bit above)
Attack35:
	JSR SetHitParam1andHalfTargetEvade				;C2/6FA8: 20 6C 7C     JSR $7C6C  (Hit = 1st Parameter, Evade = Evade/2)
	JSR HitPhysical							;C2/6FAB: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/6FAE: A5 56        LDA $56
	BNE .Miss							;C2/6FB0: D0 12        BNE $6FC4
	JSR KnifeDamage							;C2/6FB2: 20 D4 80     JSR $80D4  (Knives Damage Formula)
	JSR CommandMod							;C2/6FB5: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR TargetStatusModPhys						;C2/6FB8: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys					;C2/6FBB: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JSR CalcFinalDamage						;C2/6FBE: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	JMP ApplyConditionalStatus					;C2/6FC1: 4C F9 8B     JMP $8BF9  (Apply Bow Status Effects)
.Miss	LDA #$80							;C2/6FC4: A9 80        LDA #$80
	STA AtkMissed							;C2/6FC6: 85 56        STA $56
.Ret	RTS 								;C2/6FC8: 60           RTS 

%org($C26FC9)
;Attack Type 36 (Bows with Element)
;Param1: 	Hit%
;Param2:  	Crit%
;Param3: 	Element
Attack36:
	JSR SetHitParam1andHalfTargetEvade				;C2/6FC9: 20 6C 7C     JSR $7C6C  (Hit = 1st Parameter, Evade = Evade/2)
	JSR HitPhysical							;C2/6FCC: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/6FCF: A5 56        LDA $56
	BNE .Miss							;C2/6FD1: D0 21        BNE $6FF4  
	JSR KnifeDamage							;C2/6FD3: 20 D4 80     JSR $80D4  (Knives Damage Formula)
	JSR CommandMod							;C2/6FD6: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR TargetStatusModPhys						;C2/6FD9: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys					;C2/6FDC: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	LDA Param3							;C2/6FDF: A5 59        LDA $59
	STA AtkElement							;C2/6FE1: 85 4D        STA $4D
	JSR ElementDamageModPhys					;C2/6FE3: 20 34 87     JSR $8734  (Attack Element Modifiers)
	LDA AtkMissed							;C2/6FE6: A5 56        LDA $56
	BNE .Miss							;C2/6FE8: D0 0A        BNE $6FF4
	LDA Param2							;C2/6FEA: A5 58        LDA $58
	STA Param1		;move Crit% to Param1			;C2/6FEC: 85 57        STA $57
	JSR CheckCrit		;because crit routine expects it there	;C2/6FEE: 20 DF 87     JSR $87DF  (Check for Critical Hit)
	JMP CalcFinalDamage						;C2/6FF1: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/6FF4: A9 80        LDA #$80
	STA AtkMissed							;C2/6FF6: 85 56        STA $56
.Ret	RTS 								;C2/6FF8: 60           RTS 

%org($C26FF9)
;Attack Type 37 (Katanas)
;Param1: Crit%
;Param2/3: Proc% and Proc, not handled here
%sub(Attack37)
Attack37:
	JSR SetHit100andTargetEvade 					;C2/6FF9: 20 47 7C     JSR $7C47  (Hit = 100%, Evade = Evade%)
	JSR HitPhysical 						;C2/6FFC: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/6FFF: A5 56        LDA $56
	BNE .Miss							;C2/7001: D0 18        BNE $701B
	JSR SwordDamage							;C2/7003: 20 FC 7F     JSR $7FFC  (Sword damage formula)
	JSR BackRowMod 							;C2/7006: 20 9B 83     JSR $839B  (Check Back Row Modifications)
	JSR CommandMod 							;C2/7009: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR DoubleGripMod 						;C2/700C: 20 30 84     JSR $8430  (Check Double Grip Modifiers to Damage)
	JSR TargetStatusModPhys 					;C2/700F: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys 					;C2/7012: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JSR CheckCrit 							;C2/7015: 20 DF 87     JSR $87DF  (Check for Critical Hit)
	JMP CalcFinalDamage						;C2/7018: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/701B: A9 80        LDA #$80
	STA AtkMissed							;C2/701D: 85 56        STA $56
	RTS 								;C2/701F: 60           RTS 
%endsub()

%org($C27020)
;Attack Type 38 (Whips)
;Param1: Hit%
;Param2/3: Proc% and Proc, not handled here
Attack38:
	JSR SetHitParam1andTargetEvade					;C2/7020: 20 60 7C     JSR $7C60  (Hit = 1st Parameter, Evade = Evade)
	JSR HitPhysical							;C2/7023: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/7026: A5 56        LDA $56
	BNE .Miss							;C2/7028: D0 0F        BNE $7039
	JSR KnifeDamage							;C2/702A: 20 D4 80     JSR $80D4  (Knives Damage Formula)
	JSR CommandMod							;C2/702D: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR TargetStatusModPhys						;C2/7030: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys 					;C2/7033: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JMP CalcFinalDamage						;C2/7036: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/7039: A9 80        LDA #$80
	STA AtkMissed							;C2/703B: 85 56        STA $56
	RTS 								;C2/703D: 60           RTS 

%org($C2703E)
;Attack Type 39 (Bells)
Attack39:
	JSR CheckVoid							;C2/703E: 20 F1 7D     JSR $7DF1  (Check for Void to Miss)
	LDA AtkMissed							;C2/7041: A5 56        LDA $56
	BNE .Miss							;C2/7043: D0 09        BNE $704E
	JSR BellDamage							;C2/7045: 20 6F 81     JSR $816F  (Bells damage formula)
	JSR TargetStatusModMag						;C2/7048: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JMP CalcFinalDamage						;C2/704B: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/704E: A9 80        LDA #$80
	STA AtkMissed							;C2/7050: 85 56        STA $56
	RTS 								;C2/7052: 60           RTS 

%org($C27053)
;Attack Type 3A (Long Reach Axes)
;Param1: Hit%
;Param2/3: Proc% and Proc, not handled here
%sub(Attack3A)
Attack3A:
	JSR SetHitParam1andTargetEvade					;C2/7053: 20 60 7C     JSR $7C60  (Hit = 1st Parameter, Evade = Evade)
	JSR HitPhysical							;C2/7056: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/7059: A5 56        LDA $56
	BNE .Miss							;C2/705B: D0 12        BNE $706F
	JSR AxeDamage							;C2/705D: 20 2B 81     JSR $812B  (Axes damage formula)
	JSR CommandMod							;C2/7060: 20 BD 83     JSR $83BD  (Check for Command Modifiers)
	JSR DoubleGripMod						;C2/7063: 20 30 84     JSR $8430  (Double Grip Modifiers to Damage)
	JSR TargetStatusModPhys						;C2/7066: 20 12 85     JSR $8512  (Check Target Status Effect Modifiers to Physical Damage)
	JSR AttackerStatusModPhys					;C2/7069: 20 33 85     JSR $8533  (Check Attacker Status Effect Modifiers to Physical Damage)
	JMP CalcFinalDamage						;C2/706C: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/706F: A9 80        LDA #$80
	STA AtkMissed							;C2/7071: 85 56        STA $56
	RTS 								;C2/7073: 60           RTS 
%endsub()

%org($C27074)
;Attack Type 3B (Rods)
;Param1: Hit%
;Param3: Element
Attack3B:
	JSR SetHitParam1andTargetMagicEvade				;C2/7074: 20 79 7C     JSR $7C79  (Hit = 1st Paramter, Evade = Magic Evade)
	JSR CheckAegis							;C2/7077: 20 97 7C     JSR $7C97  (Aegis Shield Check)
	JSR TargetMHitMod						;C2/707A: 20 8B 7D     JSR $7D8B  (Target Status Effect Modifiers to Magical Hit%)
	JSR CheckForHit							;C2/707D: 20 12 7E     JSR $7E12  (Hit Determination for status)
	LDA AtkMissed							;C2/7080: A5 56        LDA $56
	BNE .Miss							;C2/7082: D0 14        BNE $7098
	JSR RodDamage							;C2/7084: 20 CB 81     JSR $81CB  (Rods damage formula)
	JSR TargetStatusModMag						;C2/7087: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	LDA Param3							;C2/708A: A5 59        LDA $59
	STA AtkElement							;C2/708C: 85 4D        STA $4D
	JSR ElementDamageModPhys					;C2/708E: 20 34 87     JSR $8734  (Attack Element Modifiers)
	LDA AtkMissed							;C2/7091: A5 56        LDA $56
	BNE .Miss							;C2/7093: D0 03        BNE $7098
	JMP CalcFinalDamage						;C2/7095: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/7098: A9 80        LDA #$80
	STA AtkMissed							;C2/709A: 85 56        STA $56
	RTS 								;C2/709C: 60           RTS 

%org($C2709D)
;Attack Type 3C (Rune Weapons)
;Param1: Hit%
;Param2: Rune Damage Boost
;Param3: Rune MP Cost
%sub(Attack3C)
Attack3C:
	JSR SetHitParam1andTargetEvade					;C2/709D: 20 60 7C     JSR $7C60  (Hit = 1st Parameter, Evade = Evade)
	JSR HitPhysical							;C2/70A0: 20 BE 7E     JSR $7EBE  (Hit% Determination for physical)
	LDA AtkMissed							;C2/70A3: A5 56        LDA $56
	BNE .Miss							;C2/70A5: D0 18        BNE $70BF
	JSR AxeDamage							;C2/70A7: 20 2B 81     JSR $812B  (Axes damage formula)
	JSR RuneMod							;C2/70AA: 20 67 84     JSR $8467  (Bonus to Attack and M, Costing MP)
	JSR BackRowMod							;C2/70AD: 20 9B 83     JSR $839B  (Back Row Modifications to Damage)
	JSR CommandMod							;C2/70B0: 20 BD 83     JSR $83BD  (Command Modifiers to Damage)
	JSR DoubleGripMod						;C2/70B3: 20 30 84     JSR $8430  (Double Grip Modifiers to Damage)
	JSR TargetStatusModPhys						;C2/70B6: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys					;C2/70B9: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JMP CalcFinalDamage						;C2/70BC: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/70BF: A9 80        LDA #$80
	STA AtkMissed							;C2/70C1: 85 56        STA $56
	RTS 								;C2/70C3: 60           RTS 
%endsub()

%org($C270C4)
;Attack Type 3D (Death Claw)
;Param1: Hit%
;Param2: Status Duration
;Param3: Status 2
Attack3D:
	JSR HitMagic							;C2/70C4: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed							;C2/70C7: A5 56        LDA $56
	BNE .Miss							;C2/70C9: D0 0F        BNE $70DA
	JSR SetHPCritical						;C2/70CB: 20 FD 88     JSR $88FD  (Reduce HP to critical Damage)
	LDA AtkMissed							;C2/70CE: A5 56        LDA $56
	BNE .Miss							;C2/70D0: D0 08        BNE $70DA
	JSR CalcStatusDuration						;C2/70D2: 20 7D 8B     JSR $8B7D  (Status Effect Duration Determination)
	JSR ApplyStatus2						;C2/70D5: 20 2E 8D     JSR $8D2E  (Apply Status Effect 2)
	STZ AtkMissed							;C2/70D8: 64 56        STZ $56
.Miss	RTS 								;C2/70DA: 60           RTS 

%org($C270DB)
;Attack Type 3E (Failure)
;Sets HP to critical or sets Status 4
;Param1: Chance for HP Critical
;Param2: Status Duration
;Param3: Status 4
Attack3E:
	JSR Random_0_99							;C2/70DB: 20 A2 02     JSR $02A2  (0..99)
	CMP Param1							;C2/70DE: C5 57        CMP $57
	BCS +								;C2/70E0: B0 03        BCS $70E5
	JMP SetHPCritical						;C2/70E2: 4C FD 88     JMP $88FD  (Reduce HP to critical Damage)
+	JSR CalcStatusDuration						;C2/70E5: 20 7D 8B     JSR $8B7D  (Status Effect Duration Determination)
	JSR ApplyStatus4						;C2/70E8: 20 05 8E     JSR $8E05  (Apply Status Effect 4)
	RTS 								;C2/70EB: 60           RTS 

%org($C270EC)
;Attack Type 3F (Zombie Breath)
;Param2: Damage Multiplier (M)
Attack3F:
	JSR CheckAegis 							;C2/70EC: 20 97 7C     JSR $7C97  (Aegis Shield Check)
	LDA AtkMissed							;C2/70EF: A5 56        LDA $56
	BNE .Ret							;C2/70F1: D0 25        BNE $7118
	JSR RandomMagicDamage  	;50..200 * M				;C2/70F3: 20 A7 7F     JSR $7FA7  (Random Magic damage formula)
	JSR TargetStatusModMag						;C2/70F6: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JSR CalcFinalDamage						;C2/70F9: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	LDX TargetOffset						;C2/70FC: A6 49        LDX $49
	LDA CharStruct.CurHP,X						;C2/70FE: BD 06 20     LDA $2006,X
	STA $0E								;C2/7101: 85 0E        STA $0E
	LDA CharStruct.CurHP+1,X					;C2/7103: BD 07 20     LDA $2007,X
	STA $0F								;C2/7106: 85 0F        STA $0F
	LDX DamageToTarget						;C2/7108: AE 6D 7B     LDX $7B6D  (If Damage done >= Current HP)
	CPX $0E			;check if damage was more than HP	;C2/710B: E4 0E        CPX $0E
	BCC .Ret		;if so, apply zombie			;C2/710D: 90 09        BCC $7118
	LDX TargetOffset						;C2/710F: A6 49        LDX $49
	LDA #$02		;zombie					;C2/7111: A9 02        LDA #$02
	STA Param3							;C2/7113: 85 59        STA $59
	JSR ApplyStatus1						;C2/7115: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
.Ret	RTS 								;C2/7118: 60           RTS 

%org($C27119)
;Attack Type 40 (Change Row)
;Param1: Hit%
;Param2: 	80h Switch Row (target)
;		40h Front Row (target)
;		Else Back Row (attacker)
%sub(Attack40)
Attack40:
	JSR HitMagic							;C2/7119: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed							;C2/711C: A5 56        LDA $56
	BNE .Ret							;C2/711E: D0 13        BNE $7133
	LDA Param2							;C2/7120: A5 58        LDA $58
	BPL +								;C2/7122: 10 03        BPL $7127
	JMP TargetChangeRow		;80h set			;C2/7124: 4C 01 91     JMP $9101  (Change Target Row)

+	LDA Param2							;C2/7127: A5 58        LDA $58
	AND #$40							;C2/7129: 29 40        AND #$40
	BEQ +								;C2/712B: F0 03        BEQ $7130
	JMP TargetFrontRow		;40h set			;C2/712D: 4C 17 91     JMP $9117  (Move Target to Front Row)
+	JMP AttackerBackRow		;anything else			;C2/7130: 4C 22 91     JMP $9122  (Move Attacker to Back Row)
.Ret	RTS 								;C2/7133: 60           RTS 
%endsub()

%org($C27134)
;Attack Type 41
;Param2: Attack Power
;Not sure what attack this is. Might be unused?  
Attack41:
	JSR PhysicalParamDamage						;C2/7134: 20 61 82     JSR $8261  (damage formula?)
	JSR TargetStatusModPhys						;C2/7137: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys					;C2/713A: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JMP CalcFinalDamage						;C2/713D: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)

%org($C27140)
;Attack Type 42 (Heal HP & Status)
;Param1: 80h Status 1
;	 Else Status 2
;Param2: Spell Power
;Param3: Status 1 or 2
Attack42:
	JSR NormalMagicDamage						;C2/7140: 20 30 7F     JSR $7F30  (Magic Damage Formula)
	JSR CureTarget							;C2/7143: 20 C1 88     JSR $88C1  (Heal or Damage Undead)
	LDA Param1							;C2/7146: A5 57        LDA $57
	BPL +								;C2/7148: 10 03        BPL $714D
	JMP RemoveStatus1						;C2/714A: 4C B6 8E     JMP $8EB6  (Remove Status 1)
+	JMP RemoveStatus2						;C2/714D: 4C 11 8F     JMP $8F11  (Remove Status 2)

%org($C27150)
;Attack Type 43 (Steal)
;Param1: Hit%
Attack43:
	STZ StealNoItems						;C2/7150: 9C 9A 7C     STZ $7C9A
	LDX TargetOffset						;C2/7153: A6 49        LDX $49
	LDA CharStruct.StolenItem,X	;check if we already stole	;C2/7155: BD 6B 20     LDA $206B,X
	BEQ +								;C2/7158: F0 05        BEQ $715F
	INC StealNoItems						;C2/715A: EE 9A 7C     INC $7C9A
	BRA .Miss							;C2/715D: 80 37        BRA $7196
+	SEC 								;C2/715F: 38           SEC 
	LDA TargetIndex							;C2/7160: A5 48        LDA $48
	SBC #$04			;now monster 0-7		;C2/7162: E9 04        SBC #$04
	ASL 								;C2/7164: 0A           ASL 
	TAX 								;C2/7165: AA           TAX 
	REP #$20							;C2/7166: C2 20        REP #$20
	LDA BattleMonsterID,X						;C2/7168: BD 20 40     LDA $4020,X
	JSR ShiftMultiply_4						;C2/716B: 20 B7 01     JSR $01B7     (x4)
	TAX 								;C2/716E: AA           TAX 
	TDC 								;C2/716F: 7B           TDC 
	SEP #$20							;C2/7170: E2 20        SEP #$20
	LDA ROMLoot.RareSteal,X						;C2/7172: BF 00 50 D0  LDA $D05000,X
	ORA ROMLoot.CommonSteal,X					;C2/7176: 1F 01 50 D0  ORA $D05001,X
	BNE +								;C2/717A: D0 05        BNE $7181
	INC StealNoItems		;no items to steal		;C2/717C: EE 9A 7C     INC $7C9A
	BRA .Miss							;C2/717F: 80 15        BRA $7196
+	JSR HitCalcSteal						;C2/7181: 20 85 7C     JSR $7C85      (Success Determination for Steal)
	JSR CheckForHit							;C2/7184: 20 12 7E     JSR $7E12      (Check if Steal succeeds)
	LDA AtkMissed							;C2/7187: A5 56        LDA $56
	BNE .Miss							;C2/7189: D0 0B        BNE $7196
	JSR StealItem							;C2/718B: 20 08 92     JSR $9208
	LDA AtkMissed							;C2/718E: A5 56        LDA $56
	BNE .Miss							;C2/7190: D0 04        BNE $7196
	LDA #$21		;steal success message			;C2/7192: A9 21        LDA #$21
	BRA .MsgBox							;C2/7194: 80 0D        BRA $71A3
.Miss	INC AtkMissed							;C2/7196: E6 56        INC $56
	LDA StealNoItems						;C2/7198: AD 9A 7C     LDA $7C9A
	BEQ +								;C2/719B: F0 04        BEQ $71A1
	LDA #$4B		;nothing to steal message		;C2/719D: A9 4B        LDA #$4B
	BRA .MsgBox							;C2/719F: 80 02        BRA $71A3
+	LDA #$22		;steal failed message			;C2/71A1: A9 22        LDA #$22
.MsgBox	PHA 								;C2/71A3: 48           PHA 
	JSR SetupMsgBoxIndexes						;C2/71A4: 20 65 99     JSR $9965
	LDA CurrentCommand.ID					;C2/71A7: AD 46 47     LDA $4746
	CMP #$0B		;steal					;C2/71AA: C9 0B        CMP #$0B
	BEQ +								;C2/71AC: F0 04        BEQ $71B2
	CMP #$33		;?? command $33 is White Magic L2	;C2/71AE: C9 33        CMP #$33
	BNE ++								;C2/71B0: D0 02        BNE $71B4
+	TDC 								;C2/71B2: 7B           TDC 
	TAX 								;C2/71B3: AA           TAX 
++	PLA 								;C2/71B4: 68           PLA 
	STA MessageBoxes,X						;C2/71B5: 9D 5F 3C     STA $3C5F,X
	RTS 								;C2/71B8: 60           RTS 

%org($C271B9)
;Attack Type 44 (Escape)
Attack44:
	LDA AttackerIndex						;C2/71B9: A5 47        LDA $47
	CMP #$04   							;C2/71BB: C9 04        CMP #$04   
	BCC .Ret  							;C2/71BD: 90 17        BCC $71D6  (If Attacker is not a Monster)
	SEC 								;C2/71BF: 38           SEC 
	SBC #$04   		;now monster index 0-7			;C2/71C0: E9 04        SBC #$04   (Change Attacker to Party member)
	TAX 								;C2/71C2: AA           TAX 
	INC MonsterEscaped,X						;C2/71C3: FE AE 7C     INC $7CAE,X
	LDA InactiveMonsters						;C2/71C6: AD 0A 7C     LDA $7C0A
	JSR SetBit_X		;no longer revivable			;C2/71C9: 20 D6 01     JSR $01D6
	STA InactiveMonsters						;C2/71CC: 8D 0A 7C     STA $7C0A
	LDX AttackerOffset						;C2/71CF: A6 32        LDX $32
	LDA #$80			;dead status			;C2/71D1: A9 80        LDA #$80
	STA CharStruct.Status1,X	;escape is death		;C2/71D3: 9D 1A 20     STA $201A,X  (Kill Attacker)
.Ret	RTS 								;C2/71D6: 60           RTS 

%org($C271D7)
;Attack Type 45 (Throw)
;Param1: Hit%
Attack45:
	LDA Param1							;C2/71D7: A5 57        LDA $57
	STA HitPercent							;C2/71D9: 85 4E        STA $4E    (Hit = 1st Parameter)
	TDC 								;C2/71DB: 7B           TDC 
	STA EvadePercent  						;C2/71DC: 85 4F        STA $4F    (Evade = 0) 
	JSR HitPhysical							;C2/71DE: 20 BE 7E     JSR $7EBE  (Hit Determination for physical)
	LDA AtkMissed							;C2/71E1: A5 56        LDA $56
	BNE .Ret							;C2/71E3: D0 0F        BNE $71F4
	JSR ThrowDamage							;C2/71E5: 20 99 82     JSR $8299  (Throw damage formula)
	JSR CommandMod							;C2/71E8: 20 BD 83     JSR $83BD  (Command Modifiers to Damage)
	JSR TargetStatusModPhys						;C2/71EB: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys					;C2/71EE: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JSR CalcFinalDamage						;C2/71F1: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
.Ret	RTS 								;C2/71F4: 60           RTS 

%org($C271F5)
;Attack Type 46 (GilToss)
;Param1: Cost per Level
;Param2: M
Attack46:
	JSR GilTossDamage						;C2/71F5: 20 0A 83     JSR $830A  (GilToss Damage Formula)
	JMP CalcFinalDamage						;C2/71F8: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)

%org($C271FB)
;Attack Type 47 (Tame)
;Param2: Status Duration
;Param3: Status 3
Attack47:
	LDX TargetOffset						;C2/71FB: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/71FD: BD 65 20     LDA $2065,X   (Creature Type = Creature?)
	AND #$04		;Creature/Beast				;C2/7200: 29 04        AND #$04
	BEQ .Miss							;C2/7202: F0 06        BEQ $720A
	JSR CalcStatusDuration 						;C2/7204: 20 7D 8B     JSR $8B7D     (Status Effect Duration Determination)
	JMP ApplyStatus3						;C2/7207: 4C CB 8D     JMP $8DCB     (Apply Status Effect 3)
.Miss	INC AtkMissed    						;C2/720A: E6 56        INC $56       (Attack Misses)
	RTS 								;C2/720C: 60           RTS 

%org($C2720D)
;Attack Type 48 (Catch)
Attack48:
	JSR SetupMsgBoxIndexes						;C2/720D: 20 65 99     JSR $9965
	STX $14			;save msg box index for later		;C2/7210: 86 14        STX $14
	LDX TargetOffset						;C2/7212: A6 49        LDX $49
	LDA CharStruct.CmdImmunity,X					;C2/7214: BD 66 20     LDA $2066,X  (Check Immunity Byte for Catch)
	AND #$08		;catch					;C2/7217: 29 08        AND #$08
	BEQ +								;C2/7219: F0 04        BEQ $721F
	LDA #$4F		;message: immune to catch		;C2/721B: A9 4F        LDA #$4F
	BRA .Miss							;C2/721D: 80 29        BRA $7248
+	LDA CharStruct.Status4,X					;C2/721F: BD 1D 20     LDA $201D,X
	AND #$02		;critical hp				;C2/7222: 29 02        AND #$02
	BNE .Success							;C2/7224: D0 2B        BNE $7251
	LDX AttackerOffset						;C2/7226: A6 32        LDX $32
	LDA CharStruct.ArmorProperties,X				;C2/7228: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$01		;improved catch				;C2/722B: 29 01        AND #$01      (Check if Catch Up)
	BEQ .HighHP							;C2/722D: F0 17        BEQ $7246
	LDX TargetOffset						;C2/722F: A6 49        LDX $49
	REP #$20							;C2/7231: C2 20        REP #$20
	LDA CharStruct.MaxHP,X						;C2/7233: BD 08 20     LDA $2008,X
	LSR 								;C2/7236: 4A           LSR 
	CMP CharStruct.CurHP,X	;is max hp/2 >= current hp?		;C2/7237: DD 06 20     CMP $2006,X   (If Target HP < (Target Max HP/2))
	BCS .SuccessMode						;C2/723A: B0 05        BCS $7241
	TDC 								;C2/723C: 7B           TDC 
	SEP #$20							;C2/723D: E2 20        SEP #$20
	BRA .HighHP							;C2/723F: 80 05        BRA $7246
.SuccessMode
	TDC 								;C2/7241: 7B           TDC 
	SEP #$20							;C2/7242: E2 20        SEP #$20
	BRA .Success							;C2/7244: 80 0B        BRA $7251
.HighHP	LDA #$25		;message: hp too high			;C2/7246: A9 25        LDA #$25
.Miss	LDX $14			;message box index			;C2/7248: A6 14        LDX $14
	STA MessageBoxes,X						;C2/724A: 9D 5F 3C     STA $3C5F,X
	INC AtkMissed    						;C2/724D: E6 56        INC $56       (Attack Misses)
	BRA .Ret							;C2/724F: 80 03        BRA $7254
.Success
	JSR CatchMonster						;C2/7251: 20 A5 93     JSR $93A5
.Ret	RTS 								;C2/7254: 60           RTS 

%org($C27255)
;Attack Type 49 (Flirt, Lilith Rod)
;Param1: Hit% 
Attack49:
	JSR HitCalcLevelMEvade						;C2/7255: 20 0D 7C     JSR $7C0D  (Hit = Attacker Level + Hit - Target Level, Evade = Magic Evade)
	JSR DanceHitMod							;C2/7258: 20 7F 7D     JSR $7D7F  (Sword Dance Up Modifier)
	JSR CheckForHit							;C2/725B: 20 12 7E     JSR $7E12  (Hit Determination for status)
	LDA AtkMissed							;C2/725E: A5 56        LDA $56
	BNE .Ret							;C2/7260: D0 03        BNE $7265
	JSR ApplyFlirt							;C2/7262: 20 3A 8E     JSR $8E3A  (Apply Flirt, miss if Heavy)
.Ret	RTS 								;C2/7265: 60           RTS 

%org($C27266)
;Attack Type 4A (unused, entry in jump table maps to type 4B)
Attack4A:
;Attack Type 4B (L5 Doom)
;Param1: Level Mult
;Param3: Status 1
Attack4B:
	JSR CheckLevel  						;C2/7266: 20 67 7E     JSR $7E67     (Check Target Level is Muliple of Parameter 1)
	LDA AtkMissed							;C2/7269: A5 56        LDA $56
	BNE .Ret							;C2/726B: D0 1F        BNE $728C
	LDX TargetOffset						;C2/726D: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/726F: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01		;undead	type				;C2/7272: 29 01        AND #$01
	BNE .Undead							;C2/7274: D0 07        BNE $727D
	LDA CharStruct.ArmorProperties,X				;C2/7276: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$02   		;undead armor				;C2/7279: 29 02        AND #$02      (Check if Undead)
	BEQ .Die							;C2/727B: F0 0C        BEQ $7289
.Undead	REP #$20							;C2/727D: C2 20        REP #$20
	LDA CharStruct.MaxHP,X						;C2/727F: BD 08 20     LDA $2008,X
	STA CharStruct.CurHP,X						;C2/7282: 9D 06 20     STA $2006,X   (Fully Heal HP)
	TDC 								;C2/7285: 7B           TDC 
	SEP #$20							;C2/7286: E2 20        SEP #$20
	RTS 								;C2/7288: 60           RTS 
									;
.Die	JSR ApplyStatus1Bypass						;C2/7289: 20 2B 90     JSR $902B   (Apply Status 1 to Target, bypass Status Immunity)
.Ret	RTS 								;C2/728C: 60           RTS 

%org($C2728D)
;Attack Type 4C (L2 Old)
;Param1: Level Mult
;Param2: Duration
;Param3: Status 2
Attack4C:
	JSR CheckLevel							;C2/728D: 20 67 7E     JSR $7E67   (Check Target Level is Muliple of Parameter 1)
	LDA AtkMissed							;C2/7290: A5 56        LDA $56
	BNE .Ret							;C2/7292: D0 06        BNE $729A
	JSR CalcStatusDuration						;C2/7294: 20 7D 8B     JSR $8B7D   (Status Effect Duration Determination)
	JSR ApplyStatus2Bypass						;C2/7297: 20 39 90     JSR $9039   (Apply Status 2 to Target, bypass Status Immunity)
.Ret	RTS 								;C2/729A: 60           RTS 

%org($C2729B)
;Attack Type 4D (L4 Qrter)
;Param1: Level Mult
;Param2: Fraction/16
;Param3: Status 2
Attack4D:
	JSR CheckLevel							;C2/729B: 20 67 7E     JSR $7E67   (Check Target Level is Muliple of Parameter 1)
	LDA AtkMissed							;C2/729E: A5 56        LDA $56
	BNE .Ret							;C2/72A0: D0 0F        BNE $72B1
	JSR GravityDamage						;C2/72A2: 20 74 88     JSR $8874   (Gravity Attack Damage)
	LDA #$3C		;status duration			;C2/72A5: A9 3C        LDA #$3C
	STA Param2							;C2/72A7: 85 58        STA $58
	JSR CalcStatusDuration						;C2/72A9: 20 7D 8B     JSR $8B7D   (Status Effect Duration Determination)
	JSR ApplyStatus2Bypass						;C2/72AC: 20 39 90     JSR $9039   (Apply Status 2 to Target, bypass Status Immunity)
	STZ AtkMissed							;C2/72AF: 64 56        STZ $56
.Ret	RTS 								;C2/72B1: 60           RTS 

%org($C272B2)
;Attack Type 4E (L3 Flare)
;Param1: Level Mult
;Param3: Element
Attack4E:
	JSR CheckLevel						;C2/72B2: 20 67 7E     JSR $7E67   (Check Target Level is Muliple of Parameter 1)
	LDA AtkMissed						;C2/72B5: A5 56        LDA $56
	BNE .Miss						;C2/72B7: D0 1A        BNE $72D3
	LDA Param3						;C2/72B9: A5 59        LDA $59
	STA AtkElement						;C2/72BB: 85 4D        STA $4D
	JSR FlareMagicDamage					;C2/72BD: 20 6A 7F     JSR $7F6A   (Flare Magic damage formula)
	JSR MultiTargetMod					;C2/72C0: 20 66 83     JSR $8366   (Multitargetting Modifications to Damage)
	JSR TargetStatusModMag					;C2/72C3: 20 F3 84     JSR $84F3   (Target Status Effect Modifiers to Magic Damage)
	JSR ElementUpMod					;C2/72C6: 20 6D 86     JSR $866D   (Magic Element Up Modifers)
	JSR ElementDamageModMag					;C2/72C9: 20 6E 87     JSR $876E   (Magic Attack Element Modifiers)
	LDA AtkMissed						;C2/72CC: A5 56        LDA $56
	BNE .Miss						;C2/72CE: D0 03        BNE $72D3
	JSR CalcFinalDamage					;C2/72D0: 20 05 8A     JSR $8A05   (Calculate Magic Final Damage)
.Miss	LDA MagicNull						;C2/72D3: AD 97 7C     LDA $7C97
	BEQ .Ret						;C2/72D6: F0 02        BEQ $72DA
	STZ AtkMissed						;C2/72D8: 64 56        STZ $56
.Ret	RTS 							;C2/72DA: 60           RTS 

%org($C272DB)
;Attack Type 4F (Spirit)
;Param1: Zombie%
;Param3: Fraction/4 HP Recovered
Attack4F:
	LDA TargetIndex						;C2/72DB: A5 48        LDA $48
	TAY 							;C2/72DD: A8           TAY 
	LDA ActiveParticipants,Y				;C2/72DE: B9 C2 3E     LDA $3EC2,Y
	BNE .Miss						;C2/72E1: D0 1A        BNE $72FD
	JSR ReviveTarget					;C2/72E3: 20 AA 8F     JSR $8FAA  (Revive Target)
	LDA AtkMissed						;C2/72E6: A5 56        LDA $56
	BNE .Ret						;C2/72E8: D0 15        BNE $72FF
	JSR Random_0_99  					;C2/72EA: 20 A2 02     JSR $02A2  (0..99)
	CMP Param1						;C2/72ED: C5 57        CMP $57
	BCC .Zombie						;C2/72EF: 90 05        BCC $72F6
	INC SpiritFlag						;C2/72F1: EE 5D 7C     INC $7C5D
	BRA .Ret						;C2/72F4: 80 09        BRA $72FF
.Zombie	LDA #$02		;zombie				;C2/72F6: A9 02        LDA #$02
	STA Param3						;C2/72F8: 85 59        STA $59
	JMP ApplyStatus1					;C2/72FA: 4C AC 8C     JMP $8CAC  (Apply Status Effect 1)
.Miss	INC AtkMissed						;C2/72FD: E6 56        INC $56
.Ret	RTS 							;C2/72FF: 60           RTS 

%org($C27300)
;Attack Type 50 (Goblin Punch)
;Param1: Hit%
;Param3: Status 1
Attack50:
	JSR HitPhysicalMagic					;C2/7300: 20 1B 7F     JSR $7F1B  (Hit Determination for physical Magic)
	LDA AtkMissed						;C2/7303: A5 56        LDA $56
	BNE .Ret						;C2/7305: D0 11        BNE $7318
	JSR GoblinDamage					;C2/7307: 20 AD 85     JSR $85AD  (Goblin Punch Damage formula)
	JSR EqualLevelMod					;C2/730A: 20 5D 85     JSR $855D  (Bonus if Equal Level Damage formula)
	JSR TargetStatusModPhys					;C2/730D: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR CalcFinalDamage					;C2/7310: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	JSR ApplyStatus1					;C2/7313: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
	STZ AtkMissed						;C2/7316: 64 56        STZ $56
.Ret	RTS 							;C2/7318: 60           RTS 

%org($C27319)
;Attack Type 51 (Modify Level or Defense)
;Param1: 	Hit%
;Param2: 	80h Halve Level
;		40h Halve Level (again)
;		20h Halve Def and MDef
;		10h Add Level
;		08h Subtract Level
;		04h Add Attack
;		02h Add Def and MDef
;Param3:	Stat Mod Amount
Attack51:
	JSR HitMagic					;C2/7319: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed					;C2/731C: A5 56        LDA $56
	BNE .Ret					;C2/731E: D0 3D        BNE $735D
	LDA Param2					;C2/7320: A5 58        LDA $58
	BPL +						;C2/7322: 10 03        BPL $7327
	JSR HalveLevel					;C2/7324: 20 36 91     JSR $9136  (Level = Half)
+	LDA Param2					;C2/7327: A5 58        LDA $58
	AND #$40					;C2/7329: 29 40        AND #$40
	BEQ +						;C2/732B: F0 03        BEQ $7330  
	JSR HalveLevel					;C2/732D: 20 36 91     JSR $9136  (Level = Half)
+	LDA Param2					;C2/7330: A5 58        LDA $58
	AND #$20					;C2/7332: 29 20        AND #$20
	BEQ +						;C2/7334: F0 03        BEQ $7339
	JSR HalveDefenses				;C2/7336: 20 2D 91     JSR $912D  (Defense & Magic Defense = Half)
+	LDA Param2					;C2/7339: A5 58        LDA $58
	AND #$10					;C2/733B: 29 10        AND #$10
	BEQ +						;C2/733D: F0 03        BEQ $7342
	JSR AddLevel					;C2/733F: 20 43 91     JSR $9143  (Add to Level)
+	LDA Param2					;C2/7342: A5 58        LDA $58
	AND #$08					;C2/7344: 29 08        AND #$08
	BEQ +						;C2/7346: F0 03        BEQ $734B
	JSR SubtractLevel				;C2/7348: 20 53 91     JSR $9153  (Subtract from Level)
+	LDA Param2					;C2/734B: A5 58        LDA $58
	AND #$04					;C2/734D: 29 04        AND #$04
	BEQ +						;C2/734F: F0 03        BEQ $7354
	JSR AddAttack					;C2/7351: 20 97 91     JSR $9197  (Increase Monster Attack)
+	LDA Param2					;C2/7354: A5 58        LDA $58
	AND #$02					;C2/7356: 29 02        AND #$02
	BEQ .Ret					;C2/7358: F0 03        BEQ $735D
	JSR AddDefenses					;C2/735A: 20 B4 91     JSR $91B4  (Increase Target Defense and Magic Defense)
.Ret	RTS 						;C2/735D: 60           RTS 

%org($C2735E)
;Attack Type 52 (Mucus)
;Param1: Hit%
;Param2: Allowed Status 3
;Param3: Applied Status 3
Attack52:
	JSR HitMagic					;C2/735E: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed					;C2/7361: A5 56        LDA $56
	BNE .Ret					;C2/7363: D0 13        BNE $7378
	JSR ApplyStatus3Exclusive			;C2/7365: 20 51 8E     JSR $8E51  (Apply Status Effect 3, Mutually exclusive Statuses)
	LDA AtkMissed					;C2/7368: A5 56        LDA $56
	BNE .Ret					;C2/736A: D0 0C        BNE $7378
	LDA #$FF					;C2/736C: A9 FF        LDA #$FF
	STA StatusDuration				;C2/736E: 8D D8 3E     STA $3ED8
	LDA #$08		;HP Leak		;C2/7371: A9 08        LDA #$08
	STA Param3					;C2/7373: 85 59        STA $59
	JSR ApplyStatus4				;C2/7375: 20 05 8E     JSR $8E05  (Apply Status Effect 4)
.Ret	RTS 						;C2/7378: 60           RTS 

%org($C27379)
;Attack Type 53 (Damage % MP)
;Param1: Hit%
;Param2: Fraction/16
Attack53:
	JSR HitMagic 					;C2/7379: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed					;C2/737C: A5 56        LDA $56
	BNE .Ret					;C2/737E: D0 03        BNE $7383
	JSR CalcDamageTargetCurMP			;C2/7380: 20 EC 8A     JSR $8AEC  (Calculate Damage from % of Target Current MP)
.Ret	RTS 						;C2/7383: 60           RTS 

%org($C27384)
;Attack Type 54 (Damage = Max HP - Current HP)
;Param1: Hit%
Attack54:
	JSR HitMagic					;C2/7384: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed					;C2/7387: A5 56        LDA $56
	BNE .Ret					;C2/7389: D0 03        BNE $738E
	JSR CalcDamageAttackerDiffHP			;C2/738B: 20 33 8B     JSR $8B33  (Calculate Damage = Attacker Max HP - Attacker Current HP)
.Ret	RTS 						;C2/738E: 60           RTS 

%org($C2738F)
;Attack Type 55 (Fusion)
;Param3: Status 1
Attack55:
	JSR FullCureTarget					;C2/738F: 20 DE 88     JSR $88DE  (Full Heal or Reduce HP to Critical for Undead)
	JSR FullMPHeal						;C2/7392: 20 F7 89     JSR $89F7  (Fully Heal MP)
	JMP ApplyStatus1AttackerBypass				;C2/7395: 4C DB 90     JMP $90DB  (Apply Status 1 to Attacker, bypass Status Immunity)

%org($C27398)
;Attack Type 56 (Unused?)
;Param1: Hit%
;Param3: Status 4
Attack56:
	JSR HitMagic						;C2/7398: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed						;C2/739B: A5 56        LDA $56
	BNE .Ret						;C2/739D: D0 03        BNE $73A2
	JSR ToggleStatus4					;C2/739F: 20 D1 91     JSR $91D1  (Toggle Status 4 on Target)
.Ret	RTS 							;C2/73A2: 60           RTS 

%org($C273A3)
;Attack Type 57 (HP Leak + Status)
;Param1: Status 1
;Param2: Duration
;Param3: Status 2
Attack57:
	JSR CalcStatusDuration					;C2/73A3: 20 7D 8B     JSR $8B7D  (Status Effect Duration Determination)
	JSR ApplyStatus2					;C2/73A6: 20 2E 8D     JSR $8D2E  (Apply Status Effect 2)
	STZ AtkMissed						;C2/73A9: 64 56        STZ $56
	LDA Param1						;C2/73AB: A5 57        LDA $57
	STA Param3						;C2/73AD: 85 59        STA $59
	JSR ApplyStatus1					;C2/73AF: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1) 
	STZ AtkMissed						;C2/73B2: 64 56        STZ $56
	LDA #$FF						;C2/73B4: A9 FF        LDA #$FF
	STA StatusDuration					;C2/73B6: 8D D8 3E     STA $3ED8
	LDA #$08		;HP Leak			;C2/73B9: A9 08        LDA #$08
	STA Param3						;C2/73BB: 85 59        STA $59
	JMP ApplyStatus4					;C2/73BD: 4C 05 8E     JMP $8E05  (Apply Status Effect 4)

%org($C273C0)
;Attack Type 58 (Mind Blast)
;Param1: Hit%
;Param2: Spell Power
;Param3: Status Duration
Attack58:
	JSR HitMagic						;C2/73C0: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed						;C2/73C3: A5 56        LDA $56
	BNE .Ret						;C2/73C5: D0 28        BNE $73EF
	JSR FlareMagicDamage					;C2/73C7: 20 6A 7F     JSR $7F6A  (Flare Magic damage formula)
	JSR MultiTargetMod					;C2/73CA: 20 66 83     JSR $8366  (Multitargetting Modifications to Damage)
	JSR TargetStatusModMag					;C2/73CD: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JSR CalcFinalDamage					;C2/73D0: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	LDA Param3						;C2/73D3: A5 59        LDA $59
	STA Param2						;C2/73D5: 85 58        STA $58
	JSR CalcStatusDuration					;C2/73D7: 20 7D 8B     JSR $8B7D  (Status Effect Duration Determination)
	LDA #$20		;Paralyze			;C2/73DA: A9 20        LDA #$20
	STA Param3						;C2/73DC: 85 59        STA $59
	JSR ApplyStatus2					;C2/73DE: 20 2E 8D     JSR $8D2E  (Apply Status Effect 2)
	STZ AtkMissed						;C2/73E1: 64 56        STZ $56
	LDA #$FF						;C2/73E3: A9 FF        LDA #$FF
	STA StatusDuration					;C2/73E5: 8D D8 3E     STA $3ED8
	LDA #$08		;HP Leak			;C2/73E8: A9 08        LDA #$08
	STA Param3						;C2/73EA: 85 59        STA $59
	JSR ApplyStatus4					;C2/73EC: 20 05 8E     JSR $8E05  (Apply Status Effect 4)
.Ret	RTS 							;C2/73EF: 60           RTS 

%org($C273F0)
;Attack Type 59 (Giant Drink)
Attack59:
	LDA TargetIndex						;C2/73F0: A5 48        LDA $48
	CMP #$04		;<4 means party			;C2/73F2: C9 04        CMP #$04
	BCS .Miss  						;C2/73F4: B0 0E        BCS $7404    (Only works on party memebers)
	LDA TargetIndex						;C2/73F6: A5 48        LDA $48
	TAX 							;C2/73F8: AA           TAX 
	LDA GiantDrink,X					;C2/73F9: BD 59 7C     LDA $7C59,X  (Check if already used Giant Drink)
	BNE .Miss						;C2/73FC: D0 06        BNE $7404
	INC GiantDrink,X					;C2/73FE: FE 59 7C     INC $7C59,X
	JMP DoubleMaxHP						;C2/7401: 4C 63 91     JMP $9163    (Double Max HP)
.Miss	INC AtkMissed						;C2/7404: E6 56        INC $56
	RTS 							;C2/7406: 60           RTS 

%org($C27407)
;Attack Type 5A (White Wind)
Attack5A:
	LDX CurrentHP						;C2/7407: AE 64 7C     LDX $7C64    (Current HP)
	STX HealingToTarget					;C2/740A: 8E 71 7B     STX $7B71
	RTS 							;C2/740D: 60           RTS 

%org($C2740E)
;Attack Type 5B (Unused)
;Param3: Bits from this are set in CharStruct.2079 (unused) on Attacker
Attack5B:
	JSR HitMagic						;C2/740E: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed						;C2/7411: A5 56        LDA $56
	BNE .Ret						;C2/7413: D0 03        BNE $7418
	JSR AddSomethingUnused					;C2/7415: 20 DC 91     JSR $91DC
.Ret	RTS 							;C2/7418: 60           RTS 

%org($C27419)
;Attack Type 5C (Hug)
;Param1: Hit%
;Param3: Status 1
Attack5C:
	JSR HitMagic						;C2/7419: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed						;C2/741C: A5 56        LDA $56
	BNE .Ret						;C2/741E: D0 06        BNE $7426
	JSR FullCureTarget					;C2/7420: 20 DE 88     JSR $88DE  (Full Heal or Reduce HP to Critical for Undead)
	JSR ApplyStatus1					;C2/7423: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
.Ret	RTS 							;C2/7426: 60           RTS 

%org($C27427)
;Attack Type 5D (Dance of the Dead, Zombie Powder)
;Param1: Hit%
;Param2: Fraction/16 HP (only relevant if immune to Zombie)
Attack5D:
	JSR HitMagic						;C2/7427: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed						;C2/742A: A5 56        LDA $56
	BNE .Ret						;C2/742C: D0 0E        BNE $743C
	JSR ReviveTarget					;C2/742E: 20 AA 8F     JSR $8FAA  (Revive Target)
	LDA AtkMissed						;C2/7431: A5 56        LDA $56
	BNE .Ret						;C2/7433: D0 07        BNE $743C
	LDA #$02		;Zombie				;C2/7435: A9 02        LDA #$02
	STA Param3						;C2/7437: 85 59        STA $59
	JSR ApplyStatus1					;C2/7439: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
.Ret	RTS 							;C2/743C: 60           RTS 

%org($C2743D)
;Attack Type 5E (Song magic)
;Param3: Song
Attack5E:
	JSR CheckVoid  						;C2/743D: 20 F1 7D     JSR $7DF1  (Check for Void to Miss)
	LDA AtkMissed						;C2/7440: A5 56        LDA $56
	BNE .Ret						;C2/7442: D0 17        BNE $745B
	LDX AttackerOffset					;C2/7444: A6 32        LDX $32
	LDA CharStruct.Status4,X				;C2/7446: BD 1D 20     LDA $201D,X
	ORA #$04		;Singing			;C2/7449: 09 04        ORA #$04
	STA CharStruct.Status4,X				;C2/744B: 9D 1D 20     STA $201D,X  (Apply Attacker Status 4 = Singing)
	LDA Param3						;C2/744E: A5 59        LDA $59
	STA CharStruct.Song,X					;C2/7450: 9D 6F 20     STA $206F,X
	LDA #$08						;C2/7453: A9 08        LDA #$08
	TAX 							;C2/7455: AA           TAX 
	LDA TargetIndex						;C2/7456: A5 48        LDA $48
	JSR StartTimer 						;C2/7458: 20 FD 24     JSR $24FD
.Ret	RTS 							;C2/745B: 60           RTS 

%org($C2745C)
;Attack Type 5F (Requiem)
;Param1: Creature Type
;Param2: Spell Power
;Param3: HP Leak Duration
Attack5F:
	JSR CheckCreatureType						;C2/745C: 20 5B 7E     JSR $7E5B  (Creature Type Hit Determination)
	LDA AtkMissed							;C2/745F: A5 56        LDA $56
	BNE .Ret							;C2/7461: D0 12        BNE $7475
	JSR FlareMagicDamage						;C2/7463: 20 6A 7F     JSR $7F6A  (Flare Magic damage formula)
	JSR CalcFinalDamage						;C2/7466: 20 05 8A     JSR $8A05  (Calculate Magic Final Damage)
	LDA Param3							;C2/7469: A5 59        LDA $59
	STA StatusDuration						;C2/746B: 8D D8 3E     STA $3ED8
	LDA #$08		;HP Leak				;C2/746E: A9 08        LDA #$08
	STA Param3							;C2/7470: 85 59        STA $59
	JSR ApplyStatus4						;C2/7472: 20 05 8E     JSR $8E05  (Apply Status Effect 4)
.Ret	RTS 								;C2/7475: 60           RTS 

%org($C27476)	
;Attack Type 60 (Hide and/or Show Monsters)
;Used by fight scripts to change battle formations
Attack60:	
	TDC 								;C2/7476: 7B           TDC 
	TAX 								;C2/7477: AA           TAX

.FindCommand			;look for first $F2 flagged entry in table of queued commands
	LDA GFXQueue.1,X						;C2/7478: BD 4D 38     LDA $384D,X
	CMP #$F2							;C2/747B: C9 F2        CMP #$F2
	BEQ .Found							;C2/747D: F0 07        BEQ $7486
	INX 			;command structure is 5 bytes long	;C2/747F: E8           INX 
	INX 								;C2/7480: E8           INX 
	INX 								;C2/7481: E8           INX 
	INX 								;C2/7482: E8           INX 
	INX 								;C2/7483: E8           INX 
	BRA .FindCommand							;C2/7484: 80 F2        BRA $7478

.Found	
	LDA GFXQueue.2,X						;C2/7486: BD 4E 38     LDA $384E,X
	STA $11			;80h: copy attacker's hp to target	;C2/7489: 85 11        STA $11
	LDA GFXQueue.3,X						;C2/748B: BD 4F 38     LDA $384F,X
	STA $10			;bitmask of monsters to show or hide	;C2/748E: 85 10        STA $10
	TDC 								;C2/7490: 7B           TDC 
	TAX 								;C2/7491: AA           TAX 
	STX $0E			;loop index (monsters)			;C2/7492: 86 0E        STX $0E
		
.MonsterLoop	
	LDX $0E								;C2/7494: A6 0E        LDX $0E
	LDA MonstersVisible						;C2/7496: AD 48 40     LDA $4048
	JSR SelectBit_X							;C2/7499: 20 DB 01     JSR $01DB
	BEQ .NotVisible							;C2/749C: F0 1F        BEQ $74BD
	LDA $10								;C2/749E: A5 10        LDA $10
	JSR SelectBit_X							;C2/74A0: 20 DB 01     JSR $01DB
	BEQ .HideMonster						;C2/74A3: F0 03        BEQ $74A8
	JMP .Next							;C2/74A5: 4C 53 75     JMP $7553
	
.HideMonster	
	TDC 								;C2/74A8: 7B           TDC 
	JSR SetBit_X							;C2/74A9: 20 D6 01     JSR $01D6
	ORA InactiveMonsters						;C2/74AC: 0D 0A 7C     ORA $7C0A
	STA InactiveMonsters						;C2/74AF: 8D 0A 7C     STA $7C0A
	TXA 								;C2/74B2: 8A           TXA 
	CLC 								;C2/74B3: 18           CLC 
	ADC #$04		;+4 to account for party slots		;C2/74B4: 69 04        ADC #$04
	TAX 								;C2/74B6: AA           TAX 
	STZ ActiveParticipants,X					;C2/74B7: 9E C2 3E     STZ $3EC2,X
	JMP .Next							;C2/74BA: 4C 53 75     JMP $7553
	
.NotVisible	
	LDA $10								;C2/74BD: A5 10        LDA $10
	JSR SelectBit_X							;C2/74BF: 20 DB 01     JSR $01DB
	BNE .ShowMonster						;C2/74C2: D0 03        BNE $74C7
	JMP .Next							;C2/74C4: 4C 53 75     JMP $7553
	
.ShowMonster	
	TDC 								;C2/74C7: 7B           TDC 
	JSR SetBit_X							;C2/74C8: 20 D6 01     JSR $01D6
	ORA MonstersVisible						;C2/74CB: 0D 48 40     ORA $4048
	STA MonstersVisible						;C2/74CE: 8D 48 40     STA $4048
	LDA InactiveMonsters						;C2/74D1: AD 0A 7C     LDA $7C0A
	JSR ClearBit_X							;C2/74D4: 20 D1 01     JSR $01D1
	STA InactiveMonsters						;C2/74D7: 8D 0A 7C     STA $7C0A
	TXA 								;C2/74DA: 8A           TXA 
	CLC 								;C2/74DB: 18           CLC 
	ADC #$04							;C2/74DC: 69 04        ADC #$04
	TAX 								;C2/74DE: AA           TAX 
	INC ActiveParticipants,X					;C2/74DF: FE C2 3E     INC $3EC2,X
	REP #$20							;C2/74E2: C2 20        REP #$20
	CLC 								;C2/74E4: 18           CLC 
	LDA $0E								;C2/74E5: A5 0E        LDA $0E
	ADC #$0004							;C2/74E7: 69 04 00     ADC #$0004
	JSR ShiftMultiply_128						;C2/74EA: 20 B2 01     JSR $01B2
	TAX 								;C2/74ED: AA           TAX 
	STX $14			;Target Monster CharStruct offset	;C2/74EE: 86 14        STX $14
	TDC 								;C2/74F0: 7B           TDC 
	SEP #$20							;C2/74F1: E2 20        SEP #$20
	STZ CharStruct.Status1,X	;clear all status		;C2/74F3: 9E 1A 20     STZ $201A,X
	STZ CharStruct.Status2,X					;C2/74F6: 9E 1B 20     STZ $201B,X
	STZ CharStruct.Status3,X					;C2/74F9: 9E 1C 20     STZ $201C,X
	STZ CharStruct.Status4,X					;C2/74FC: 9E 1D 20     STZ $201D,X
	CLC 								;C2/74FF: 18           CLC 
	LDA $0E								;C2/7500: A5 0E        LDA $0E
	ADC #$04							;C2/7502: 69 04        ADC #$04
	JSR GetTimerOffset	;Y = timer offset			;C2/7504: 20 07 02     JSR $0207
	TDC 			;disable all timers			;C2/7507: 7B           TDC 
	STA EnableTimer.0,Y						;C2/7508: 99 F1 3C     STA $3CF1,Y
	STA EnableTimer.1,Y						;C2/750B: 99 F2 3C     STA $3CF2,Y
	STA EnableTimer.2,Y						;C2/750E: 99 F3 3C     STA $3CF3,Y
	STA EnableTimer.3,Y						;C2/7511: 99 F4 3C     STA $3CF4,Y
	STA EnableTimer.4,Y						;C2/7514: 99 F5 3C     STA $3CF5,Y
	STA EnableTimer.5,Y						;C2/7517: 99 F6 3C     STA $3CF6,Y
	STA EnableTimer.6,Y						;C2/751A: 99 F7 3C     STA $3CF7,Y
	STA EnableTimer.7,Y						;C2/751D: 99 F8 3C     STA $3CF8,Y
	STA EnableTimer.8,Y						;C2/7520: 99 F9 3C     STA $3CF9,Y
	STA EnableTimer.9,Y						;C2/7523: 99 FA 3C     STA $3CFA,Y
	LDA $11								;C2/7526: A5 11        LDA $11
	BMI .MaxHP							;C2/7528: 30 1C        BMI $7546
	REP #$20							;C2/752A: C2 20        REP #$20
	LDX AttackerOffset						;C2/752C: A6 32        LDX $32
	LDA CharStruct.CurHP,X	;copy attacker's HP			;C2/752E: BD 06 20     LDA $2006,X
	LDX $14								;C2/7531: A6 14        LDX $14
	STA CharStruct.CurHP,X	;to target's HP				;C2/7533: 9D 06 20     STA $2006,X
	CMP CharStruct.MaxHP,X						;C2/7536: DD 08 20     CMP $2008,X
	BCC ++								;C2/7539: 90 06        BCC $7541
	LDA CharStruct.MaxHP,X						;C2/753B: BD 08 20     LDA $2008,X
	STA CharStruct.CurHP,X	;cap at Max HP				;C2/753E: 9D 06 20     STA $2006,X
++	TDC 								;C2/7541: 7B           TDC 
	SEP #$20							;C2/7542: E2 20        SEP #$20
	BRA .Next							;C2/7544: 80 0D        BRA $7553

.MaxHP
	REP #$20							;C2/7546: C2 20        REP #$20
	LDX $14			;Target Monster CharStruct offset	;C2/7548: A6 14        LDX $14
	LDA CharStruct.MaxHP,X						;C2/754A: BD 08 20     LDA $2008,X
	STA CharStruct.CurHP,X	;Full HP				;C2/754D: 9D 06 20     STA $2006,X
	TDC 								;C2/7550: 7B           TDC 
	SEP #$20							;C2/7551: E2 20        SEP #$20
.Next		
	INC $0E								;C2/7553: E6 0E        INC $0E
	LDA $0E								;C2/7555: A5 0E        LDA $0E
	CMP #$08		;8 monsters to check			;C2/7557: C9 08        CMP #$08
	BEQ +								;C2/7559: F0 03        BEQ $755E
	JMP .MonsterLoop						;C2/755B: 4C 94 74     JMP $7494
+	INC UnknownReaction						;C2/755E: EE FB 7B     INC $7BFB
	RTS 								;C2/7561: 60           RTS 

%org($C27562)
;Attack Type 61 (Stalker and Sandworm)
;Handles special fight gimmicks for Stalker and Sandworm, flagging which targets are valid to attack
Attack61:
	LDA SandwormBattle							;C2/7562: AD 4C 7C     LDA $7C4C
	BNE .SandwormBattle							;C2/7565: D0 71        BNE $75D8
	TDC 									;C2/7567: 7B           TDC 
	TAY 									;C2/7568: A8           TAY 
	LDX #$0200		;hardcoded CharStruct offset, first monster	;C2/7569: A2 00 02     LDX #$0200
	
.MonsterLoop			;set false image on all monsters	
	LDA CharStruct.Status4,X						;C2/756C: BD 1D 20     LDA $201D,X
	ORA #$40		;false image					;C2/756F: 09 40        ORA #$40
	STA CharStruct.Status4,X						;C2/7571: 9D 1D 20     STA $201D,X
	JSR NextCharOffset								;C2/7574: 20 E0 01     JSR $01E0
	INY 									;C2/7577: C8           INY 
	CPY #$0008								;C2/7578: C0 08 00     CPY #$0008
	BNE .MonsterLoop							;C2/757B: D0 EF        BNE $756C

.RandomMonster			;randomly pick monster slots until we find one that exists
	LDX #$0004								;C2/757D: A2 04 00     LDX #$0004
	LDA #$0B								;C2/7580: A9 0B        LDA #$0B
	JSR Random_X_A  	;4..11						;C2/7582: 20 7C 00     JSR $007C    (4..11)
	TAY 									;C2/7585: A8           TAY 
	LDA ActiveParticipants,Y						;C2/7586: B9 C2 3E     LDA $3EC2,Y
	BEQ .RandomMonster							;C2/7589: F0 F2        BEQ $757D
		
	TYA 									;C2/758B: 98           TYA 
	REP #$20								;C2/758C: C2 20        REP #$20
	JSR ShiftMultiply_128	;convert to CharStruct Offset			;C2/758E: 20 B2 01     JSR $01B2
	TAX 									;C2/7591: AA           TAX 
	TDC 									;C2/7592: 7B           TDC 
	SEP #$20								;C2/7593: E2 20        SEP #$20
	LDA CharStruct.Status4,X						;C2/7595: BD 1D 20     LDA $201D,X
	AND #$BF		;clear false image				;C2/7598: 29 BF        AND #$BF
	STA CharStruct.Status4,X						;C2/759A: 9D 1D 20     STA $201D,X
	TDC 									;C2/759D: 7B           TDC 
	TAY 									;C2/759E: A8           TAY 
	LDX #$0200		;hardcoded CharStruct offset, first monster	;C2/759F: A2 00 02     LDX #$0200
	REP #$20								;C2/75A2: C2 20        REP #$20
	LDA CharStruct.CurHP,X							;C2/75A4: BD 06 20     LDA $2006,X
	STA $0E									;C2/75A7: 85 0E        STA $0E
	
.FindHighHP			;finds highest monster HP of first 4 monsters	
	LDA CharStruct.CurHP,X							;C2/75A9: BD 06 20     LDA $2006,X
	CMP $0E									;C2/75AC: C5 0E        CMP $0E
	BCS +									;C2/75AE: B0 02        BCS $75B2
	STA $0E									;C2/75B0: 85 0E        STA $0E
+	CLC 									;C2/75B2: 18           CLC 
	TXA 									;C2/75B3: 8A           TXA 
	ADC #$0080		;next character					;C2/75B4: 69 80 00     ADC #$0080
	TAX 									;C2/75B7: AA           TAX 
	INY 									;C2/75B8: C8           INY 
	CPY #$0004								;C2/75B9: C0 04 00     CPY #$0004
	BNE .FindHighHP								;C2/75BC: D0 EB        BNE $75A9
		
	TDC 									;C2/75BE: 7B           TDC 
	TAY 									;C2/75BF: A8           TAY 
	LDX #$0200		;hardcoded CharStruct offset, first monster	;C2/75C0: A2 00 02     LDX #$0200
		
.SetHP				;sets monster 0-3 HP to the highest found	
	LDA $0E									;C2/75C3: A5 0E        LDA $0E
	STA CharStruct.CurHP,X							;C2/75C5: 9D 06 20     STA $2006,X
	CLC 									;C2/75C8: 18           CLC 
	TXA 									;C2/75C9: 8A           TXA 
	ADC #$0080		;next character					;C2/75CA: 69 80 00     ADC #$0080
	TAX 									;C2/75CD: AA           TAX 
	INY 									;C2/75CE: C8           INY 
	CPY #$0004								;C2/75CF: C0 04 00     CPY #$0004
	BNE .SetHP								;C2/75D2: D0 EF        BNE $75C3
	TDC 									;C2/75D4: 7B           TDC 
	SEP #$20								;C2/75D5: E2 20        SEP #$20
	RTS 									;C2/75D7: 60           RTS 
	
	
.SandwormBattle									;
	TDC 									;C2/75D8: 7B           TDC 
	TAX 									;C2/75D9: AA           TAX 
.FindCommand
	LDA GFXQueue.1,X							;C2/75DA: BD 4D 38     LDA $384D,X
	CMP #$F2								;C2/75DD: C9 F2        CMP #$F2
	BEQ .Found								;C2/75DF: F0 07        BEQ $75E8
	INX 			;5 byte structure				;C2/75E1: E8           INX 
	INX 									;C2/75E2: E8           INX 
	INX 									;C2/75E3: E8           INX 
	INX 									;C2/75E4: E8           INX 
	INX 									;C2/75E5: E8           INX 
	BRA .FindCommand							;C2/75E6: 80 F2        BRA $75DA
.Found	STX $10			;GFXQueue table index				;C2/75E8: 86 10        STX $10
	TDC 									;C2/75EA: 7B           TDC 
	TAY 									;C2/75EB: A8           TAY 
	LDX #$0200		;hardcoded CharStruct offset, first monster	;C2/75EC: A2 00 02     LDX #$0200

.MonsterLoop6			;set false image on first 6 monsters
	LDA CharStruct.Status4,X						;C2/75EF: BD 1D 20     LDA $201D,X
	ORA #$40		;false image					;C2/75F2: 09 40        ORA #$40
	STA CharStruct.Status4,X						;C2/75F4: 9D 1D 20     STA $201D,X
	JSR NextCharOffset							;C2/75F7: 20 E0 01     JSR $01E0
	INY 									;C2/75FA: C8           INY 
	CPY #$0006								;C2/75FB: C0 06        CPY #$0006
	BNE .MonsterLoop6							;C2/75FE: D0 EF        BNE $75EF
	
	LDX #$0007								;C2/7600: A2 07 00     LDX #$0007
	LDA #$09								;C2/7603: A9 09        LDA #$09
	JSR Random_X_A  	;Random 7..9					;C2/7605: 20 7C 00     JSR $007C   (7..9)
	STA $0E									;C2/7608: 85 0E        STA $0E
	REP #$20								;C2/760A: C2 20        REP #$20
	JSR ShiftMultiply_128	;convert to CharStruct Offset	 		;C2/760C: 20 B2 01     JSR $01B2
	TAX 									;C2/760F: AA           TAX 
	TDC 									;C2/7610: 7B           TDC 
	SEP #$20								;C2/7611: E2 20        SEP #$20
	LDA CharStruct.Status4,X						;C2/7613: BD 1D 20     LDA $201D,X
	AND #$BF		;clear false image				;C2/7616: 29 BF        AND #$BF
	STA CharStruct.Status4,X						;C2/7618: 9D 1D 20     STA $201D,X
	STZ ActiveParticipants+7	;worm spots all inactive		;C2/761B: 9C C9 3E     STZ $3EC9
	STZ ActiveParticipants+8						;C2/761E: 9C CA 3E     STZ $3ECA
	STZ ActiveParticipants+9						;C2/7621: 9C CB 3E     STZ $3ECB
	INC ActiveParticipants+4	;holes all active			;C2/7624: EE C6 3E     INC $3EC6
	INC ActiveParticipants+5						;C2/7627: EE C7 3E     INC $3EC7
	INC ActiveParticipants+6						;C2/762A: EE C8 3E     INC $3EC8
	LDA $0E		;7..9							;C2/762D: A5 0E        LDA $0E
	TAX 									;C2/762F: AA           TAX 
	INC ActiveParticipants,X	;worm's spot is active			;C2/7630: FE C2 3E     INC $3EC2,X
	SEC 									;C2/7633: 38           SEC 
	SBC #$07								;C2/7634: E9 07        SBC #$07
	TAX 		;0..2							;C2/7636: AA           TAX 
	LDA #$E0	;first 3 bits set					;C2/7637: A9 E0        LDA #$E0
	JSR ClearBit_X								;C2/7639: 20 D1 01     JSR $01D1
	STA $12		;2 bits set for active holes				;C2/763C: 85 12        STA $12
	SEC 									;C2/763E: 38           SEC 
	LDA $0E		;7..9							;C2/763F: A5 0E        LDA $0E
	SBC #$03	;4..6							;C2/7641: E9 03        SBC #$03
	TAX 									;C2/7643: AA           TAX 
	STZ ActiveParticipants,X	;worm's hole is inactive		;C2/7644: 9E C2 3E     STZ $3EC2,X
	SEC 									;C2/7647: 38           SEC 
	LDA $0E		;7..9							;C2/7648: A5 0E        LDA $0E
	SBC #$04	;3..5							;C2/764A: E9 04        SBC #$04
	TAX 									;C2/764C: AA           TAX 
	LDA $12		;2 bits set for active holes				;C2/764D: A5 12        LDA $12
	JSR SetBit_X	;sets bit for active worm				;C2/764F: 20 D6 01     JSR $01D6
	LDX $10		;GFXQueue table index					;C2/7652: A6 10        LDX $10
	STA GFXQueue.3,X							;C2/7654: 9D 4F 38     STA $384F,X
	LDA #$02	;2nd monster active					;C2/7657: A9 02        LDA #$02
	STA MonsterKillTracker							;C2/7659: 8D 09 7C     STA $7C09
	LDA #$FD	;inverse of above					;C2/765C: A9 FD        LDA #$FD
	STA InactiveMonsters							;C2/765E: 8D 0A 7C     STA $7C0A
	RTS 									;C2/7661: 60           RTS 

%org($C27662)
;Attack Type 62 (Library Book Monster Swap)
;hides the user, unhides the next monster in the formation
Attack62:
	TDC 							;C2/7662: 7B           TDC 
	TAX 							;C2/7663: AA           TAX 
.FindCommand	
	LDA GFXQueue.1,X					;C2/7664: BD 4D 38     LDA $384D,X
	CMP #$F2						;C2/7667: C9 F2        CMP #$F2
	BEQ .Found						;C2/7669: F0 07        BEQ $7672
	INX 							;C2/766B: E8           INX 
	INX 							;C2/766C: E8           INX 
	INX 							;C2/766D: E8           INX 
	INX 							;C2/766E: E8           INX 
	INX 							;C2/766F: E8           INX 
	BRA .FindCommand					;C2/7670: 80 F2        BRA $7664
.Found	SEC 							;C2/7672: 38           SEC 
	LDA AttackerIndex					;C2/7673: A5 47        LDA $47
	SBC #$04		;convert to monster index	;C2/7675: E9 04        SBC #$04
	INC 			;next monster			;C2/7677: 1A           INC 
	STA $0E							;C2/7678: 85 0E        STA $0E
	ASL 							;C2/767A: 0A           ASL 
	TAY 							;C2/767B: A8           TAY 
	LDA BattleMonsterID,Y					;C2/767C: B9 20 40     LDA $4020,Y
	AND BattleMonsterID+1,Y					;C2/767F: 39 21 40     AND $4021,Y
	CMP #$FF						;C2/7682: C9 FF        CMP #$FF
	BEQ .Miss		;nothing in this slot, abort	;C2/7684: F0 42        BEQ $76C8
	PHX 							;C2/7686: DA           PHX 
	LDA $0E							;C2/7687: A5 0E        LDA $0E
	TAX 							;C2/7689: AA           TAX 
	TDC 							;C2/768A: 7B           TDC 
	JSR SetBit_X		;bit set for new monster	;C2/768B: 20 D6 01     JSR $01D6
	PLX 							;C2/768E: FA           PLX 
	STA GFXQueue.3,X					;C2/768F: 9D 4F 38     STA $384F,X
	LDA $0E			;monster index for new monster	;C2/7692: A5 0E        LDA $0E
	TAX 							;C2/7694: AA           TAX 
	DEX 			;index for original monster	;C2/7695: CA           DEX 
	TDC 							;C2/7696: 7B           TDC 
	JSR SetBit_X		;original monster..		;C2/7697: 20 D6 01     JSR $01D6
	ORA InactiveMonsters	;never existed			;C2/769A: 0D 0A 7C     ORA $7C0A
	STA InactiveMonsters					;C2/769D: 8D 0A 7C     STA $7C0A
	TXA 							;C2/76A0: 8A           TXA 
	CLC 							;C2/76A1: 18           CLC 
	ADC #$04						;C2/76A2: 69 04        ADC #$04
	TAX 							;C2/76A4: AA           TAX 
	STZ ActiveParticipants,X	;no longer active	;C2/76A5: 9E C2 3E     STZ $3EC2,X
	LDA $0E							;C2/76A8: A5 0E        LDA $0E
	TAX 							;C2/76AA: AA           TAX 
	TDC 							;C2/76AB: 7B           TDC 
	JSR SetBit_X						;C2/76AC: 20 D6 01     JSR $01D6
	ORA MonstersVisible					;C2/76AF: 0D 48 40     ORA $4048
	STA MonstersVisible	;new monster visible		;C2/76B2: 8D 48 40     STA $4048
	LDA InactiveMonsters	 				;C2/76B5: AD 0A 7C     LDA $7C0A
	JSR ClearBit_X		;pretend it was from the start	;C2/76B8: 20 D1 01     JSR $01D1
	STA InactiveMonsters					;C2/76BB: 8D 0A 7C     STA $7C0A
	TXA 							;C2/76BE: 8A           TXA 
	CLC 							;C2/76BF: 18           CLC 
	ADC #$04						;C2/76C0: 69 04        ADC #$04
	TAX 							;C2/76C2: AA           TAX 
	INC ActiveParticipants,X	;new monster active	;C2/76C3: FE C2 3E     INC $3EC2,X
	BRA +							;C2/76C6: 80 02        BRA $76CA
.Miss	INC AtkMissed						;C2/76C8: E6 56        INC $56
+	INC UnknownReaction					;C2/76CA: EE FB 7B     INC $7BFB
	RTS 							;C2/76CD: 60           RTS 

%org($C276CE)
;Attack Type 63 (Grand Cross)
%sub(Attack63)
Attack63:
	LDX TargetOffset						;C2/76CE: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/76D0: BD 1A 20     LDA $201A,X
	AND #$C2		;select for dead/stone/zombie		;C2/76D3: 29 C2        AND #$C2
	BEQ +	 							;C2/76D5: F0 01        BEQ $76D8    (Check if Target Status 1 = Dead, Stone or Zombie)
	RTS 								;C2/76D7: 60           RTS 
									;
+	LDA #$01							;C2/76D8: A9 01        LDA #$01
	STA StatusFixedDur						;C2/76DA: 8D D7 3E     STA $3ED7
	TDC 								;C2/76DD: 7B           TDC 
	TAX 								;C2/76DE: AA           TAX 
	LDA #$11		;17					;C2/76DF: A9 11        LDA #$11
	JSR Random_X_A 		;0..17					;C2/76E1: 20 7C 00     JSR $007C  (0..17)
	BNE +								;C2/76E4: D0 04        BNE $76EA
	LDA #$80		;0: Dead				;C2/76E6: A9 80        LDA #$80
	BRA .Status1							;C2/76E8: 80 28        BRA $7712
+	DEC								;C2/76EA: 3A           DEC
	BNE +								;C2/76EB: D0 04        BNE $76F1
	LDA #$40		;1: Stone				;C2/76ED: A9 40        LDA #$40
	BRA .Status1							;C2/76EF: 80 21        BRA $7712
+	DEC 								;C2/76F1: 3A           DEC 
	BNE +								;C2/76F2: D0 04        BNE $76F8
	LDA #$20		;2: Toad				;C2/76F4: A9 20        LDA #$20
	BRA .Status1							;C2/76F6: 80 1A        BRA $7712
+	DEC 								;C2/76F8: 3A           DEC 
	BNE +								;C2/76F9: D0 04        BNE $76FF
	LDA #$10		;3: Mini				;C2/76FB: A9 10        LDA #$10
	BRA .Status1							;C2/76FD: 80 13        BRA $7712
+	DEC 								;C2/76FF: 3A           DEC 
	BNE +								;C2/7700: D0 04        BNE $7706
	LDA #$04		;4: Poison				;C2/7702: A9 04        LDA #$04
	BRA .Status1							;C2/7704: 80 0C        BRA $7712
+	DEC 								;C2/7706: 3A           DEC 
	BNE +								;C2/7707: D0 04        BNE $770D
	LDA #$02		;5: Zombie				;C2/7709: A9 02        LDA #$02
	BRA .Status1							;C2/770B: 80 05        BRA $7712
+	DEC 								;C2/770D: 3A           DEC 
	BNE +								;C2/770E: D0 09        BNE $7719
	LDA #$01		;6: Blind				;C2/7710: A9 01        LDA #$01
.Status1
	STA Param3							;C2/7712: 85 59        STA $59
	JSR ApplyStatus1						;C2/7714: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1)
	BRA .Finish							;C2/7717: 80 58        BRA $7771
+	DEC 								;C2/7719: 3A           DEC 
	BNE +								;C2/771A: D0 04        BNE $7720
	LDA #$80		;7: Old					;C2/771C: A9 80        LDA #$80
	BRA .Status2							;C2/771E: 80 21        BRA $7741
+	DEC 								;C2/7720: 3A           DEC 
	BNE +								;C2/7721: D0 04        BNE $7727
	LDA #$40		;8: Sleep				;C2/7723: A9 40        LDA #$40
	BRA .Status2							;C2/7725: 80 1A        BRA $7741
+	DEC 								;C2/7727: 3A           DEC 
	BNE +								;C2/7728: D0 04        BNE $772E
	LDA #$20		;9: Paralyze				;C2/772A: A9 20        LDA #$20
	BRA .Status2		 					;C2/772C: 80 13        BRA $7741
+	DEC 								;C2/772E: 3A           DEC 
	BNE +								;C2/772F: D0 04        BNE $7735
	LDA #$10		;10: Charm				;C2/7731: A9 10        LDA #$10
	BRA .Status2							;C2/7733: 80 0C        BRA $7741
+	DEC 								;C2/7735: 3A           DEC 
	BNE +								;C2/7736: D0 04        BNE $773C
	LDA #$08		;11: Berserk				;C2/7738: A9 08        LDA #$08
	BRA .Status2							;C2/773A: 80 05        BRA $7741
+	DEC 								;C2/773C: 3A           DEC 
	BNE +								;C2/773D: D0 09        BNE $7748
	LDA #$04		;12: Mute				;C2/773F: A9 04        LDA #$04
.Status2
	STA Param3							;C2/7741: 85 59        STA $59
	JSR ApplyStatus2						;C2/7743: 20 2E 8D     JSR $8D2E  (Apply Status Effect 2)
	BRA .Finish							;C2/7746: 80 29        BRA $7771
+	DEC 								;C2/7748: 3A           DEC 
	BNE +								;C2/7749: D0 04        BNE $774F
	LDA #$04		;13: Slow				;C2/774B: A9 04        LDA #$04
	BRA .Status3							;C2/774D: 80 05        BRA $7754
+	DEC 								;C2/774F: 3A           DEC 
	BNE +								;C2/7750: D0 09        BNE $775B
	LDA #$04		;14: Slow 				;C2/7752: A9 04        LDA #$04
.Status3
	STA Param3							;C2/7754: 85 59        STA $59
	JSR ApplyStatus3						;C2/7756: 20 CB 8D     JSR $8DCB  (Apply Status Effect 3)
	BRA .Finish							;C2/7759: 80 16        BRA $7771
+	DEC 								;C2/775B: 3A           DEC 
	BNE +								;C2/775C: D0 04        BNE $7762
	LDA #$10		;15: Countdown				;C2/775E: A9 10        LDA #$10
	BRA .Status4							;C2/7760: 80 05        BRA $7767
+	DEC 								;C2/7762: 3A           DEC 
	BNE +								;C2/7763: D0 09        BNE $776E
	LDA #$08		;16: HP Leak				;C2/7765: A9 08        LDA #$08
.Status4
	STA Param3							;C2/7767: 85 59        STA $59
	JSR ApplyStatus4						;C2/7769: 20 05 8E     JSR $8E05  (Apply Status Effect 4)
	BRA .Finish							;C2/776C: 80 03        BRA $7771
+	JSR SetHPCritical	;17: HP Critical			;C2/776E: 20 FD 88     JSR $88FD  (Reduce HP to critical Damage)
.Finish	STZ AtkMissed							;C2/7771: 64 56        STZ $56
	RTS 								;C2/7773: 60           RTS 
%endsub()

%org($C27774)
;Attack Type 64 (Chicken Knife)
;Param2/3: Proc% and Proc, not handled here
%sub(Attack64)
Attack64:
	JSR SetHit100andHalfTargetEvade					;C2/7774: 20 53 7C     JSR $7C53  (Hit = 100, Evade = Evade/2)
	JSR HitPhysical							;C2/7777: 20 BE 7E     JSR $7EBE  (Hit Determination for physical)
	LDA AtkMissed							;C2/777A: A5 56        LDA $56
	BNE .Miss							;C2/777C: D0 20        BNE $779E
	JSR ChickenDamage						;C2/777E: 20 26 86     JSR $8626  (Chicken Knife Damage formula)
	JSR BackRowMod							;C2/7781: 20 9B 83     JSR $839B  (Back Row Modifications to Damage)
	JSR CommandMod							;C2/7784: 20 BD 83     JSR $83BD  (Command Modifiers to Damage)
	JSR TargetStatusModPhys						;C2/7787: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys					;C2/778A: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JSR MagicSwordMod						;C2/778D: 20 84 86     JSR $8684  (Magic Sword Modifiers)
	LDA TargetDead							;C2/7790: A5 61        LDA $61
	BNE .Ret							;C2/7792: D0 0F        BNE $77A3
	LDA AtkMissed							;C2/7794: A5 56        LDA $56
	BNE .Miss							;C2/7796: D0 06        BNE $779E
	JSR CalcFinalDamageMSword					;C2/7798: 20 11 88     JSR $8811  (Calculate Final Damage)
	JMP ApplyMSwordStatus						;C2/779B: 4C CF 8B     JMP $8BCF  (Apply Magic Sword Status Effects)
.Miss	LDA #$80							;C2/779E: A9 80        LDA #$80
	STA AtkMissed							;C2/77A0: 85 56        STA $56
	RTS 								;C2/77A2: 60           RTS 
.Ret	RTS 								;C2/77A3: 60           RTS 
%endsub()

%org($C277A4)
;Attack Type 65 (Interceptor Rocket)
Attack65:
	LDX TargetOffset						;C2/77A4: A6 49        LDX $49
	LDA CharStruct.CmdStatus,X					;C2/77A6: BD 1E 20     LDA $201E,X
	AND #$10   		;jumping				;C2/77A9: 29 10        AND #$10     (If target is Jumping)
	BEQ .Miss							;C2/77AB: F0 06        BEQ $77B3
	LDA #$50		;command $50 (forced landing)		;C2/77AD: A9 50        LDA #$50
	STA CharStruct.Command,X					;C2/77AF: 9D 57 20     STA $2057,X
	RTS 								;C2/77B2: 60           RTS 
.Miss	INC AtkMissed							;C2/77B3: E6 56        INC $56
	RTS 								;C2/77B5: 60           RTS 

%org($C277B6)
;Attack Type 66 (Targetting)
%sub(Attack66)
Attack66:
	SEC 							;C2/77B6: 38           SEC 
	LDA AttackerIndex					;C2/77B7: A5 47        LDA $47
	SBC #$04		;now monster index		;C2/77B9: E9 04        SBC #$04
	ASL 							;C2/77BB: 0A           ASL 
	TAY 							;C2/77BC: A8           TAY 
	TDC 							;C2/77BD: 7B           TDC 
	STA ForcedTarget.Party,Y				;C2/77BE: 99 2A 7C     STA $7C2A,Y
	STA ForcedTarget.Monster,Y				;C2/77C1: 99 2B 7C     STA $7C2B,Y
	LDA TargetIndex						;C2/77C4: A5 48        LDA $48
	CMP #$04						;C2/77C6: C9 04        CMP #$04
	BCS .Monster						;C2/77C8: B0 09        BCS $77D3
	TAX 							;C2/77CA: AA           TAX 
	TDC 							;C2/77CB: 7B           TDC 
	JSR SetBit_X						;C2/77CC: 20 D6 01     JSR $01D6
	STA ForcedTarget.Party,Y				;C2/77CF: 99 2A 7C     STA $7C2A,Y
	RTS 							;C2/77D2: 60           RTS 
;
.Monster
	SEC 							;C2/77D3: 38           SEC 
	SBC #$04						;C2/77D4: E9 04        SBC #$04
	TAX 							;C2/77D6: AA           TAX 
	TDC 							;C2/77D7: 7B           TDC 
	JSR SetBit_X						;C2/77D8: 20 D6 01     JSR $01D6
	STA ForcedTarget.Monster,Y				;C2/77DB: 99 2B 7C     STA $7C2B,Y
	RTS 							;C2/77DE: 60           RTS 
	RTS 							;C2/77DF: 60           RTS 
%endsub()

%org($C277E0)
;Attack Type 67 (Pull) and Attack Type 68 (Terminate)
;Somewhat oddly, Attack 67 jumps into the middle of Attack 68
Attack68:
	LDA #$20						;C2/77E0: A9 20        LDA #$20
	STA BattleOver						;C2/77E2: 8D DE 7B     STA $7BDE
%org($C277E5)
Attack67:		
	INC UnknownReaction					;C2/77E5: EE FB 7B     INC $7BFB
	RTS 							;C2/77E8: 60           RTS 

%org($C277E9)
%sub(Attack69)
;Attack Type 69 (Control)
Attack69:
	JSR SetupMsgBoxIndexes	;sets Y=MessageBoxData index		;C2/77E9: 20 65 99     JSR $9965
	STX $14			;MessageBoxes index			;C2/77EC: 86 14        STX $14
	LDX TargetOffset						;C2/77EE: A6 49        LDX $49
	LDA CharStruct.Status2,X					;C2/77F0: BD 1B 20     LDA $201B,X
	AND #$18     		;Charm/Berserk				;C2/77F3: 29 18        AND #$18     (Can't Control if Target Status2 = Charm or Berserk)
	BEQ +								;C2/77F5: F0 03        BEQ $77FA
	JMP .Immune							;C2/77F7: 4C AE 78     JMP $78AE
+	LDA CharStruct.Status4,X					;C2/77FA: BD 1D 20     LDA $201D,X
	AND #$20     		;Controlled				;C2/77FD: 29 20        AND #$20     (Can't Control if Target Status4 = Control)
	BEQ +								;C2/77FF: F0 03        BEQ $7804
	JMP .Already							;C2/7801: 4C B2 78     JMP $78B2
+	LDA CharStruct.CmdImmunity,X  					;C2/7804: BD 66 20     LDA $2066,X  (Check for Immunity to Control)
	AND #$10		;Control Immunity			;C2/7807: 29 10        AND #$10
	BEQ +								;C2/7809: F0 03        BEQ $780E
	JMP .Immune							;C2/780B: 4C AE 78     JMP $78AE
+	JSR Random_0_99   						;C2/780E: 20 A2 02     JSR $02A2   (0..99)
	STA $0E			;0.99					;C2/7811: 85 0E        STA $0E
	LDX AttackerOffset						;C2/7813: A6 32        LDX $32
	LDA CharStruct.Headgear,X					;C2/7815: BD 0E 20     LDA $200E,X
	CMP #$CB    		;Hardcoded Coronet id   		;C2/7818: C9 CB        CMP #$CB    (If Attacker is wearing Coronet)
	BNE +								;C2/781A: D0 08        BNE $7824
	LDA $0E								;C2/781C: A5 0E        LDA $0E
	CMP #$4B    		;75% with coronet			;C2/781E: C9 4B        CMP #$4B    (0..99) < 75
	BCC .Success							;C2/7820: 90 0B        BCC $782D
	BRA .MissJ							;C2/7822: 80 06        BRA $782A
+	LDA $0E								;C2/7824: A5 0E        LDA $0E
	CMP #$28    		;40% without				;C2/7826: C9 28        CMP #$28    (0..99) < 40
	BCC .Success							;C2/7828: 90 03        BCC $782D
.MissJ	JMP .Miss							;C2/782A: 4C B9 78     JMP $78B9
.Success
	LDX TargetOffset						;C2/782D: A6 49        LDX $49
	LDA #$80							;C2/782F: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/7831: 9D 56 20     STA $2056,X
	STZ CharStruct.Command,X					;C2/7834: 9E 57 20     STZ $2057,X
	LDA CharStruct.Status4,X					;C2/7837: BD 1D 20     LDA $201D,X
	ORA #$20     		;Controlled				;C2/783A: 09 20        ORA #$20     (Inflict Control Status4 on target)
	STA CharStruct.Status4,X					;C2/783C: 9D 1D 20     STA $201D,X
	LDA AttackerIndex						;C2/783F: A5 47        LDA $47
	TAX 								;C2/7841: AA           TAX 
	STZ ControlCommand,X						;C2/7842: 9E 3E 7C     STZ $7C3E,X
	LDA TargetIndex							;C2/7845: A5 48        LDA $48
	STA ControlTarget,X						;C2/7847: 9D 3A 7C     STA $7C3A,X
	LDA AttackerIndex						;C2/784A: A5 47        LDA $47
	TAX 								;C2/784C: AA           TAX 
	LDA ROMTimes20,X	;*20					;C2/784D: BF DB EE D0  LDA $D0EEDB,X
	TAY 								;C2/7851: A8           TAY 
	STY $10			;attacker index * structure size	;C2/7852: 84 10        STY $10
	SEC 								;C2/7854: 38           SEC 
	LDA TargetIndex							;C2/7855: A5 48        LDA $48
	SBC #$04		;now monster index			;C2/7857: E9 04        SBC #$04
	ASL 								;C2/7859: 0A           ASL 
	TAX 								;C2/785A: AA           TAX 
	REP #$20							;C2/785B: C2 20        REP #$20
	LDA BattleMonsterID,X						;C2/785D: BD 20 40     LDA $4020,X
	JSR ShiftMultiply_4						;C2/7860: 20 B7 01     JSR $01B7
	TAX 								;C2/7863: AA           TAX 
	TDC 								;C2/7864: 7B           TDC 
	SEP #$20							;C2/7865: E2 20        SEP #$20
	STZ $0E			;loop index				;C2/7867: 64 0E        STZ $0E

.CopyActionsLoop
	LDA ROMControlActions,X						;C2/7869: BF 00 56 D0  LDA $D05600,X
	STA CharControl.Actions,Y					;C2/786D: 99 DC 37     STA $37DC,Y
	CMP #$FF							;C2/7870: C9 FF        CMP #$FF
	BNE +								;C2/7872: D0 04        BNE $7878
	LDA #$80							;C2/7874: A9 80        LDA #$80
	BRA ++								;C2/7876: 80 01        BRA $7879
+	TDC 								;C2/7878: 7B           TDC 
++	STA CharControl.Flags,Y						;C2/7879: 99 EC 37     STA $37EC,Y
	INX 								;C2/787C: E8           INX 
	INY 								;C2/787D: C8           INY 
	INC $0E								;C2/787E: E6 0E        INC $0E
	LDA $0E								;C2/7880: A5 0E        LDA $0E
	CMP #$04							;C2/7882: C9 04        CMP #$04
	BNE .CopyActionsLoop						;C2/7884: D0 E3        BNE $7869

	STZ $0E			;loop index				;C2/7886: 64 0E        STZ $0E
	LDY $10			;attacker index * structure size	;C2/7888: A4 10        LDY $10

.CopyTargettingLoop
	LDA CharControl.Actions,Y					;C2/788A: B9 DC 37     LDA $37DC,Y
	REP #$20							;C2/788D: C2 20        REP #$20
	JSR ShiftMultiply_8						;C2/788F: 20 B6 01     JSR $01B6
	TAX 								;C2/7892: AA           TAX 
	TDC 								;C2/7893: 7B           TDC 
	SEP #$20							;C2/7894: E2 20        SEP #$20
	LDA ROMMagicInfo.Targetting,X					;C2/7896: BF 80 0B D1  LDA $D10B80,X
	STA CharControl.Targetting,Y					;C2/789A: 99 E8 37     STA $37E8,Y
	INY 								;C2/789D: C8           INY 
	INC $0E								;C2/789E: E6 0E        INC $0E
	LDA $0E								;C2/78A0: A5 0E        LDA $0E
	CMP #$04							;C2/78A2: C9 04        CMP #$04
	BNE .CopyTargettingLoop						;C2/78A4: D0 E4        BNE $788A

	LDX $14			;MessageBoxes index			;C2/78A6: A6 14        LDX $14
	LDA #$24		;success message			;C2/78A8: A9 24        LDA #$24
	STA MessageBoxes,X						;C2/78AA: 9D 5F 3C     STA $3C5F,X
	RTS 								;C2/78AD: 60           RTS 
	
.Immune									;
	LDA #$4E		;can't control message			;C2/78AE: A9 4E        LDA #$4E
	BRA +								;C2/78B0: 80 02        BRA $78B4
.Already
	LDA #$4C		;already controlled message		;C2/78B2: A9 4C        LDA #$4C
+	LDX $14								;C2/78B4: A6 14        LDX $14
	STA MessageBoxes,X						;C2/78B6: 9D 5F 3C     STA $3C5F,X
.Miss	INC AtkMissed							;C2/78B9: E6 56        INC $56
	RTS 								;C2/78BB: 60           RTS 
%endsub()

%org($C278BC)
;Attack Type 6A (Win Battle)
%sub(Attack6A)
Attack6A:
	STZ ActiveParticipants+4	;these are the monster slots	;C2/78BC: 9C C6 3E     STZ $3EC6
	STZ ActiveParticipants+5					;C2/78BF: 9C C7 3E     STZ $3EC7
	STZ ActiveParticipants+6					;C2/78C2: 9C C8 3E     STZ $3EC8
	STZ ActiveParticipants+7					;C2/78C5: 9C C9 3E     STZ $3EC9
	STZ ActiveParticipants+8					;C2/78C8: 9C CA 3E     STZ $3ECA
	STZ ActiveParticipants+9					;C2/78CB: 9C CB 3E     STZ $3ECB
	STZ ActiveParticipants+10					;C2/78CE: 9C CC 3E     STZ $3ECC
	STZ ActiveParticipants+11					;C2/78D1: 9C CD 3E     STZ $3ECD
	LDA #$80			;Enemies Dead			;C2/78D4: A9 80        LDA #$80
	STA BattleOver							;C2/78D6: 8D DE 7B     STA $7BDE
	INC UnknownReaction						;C2/78D9: EE FB 7B     INC $7BFB
	RTS 								;C2/78DC: 60           RTS 
%endsub()


%org($C278DD)
;Attack Type 6B (Grant Immunity or Creature Type)
;Param1: Creature Type
;Param2: Status 1 Immunity
;Param3: Element Up
Attack6B:
	JSR AddElementUp					;C2/78DD: 20 FD 91     JSR $91FD  (Grant Magic Element Up)
	LDA Param2						;C2/78E0: A5 58        LDA $58
	STA Param3						;C2/78E2: 85 59        STA $59
	JSR AddStatus1Immunity					;C2/78E4: 20 F2 91     JSR $91F2  (Grant Status 1 Immunity)
	LDA Param1						;C2/78E7: A5 57        LDA $57
	STA Param3						;C2/78E9: 85 59        STA $59
	JMP AddCreatureType					;C2/78EB: 4C E7 91     JMP $91E7  (Grant Creature Type)

%org($C278EE)
;Attack Type 6C (Strong vs. Creature Type)
;Param2: Spell Power
;Param3: Creature Type
Attack6C:
	JSR NormalMagicDamage					;C2/78EE: 20 30 7F     JSR $7F30  (Magic damage formula)
	JSR CreatureMod						;C2/78F1: 20 DD 84     JSR $84DD  (Creature type modifier to damage)
	JSR TargetStatusModMag					;C2/78F4: 20 F3 84     JSR $84F3  (Target Status Effect Modifiers to Magic Damage)
	JMP CalcFinalDamage					;C2/78F7: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)

%org($C278FA)
;Attack Type 6D (Vampire)
;Param1: Hit%
Attack6D:
	JSR HitMagic  							;C2/78FA: 20 F6 7E     JSR $7EF6  (Hit Determination for Magic)
	LDA AtkMissed							;C2/78FD: A5 56        LDA $56
	BNE .Ret							;C2/78FF: D0 19        BNE $791A
	REP #$20							;C2/7901: C2 20        REP #$20
	LDX AttackerOffset						;C2/7903: A6 32        LDX $32
	SEC 								;C2/7905: 38           SEC 
	LDA CharStruct.MaxHP,X						;C2/7906: BD 08 20     LDA $2008,X
	SBC CharStruct.CurHP,X						;C2/7909: FD 06 20     SBC $2006,X
	LSR        							;C2/790C: 4A           LSR          
	STA Attack   							;C2/790D: 85 50        STA $50      (Damage =  (Attacker Max HP - Attacker Current HP)/2)
	TDC 								;C2/790F: 7B           TDC 
	STA Defense   							;C2/7910: 85 54        STA $54      (Defense = 0)
	INC 								;C2/7912: 1A           INC 
	STA M   							;C2/7913: 85 52        STA $52      (M = 1)
	SEP #$20							;C2/7915: E2 20        SEP #$20
	JSR DrainDamage							;C2/7917: 20 26 89     JSR $8926    (Magic Sword Drain)
.Ret	RTS 								;C2/791A: 60           RTS 

%org($C2791B)
;Attack Type 6E (Brave Blade)
Attack6E:
	JSR SetHit100andTargetEvade					;C2/791B: 20 47 7C     JSR $7C47  (Hit = 100, Evade = Evade)
	JSR HitPhysical 						;C2/791E: 20 BE 7E     JSR $7EBE  (Hit Determination for physical)
	LDA AtkMissed							;C2/7921: A5 56        LDA $56
	BNE .Miss							;C2/7923: D0 23        BNE $7948
	JSR BraveDamage							;C2/7925: 20 77 85     JSR $8577  (Brave Blade Damage formula)
	JSR BackRowMod 							;C2/7928: 20 9B 83     JSR $839B  (Back Row Modifications to Damage)
	JSR CommandMod							;C2/792B: 20 BD 83     JSR $83BD  (Command Modifiers to Damage)
	JSR DoubleGripMod 						;C2/792E: 20 30 84     JSR $8430  (Double Grip Modifiers to Damage)
	JSR TargetStatusModPhys 					;C2/7931: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys 					;C2/7934: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JSR MagicSwordMod 						;C2/7937: 20 84 86     JSR $8684  (Magic Sword Modifiers)
	LDA TargetDead							;C2/793A: A5 61        LDA $61
	BNE .Ret							;C2/793C: D0 0E        BNE $794C
	LDA AtkMissed							;C2/793E: A5 56        LDA $56
	BNE .Miss							;C2/7940: D0 06        BNE $7948
	JSR CalcFinalDamageMSword					;C2/7942: 20 11 88     JSR $8811  (Calculate Final Damage)
	JMP ApplyMSwordStatus						;C2/7945: 4C CF 8B     JMP $8BCF  (Apply Magic Sword Status Effects)
.Miss	LDA #$80							;C2/7948: A9 80        LDA #$80
	STA AtkMissed							;C2/794A: 85 56        STA $56
.Ret	RTS 								;C2/794C: 60           RTS 

%org($C2794D)
;Attack Type 6F (Strong Fight)
Attack6F:
	JSR StrongFightDamage						;C2/794D: 20 F1 85     JSR $85F1  (Strong Fight Damage formula)
	JSR TargetStatusModPhys						;C2/7950: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JMP CalcFinalDamage						;C2/7953: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)

%org($C27956)
;Attack Type 70 (Wormhole)
;Param3: Status 4
Attack70:
	LDA TargetIndex							;C2/7956: A5 48        LDA $48
	TAX 								;C2/7958: AA           TAX 
	LDA ActiveParticipants,X					;C2/7959: BD C2 3E     LDA $3EC2,X
	BNE .Miss			;miss on living members		;C2/795C: D0 03        BNE $7961
	JMP ApplyStatus4						;C2/795E: 4C 05 8E     JMP $8E05  (Apply Status Effect 4)
.Miss	INC AtkMissed							;C2/7961: E6 56        INC $56
	RTS 								;C2/7963: 60           RTS 

%org($C27964)
;Attack Type 71 (Next Monster Form)
;Looks for 4 specific encounters, does nothing in other fights
;Actually, there's only one battle in that table and it's ArchaeAvis
;I'm also fairly sure this isn't used at all, even for that fight
%sub(Attack71)
Attack71:
	REP #$20								;C2/7964: C2 20        REP #$20
	TDC 									;C2/7966: 7B           TDC 
	TAX 									;C2/7967: AA           TAX 
	TAY 									;C2/7968: A8           TAY 
	
.CheckEncounterLoop
	LDA ROMMonsterFormData.Encounter,X					;C2/7969: BF A0 FF D0  LDA $D0FFA0,X
	CMP EncounterIndex							;C2/796D: CD F0 04     CMP $04F0
	BEQ .SpecialEncounter							;C2/7970: F0 10        BEQ $7982
	CLC 									;C2/7972: 18           CLC 
	TXA 									;C2/7973: 8A           TXA 
	ADC #$0010								;C2/7974: 69 10 00     ADC #$0010
	TAX 									;C2/7977: AA           TAX 
	INY 									;C2/7978: C8           INY 
	CPY #$0004								;C2/7979: C0 04 00     CPY #$0004
	BNE .CheckEncounterLoop							;C2/797C: D0 EB        BNE $7969
	TDC 									;C2/797E: 7B           TDC 
	SEP #$20								;C2/797F: E2 20        SEP #$20
	RTS 									;C2/7981: 60           RTS 

.SpecialEncounter	;note we start in 16 bit mode here		;and I had to manually fix this disassembly								;
	CLC 								;C2/7982: 18           CLC 
	TXA 								;C2/7983: 8A           TXA 
	ADC #$FFA0	;hardcoded address of ROMMonsterFormData	;C2/7984: 69 A0 FF     ADC #$FFA0
	STA $0E								;C2/7987: 85 0E        STA $0E
	TDC								;C2/7989: 7B           TDC
	SEP #$20							;C2/798A: E2 20        SEP #$20
	LDA #$D0							;C2/798C: A9 D0        LDA #$D0
	STA $10		;$0E now holds the 24 bit address $D0FFA0,X	;C2/798E: 85 10        STA $10
	
.LoadNewFormID	
	LDA MonsterNextForm						;C2/7990: AD 72 7C     LDA $7C72
	ASL 								;C2/7993: 0A           ASL 
	TAY 								;C2/7994: A8           TAY 
	LDA [$0E],Y	;load new monster ID				;C2/7995: B7 0E        LDA [$0E],Y
	STA $12								;C2/7997: 85 12        STA $12
	INY 								;C2/7999: C8           INY 
	LDA [$0E],Y							;C2/799A: B7 0E        LDA [$0E],Y
	STA $13								;C2/799C: 85 13        STA $13
	LDA $12								;C2/799E: A5 12        LDA $12
	ORA $13								;C2/79A0: 05 13        ORA $13
	BNE .HasData							;C2/79A2: D0 0E        BNE $79B2
	
.NoData			;data being all 0 indicates we've gone past the last form
	LDA MonsterNextForm						;C2/79A4: AD 72 7C     LDA $7C72
	DEC 								;C2/79A7: 3A           DEC 
	BNE .SetForm1	;if next form was any form but 1, set form 1	;C2/79A8: D0 01        BNE $79AB
	RTS 		;if next form was 1, abort now			;C2/79AA: 60           RTS 
			;(because something has gone wrong, I think)	
.SetForm1
	LDA #$01							;C2/79AB: A9 01        LDA #$01
	STA MonsterNextForm	;set next form to 1 then		;C2/79AD: 8D 72 7C     STA $7C72
	BRA .LoadNewFormID	;try loading new monster form again	;C2/79B0: 80 DE        BRA $7990
	
.HasData	
	INC MonsterNextForm						;C2/79B2: EE 72 7C     INC $7C72
	LDA #$D0							;C2/79B5: A9 D0        LDA #$D0
	STA $10								;C2/79B7: 85 10        STA $10
	LDY #$0000							;C2/79B9: A0 00 00     LDY #$0000
	STY $0E		;$D00000, normal monster stats			;C2/79BC: 84 0E        STY $0E
	LDA $13								;C2/79BE: A5 13        LDA $13
	BEQ .NotBoss							;C2/79C0: F0 09        BEQ $79CB
	LDA #$D0							;C2/79C2: A9 D0        LDA #$D0
	STA $10								;C2/79C4: 85 10        STA $10
	LDY #$2000							;C2/79C6: A0 00 20     LDY #$2000
	STY $0E		;$D02000, boss monster stats			;C2/79C9: 84 0E        STY $0E
.NotBoss
	LDA $12								;C2/79CB: A5 12        LDA $12
	REP #$20							;C2/79CD: C2 20        REP #$20
	JSR ShiftMultiply_32						;C2/79CF: 20 B4 01     JSR $01B4
	TAY 								;C2/79D2: A8           TAY 
	TDC 								;C2/79D3: 7B           TDC 
	TAX 								;C2/79D4: AA           TAX 
	SEP #$20							;C2/79D5: E2 20        SEP #$20
	STZ $11								;C2/79D7: 64 11        STZ $11

.CopyMonsterStatsLoop
	LDA [$0E],Y								;C2/79D9: B7 0E        LDA [$0E],Y
	STA !TempMStats,X							;C2/79DB: 9D F0 26     STA $26F0,X
	INY 									;C2/79DE: C8           INY 
	INX 									;C2/79DF: E8           INX 
	INC $11									;C2/79E0: E6 11        INC $11
	LDA $11									;C2/79E2: A5 11        LDA $11
	CMP #$20								;C2/79E4: C9 20        CMP #$20
	BNE .CopyMonsterStatsLoop						;C2/79E6: D0 F1        BNE $79D9

	LDA AttackerIndex							;C2/79E8: A5 47        LDA $47
	JSR GetTimerOffset		;puts timer offset in Y			;C2/79EA: 20 07 02     JSR $0207
	TDC 									;C2/79ED: 7B           TDC 
	STA EnableTimer.0,Y		;clear timers				;C2/79EE: 99 F1 3C     STA $3CF1,Y
	STA EnableTimer.1,Y							;C2/79F1: 99 F2 3C     STA $3CF2,Y
	STA EnableTimer.2,Y							;C2/79F4: 99 F3 3C     STA $3CF3,Y
	STA EnableTimer.3,Y							;C2/79F7: 99 F4 3C     STA $3CF4,Y
	STA EnableTimer.4,Y							;C2/79FA: 99 F5 3C     STA $3CF5,Y
	STA EnableTimer.5,Y							;C2/79FD: 99 F6 3C     STA $3CF6,Y
	STA EnableTimer.6,Y							;C2/7A00: 99 F7 3C     STA $3CF7,Y
	STA EnableTimer.7,Y							;C2/7A03: 99 F8 3C     STA $3CF8,Y
	STA EnableTimer.8,Y							;C2/7A06: 99 F9 3C     STA $3CF9,Y
	STA EnableTimer.9,Y							;C2/7A09: 99 FA 3C     STA $3CFA,Y
	LDY AttackerOffset							;C2/7A0C: A4 32        LDY $32
	TDC 									;C2/7A0E: 7B           TDC 
	STA CharStruct.Status1,Y	;clear status				;C2/7A0F: 99 1A 20     STA $201A,Y
	STA CharStruct.Status2,Y						;C2/7A12: 99 1B 20     STA $201B,Y
	STA CharStruct.Status3,Y						;C2/7A15: 99 1C 20     STA $201C,Y
	STA CharStruct.Status4,Y						;C2/7A18: 99 1D 20     STA $201D,Y
	TAX 									;C2/7A1B: AA           TAX 
	LDA TempMStats.Speed,X							;C2/7A1C: BD F0 26     LDA $26F0,X
	STA CharStruct.BaseAgi,Y						;C2/7A1F: 99 25 20     STA $2025,Y
	STA CharStruct.EquippedAgi,Y						;C2/7A22: 99 29 20     STA $2029,Y
	LDA TempMStats.AttackPower,X						;C2/7A25: BD F1 26     LDA $26F1,X
	STA CharStruct.MonsterAttack,Y						;C2/7A28: 99 44 20     STA $2044,Y
	LDA TempMStats.AttackMult,X						;C2/7A2B: BD F2 26     LDA $26F2,X
	STA CharStruct.MonsterM,Y						;C2/7A2E: 99 62 20     STA $2062,Y
	LDA TempMStats.Evade,X							;C2/7A31: BD F3 26     LDA $26F3,X
	STA CharStruct.Evade,Y							;C2/7A34: 99 2C 20     STA $202C,Y
	LDA TempMStats.Defense,X						;C2/7A37: BD F4 26     LDA $26F4,X
	STA CharStruct.Defense,Y						;C2/7A3A: 99 2D 20     STA $202D,Y
	LDA TempMStats.MagicPower,X						;C2/7A3D: BD F5 26     LDA $26F5,X
	STA CharStruct.BaseMag,Y						;C2/7A40: 99 27 20     STA $2027,Y
	STA CharStruct.EquippedMag,Y						;C2/7A43: 99 2B 20     STA $202B,Y
	LDA TempMStats.MDefense,X						;C2/7A46: BD F6 26     LDA $26F6,X
	STA CharStruct.MDefense,Y						;C2/7A49: 99 2F 20     STA $202F,Y
	LDA TempMStats.MEvade,X							;C2/7A4C: BD F7 26     LDA $26F7,X
	STA CharStruct.MEvade,Y							;C2/7A4F: 99 2E 20     STA $202E,Y
	REP #$20								;C2/7A52: C2 20        REP #$20
	LDA TempMStats.HP,X							;C2/7A54: BD F8 26     LDA $26F8,X
	STA CharStruct.CurHP,Y							;C2/7A57: 99 06 20     STA $2006,Y
	STA CharStruct.MaxHP,Y							;C2/7A5A: 99 08 20     STA $2008,Y
	LDA TempMStats.MP,X							;C2/7A5D: BD FA 26     LDA $26FA,X
	STA CharStruct.CurMP,Y							;C2/7A60: 99 0A 20     STA $200A,Y
	LDA #$270F			;monsters always have 9999 max mp	;C2/7A63: A9 0F 27     LDA #$270F
	STA CharStruct.MaxMP,Y							;C2/7A66: 99 0C 20     STA $200C,Y
	LDA TempMStats.Exp,X							;C2/7A69: BD FC 26     LDA $26FC,X
	STA CharStruct.RewardExp,Y						;C2/7A6C: 99 67 20     STA $2067,Y
	LDA TempMStats.Gil,X							;C2/7A6F: BD FE 26     LDA $26FE,X
	STA CharStruct.RewardGil,Y						;C2/7A72: 99 69 20     STA $2069,Y
	LDA TempMStats.StatusImmune1,X						;C2/7A75: BD 02 27     LDA $2702,X
	STA CharStruct.StatusImmune1,Y	;also copies StatusImmune2		;C2/7A78: 99 35 20     STA $2035,Y
	TDC 									;C2/7A7B: 7B           TDC 
	SEP #$20								;C2/7A7C: E2 20        SEP #$20
	LDA TempMStats.StatusImmune3,X						;C2/7A7E: BD 04 27     LDA $2704,X
	STA CharStruct.StatusImmune3,Y						;C2/7A81: 99 37 20     STA $2037,Y
	LDA TempMStats.AttackFX,X						;C2/7A84: BD 00 27     LDA $2700,X
	STA CharStruct.RHWeapon,Y						;C2/7A87: 99 13 20     STA $2013,Y
	LDA TempMStats.EAbsorb,X						;C2/7A8A: BD 05 27     LDA $2705,X
	STA CharStruct.EAbsorb,Y						;C2/7A8D: 99 30 20     STA $2030,Y
	LDA TempMStats.EImmune,X						;C2/7A90: BD 01 27     LDA $2701,X
	STA CharStruct.EImmune,Y						;C2/7A93: 99 32 20     STA $2032,Y
	LDA TempMStats.CantEvade,X						;C2/7A96: BD 06 27     LDA $2706,X
	STA CharStruct.CantEvade,Y						;C2/7A99: 99 64 20     STA $2064,Y
	LDA TempMStats.EWeak,X							;C2/7A9C: BD 07 27     LDA $2707,X
	STA CharStruct.EWeak,Y							;C2/7A9F: 99 34 20     STA $2034,Y
	LDA TempMStats.CreatureType,X						;C2/7AA2: BD 08 27     LDA $2708,X
	STA CharStruct.CreatureType,Y						;C2/7AA5: 99 65 20     STA $2065,Y
	LDA TempMStats.CmdImmunity,X						;C2/7AA8: BD 09 27     LDA $2709,X
	STA CharStruct.CmdImmunity,Y						;C2/7AAB: 99 66 20     STA $2066,Y
	LDA TempMStats.Level,X							;C2/7AAE: BD 0F 27     LDA $270F,X
	STA CharStruct.Level,Y							;C2/7AB1: 99 02 20     STA $2002,Y
	STA CharStruct.EquippedVit,Y						;C2/7AB4: 99 2A 20     STA $202A,Y
	PHY 									;C2/7AB7: 5A           PHY 
	REP #$20								;C2/7AB8: C2 20        REP #$20
	LDA $12									;C2/7ABA: A5 12        LDA $12
	ASL 									;C2/7ABC: 0A           ASL 
	TAX 									;C2/7ABD: AA           TAX 
	TDC 									;C2/7ABE: 7B           TDC 
	SEP #$20								;C2/7ABF: E2 20        SEP #$20
	LDA ROMSpecialtyData.Properties,X					;C2/7AC1: BF 00 99 D0  LDA $D09900,X
	STA $1C									;C2/7AC5: 85 1C        STA $1C
	LDA ROMSpecialtyData.Name,X						;C2/7AC7: BF 01 99 D0  LDA $D09901,X
	STA $1D									;C2/7ACB: 85 1D        STA $1D
	PLY 									;C2/7ACD: 7A           PLY 
	LDA $1C									;C2/7ACE: A5 1C        LDA $1C
	STA CharStruct.Specialty,Y						;C2/7AD0: 99 6E 20     STA $206E,Y
	LDA $1D									;C2/7AD3: A5 1D        LDA $1D
	STA CharStruct.SpecialtyName,Y						;C2/7AD5: 99 7F 20     STA $207F,Y
	RTS 									;C2/7AD8: 60           RTS 
%endsub()

%org($C27AD9)
;Attack Type 72 (Bows Strong vs. Creature)
;Param1: Creature Type
Attack72:
	JSR SetHit100andHalfTargetEvade					;C2/7AD9: 20 53 7C     JSR $7C53  (Hit = 100, Evade = Evade/2)
	JSR HitPhysical							;C2/7ADC: 20 BE 7E     JSR $7EBE  (Hit Determination for physical)
	LDA AtkMissed							;C2/7ADF: A5 56        LDA $56
	BNE .Miss							;C2/7AE1: D0 12        BNE $7AF5
	JSR KnifeDamage							;C2/7AE3: 20 D4 80     JSR $80D4  (Knives damage formula)
	JSR CommandMod							;C2/7AE6: 20 BD 83     JSR $83BD  (Command Modifiers to Damage)
	JSR TargetStatusModPhys						;C2/7AE9: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys					;C2/7AEC: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JSR CheckCreatureCrit						;C2/7AEF: 20 F9 87     JSR $87F9  (Check Creature type for Critical Hit)
	JMP CalcFinalDamage						;C2/7AF2: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/7AF5: A9 80        LDA #$80
	STA AtkMissed							;C2/7AF7: 85 56        STA $56
	RTS 								;C2/7AF9: 60           RTS 

%org($C27AFA)
;Attack Type 73 (Spears Strong vs. Creature)
;Param1: Creature Type
%sub(Attack73)
Attack73:
	JSR SetHit100andTargetEvade					;C2/7AFA: 20 47 7C     JSR $7C47  (Hit = 100, Evade = Evade)
	JSR HitPhysical							;C2/7AFD: 20 BE 7E     JSR $7EBE  (Hit Determination for physical)
	LDA AtkMissed							;C2/7B00: A5 56        LDA $56
	BNE .Miss							;C2/7B02: D0 15        BNE $7B19
	JSR SwordDamage							;C2/7B04: 20 FC 7F     JSR $7FFC  (Swords damage formula)
	JSR CommandMod							;C2/7B07: 20 BD 83     JSR $83BD  (Command Modifiers to Damage)
	JSR CheckJump							;C2/7B0A: 20 52 84     JSR $8452  (Check for Jump)
	JSR TargetStatusModPhys						;C2/7B0D: 20 12 85     JSR $8512  (Target Status Effect Modifiers to Damage)
	JSR AttackerStatusModPhys					;C2/7B10: 20 33 85     JSR $8533  (Attacker Status Effect Modifiers to Damage)
	JSR CheckCreatureCrit						;C2/7B13: 20 F9 87     JSR $87F9  (Check Creature type for Critical Hit)
	JMP CalcFinalDamage						;C2/7B16: 4C 05 8A     JMP $8A05  (Calculate Magic Final Damage)
.Miss	LDA #$80							;C2/7B19: A9 80        LDA #$80
	STA AtkMissed							;C2/7B1B: 85 56        STA $56
	RTS 								;C2/7B1D: 60           RTS 
%endsub()

%org($C27B1E)
;Attack Type 74 (Miss), Attack Type 7E also mapped here
Attack74:
	INC AtkMissed							;C2/7B1E: E6 56        INC $56
;Attack type 75 (Do Nothing), Attack Type 7F also mapped here	
Attack75:
	RTS 								;C2/7B20: 60           RTS 

%org($C27B21)
AtkTypeJumpTable:
%generatejumptable(Attack,$75)


%org($C27C0D)
;(Hit = Attacker Level + Hit - Target Level, Evade = Magic Evade)
HitCalcLevelMEvade: 
	LDX AttackerOffset					;C2/7C0D: A6 32        LDX $32
	CLC 							;C2/7C0F: 18           CLC 
	LDA Param1					 	;C2/7C10: A5 57        LDA $57
	ADC Level  						;C2/7C12: 6D E5 7B     ADC $7BE5     (Level + Spell Hit%)
	STA $0E							;C2/7C15: 85 0E        STA $0E
	LDX TargetOffset					;C2/7C17: A6 49        LDX $49
	CLC 							;C2/7C19: 18           CLC 
	LDA CharStruct.Level,X					;C2/7C1A: BD 02 20     LDA $2002,X
	ADC CharStruct.BonusLevel,X				;C2/7C1D: 7D 78 20     ADC $2078,X   (Level + Level Bonus due to Hero Song)
	STA $0F							;C2/7C20: 85 0F        STA $0F
	SEC 							;C2/7C22: 38           SEC 
	LDA $0E							;C2/7C23: A5 0E        LDA $0E
	SBC $0F							;C2/7C25: E5 0F        SBC $0F
	BCS +							;C2/7C27: B0 04        BCS $7C2D
	LDA #$01   						;C2/7C29: A9 01        LDA #$01      (Min Hit% = 1)
	BRA ++							;C2/7C2B: 80 06        BRA $7C33
+	CMP #$63						;C2/7C2D: C9 63        CMP #$63
	BCC ++							;C2/7C2F: 90 02        BCC $7C33
	LDA #$63   						;C2/7C31: A9 63        LDA #$63      (Max Hit% = 99)
++	STA HitPercent						;C2/7C33: 85 4E        STA $4E
	LDA CharStruct.MEvade,X					;C2/7C35: BD 2E 20     LDA $202E,X   (Evade = Magic Evade%)
	STA EvadePercent					;C2/7C38: 85 4F        STA $4F
	RTS 							;C2/7C3A: 60           RTS 

%org($C27C3B)
;Hit=Param1, Evade=Target Evade
;duplicate of another routine only called from one place
%sub(SetHitParam1andTargetEvade_Dupe)
SetHitParam1andTargetEvade_Dupe:
	LDA Param1						;C2/7C3B: A5 57        LDA $57
	STA HitPercent						;C2/7C3D: 85 4E        STA $4E    ($4E = Hit%)
	LDX TargetOffset					;C2/7C3F: A6 49        LDX $49
	LDA CharStruct.Evade,X					;C2/7C41: BD 2C 20     LDA $202C,X  ($4F = Target Evade)
	STA EvadePercent					;C2/7C44: 85 4F        STA $4F
	RTS 							;C2/7C46: 60           RTS 
%endsub()	
	
%org($C27C47)
;(Hit = 100, Evade = Evade%)
SetHit100andTargetEvade:
	LDA #$64						;C2/7C47: A9 64        LDA #$64
	STA HitPercent     					;C2/7C49: 85 4E        STA $4E     ($4E = 100)
	LDX TargetOffset					;C2/7C4B: A6 49        LDX $49
	LDA CharStruct.Evade,X					;C2/7C4D: BD 2C 20     LDA $202C,X
	STA EvadePercent					;C2/7C50: 85 4F        STA $4F     ($4F = Target Evade)
	RTS 							;C2/7C52: 60           RTS 

%org($C27C53)	
;Hit=100%, Evade=Target Evade/2
SetHit100andHalfTargetEvade:
	LDA #$64	;100					;C2/7C53: A9 64        LDA #$64
	STA HitPercent						;C2/7C55: 85 4E        STA $4E    ($4E = 100)
	LDX TargetOffset					;C2/7C57: A6 49        LDX $49
	LDA CharStruct.Evade,X					;C2/7C59: BD 2C 20     LDA $202C,X
	LSR 							;C2/7C5C: 4A           LSR 
	STA EvadePercent    					;C2/7C5D: 85 4F        STA $4F    ($4F = Target Evade/2)
	RTS 							;C2/7C5F: 60           RTS 

%org($C27C60)
;Hit=Param1, Evade=Target Evade
SetHitParam1andTargetEvade:
	LDA Param1						;C2/7C60: A5 57        LDA $57
	STA HitPercent    					;C2/7C62: 85 4E        STA $4E    ($4E = Hit%)
	LDX TargetOffset					;C2/7C64: A6 49        LDX $49
	LDA CharStruct.Evade,X					;C2/7C66: BD 2C 20     LDA $202C,X  ($4F = Target Evade)
	STA EvadePercent  					;C2/7C69: 85 4F        STA $4F
	RTS 							;C2/7C6B: 60           RTS 

	
%org($C27C6C)
;Hit=Param1
;Evade=Target Evade/2
SetHitParam1andHalfTargetEvade:
	LDA Param1						;C2/7C6C: A5 57        LDA $57
	STA HitPercent    					;C2/7C6E: 85 4E        STA $4E    ($4E = Hit%)
	LDX TargetOffset					;C2/7C70: A6 49        LDX $49
	LDA CharStruct.Evade,X					;C2/7C72: BD 2C 20     LDA $202C,X
	LSR        						;C2/7C75: 4A           LSR        ($4F = Target Evade/2)
	STA EvadePercent					;C2/7C76: 85 4F        STA $4F
	RTS 							;C2/7C78: 60           RTS 

%org($C27C79)
;Hit=Param1
;Evade=Target Magic Evade
SetHitParam1andTargetMagicEvade:
	LDA Param1						;C2/7C79: A5 57        LDA $57
	STA HitPercent    					;C2/7C7B: 85 4E        STA $4E    ($4E = Hit%)
	LDX TargetOffset					;C2/7C7D: A6 49        LDX $49
	LDA CharStruct.MEvade,X					;C2/7C7F: BD 2E 20     LDA $202E,X
	STA EvadePercent    					;C2/7C82: 85 4F        STA $4F    ($4F = Target Magic Evade)
	RTS 							;C2/7C84: 60           RTS 

%org($C27C85)
;Steal Success Determination
HitCalcSteal:
	LDA Param1						;C2/7C85: A5 57        LDA $57
	STA HitPercent    					;C2/7C87: 85 4E        STA $4E    ($4E = Hit%)
	STZ EvadePercent    					;C2/7C89: 64 4F        STZ $4F    ($4F = 0)
	LDX AttackerOffset					;C2/7C8B: A6 32        LDX $32
	LDA CharStruct.ArmorProperties,X			;C2/7C8D: BD 39 20     LDA $2039,X  (Check Attacker Armour Special Effect Byte)
	AND #$10   		;improved steal			;C2/7C90: 29 10        AND #$10     (Check if Steal Up)
	BEQ +							;C2/7C92: F0 02        BEQ $7C96
	ASL HitPercent						;C2/7C94: 06 4E        ASL $4E    (Hit% = Hit% * 2)
+	RTS 							;C2/7C96: 60           RTS 
	
%org($C27C97)	
;Aegis Shield Check
CheckAegis:
	LDX TargetOffset					;C2/7C97: A6 49        LDX $49
	LDA CharStruct.Status2,X				;C2/7C99: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X				;C2/7C9C: 1D 71 20     ORA $2071,X
	AND #$70   		;sleep/charm/paralyze		;C2/7C9F: 29 70        AND #$70      (Target Status2 = Sleep, Charm or Paralyze)
	BNE .Return						;C2/7CA1: D0 1F        BNE $7CC2
	LDA CharStruct.Status3,X				;C2/7CA3: BD 1C 20     LDA $201C,X
	AND #$10   		;stop				;C2/7CA6: 29 10        AND #$10      (Target Status3 = Stop)
	BNE .Return						;C2/7CA8: D0 18        BNE $7CC2
	LDA CharStruct.ArmorProperties,X			;C2/7CAA: BD 39 20     LDA $2039,X   (Target Armour Special Effect Byte = Aegis Shield)
	BPL .Return						;C2/7CAD: 10 13        BPL $7CC2
	JSR Random_0_99						;C2/7CAF: 20 A2 02     JSR $02A2
	CMP #$21 		;33				;C2/7CB2: C9 21        CMP #$21      (0..99) < 33
	BCS .Return						;C2/7CB4: B0 0C        BCS $7CC2
	LDA AttackerIndex					;C2/7CB6: A5 47        LDA $47
	CMP TargetIndex    					;C2/7CB8: C5 48        CMP $48       (Can't Miss if Attacker = Target)
	BEQ .Return						;C2/7CBA: F0 06        BEQ $7CC2
	LDA #$07						;C2/7CBC: A9 07        LDA #$07
	STA ShieldBlock					;C2/7CBE: 85 5D        STA $5D
	INC AtkMissed 						;C2/7CC0: E6 56        INC $56       (Attack Misses)
.Return	RTS 							;C2/7CC2: 60           RTS 


%org($C27CC3)
%sub(MultiTargetHitPercent)
;Multitargetting effect on Hit%
MultiTargetHitPercent:
	LDA AttackerOffset2							;C2/7CC3: A5 39        LDA $39
	TAX 									;C2/7CC5: AA           TAX 
	LDA AttackInfo.Targetting,X 						;C2/7CC6: BD FC 79     LDA $79FC,X   
	AND #$40    		;hits all					;C2/7CC9: 29 40        AND #$40     (If attacker's spell is auto Multitargettable)
	BNE .Return								;C2/7CCB: D0 2E        BNE $7CFB
	LDA MultiCommand							;C2/7CCD: AD 2C 7B     LDA $7B2C
	ASL 									;C2/7CD0: 0A           ASL 
	TAX 									;C2/7CD1: AA           TAX 
	LDA TargetBitmask,X							;C2/7CD2: BD FC 7A     LDA $7AFC,X
	AND #$F0								;C2/7CD5: 29 F0        AND #$F0
	BNE +			;party targetted				;C2/7CD7: D0 14        BNE $7CED
	LDA TargetBitmask,X							;C2/7CD9: BD FC 7A     LDA $7AFC,X
	AND #$0F								;C2/7CDC: 29 0F        AND #$0F
	JSR ShiftMultiply_16							;C2/7CDE: 20 B5 01     JSR $01B5    (x16)
	STA $0E									;C2/7CE1: 85 0E        STA $0E
	LDA TargetBitmask+1,X							;C2/7CE3: BD FD 7A     LDA $7AFD,X
	AND #$F0								;C2/7CE6: 29 F0        AND #$F0
	JSR ShiftDivide_16							;C2/7CE8: 20 BE 01     JSR $01BE    (/16)
	ORA $0E			;A now contains monsters in order		;C2/7CEB: 05 0E        ORA $0E
+	JSR CountSetBits	;result in X					;C2/7CED: 20 C3 01     JSR $01C3
	DEX 									;C2/7CF0: CA           DEX 
	BEQ .Return		;if only one target				;C2/7CF1: F0 08        BEQ $7CFB
	LSR HitPercent     							;C2/7CF3: 46 4E        LSR $4E       (Hit = Hit% / 2)
	LDA HitPercent								;C2/7CF5: A5 4E        LDA $4E
	BNE .Return								;C2/7CF7: D0 02        BNE $7CFB
	INC HitPercent     							;C2/7CF9: E6 4E        INC $4E       (Minimum Hit = 1)
.Return	RTS 									;C2/7CFB: 60           RTS 
%endsub()
		
%org($C27CFC)
;Check for Evade, Weapon Block or Elf Cape
CheckSpecialEvade:
	LDX TargetOffset						;C2/7CFC: A6 49        LDX $49
	LDA CharStruct.Status2,X					;C2/7CFE: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/7D01: 1D 71 20     ORA $2071,X
	AND #$70    							;C2/7D04: 29 70        AND #$70     (Target Status2 = Sleep, Charm or Paralyze)
	BNE .Return							;C2/7D06: D0 76        BNE $7D7E
	LDA CharStruct.Status3,X					;C2/7D08: BD 1C 20     LDA $201C,X  
	AND #$10    							;C2/7D0B: 29 10        AND #$10     (Target Status3 = Stop)
	BNE .Return							;C2/7D0D: D0 6F        BNE $7D7E
	LDA CharStruct.Passives1,X					;C2/7D0F: BD 20 20     LDA $2020,X
	AND #$40    							;C2/7D12: 29 40        AND #$40     (Target has Evade Ability)
	BEQ +								;C2/7D14: F0 14        BEQ $7D2A
	JSR Random_0_99							;C2/7D16: 20 A2 02     JSR $02A2
	CMP #$19    							;C2/7D19: C9 19        CMP #$19     (0.99) < 25
	BCS +								;C2/7D1B: B0 0D        BCS $7D2A
	LDA AttackerIndex						;C2/7D1D: A5 47        LDA $47
	CMP TargetIndex						;C2/7D1F: C5 48        CMP $48      (Can't Miss if Attacker = Target)
	BEQ +								;C2/7D21: F0 07        BEQ $7D2A
	LDA #$05							;C2/7D23: A9 05        LDA #$05
	STA BladeGrasp							;C2/7D25: 85 5E        STA $5E
	INC AtkMissed   						;C2/7D27: E6 56        INC $56      (Attack Misses)
	RTS 								;C2/7D29: 60           RTS 
+
	LDX TargetOffset						;C2/7D2A: A6 49        LDX $49
	LDA CharStruct.WeaponProperties,X				;C2/7D2C: BD 38 20     LDA $2038,X
	BPL +   							;C2/7D2F: 10 14        BPL $7D45    (Check Weapon Special Effect Byte = 80h = Hardened + Defender)
	JSR Random_0_99							;C2/7D31: 20 A2 02     JSR $02A2
	CMP #$19    							;C2/7D34: C9 19        CMP #$19     (0.99) < 25
	BCS +								;C2/7D36: B0 0D        BCS $7D45
	LDA AttackerIndex						;C2/7D38: A5 47        LDA $47
	CMP TargetIndex    						;C2/7D3A: C5 48        CMP $48      (Can't Miss if Attacker = Target)
	BEQ +								;C2/7D3C: F0 07        BEQ $7D45
	LDA #$01							;C2/7D3E: A9 01        LDA #$01
	STA SwordBlock							;C2/7D40: 85 5A        STA $5A
	INC AtkMissed 							;C2/7D42: E6 56        INC $56      (Attack Misses)
	RTS 								;C2/7D44: 60           RTS 
+							
	LDX TargetOffset						;C2/7D45: A6 49        LDX $49
	LDA CharStruct.WeaponProperties,X				;C2/7D47: BD 38 20     LDA $2038,X
	AND #$40    							;C2/7D4A: 29 40        AND #$40     (Check Weapon Special Effect Byte = 40h = Guardian)
	BEQ +								;C2/7D4C: F0 14        BEQ $7D62
	JSR Random_0_99							;C2/7D4E: 20 A2 02     JSR $02A2
	CMP #$19    							;C2/7D51: C9 19        CMP #$19     (0.99) < 25
	BCS +								;C2/7D53: B0 0D        BCS $7D62
	LDA AttackerIndex						;C2/7D55: A5 47        LDA $47
	CMP TargetIndex						;C2/7D57: C5 48        CMP $48      (Can't Miss if Attacker = Target)
	BEQ +								;C2/7D59: F0 07        BEQ $7D62
	LDA #$02							;C2/7D5B: A9 02        LDA #$02
	STA KnifeBlock							;C2/7D5D: 85 5B        STA $5B
	INC AtkMissed 							;C2/7D5F: E6 56        INC $56      (Attack Misses)
	RTS 								;C2/7D61: 60           RTS 
+									;Check for Elf Cape
	LDX TargetOffset						;C2/7D62: A6 49        LDX $49
	LDA CharStruct.ArmorProperties,X 				;C2/7D64: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$40    							;C2/7D67: 29 40        AND #$40      (Check if Evade (Elf Cape))
	BEQ .Return							;C2/7D69: F0 13        BEQ $7D7E
	JSR Random_0_99							;C2/7D6B: 20 A2 02     JSR $02A2
	CMP #$21    							;C2/7D6E: C9 21        CMP #$21      (0.99) < 33
	BCS .Return							;C2/7D70: B0 0C        BCS $7D7E
	LDA AttackerIndex						;C2/7D72: A5 47        LDA $47
	CMP TargetIndex						;C2/7D74: C5 48        CMP $48       (Can't Miss if Attacker = Target)
	BEQ .Return							;C2/7D76: F0 06        BEQ $7D7E
	LDA #$03							;C2/7D78: A9 03        LDA #$03
	STA ElfCape							;C2/7D7A: 85 5C        STA $5C
	INC AtkMissed 	     						;C2/7D7C: E6 56        INC $56       (Attack Misses)
.Return
	RTS								;C2/7D7E: 60           RTS

%org($C27D7F)
;Dance Hit Modifier
DanceHitMod:
	LDX AttackerOffset						;C2/7D7F: A6 32        LDX $32
	LDA CharStruct.ArmorProperties,X				;C2/7D81: BD 39 20     LDA $2039,X  (Check Attacker Armour Special Effect Byte)
	AND #$04   		;dance up				;C2/7D84: 29 04        AND #$04     (Check if Sword Dance Up)
	BEQ .Ret							;C2/7D86: F0 02        BEQ $7D8A
	ASL HitPercent    						;C2/7D88: 06 4E        ASL $4E      (Hit = Hit * 2)
.Ret	RTS 								;C2/7D8A: 60           RTS 


%org($C27D8B)
;Target Status Effect Modifiers to Magical Hit%
TargetMHitMod:
	LDX TargetOffset						;C2/7D8B: A6 49        LDX $49
	LDA CharStruct.Status3,X					;C2/7D8D: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/7D90: 1D 72 20     ORA $2072,X
	AND #$20    			;shell				;C2/7D93: 29 20        AND #$20     (Target Status3 = Shell)
	BEQ +								;C2/7D95: F0 08        BEQ $7D9F
	LSR HitPercent    						;C2/7D97: 46 4E        LSR $4E      Hit = Hit / 2
	LDA HitPercent							;C2/7D99: A5 4E        LDA $4E
	BNE +								;C2/7D9B: D0 02        BNE $7D9F
	INC HitPercent    						;C2/7D9D: E6 4E        INC $4E      Minimum Hit = 1
+	LDA CharStruct.Status1,X					;C2/7D9F: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/7DA2: 1D 70 20     ORA $2070,X
	AND #$20    			;toad				;C2/7DA5: 29 20        AND #$20     (Target Status1 = Toad)
	BEQ .Return							;C2/7DA7: F0 02        BEQ $7DAB
	STZ EvadePercent     						;C2/7DA9: 64 4F        STZ $4F      (Evade = 0)
.Return	RTS 								;C2/7DAB: 60           RTS 
								
%org($C27DAC)
;Target Status Effect Modifiers to Physical Hit%
TargetPHitMod:
	LDX TargetOffset							;C2/7DAC: A6 49        LDX $49
	LDA CharStruct.Status1,X						;C2/7DAE: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/7DB1: 1D 70 20     ORA $2070,X
	AND #$20     			;toad					;C2/7DB4: 29 20        AND #$20     		(Target Status1 = Toad)
	BEQ +									;C2/7DB6: F0 02        BEQ $7DBA
	STZ EvadePercent 							;C2/7DB8: 64 4F        STZ $4F      		(Evade = 0)
+
	LDA CharStruct.Status1,X						;C2/7DBA: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/7DBD: 1D 70 20     ORA $2070,X
	AND #$10     			;mini					;C2/7DC0: 29 10        AND #$10     		(Target Status1 = Mini)
	BEQ .Return								;C2/7DC2: F0 0C        BEQ $7DD0
	ASL EvadePercent							;C2/7DC4: 06 4F        ASL $4F			(Evade = Evade * 2)
	LDA EvadePercent     							;C2/7DC6: A5 4F        LDA $4F     		 
	CMP #$63								;C2/7DC8: C9 63        CMP #$63
	BCC .Return								;C2/7DCA: 90 04        BCC $7DD0
	LDA #$63    								;C2/7DCC: A9 63        LDA #$63    		 (Max Evade = 99)
	STA EvadePercent 							;C2/7DCE: 85 4F        STA $4F
.Return
	RTS 									;C2/7DD0: 60           RTS 

%org($C27DD1)	
;Attacker Status Effect Modifiers to Physical Hit%
AttackerStatusPHitMod:
	LDX AttackerOffset							;C2/7DD1: A6 32        LDX $32
	LDA CharStruct.Status1,X						;C2/7DD3: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/7DD6: 1D 70 20     ORA $2070,X
	AND #$01   	  							;C2/7DD9: 29 01        AND #$01   	   (Attacker Status = Blind)
	BEQ .Return								;C2/7DDB: F0 04        BEQ $7DE1
	LSR HitPercent      							;C2/7DDD: 46 4E        LSR $4E       
	LSR HitPercent    	  						;C2/7DDF: 46 4E        LSR $4E    	   (Hit = Hit/4)
.Return
	RTS 									;C2/7DE1: 60           RTS 

%org($C27DE2)
;Check for target Image
CheckTargetImage:
	LDX TargetOffset					;C2/7DE2: A6 49        LDX $49
	LDA CharStruct.Status2,X				;C2/7DE4: BD 1B 20     LDA $201B,X
	AND #$03    						;C2/7DE7: 29 03        AND #$03      (Target Status2 = Image(1) or Image(2))
	BEQ .Return						;C2/7DE9: F0 05        BEQ $7DF0
	JSR LoseOneImage					;C2/7DEB: 20 8F 93     JSR $938F
	INC AtkMissed						;C2/7DEE: E6 56        INC $56       Attack Misses
.Return	
	RTS 							;C2/7DF0: 60           RTS 

%org($C27DF1)
;Check for Void
CheckVoid:
	LDA Void 						;C2/7DF1: AD E6 7B     LDA $7BE6
	AND #$40    		;void				;C2/7DF4: 29 40        AND #$40     (Check for Void)
	BEQ .Ret						;C2/7DF6: F0 0A        BEQ $7E02
	INC AtkMissed						;C2/7DF8: E6 56        INC $56
	JSR SetupMsgBoxIndexes					;C2/7DFA: 20 65 99     JSR $9965
	LDA #$1F		;message to display		;C2/7DFD: A9 1F        LDA #$1F
	STA MessageBoxes,X					;C2/7DFF: 9D 5F 3C     STA $3C5F,X	
.Ret	RTS 							;C2/7E02: 60           RTS 	
	
%org($C27E03)
;Check for Float
CheckFloat:
	LDX TargetOffset					;C2/7E03: A6 49        LDX $49
	LDA CharStruct.Status1,X				;C2/7E05: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X				;C2/7E08: 1D 70 20     ORA $2070,X
	AND #$08   	;Float					;C2/7E0B: 29 08        AND #$08     (Target Status1 = Float)
	BEQ .Ret						;C2/7E0D: F0 02        BEQ $7E11
	INC AtkMissed						;C2/7E0F: E6 56        INC $56      Attack Misses
.Ret	RTS 							;C2/7E11: 60           RTS 
	
%org($C27E12)
;Check for Hit
;Rolls checks against HitPercent($4E) and EvadePercent($4F)
CheckForHit:
	JSR Random_0_99							;C2/7E12: 20 A2 02     JSR $02A2
	CMP HitPercent							;C2/7E15: C5 4E        CMP $4E        Check (0..99) < Hit%
	BCS +								;C2/7E17: B0 07        BCS $7E20      Miss if (0..99) >= Hit%
	JSR Random_0_99							;C2/7E19: 20 A2 02     JSR $02A2
	CMP EvadePercent  						;C2/7E1C: C5 4F        CMP $4F        Check (0..99) < Evade%
	BCS .Return							;C2/7E1E: B0 02        BCS $7E22      Hit if (0..99) >= Evade%
+	INC AtkMissed 							;C2/7E20: E6 56        INC $56        Attack Misses
.Return	RTS 								;C2/7E22: 60           RTS 

%org($C27E23)
;Check for Physical Hit
CheckPHit:
	JSR Random_0_99							;C2/7E23: 20 A2 02     JSR $02A2
	CMP HitPercent							;C2/7E26: C5 4E        CMP $4E        Check (0..99) < Hit%
	BCS .Miss  							;C2/7E28: B0 2E        BCS $7E58      Miss if (0..99) >= Hit%
	LDX TargetOffset						;C2/7E2A: A6 49        LDX $49
	LDA CharStruct.Status2,X					;C2/7E2C: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/7E2F: 1D 71 20     ORA $2071,X
	AND #$70   							;C2/7E32: 29 70        AND #$70       (Target Status2 = Sleep, Charm or Paralyze)
	BNE .Return  							;C2/7E34: D0 24        BNE $7E5A      Can't Evade
	LDA CharStruct.Status3,X					;C2/7E36: BD 1C 20     LDA $201C,X
	AND #$10   							;C2/7E39: 29 10        AND #$10       (Target Status3 = Stop)
	BNE .Return 							;C2/7E3B: D0 1D        BNE $7E5A      Can't Evade
	JSR Random_0_99							;C2/7E3D: 20 A2 02     JSR $02A2
	CMP EvadePercent						;C2/7E40: C5 4F        CMP $4F        Check (0..99) < Evade%
	BCS .Return  							;C2/7E42: B0 16        BCS $7E5A      Hit if (0..99) >= Evade%
	LDX TargetOffset						;C2/7E44: A6 49        LDX $49
	LDA CharStruct.RHShield,X					;C2/7E46: BD 11 20     LDA $2011,X	Check for shields
	ORA CharStruct.LHShield,X					;C2/7E49: 1D 12 20     ORA $2012,X
	BEQ .Miss							;C2/7E4C: F0 0A        BEQ $7E58	Miss if no shield?
	LDA AttackerIndex						;C2/7E4E: A5 47        LDA $47        (Can't Miss if Attacker = Target)
	CMP TargetIndex							;C2/7E50: C5 48        CMP $48
	BEQ .Return							;C2/7E52: F0 06        BEQ $7E5A
	LDA #$06							;C2/7E54: A9 06        LDA #$06
	STA ShieldBlock							;C2/7E56: 85 5D        STA $5D
.Miss
	INC AtkMissed 							;C2/7E58: E6 56        INC $56        Attack Misses
.Return
	RTS 								;C2/7E5A: 60           RTS 

%org($C27E5B)	
;Check for hit by Creature Type	
CheckCreatureType:
	LDX TargetOffset						;C2/7E5B: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/7E5D: BD 65 20     LDA $2065,X    Compare target Creature type with Hit
	AND Param1							;C2/7E60: 25 57        AND $57
	BNE .Ret							;C2/7E62: D0 02        BNE $7E66
	INC AtkMissed    						;C2/7E64: E6 56        INC $56        Attack Misses
.Ret	RTS 								;C2/7E66: 60           RTS 

%org($C27E67)
;Hit if Target Level = Multiple of Parameter 1
CheckLevel:
	LDX TargetOffset					;C2/7E67: A6 49        LDX $49
	LDA CharStruct.Level,X					;C2/7E69: BD 02 20     LDA $2002,X   (Target Level)
	TAX 							;C2/7E6C: AA           TAX 
	STX Dividend						;C2/7E6D: 8E B7 7C     STX $7CB7
	LDA Param1						;C2/7E70: A5 57        LDA $57
	TAX 							;C2/7E72: AA           TAX 
	STX Divisor						;C2/7E73: 8E B9 7C     STX $7CB9
	JSR Division  						;C2/7E76: 20 0C 01     JSR $010C     (Divide, check for remainder)
	LDX Remainder						;C2/7E79: AE BD 7C     LDX $7CBD
	BEQ .Ret						;C2/7E7C: F0 02        BEQ $7E80
	INC AtkMissed    					;C2/7E7E: E6 56        INC $56        Attack Misses
.Ret	RTS 							;C2/7E80: 60           RTS 
	
%org($C27E81)
;Hit% determination for Magic, autohits in some cases
;Param1 is Hit%, high bit means autohit
;Param2 high bit means autohit unless it's a Monster attacking Party

HitMagicConditionalAutohit:
	LDA Param1							;C2/7E81: A5 57        LDA $57
	BMI .Return  							;C2/7E83: 30 38        BMI $7EBD     (Check for autohit)
	LDA Param2							;C2/7E85: A5 58        LDA $58
	AND #$80							;C2/7E87: 29 80        AND #$80
	BEQ ++								;C2/7E89: F0 12        BEQ $7E9D
	LDA AttackerIndex						;C2/7E8B: A5 47        LDA $47
	CMP #$04							;C2/7E8D: C9 04        CMP #$04
	BCS +		;4 and up means monster	attacker		;C2/7E8F: B0 06        BCS $7E97
	LDA TargetIndex						;C2/7E91: A5 48        LDA $48
	CMP #$04							;C2/7E93: C9 04        CMP #$04
	BCC .Return	;autohits if attacker and target are both party	;C2/7E95: 90 26        BCC $7EBD
	
	;attacker or target is monster
+	LDA TargetIndex						;C2/7E97: A5 48        LDA $48
	CMP #$04							;C2/7E99: C9 04        CMP #$04
	BCS .Return 	;autohits if target is monster			;C2/7E9B: B0 20        BCS $7EBD     (Spells cast on own party will autohit, unless 2nd parameter < 80h)
	
	;Param2/$58 did not have high bit set
	;or it's a monster attacking the party
++	LDA AttackerOffset2						;C2/7E9D: A5 39        LDA $39
	TAX 								;C2/7E9F: AA           TAX 
	LDA AttackInfo.Category,X					;C2/7EA0: BD FD 79     LDA $79FD,X
	LDX TargetOffset						;C2/7EA3: A6 49        LDX $49
	AND CharStruct.CantEvade,X					;C2/7EA5: 3D 64 20     AND $2064,X  (Check Target Can't Evade vs. Attack type)
	BNE .Return							;C2/7EA8: D0 13        BNE $7EBD
	JSR HitCalcLevelMEvade 						;C2/7EAA: 20 0D 7C     JSR $7C0D    (Hit = Attacker Level + Hit - Target Level, Evade = Magic Evade)
	JSR CheckAegis  						;C2/7EAD: 20 97 7C     JSR $7C97    (Aegis Shield Check)
	LDA AtkMissed							;C2/7EB0: A5 56        LDA $56
	BNE .Return							;C2/7EB2: D0 09        BNE $7EBD
	JSR MultiTargetHitPercent					;C2/7EB4: 20 C3 7C     JSR $7CC3    (Multitargetting effect on Hit%)
	JSR TargetMHitMod  						;C2/7EB7: 20 8B 7D     JSR $7D8B    (Target Status Effect Modifiers to Magical Hit%)
	JSR CheckForHit							;C2/7EBA: 20 12 7E     JSR $7E12    (Check for Status Hit)
.Return	RTS 								;C2/7EBD: 60           RTS 

%org($C27EBE)
;Hit% Determination for physical						
HitPhysical:
	LDX TargetOffset					;C2/7EBE: A6 49        LDX $49
	LDA CharStruct.Status2,X				;C2/7EC0: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X				;C2/7EC3: 1D 71 20     ORA $2071,X
	AND #$70    						;C2/7EC6: 29 70        AND #$70      (Target Status = Sleep, Paralyze or Charm)
	BNE +							;C2/7EC8: D0 28        BNE $7EF2
	LDX AttackerOffset					;C2/7ECA: A6 32        LDX $32
	LDA CharStruct.DamageMod,X 				;C2/7ECC: BD 1F 20     LDA $201F,X   (Check for Autohit abilities)
	BMI +							;C2/7ECF: 30 21        BMI $7EF2
	LDA AttackerOffset2					;C2/7ED1: A5 39        LDA $39
	TAX 							;C2/7ED3: AA           TAX 
	LDA AttackInfo.Category,X				;C2/7ED4: BD FD 79     LDA $79FD,X
	LDX TargetOffset					;C2/7ED7: A6 49        LDX $49
	AND CharStruct.CantEvade,X 				;C2/7ED9: 3D 64 20     AND $2064,X  (Check Target Can't Evade vs. Attack type)
	BNE +							;C2/7EDC: D0 14        BNE $7EF2
	JSR CheckSpecialEvade					;C2/7EDE: 20 FC 7C     JSR $7CFC    (Check for Evade, Weapon Block or Elf Cape)
	LDA AtkMissed						;C2/7EE1: A5 56        LDA $56
	BNE ++							;C2/7EE3: D0 10        BNE $7EF5
	JSR TargetPHitMod					;C2/7EE5: 20 AC 7D     JSR $7DAC    (Target Status Effect Modifiers to Hit%)
	JSR AttackerStatusPHitMod				;C2/7EE8: 20 D1 7D     JSR $7DD1    (Attacker Status Effect Modifiers to Physical Hit)
	JSR CheckPHit  						;C2/7EEB: 20 23 7E     JSR $7E23    (Check for Physical Hit)
	LDA AtkMissed						;C2/7EEE: A5 56        LDA $56
	BNE ++							;C2/7EF0: D0 03        BNE $7EF5
+
	JSR CheckTargetImage					;C2/7EF2: 20 E2 7D     JSR $7DE2    (Check for Target Image)
++
	RTS 							;C2/7EF5: 60           RTS 

%org($C27EF6)
;Hit% Determination for Magic
HitMagic:
	LDA Param1						;C2/7EF6: A5 57        LDA $57
	BMI .Ret  						;C2/7EF8: 30 20        BMI $7F1A    (Check for Autohit)
	LDA AttackerOffset2					;C2/7EFA: A5 39        LDA $39
	TAX 							;C2/7EFC: AA           TAX 
	LDA AttackInfo.Category,X				;C2/7EFD: BD FD 79     LDA $79FD,X
	LDX TargetOffset					;C2/7F00: A6 49        LDX $49
	AND CharStruct.CantEvade,X				;C2/7F02: 3D 64 20     AND $2064,X  (Check Target Can't Evade vs. Attack type)
	BNE .Ret						;C2/7F05: D0 13        BNE $7F1A
	JSR HitCalcLevelMEvade					;C2/7F07: 20 0D 7C     JSR $7C0D    (Hit = Hit + Attacker Level - Target Level, Evade = Magic Evade)
	JSR CheckAegis 						;C2/7F0A: 20 97 7C     JSR $7C97    (Aegis Shield Check)
	LDA AtkMissed						;C2/7F0D: A5 56        LDA $56
	BNE .Ret						;C2/7F0F: D0 09        BNE $7F1A
	JSR MultiTargetHitPercent				;C2/7F11: 20 C3 7C     JSR $7CC3    (Multitargetting effect on Hit%)
	JSR TargetMHitMod					;C2/7F14: 20 8B 7D     JSR $7D8B    (Target Status Effect Modifiers to Magical Hit%)
	JSR CheckForHit						;C2/7F17: 20 12 7E     JSR $7E12    (Check for Status Hit)
.Ret	RTS 							;C2/7F1A: 60           RTS 
	
%org($C27F1B)	
;Hit% Determination for Physical Magic
%sub(HitPhysicalMagic)
HitPhysicalMagic:
	LDA Param1						;C2/7F1B: A5 57        LDA $57
	BMI .Return						;C2/7F1D: 30 10        BMI $7F2F    (Check for Autohit)
	JSR SetHitParam1andTargetEvade_Dupe			;C2/7F1F: 20 3B 7C     JSR $7C3B    (Hit = 1st Parameter, Evade = Evade%)
	JSR CheckSpecialEvade					;C2/7F22: 20 FC 7C     JSR $7CFC    (Check for Evade, Weapon Block or Elf Cape)
	LDA AtkMissed						;C2/7F25: A5 56        LDA $56
	BNE .Return						;C2/7F27: D0 06        BNE $7F2F
	JSR TargetPHitMod					;C2/7F29: 20 AC 7D     JSR $7DAC    (Target Status Effect Modifiers to Hit%)
	JSR CheckPHit						;C2/7F2C: 20 23 7E     JSR $7E23    (Check for Physical Hit)
.Return	RTS 							;C2/7F2F: 60           RTS 
%endsub()

%org($C27F30)
;Magic Damage Formula
;Attack = Spell Power + (0 .. Spell Power / 8)
;M = Level*Magic/256 +4
;Defense = Target Magic Defense
NormalMagicDamage:
	TDC 						;C2/7F30: 7B           TDC 
	TAX 						;C2/7F31: AA           TAX 
	LDA Param2    		;spell power		;C2/7F32: A5 58        LDA $58     (Spell Power)
	JSR ShiftDivide_8 				;C2/7F34: 20 BF 01     JSR $01BF   (Spell Power/8)
	JSR Random_X_A 					;C2/7F37: 20 7C 00     JSR $007C   (0..(Spell Power/8))
	CLC 						;C2/7F3A: 18           CLC 
	ADC Param2					;C2/7F3B: 65 58        ADC $58     (Spell Power + (0..(Spell Power/8)))
	STA Attack					;C2/7F3D: 85 50        STA $50
	TDC 						;C2/7F3F: 7B           TDC 
	ADC #$00					;C2/7F40: 69 00        ADC #$00
	STA Attack+1					;C2/7F42: 85 51        STA $51
	LDA Level  					;C2/7F44: AD E5 7B     LDA $7BE5   (Level)
	STA $24						;C2/7F47: 85 24        STA $24
	LDA MagicPower  				;C2/7F49: AD E4 7B     LDA $7BE4   (Magic Power)
	STA $25						;C2/7F4C: 85 25        STA $25
	JSR Multiply_8bit	;result in $26		;C2/7F4E: 20 F1 00     JSR $00F1   (Level * Magic Power)
	REP #$20					;C2/7F51: C2 20        REP #$20
	LDA $26						;C2/7F53: A5 26        LDA $26
	JSR ShiftDivide_256				;C2/7F55: 20 BA 01     JSR $01BA   (Divide by 256)
	CLC 						;C2/7F58: 18           CLC 
	ADC #$0004 					;C2/7F59: 69 04 00     ADC #$0004  (+4)
	STA M						;C2/7F5C: 85 52        STA $52
	TDC 						;C2/7F5E: 7B           TDC 
	SEP #$20					;C2/7F5F: E2 20        SEP #$20
	LDX TargetOffset				;C2/7F61: A6 49        LDX $49
	LDA CharStruct.MDefense,X			;C2/7F63: BD 2F 20     LDA $202F,X (Magic Defense)
	TAX 						;C2/7F66: AA           TAX 
	STX Defense					;C2/7F67: 86 54        STX $54
	RTS 						;C2/7F69: 60           RTS 

%org($C27F6A)
;Flare Magic Damage Formula
;Spell Power in Param2
;Attack = Spell Power + (0 .. Spell Power / 32)
;M = Level*Magic/256 + 4
;Def = Target Magic Defense / 32
FlareMagicDamage:
	TDC 						;C2/7F6A: 7B           TDC 
	TAX 						;C2/7F6B: AA           TAX 
	LDA Param2					;C2/7F6C: A5 58        LDA $58     (Spell Power)
	JSR ShiftDivide_32				;C2/7F6E: 20 BD 01     JSR $01BD   (Spell Power/32)
	JSR Random_X_A 					;C2/7F71: 20 7C 00     JSR $007C   (0..(Spell Power/32))
	CLC 						;C2/7F74: 18           CLC 
	ADC Param2					;C2/7F75: 65 58        ADC $58     (Spell Power + (0..(Spell Power/32)))
	STA Attack					;C2/7F77: 85 50        STA $50
	TDC 						;C2/7F79: 7B           TDC 
	ADC #$00					;C2/7F7A: 69 00        ADC #$00
	STA Attack+1					;C2/7F7C: 85 51        STA $51
	LDA Level					;C2/7F7E: AD E5 7B     LDA $7BE5   (Level)
	STA $24						;C2/7F81: 85 24        STA $24
	LDA MagicPower					;C2/7F83: AD E4 7B     LDA $7BE4   (Magic Power)
	STA $25						;C2/7F86: 85 25        STA $25
	JSR Multiply_8bit  				;C2/7F88: 20 F1 00     JSR $00F1   (Level * Magic Power)
	REP #$20					;C2/7F8B: C2 20        REP #$20
	LDA $26						;C2/7F8D: A5 26        LDA $26
	JSR ShiftDivide_256				;C2/7F8F: 20 BA 01     JSR $01BA   (Divide by 256)
	CLC 						;C2/7F92: 18           CLC 
	ADC #$0004 					;C2/7F93: 69 04 00     ADC #$0004  (+4)
	STA M						;C2/7F96: 85 52        STA $52
	TDC 						;C2/7F98: 7B           TDC 
	SEP #$20					;C2/7F99: E2 20        SEP #$20
	LDX TargetOffset				;C2/7F9B: A6 49        LDX $49
	LDA CharStruct.MDefense,X			;C2/7F9D: BD 2F 20     LDA $202F,X  (Magic Defense)
	JSR ShiftDivide_32				;C2/7FA0: 20 BD 01     JSR $01BD    (Magic Defense/32)
	TAX 						;C2/7FA3: AA           TAX 
	STX Defense					;C2/7FA4: 86 54        STX $54
	RTS 						;C2/7FA6: 60           RTS 

%org($C27FA7)
;Random Magic damage formula
;Attack = 50..200
;M = Param2
;Defense = Target Magic Defense
RandomMagicDamage:
	TDC 						;C2/7FA7: 7B           TDC 
	TAX 						;C2/7FA8: AA           TAX 
	LDA #$96		;150			;C2/7FA9: A9 96        LDA #$96
	JSR Random_X_A 					;C2/7FAB: 20 7C 00     JSR $007C    (0..150)
	CLC 						;C2/7FAE: 18           CLC 
	ADC #$32   		;50			;C2/7FAF: 69 32        ADC #$32     50 + (0..150)
	TAX 						;C2/7FB1: AA           TAX 
	STX Attack					;C2/7FB2: 86 50        STX $50
	LDA Param2					;C2/7FB4: A5 58        LDA $58      (Spell Power)
	TAX 						;C2/7FB6: AA           TAX 
	STX M						;C2/7FB7: 86 52        STX $52
	LDX TargetOffset				;C2/7FB9: A6 49        LDX $49
	LDA CharStruct.MDefense,X			;C2/7FBB: BD 2F 20     LDA $202F,X  (Magic Defense)
	TAX 						;C2/7FBE: AA           TAX 
	STX Defense					;C2/7FBF: 86 54        STX $54
	RTS 						;C2/7FC1: 60           RTS 

%org($C27FC2)
;Physical magic damage formula
;Spell Power in Param2
;Attack = Spell Power + (0..Spell Power/8)
;M = Level*Magic/256 + 4
;Defense = Target Defense
PhysicalMagicDamage:
	TDC 						;C2/7FC2: 7B           TDC 
	TAX 						;C2/7FC3: AA           TAX 
	LDA Param2					;C2/7FC4: A5 58        LDA $58    (Spell Power)
	JSR ShiftDivide_8				;C2/7FC6: 20 BF 01     JSR $01BF  (Divide by 8)
	JSR Random_X_A					;C2/7FC9: 20 7C 00     JSR $007C
	CLC 						;C2/7FCC: 18           CLC 
	ADC Param2					;C2/7FCD: 65 58        ADC $58    (Spell Power + (0..(Spell Power/8)))
	STA Attack					;C2/7FCF: 85 50        STA $50
	TDC 						;C2/7FD1: 7B           TDC 
	ADC #$00					;C2/7FD2: 69 00        ADC #$00
	STA Attack+1					;C2/7FD4: 85 51        STA $51
	LDA Level  					;C2/7FD6: AD E5 7B     LDA $7BE5  (Level)
	STA $24						;C2/7FD9: 85 24        STA $24
	LDA MagicPower					;C2/7FDB: AD E4 7B     LDA $7BE4  (Magic Power)
	STA $25						;C2/7FDE: 85 25        STA $25
	JSR Multiply_8bit				;C2/7FE0: 20 F1 00     JSR $00F1  (Level * Magic Power)
	REP #$20					;C2/7FE3: C2 20        REP #$20
	LDA $26						;C2/7FE5: A5 26        LDA $26
	JSR ShiftDivide_256				;C2/7FE7: 20 BA 01     JSR $01BA  (Divide by 256)
	CLC 						;C2/7FEA: 18           CLC 
	ADC #$0004					;C2/7FEB: 69 04 00     ADC #$0004 (+4)
	STA M						;C2/7FEE: 85 52        STA $52
	TDC 						;C2/7FF0: 7B           TDC 
	SEP #$20					;C2/7FF1: E2 20        SEP #$20
	LDX TargetOffset				;C2/7FF3: A6 49        LDX $49
	LDA CharStruct.Defense,X			;C2/7FF5: BD 2D 20     LDA $202D,X
	TAX 						;C2/7FF8: AA           TAX 
	STX Defense 					;C2/7FF9: 86 54        STX $54    (Defense)
	RTS 						;C2/7FFB: 60           RTS 

%org($C27FFC)
;Swords damage formula
;
;Attack = Attack Power + 0..Attack Power/8
;M = Level*Strength/128 + 2
;Defense = Target Defense
%sub(SwordDamage)
SwordDamage:
	LDA AttackerOffset2						;C2/7FFC: A5 39        LDA $39
	TAX 								;C2/7FFE: AA           TAX 
	LDA AttackInfo.AtkPower,X					;C2/7FFF: BD 03 7A     LDA $7A03,X (Battle Power)
	TAX 								;C2/8002: AA           TAX 
	STX $0E			;Attack Power				;C2/8003: 86 0E        STX $0E
	JSR ShiftDivide_8						;C2/8005: 20 BF 01     JSR $01BF   (Divide by 8)
	LDX #$0000							;C2/8008: A2 00 00     LDX #$0000
	JSR Random_X_A							;C2/800B: 20 7C 00     JSR $007C
	REP #$20							;C2/800E: C2 20        REP #$20
	CLC 								;C2/8010: 18           CLC 
	ADC $0E    		;Attack + 0..Attack/8			;C2/8011: 65 0E        ADC $0E    (Battle Power + (0..(Battle Power/8))
	STA Attack    							;C2/8013: 85 50        STA $50    
	TDC 								;C2/8015: 7B           TDC 
	SEP #$20							;C2/8016: E2 20        SEP #$20
	LDA Level 							;C2/8018: AD E5 7B     LDA $7BE5  (Level)
	STA $24								;C2/801B: 85 24        STA $24
	LDA Strength							;C2/801D: AD E1 7B     LDA $7BE1  (Strength)
	STA $25								;C2/8020: 85 25        STA $25
	JSR Multiply_8bit 						;C2/8022: 20 F1 00     JSR $00F1  (Level * Strength)
	REP #$20							;C2/8025: C2 20        REP #$20
	LDA $26			;Level*Strength				;C2/8027: A5 26        LDA $26
	JSR ShiftDivide_128						;C2/8029: 20 BB 01     JSR $01BB  (Divide by 128)
	CLC 								;C2/802C: 18           CLC 
	ADC #$0002 							;C2/802D: 69 02 00     ADC #$0002 (+2)
	STA M			;Level*Strength/128 + 2			;C2/8030: 85 52        STA $52
	TDC 								;C2/8032: 7B           TDC 
	SEP #$20							;C2/8033: E2 20        SEP #$20
	LDX TargetOffset						;C2/8035: A6 49        LDX $49
	LDA CharStruct.Defense,X					;C2/8037: BD 2D 20     LDA $202D,X (Defense)
	TAX 								;C2/803A: AA           TAX 
	STX Defense							;C2/803B: 86 54        STX $54
	RTS 								;C2/803D: 60           RTS 
%endsub()

%org($C2803E)	
;Fists Damage formula
;
;With Brawl:
;	Attack = Attack Power + Level*2 + 0..Level/4 + (50 with Kaiser Knuckles)
;	M = Level*Strength/256 + 2
;Without Brawl:
;	Attack = Attack Power + 0..Level/4
;	M = 2
;Defense = Target Defense
;
%sub(FistDamage)
FistDamage:
	LDA AttackerOffset2					;C2/803E: A5 39        LDA $39
	TAX 							;C2/8040: AA           TAX 
	LDA AttackInfo.AtkPower,X 				;C2/8041: BD 03 7A     LDA $7A03,X  (Battle Power)
	TAX 							;C2/8044: AA           TAX 
	STX $0E			;Attack Power			;C2/8045: 86 0E        STX $0E
	TDC 							;C2/8047: 7B           TDC 
	TAX 							;C2/8048: AA           TAX 
	LDA Level						;C2/8049: AD E5 7B     LDA $7BE5    (Level)
	JSR ShiftDivide_4					;C2/804C: 20 C0 01     JSR $01C0    (Divide by 4)
	JSR Random_X_A						;C2/804F: 20 7C 00     JSR $007C
	TAX 							;C2/8052: AA           TAX 
	STX $10			;0..Level/4			;C2/8053: 86 10        STX $10
	LDA Level   						;C2/8055: AD E5 7B     LDA $7BE5    (Level)
	STA $24							;C2/8058: 85 24        STA $24
	LDA Strength						;C2/805A: AD E1 7B     LDA $7BE1    (Strength)
	STA $25							;C2/805D: 85 25        STA $25
	JSR Multiply_8bit   					;C2/805F: 20 F1 00     JSR $00F1    (Level * Strength)
	LDX $26							;C2/8062: A6 26        LDX $26
	STX $14			;Level*Strength			;C2/8064: 86 14        STX $14
	LDX AttackerOffset					;C2/8066: A6 32        LDX $32
	LDA CharStruct.Passives2,X				;C2/8068: BD 21 20     LDA $2021,X  (Check Attacker Ability)
	AND #$40    		;Brawl				;C2/806B: 29 40        AND #$40     (Check for Brawl)
	BEQ .NoBrawl						;C2/806D: F0 4B        BEQ $80BA
	LDA Level  						;C2/806F: AD E5 7B     LDA $7BE5    (Level)
	TAX 							;C2/8072: AA           TAX 
	STX $12							;C2/8073: 86 12        STX $12
	ASL $12     		;Level *2			;C2/8075: 06 12        ASL $12      (Level*2)
	ROL $13							;C2/8077: 26 13        ROL $13
	CLC 							;C2/8079: 18           CLC 
	LDA $10			;0..Level/4			;C2/807A: A5 10        LDA $10
	ADC $12     						;C2/807C: 65 12        ADC $12      (Level*2) + (0..(Level/4))
	STA $10			;Level*2 + 0..Level/4		;C2/807E: 85 10        STA $10
	LDA $11							;C2/8080: A5 11        LDA $11
	ADC $13							;C2/8082: 65 13        ADC $13
	STA $11							;C2/8084: 85 11        STA $11
	REP #$20						;C2/8086: C2 20        REP #$20
	CLC 							;C2/8088: 18           CLC 
	LDA $0E			;Attack Power			;C2/8089: A5 0E        LDA $0E
	ADC $10     		;+ Level*2 + 0..Level/4		;C2/808B: 65 10        ADC $10      (Battle Power) + (Level*2) + (0..(Level/4))
	STA Attack						;C2/808D: 85 50        STA $50
	TDC 							;C2/808F: 7B           TDC 
	SEP #$20						;C2/8090: E2 20        SEP #$20
	REP #$20						;C2/8092: C2 20        REP #$20
	LDA $14			;Level*Strength			;C2/8094: A5 14        LDA $14
	JSR ShiftDivide_256					;C2/8096: 20 BA 01     JSR $01BA    (Level * Strength)/256
	CLC 							;C2/8099: 18           CLC 
	ADC #$0002  						;C2/809A: 69 02 00     ADC #$0002   (+2)
	STA M			;Level*Strength/256 + 2		;C2/809D: 85 52        STA $52
	TDC 							;C2/809F: 7B           TDC 
	SEP #$20						;C2/80A0: E2 20        SEP #$20
	LDX AttackerOffset					;C2/80A2: A6 32        LDX $32
	LDA CharStruct.ArmorProperties,X 			;C2/80A4: BD 39 20     LDA $2039,X  (Check Attacker Armour Special Effect Byte)
	AND #$20    		;Improved Brawl			;C2/80A7: 29 20        AND #$20     (Check for Kaiser Knuckles)
	BEQ .Def						;C2/80A9: F0 20        BEQ $80CB
	REP #$20						;C2/80AB: C2 20        REP #$20
	CLC 							;C2/80AD: 18           CLC 
	LDA Attack						;C2/80AE: A5 50        LDA $50
	ADC #$0032		;+50				;C2/80B0: 69 32 00     ADC #$0032   Damage = Damage + 50
	STA Attack						;C2/80B3: 85 50        STA $50
	TDC 							;C2/80B5: 7B           TDC 
	SEP #$20						;C2/80B6: E2 20        SEP #$20
	BRA .Def						;C2/80B8: 80 11        BRA $80CB
.NoBrawl	
	REP #$20						;C2/80BA: C2 20        REP #$20
	CLC 							;C2/80BC: 18           CLC 
	LDA $0E     		;Attack Power			;C2/80BD: A5 0E        LDA $0E     
	ADC $10     		;+ 0..Level/4			;C2/80BF: 65 10        ADC $10      (Battle Power) + (0..(Level/4))
	STA Attack						;C2/80C1: 85 50        STA $50
	TDC 							;C2/80C3: 7B           TDC 
	SEP #$20						;C2/80C4: E2 20        SEP #$20
	LDX #$0002  						;C2/80C6: A2 02 00     LDX #$0002   Multiplier = 2
	STX M			;M = 2				;C2/80C9: 86 52        STX $52
.Def	LDX TargetOffset					;C2/80CB: A6 49        LDX $49
	LDA CharStruct.Defense,X				;C2/80CD: BD 2D 20     LDA $202D,X  Defense
	TAX 							;C2/80D0: AA           TAX 
	STX Defense						;C2/80D1: 86 54        STX $54
	RTS 							;C2/80D3: 60           RTS 
%endsub()

%org($C280D4)
;Knives damage formula
;Attack = Attack Power + 0..3
;M = Level*Strength/128 + Level*Agility/128 + 2
;Defense = Target Defense
;
;**bug: knife agility calc only uses low byte, so effectively contributes only 0 or 1 to M
%sub(KnifeDamage)
KnifeDamage:
	LDA AttackerOffset2					;C2/80D4: A5 39        LDA $39
	TAX 							;C2/80D6: AA           TAX 
	LDA AttackInfo.AtkPower,X 				;C2/80D7: BD 03 7A     LDA $7A03,X  (Battle Power)
	STA Attack						;C2/80DA: 85 50        STA $50
	TDC 							;C2/80DC: 7B           TDC 
	TAX 							;C2/80DD: AA           TAX 
	LDA #$03						;C2/80DE: A9 03        LDA #$03
	JSR Random_X_A						;C2/80E0: 20 7C 00     JSR $007C    (0..3)
	CLC 							;C2/80E3: 18           CLC 
	ADC Attack    						;C2/80E4: 65 50        ADC $50      (Battle Power + (0..3))
	TAX 							;C2/80E6: AA           TAX 
	STX Attack						;C2/80E7: 86 50        STX $50
	LDA Strength						;C2/80E9: AD E1 7B     LDA $7BE1    (Strength)
	STA $24							;C2/80EC: 85 24        STA $24
	LDA Level  						;C2/80EE: AD E5 7B     LDA $7BE5    (Level)
	STA $25							;C2/80F1: 85 25        STA $25
	JSR Multiply_8bit  					;C2/80F3: 20 F1 00     JSR $00F1    (Level * Strength)
	REP #$20						;C2/80F6: C2 20        REP #$20
	LDA $26							;C2/80F8: A5 26        LDA $26
	JSR ShiftDivide_128					;C2/80FA: 20 BB 01     JSR $01BB    (Divide by 128)
	CLC 							;C2/80FD: 18           CLC 
	ADC #$0002 						;C2/80FE: 69 02 00     ADC #$0002   (+2)
	STA $0E							;C2/8101: 85 0E        STA $0E
	TDC 							;C2/8103: 7B           TDC 
	SEP #$20						;C2/8104: E2 20        SEP #$20
	LDA Agility  						;C2/8106: AD E2 7B     LDA $7BE2    (Agility)
	STA $24							;C2/8109: 85 24        STA $24
	LDA Level  						;C2/810B: AD E5 7B     LDA $7BE5    (Level)
	STA $25							;C2/810E: 85 25        STA $25
	JSR Multiply_8bit  					;C2/8110: 20 F1 00     JSR $00F1    (Agility * Level)
	LDA $26		;*bug: this should be in 16 bit mode	;C2/8113: A5 26        LDA $26
	REP #$20						;C2/8115: C2 20        REP #$20
	JSR ShiftDivide_128					;C2/8117: 20 BB 01     JSR $01BB    (Divide by 128)
	CLC 							;C2/811A: 18           CLC 
	ADC $0E    						;C2/811B: 65 0E        ADC $0E      (Level*Strength)/128 + (Level*(first byte of Agility))/128 + 2
	STA M							;C2/811D: 85 52        STA $52
	TDC 							;C2/811F: 7B           TDC 
	SEP #$20						;C2/8120: E2 20        SEP #$20
	LDX TargetOffset					;C2/8122: A6 49        LDX $49
	LDA CharStruct.Defense,X				;C2/8124: BD 2D 20     LDA $202D,X  (Defense)
	TAX 							;C2/8127: AA           TAX 
	STX Defense						;C2/8128: 86 54        STX $54
	RTS 							;C2/812A: 60           RTS 
%endsub()

%org($C2812B)
;Axes Damage formula
;Attack = Attack Power / 2 + 0..Attack Power
;M = Level*Strength/128 + 2
;Defense = Target Defense / 4
%sub(AxeDamage)
AxeDamage:
	LDA AttackerOffset2					;C2/812B: A5 39        LDA $39
	TAX 							;C2/812D: AA           TAX 
	LDA AttackInfo.AtkPower,X				;C2/812E: BD 03 7A     LDA $7A03,X  (Battle Power)
	TAX 							;C2/8131: AA           TAX 
	STX $0E							;C2/8132: 86 0E        STX $0E
	LSR $0E  						;C2/8134: 46 0E        LSR $0E      (Battle Power/2)
	LDX #$0000						;C2/8136: A2 00 00     LDX #$0000
	JSR Random_X_A						;C2/8139: 20 7C 00     JSR $007C    (0..Battle Power)
	REP #$20						;C2/813C: C2 20        REP #$20
	CLC 							;C2/813E: 18           CLC 
	ADC $0E     						;C2/813F: 65 0E        ADC $0E      (Battle Power/2) + (0..Battle Power)
	STA Attack						;C2/8141: 85 50        STA $50
	TDC 							;C2/8143: 7B           TDC 
	SEP #$20						;C2/8144: E2 20        SEP #$20
	LDA Strength  						;C2/8146: AD E1 7B     LDA $7BE1    (Strength)
	STA $24							;C2/8149: 85 24        STA $24
	LDA Level						;C2/814B: AD E5 7B     LDA $7BE5    (Level)
	STA $25							;C2/814E: 85 25        STA $25
	JSR Multiply_8bit  					;C2/8150: 20 F1 00     JSR $00F1    (Level * Strength)
	REP #$20						;C2/8153: C2 20        REP #$20
	LDA $26							;C2/8155: A5 26        LDA $26
	JSR ShiftDivide_128					;C2/8157: 20 BB 01     JSR $01BB    (Divide by 128)
	CLC 							;C2/815A: 18           CLC 
	ADC #$0002  						;C2/815B: 69 02 00     ADC #$0002   (+2)
	STA M							;C2/815E: 85 52        STA $52
	TDC 							;C2/8160: 7B           TDC 
	SEP #$20						;C2/8161: E2 20        SEP #$20
	LDX TargetOffset					;C2/8163: A6 49        LDX $49
	LDA CharStruct.Defense,X				;C2/8165: BD 2D 20     LDA $202D,X  (Defense)
	JSR ShiftDivide_4					;C2/8168: 20 C0 01     JSR $01C0    (Defense/4)
	TAX 							;C2/816B: AA           TAX 
	STX Defense						;C2/816C: 86 54        STX $54
	RTS 							;C2/816E: 60           RTS 
%endsub()

%org($C2816F)
;Bells Damage formula
;Attack = Attack Power / 2 + 0..(Attack Power / 2)
;M = Level*Agility/128 + 2 + Level*MagicPower/128
;Defense = Target Magic Defense
%sub(BellDamage)
BellDamage:
	LDA AttackerOffset2				;C2/816F: A5 39        LDA $39
	TAX 						;C2/8171: AA           TAX 
	LDA AttackInfo.AtkPower,X			;C2/8172: BD 03 7A     LDA $7A03,X  (Battle Power)
	LSR        					;C2/8175: 4A           LSR          (Battle Power/2)
	TAX 						;C2/8176: AA           TAX 
	STX $0E						;C2/8177: 86 0E        STX $0E
	LDX #$0000					;C2/8179: A2 00 00     LDX #$0000
	JSR Random_X_A 					;C2/817C: 20 7C 00     JSR $007C    (0..(Battle Power/2))
	REP #$20					;C2/817F: C2 20        REP #$20
	CLC 						;C2/8181: 18           CLC 
	ADC $0E    					;C2/8182: 65 0E        ADC $0E      (Battle Power/2) + (0..(Battle Power/2))
	STA Attack					;C2/8184: 85 50        STA $50
	TDC 						;C2/8186: 7B           TDC 
	SEP #$20					;C2/8187: E2 20        SEP #$20
	LDA Agility 					;C2/8189: AD E2 7B     LDA $7BE2    (Agility)
	STA $24						;C2/818C: 85 24        STA $24
	LDA Level  					;C2/818E: AD E5 7B     LDA $7BE5    (Level)
	STA $25						;C2/8191: 85 25        STA $25
	JSR Multiply_8bit  				;C2/8193: 20 F1 00     JSR $00F1    (Level * Agility)
	REP #$20					;C2/8196: C2 20        REP #$20
	LDA $26						;C2/8198: A5 26        LDA $26
	JSR ShiftDivide_128 				;C2/819A: 20 BB 01     JSR $01BB    (Divide by 128)
	CLC 						;C2/819D: 18           CLC 
	ADC #$0002 					;C2/819E: 69 02 00     ADC #$0002   (+2)
	STA $0E						;C2/81A1: 85 0E        STA $0E
	TDC 						;C2/81A3: 7B           TDC 
	SEP #$20					;C2/81A4: E2 20        SEP #$20
	LDA MagicPower  				;C2/81A6: AD E4 7B     LDA $7BE4    (Magic Power)
	STA $24						;C2/81A9: 85 24        STA $24
	LDA Level  					;C2/81AB: AD E5 7B     LDA $7BE5    (Level)
	STA $25						;C2/81AE: 85 25        STA $25
	JSR Multiply_8bit   				;C2/81B0: 20 F1 00     JSR $00F1    (Level * Magic Power)
	REP #$20					;C2/81B3: C2 20        REP #$20
	LDA $26						;C2/81B5: A5 26        LDA $26
	JSR ShiftDivide_128   				;C2/81B7: 20 BB 01     JSR $01BB    (Divide by 128)
	CLC 						;C2/81BA: 18           CLC 
	ADC $0E    					;C2/81BB: 65 0E        ADC $0E      (Level*Agility)/128 + (Level*Magic Power)/128 + 2
	STA M						;C2/81BD: 85 52        STA $52
	TDC 						;C2/81BF: 7B           TDC 
	SEP #$20					;C2/81C0: E2 20        SEP #$20
	LDX TargetOffset				;C2/81C2: A6 49        LDX $49
	LDA CharStruct.MDefense,X			;C2/81C4: BD 2F 20     LDA $202F,X  (Magic Defense)
	TAX 						;C2/81C7: AA           TAX 
	STX Defense					;C2/81C8: 86 54        STX $54
	RTS 						;C2/81CA: 60           RTS 
%endsub()

%org($C281CB)	
;Rods damage formula
;Attack = (0..Attack Power)*2
;M = Level*MagicPower/256 + 2
;Defense = Target Magic Defense
%sub(RodDamage)
RodDamage:
	LDA AttackerOffset2				;C2/81CB: A5 39        LDA $39
	TAX 						;C2/81CD: AA           TAX 
	LDA AttackInfo.AtkPower,X			;C2/81CE: BD 03 7A     LDA $7A03,X  (Battle Power)
	LDX #$0000					;C2/81D1: A2 00 00     LDX #$0000
	JSR Random_X_A 					;C2/81D4: 20 7C 00     JSR $007C    (0..Battle Power)
	REP #$20					;C2/81D7: C2 20        REP #$20
	ASL        					;C2/81D9: 0A           ASL          (0..Battle Power) * 2
	STA Attack					;C2/81DA: 85 50        STA $50
	TDC 						;C2/81DC: 7B           TDC 
	SEP #$20   					;C2/81DD: E2 20        SEP #$20     
	LDA MagicPower  				;C2/81DF: AD E4 7B     LDA $7BE4    (Magic Power)
	STA $24						;C2/81E2: 85 24        STA $24
	LDA Level  					;C2/81E4: AD E5 7B     LDA $7BE5    (Level)
	STA $25						;C2/81E7: 85 25        STA $25
	JSR Multiply_8bit  				;C2/81E9: 20 F1 00     JSR $00F1    (Magic Power * Level)
	REP #$20					;C2/81EC: C2 20        REP #$20
	LDA $26						;C2/81EE: A5 26        LDA $26
	JSR ShiftDivide_256  				;C2/81F0: 20 BA 01     JSR $01BA    (Divide by 256)
	CLC 						;C2/81F3: 18           CLC 
	ADC #$0002 					;C2/81F4: 69 02 00     ADC #$0002   (+2)
	STA M						;C2/81F7: 85 52        STA $52
	TDC 						;C2/81F9: 7B           TDC 
	SEP #$20					;C2/81FA: E2 20        SEP #$20
	LDX TargetOffset				;C2/81FC: A6 49        LDX $49
	LDA CharStruct.MDefense,X			;C2/81FE: BD 2F 20     LDA $202F,X  (Magic Defense)
	TAX 						;C2/8201: AA           TAX 
	STX Defense					;C2/8202: 86 54        STX $54
	RTS 						;C2/8204: 60           RTS 
%endsub()

%org($C28205)	
;Level based Damage formula
;Attack = 10..100
;M = Level/8 +2
;Defense = Target Magic Defense
LevelDamage:
	TDC 						;C2/8205: 7B           TDC 
	TAX 						;C2/8206: AA           TAX 
	LDA #$5A		;90			;C2/8207: A9 5A        LDA #$5A
	JSR Random_X_A 					;C2/8209: 20 7C 00     JSR $007C    (0..90)
	CLC 						;C2/820C: 18           CLC 
	ADC #$0A    		;10			;C2/820D: 69 0A        ADC #$0A     10 + (0..90)
	TAX 						;C2/820F: AA           TAX 
	STX Attack					;C2/8210: 86 50        STX $50
	LDA Level  					;C2/8212: AD E5 7B     LDA $7BE5    (Level)
	JSR ShiftDivide_8   				;C2/8215: 20 BF 01     JSR $01BF    (Divide by 8)
	CLC 						;C2/8218: 18           CLC 
	ADC #$02    					;C2/8219: 69 02        ADC #$02     (+2)
	TAX 						;C2/821B: AA           TAX 
	STX M						;C2/821C: 86 52        STX $52
	LDX TargetOffset				;C2/821E: A6 49        LDX $49
	LDA CharStruct.MDefense,X 			;C2/8220: BD 2F 20     LDA $202F,X  (Magic Defense)
	TAX 						;C2/8223: AA           TAX 
	STX Defense					;C2/8224: 86 54        STX $54
	RTS 						;C2/8226: 60           RTS 	
	
	

%org($C28227)
;Monster damage formula
%sub(MonsterDamage)
MonsterDamage:
	LDX AttackerOffset						;C2/8227: A6 32        LDX $32
	LDA CharStruct.MonsterAttack,X					;C2/8229: BD 44 20     LDA $2044,X   Monster Attack
	STA $0E								;C2/822C: 85 0E        STA $0E
	JSR ShiftDivide_8  						;C2/822E: 20 BF 01     JSR $01BF     (Divide by 8)
	LDX #$0000							;C2/8231: A2 00 00     LDX #$0000
	JSR Random_X_A 							;C2/8234: 20 7C 00     JSR $007C     (0..(Monster Attack/8))
	CLC 								;C2/8237: 18           CLC 
	ADC $0E    							;C2/8238: 65 0E        ADC $0E       (Monster Attack + (0..(Monster Attack/8)))
	STA Attack							;C2/823A: 85 50        STA $50
	TDC 								;C2/823C: 7B           TDC 
	ADC #$00							;C2/823D: 69 00        ADC #$00
	STA Attack+1							;C2/823F: 85 51        STA $51
	LDX AttackerOffset						;C2/8241: A6 32        LDX $32
	LDA CharStruct.MonsterM,X					;C2/8243: BD 62 20     LDA $2062,X   (Monster Attack Multiplier)
	TAY 								;C2/8246: A8           TAY 
	STY M								;C2/8247: 84 52        STY $52
	LDX TargetOffset						;C2/8249: A6 49        LDX $49
	LDA CharStruct.Defense,X					;C2/824B: BD 2D 20     LDA $202D,X   (Defense)
	TAX 								;C2/824E: AA           TAX 
	STX Defense							;C2/824F: 86 54        STX $54
	RTS 								;C2/8251: 60           RTS 
%endsub()

%org($C28252)
ItemFormula:
	LDA Param1						;C2/8252: A5 57        LDA $57
	TAX 							;C2/8254: AA           TAX 
	STX Attack						;C2/8255: 86 50        STX $50      ($50 = Parameter 1)
	LDA Param2						;C2/8257: A5 58        LDA $58      
	TAX 							;C2/8259: AA           TAX 
	STX M							;C2/825A: 86 52        STX $52      ($52 = Parameter 2)
	TDC 							;C2/825C: 7B           TDC 
	TAX 							;C2/825D: AA           TAX 
	STX Defense						;C2/825E: 86 54        STX $54      (Defense = 0)
	RTS 							;C2/8260: 60           RTS 

%org($C28261)
;Physical attack but with attack power loaded like a spell
;Attack = Param2 + 0..Param2
;M = Strength*Level/128 + 1
;Defense = Target Defense
%sub(PhysicalParamDamage)
PhysicalParamDamage:
	TDC 							;C2/8261: 7B           TDC 
	TAX 							;C2/8262: AA           TAX 
	LDA Param2   						;C2/8263: A5 58        LDA $58      (Spell Power)
	JSR Random_X_A						;C2/8265: 20 7C 00     JSR $007C    (0..Spell Power)
	STA Attack	;0..Param2				;C2/8268: 85 50        STA $50
	CLC 							;C2/826A: 18           CLC 
	LDA Attack						;C2/826B: A5 50        LDA $50
	ADC Param2						;C2/826D: 65 58        ADC $58      (Spell Power + (0..Spell Power))
	STA Attack	;Param2 + 0..Param2			;C2/826F: 85 50        STA $50
	TDC 							;C2/8271: 7B           TDC 
	ADC #$00						;C2/8272: 69 00        ADC #$00
	STA Attack+1						;C2/8274: 85 51        STA $51
	LDA Level  						;C2/8276: AD E5 7B     LDA $7BE5    (Level)
	STA $24							;C2/8279: 85 24        STA $24
	LDA Strength 						;C2/827B: AD E1 7B     LDA $7BE1    (Strength)
	STA $25							;C2/827E: 85 25        STA $25
	JSR Multiply_8bit 					;C2/8280: 20 F1 00     JSR $00F1    (Level * Strength)
	REP #$20						;C2/8283: C2 20        REP #$20
	LDA $26							;C2/8285: A5 26        LDA $26
	JSR ShiftDivide_128					;C2/8287: 20 BB 01     JSR $01BB    (Divide by 128)
	INC        						;C2/828A: 1A           INC          (Level * Strength)/128 + 1
	STA M							;C2/828B: 85 52        STA $52
	TDC 							;C2/828D: 7B           TDC 
	SEP #$20						;C2/828E: E2 20        SEP #$20
	LDX TargetOffset					;C2/8290: A6 49        LDX $49
	LDA CharStruct.Defense,X				;C2/8292: BD 2D 20     LDA $202D,X  (Defense)
	TAX 							;C2/8295: AA           TAX 
	STX Defense						;C2/8296: 86 54        STX $54
	RTS 							;C2/8298: 60           RTS 
%endsub()

%org($C28299)
;Throw Damage formula
;Attack = Item Attack Power + (0..Item Attack/8)
;M = Level*Strength/128 + Level*Agility/128 + 2
;Defense = Target Defense
%sub(ThrowDamage)
ThrowDamage:
	LDX AttackerOffset					;C2/8299: A6 32        LDX $32
	LDA CharStruct.SelectedItem,X				;C2/829B: BD 5A 20     LDA $205A,X
	STA ThrownItem						;C2/829E: 8D 63 7C     STA $7C63
	REP #$20						;C2/82A1: C2 20        REP #$20
	JSR ShiftMultiply_4					;C2/82A3: 20 B7 01     JSR $01B7    (x4)
	STA $0E			;ItemID*4			;C2/82A6: 85 0E        STA $0E
	ASL          		;ItemID*8			;C2/82A8: 0A           ASL          (x2)
	CLC 							;C2/82A9: 18           CLC 
	ADC $0E			;ItemID*12			;C2/82AA: 65 0E        ADC $0E
	TAX 							;C2/82AC: AA           TAX 
	TDC 							;C2/82AD: 7B           TDC 
	SEP #$20						;C2/82AE: E2 20        SEP #$20
	LDA ROMItems.AtkPower,X					;C2/82B0: BF 07 00 D1  LDA $D10007,X
	STA $0E       		;Item Attack			;C2/82B4: 85 0E        STA $0E       (Throw Damage)
	JSR ShiftDivide_8     	;Item Attack / 8		;C2/82B6: 20 BF 01     JSR $01BF     (Divide by 8)
	LDX #$0000						;C2/82B9: A2 00 00     LDX #$0000
	JSR Random_X_A     	;0..Item Attack / 8		;C2/82BC: 20 7C 00     JSR $007C     (0..(Throw Damage/8))
	CLC 							;C2/82BF: 18           CLC 
	ADC $0E							;C2/82C0: 65 0E        ADC $0E
	STA Attack    	;Item Attack + 0..Item Attack / 8	;C2/82C2: 85 50        STA $50       (Damage = Throw Damage + (0..(Throw Damage/8))0
	TDC 							;C2/82C4: 7B           TDC 
	ADC #$00						;C2/82C5: 69 00        ADC #$00
	STA Attack+1						;C2/82C7: 85 51        STA $51
	LDA Strength     					;C2/82C9: AD E1 7B     LDA $7BE1     (Strength)
	STA $24							;C2/82CC: 85 24        STA $24
	LDA Level     						;C2/82CE: AD E5 7B     LDA $7BE5     (Level)
	STA $25							;C2/82D1: 85 25        STA $25
	JSR Multiply_8bit					;C2/82D3: 20 F1 00     JSR $00F1     (Level * Strength)
	REP #$20						;C2/82D6: C2 20        REP #$20
	LDA $26							;C2/82D8: A5 26        LDA $26
	JSR ShiftDivide_128					;C2/82DA: 20 BB 01     JSR $01BB     (Divide by 128)
	STA $0E			;Str*Level/128			;C2/82DD: 85 0E        STA $0E
	TDC 							;C2/82DF: 7B           TDC 
	SEP #$20						;C2/82E0: E2 20        SEP #$20
	LDA Agility       					;C2/82E2: AD E2 7B     LDA $7BE2     (Agility)
	STA $24							;C2/82E5: 85 24        STA $24
	LDA Level     						;C2/82E7: AD E5 7B     LDA $7BE5     (Level)
	STA $25							;C2/82EA: 85 25        STA $25
	JSR Multiply_8bit     					;C2/82EC: 20 F1 00     JSR $00F1     (Level * Agility)
	REP #$20						;C2/82EF: C2 20        REP #$20
	LDA $26							;C2/82F1: A5 26        LDA $26
	JSR ShiftDivide_128	;Agi*Level/128			;C2/82F3: 20 BB 01     JSR $01BB     (Divide by 128)
	CLC 							;C2/82F6: 18           CLC 
	ADC $0E       						;C2/82F7: 65 0E        ADC $0E       (Level*Strength)/128 + (Level*Agility)/128
	ADC #$0002    		;+2				;C2/82F9: 69 02 00     ADC #$0002    (+2)
	STA M							;C2/82FC: 85 52        STA $52
	TDC 							;C2/82FE: 7B           TDC 
	SEP #$20						;C2/82FF: E2 20        SEP #$20
	LDX TargetOffset					;C2/8301: A6 49        LDX $49
	LDA CharStruct.Defense,X   				;C2/8303: BD 2D 20     LDA $202D,X   (Defense)
	TAX 							;C2/8306: AA           TAX 
	STX Defense						;C2/8307: 86 54        STX $54
	RTS 							;C2/8309: 60           RTS 
%endsub()
	
%org($C2830A)
;GilToss Damage Formula
;Attack = Level + 10 (or =0, if poor)
;M = Param2
;Defense = Target Defense
;Gil Cost = Param1 * Level
%sub(GilTossDamage)
GilTossDamage:
	CLC 							;C2/830A: 18           CLC 
	LDA Level						;C2/830B: AD E5 7B     LDA $7BE5     (Level)
	ADC #$0A   	;+10					;C2/830E: 69 0A        ADC #$0A      (Level+10)
	TAX 							;C2/8310: AA           TAX 
	STX Attack    						;C2/8311: 86 50        STX $50       Damage = Level+10
	LDA Param1						;C2/8313: A5 57        LDA $57
	STA $24							;C2/8315: 85 24        STA $24
	LDA Level  						;C2/8317: AD E5 7B     LDA $7BE5     (Level)
	STA $25							;C2/831A: 85 25        STA $25
	JSR Multiply_8bit					;C2/831C: 20 F1 00     JSR $00F1     (Level * First Parameter)
	LDA.l Gil+2						;C2/831F: AF 49 09 00  LDA $000949
	BNE .Rich	;>65535 Gil				;C2/8323: D0 14        BNE $8339
	REP #$20						;C2/8325: C2 20        REP #$20
	LDA.l Gil						;C2/8327: AF 47 09 00  LDA $000947   (Check if Enough Gil)
	CMP $26							;C2/832B: C5 26        CMP $26
	BCS .GilOK						;C2/832D: B0 07        BCS $8336
	TDC 							;C2/832F: 7B           TDC 
	STA Attack	;Not enough Gil, Attack = 0		;C2/8330: 85 50        STA $50
	SEP #$20						;C2/8332: E2 20        SEP #$20
	BRA .Finish						;C2/8334: 80 22        BRA $8358
.GilOK	TDC 							;C2/8336: 7B           TDC 
	SEP #$20						;C2/8337: E2 20        SEP #$20
.Rich	SEC 		;manual 24 bit subtraction		;C2/8339: 38           SEC 
	LDA.l Gil						;C2/833A: AF 47 09 00  LDA $000947
	SBC $26							;C2/833E: E5 26        SBC $26
	STA.l Gil						;C2/8340: 8F 47 09 00  STA $000947
	LDA.l Gil+1						;C2/8344: AF 48 09 00  LDA $000948
	SBC $27							;C2/8348: E5 27        SBC $27
	STA.l Gil+1						;C2/834A: 8F 48 09 00  STA $000948
	LDA.l Gil+2						;C2/834E: AF 49 09 00  LDA $000949
	SBC #$00						;C2/8352: E9 00        SBC #$00
	STA.l Gil+2						;C2/8354: 8F 49 09 00  STA $000949
.Finish	LDA Param2						;C2/8358: A5 58        LDA $58
	TAX 							;C2/835A: AA           TAX 
	STX M							;C2/835B: 86 52        STX $52
	LDX TargetOffset					;C2/835D: A6 49        LDX $49
	LDA CharStruct.Defense,X				;C2/835F: BD 2D 20     LDA $202D,X  (Defense)
	TAX 							;C2/8362: AA           TAX 
	STX Defense						;C2/8363: 86 54        STX $54
	RTS 							;C2/8365: 60           RTS 
%endsub()
	
%org($C28366)
;Multitargetting Modifications to Attack
%sub(MultiTargetMod)
MultiTargetMod:
	LDA AttackerOffset2						;C2/8366: A5 39        LDA $39
	TAX 								;C2/8368: AA           TAX 
	LDA AttackInfo.Targetting,X					;C2/8369: BD FC 79     LDA $79FC,X
	AND #$40   		;hits all targets			;C2/836C: 29 40        AND #$40      
	BNE .Return  							;C2/836E: D0 2A        BNE $839A    (If attacker's spell is auto Multitargettable)
	LDA MultiCommand						;C2/8370: AD 2C 7B     LDA $7B2C
	ASL        							;C2/8373: 0A           ASL           
	TAX 								;C2/8374: AA           TAX 
	LDA TargetBitmask,X						;C2/8375: BD FC 7A     LDA $7AFC,X
	AND #$F0							;C2/8378: 29 F0        AND #$F0
	BNE +			;party targetted			;C2/837A: D0 14        BNE $8390
	;shuffles bits to get monsters in the right order
	;don't know why since we're just counting them
	LDA TargetBitmask,X						;C2/837C: BD FC 7A     LDA $7AFC,X
	AND #$0F							;C2/837F: 29 0F        AND #$0F
	JSR ShiftMultiply_16						;C2/8381: 20 B5 01     JSR $01B5    (x16)
	STA $0E								;C2/8384: 85 0E        STA $0E
	LDA TargetBitmask+1,X						;C2/8386: BD FD 7A     LDA $7AFD,X
	AND #$F0							;C2/8389: 29 F0        AND #$F0
	JSR ShiftDivide_16  						;C2/838B: 20 BE 01     JSR $01BE    (Divide by 16)
	ORA $0E			;A now contains monsters in order	;C2/838E: 05 0E        ORA $0E
+	JSR CountSetBits	;result in X				;C2/8390: 20 C3 01     JSR $01C3
	DEX 								;C2/8393: CA           DEX 
	BEQ .Return							;C2/8394: F0 04        BEQ $839A
	LSR Attack+1							;C2/8396: 46 51        LSR $51
	ROR Attack    							;C2/8398: 66 50        ROR $50      Damage = Damage / 2
.Return	RTS 								;C2/839A: 60           RTS 
%endsub()

%org($C2839B)
;Back Row Modifications
%sub(BackRowMod)
BackRowMod:
	LDX AttackerOffset						;C2/839B: A6 32        LDX $32
	LDA CharStruct.CmdStatus,X					;C2/839D: BD 1E 20     LDA $201E,X
	AND #$10   							;C2/83A0: 29 10        AND #$10     (Check if Attacker is Jumping)
	BNE .Return							;C2/83A2: D0 18        BNE $83BC
	LDA CharStruct.CharRow,X					;C2/83A4: BD 00 20     LDA $2000,X  (Check if Attack is in Back Row)
	BPL +								;C2/83A7: 10 06        BPL $83AF
	REP #$20							;C2/83A9: C2 20        REP #$20
	LSR M    							;C2/83AB: 46 52        LSR $52      (M = M/2)
	SEP #$20							;C2/83AD: E2 20        SEP #$20
+
	LDX TargetOffset						;C2/83AF: A6 49        LDX $49
	LDA CharStruct.CharRow,X					;C2/83B1: BD 00 20     LDA $2000,X  (Check if Target is in Back Row)
	BPL .Return							;C2/83B4: 10 06        BPL $83BC
	REP #$20							;C2/83B6: C2 20        REP #$20
	LSR M    							;C2/83B8: 46 52        LSR $52      (M = M/2)
	SEP #$20							;C2/83BA: E2 20        SEP #$20
.Return
	RTS								;C2/83BC: 60           RTS
%endsub()

%org($C283BD)
;Command modifications to damage
%sub(CommandMod)
CommandMod:
	LDX AttackerOffset							;C2/83BD: A6 32        LDX $32
	LDA CharStruct.DamageMod,X						;C2/83BF: BD 1F 20     LDA $201F,X
	AND #$40								;C2/83C2: 29 40        AND #$40
	BEQ + 									;C2/83C4: F0 06        BEQ $83CC
	REP #$20								;C2/83C6: C2 20        REP #$20
	ASL Attack    								;C2/83C8: 06 50        ASL $50      (Damage = Damage * 2)
	SEP #$20								;C2/83CA: E2 20        SEP #$20
+
	LDA CharStruct.DamageMod,X						;C2/83CC: BD 1F 20     LDA $201F,X
	AND #$20								;C2/83CF: 29 20        AND #$20
	BEQ +									;C2/83D1: F0 07        BEQ $83DA
	REP #$20								;C2/83D3: C2 20        REP #$20
	LSR Attack      							;C2/83D5: 46 50        LSR $50      (Damage = Damage / 2)
	TDC 									;C2/83D7: 7B           TDC 
	SEP #$20								;C2/83D8: E2 20        SEP #$20
+
	LDA CharStruct.DamageMod,X						;C2/83DA: BD 1F 20     LDA $201F,X
	AND #$10								;C2/83DD: 29 10        AND #$10
	BEQ +									;C2/83DF: F0 06        BEQ $83E7
	REP #$20								;C2/83E1: C2 20        REP #$20
	ASL M    								;C2/83E3: 06 52        ASL $52      (M = M * 2)
	SEP #$20								;C2/83E5: E2 20        SEP #$20
+
	LDA CharStruct.DamageMod,X						;C2/83E7: BD 1F 20     LDA $201F,X
	AND #$08								;C2/83EA: 29 08        AND #$08
	BEQ +									;C2/83EC: F0 07        BEQ $83F5
	REP #$20								;C2/83EE: C2 20        REP #$20
	LSR M    								;C2/83F0: 46 52        LSR $52      (M = M / 2)
	TDC 									;C2/83F2: 7B           TDC 
	SEP #$20								;C2/83F3: E2 20        SEP #$20
+
	LDA CharStruct.DamageMod,X						;C2/83F5: BD 1F 20     LDA $201F,X
	AND #$04								;C2/83F8: 29 04        AND #$04
	BEQ +									;C2/83FA: F0 04        BEQ $8400
	TDC 									;C2/83FC: 7B           TDC 
	TAX 									;C2/83FD: AA           TAX 
	STX Defense   								;C2/83FE: 86 54        STX $54      (Defense = 0)
+
	LDX TargetOffset							;C2/8400: A6 49        LDX $49
	LDA CharStruct.CreatureType,X						;C2/8402: BD 65 20     LDA $2065,X  (Target Creature Type = Human?)
	BPL +									;C2/8405: 10 0F        BPL $8416
	LDX AttackerOffset							;C2/8407: A6 32        LDX $32
	LDA CharStruct.DamageMod,X						;C2/8409: BD 1F 20     LDA $201F,X
	AND #$01								;C2/840C: 29 01        AND #$01
	BEQ +									;C2/840E: F0 06        BEQ $8416
	REP #$20								;C2/8410: C2 20        REP #$20
	ASL Attack    								;C2/8412: 06 50        ASL $50      (Damage = Damage * 2)
	SEP #$20								;C2/8414: E2 20        SEP #$20
+
	LDX TargetOffset							;C2/8416: A6 49        LDX $49
	LDA CharStruct.CmdStatus,X						;C2/8418: BD 1E 20     LDA $201E,X
	BPL +	  				;Defending			;C2/841B: 10 07        BPL $8424    (If Target is Defending)
	REP #$20								;C2/841D: C2 20        REP #$20
	LSR M   								;C2/841F: 46 52        LSR $52      (M = M / 2)
	TDC 									;C2/8421: 7B           TDC 
	SEP #$20								;C2/8422: E2 20        SEP #$20
+
	LDA CharStruct.CmdStatus,X						;C2/8424: BD 1E 20     LDA $201E,X
	AND #$40				;Guarding			;C2/8427: 29 40        AND #$40
	BEQ +	  								;C2/8429: F0 04        BEQ $842F    (If Target is Guarding)
	TDC 									;C2/842B: 7B           TDC 
	TAX 									;C2/842C: AA           TAX 
	STX Attack    								;C2/842D: 86 50        STX $50      (Damage = 0)
+
	RTS 									;C2/842F: 60           RTS 
%endsub()
	
%org($C28430)
;Double Grip Damage Multiplier Modifier
%sub(DoubleGripMod)
DoubleGripMod:
	LDX AttackerOffset						;C2/8430: A6 32        LDX $32
	LDA CharStruct.Passives2,X					;C2/8432: BD 21 20     LDA $2021,X
	AND #$20    				;Double Grip		;C2/8435: 29 20        AND #$20     (Attacker has Double Grip Ability)
	BEQ .Ret							;C2/8437: F0 18        BEQ $8451
	LDA CharStruct.RHShield,X					;C2/8439: BD 11 20     LDA $2011,X
	ORA CharStruct.LHShield,X					;C2/843C: 1D 12 20     ORA $2012,X  (No Bonus if Shield Equipped in either hand)
	BNE .Ret							;C2/843F: D0 10        BNE $8451
	LDA CharStruct.RHWeapon,X					;C2/8441: BD 13 20     LDA $2013,X
	BEQ .EmptyHand							;C2/8444: F0 05        BEQ $844B
	LDA CharStruct.LHWeapon,X 					;C2/8446: BD 14 20     LDA $2014,X  (No Bonus if two Weapons equipped)
	BNE .Ret							;C2/8449: D0 06        BNE $8451
.EmptyHand
	REP #$20							;C2/844B: C2 20        REP #$20
	ASL M     							;C2/844D: 06 52        ASL $52      (M = M * 2)
	SEP #$20							;C2/844F: E2 20        SEP #$20
.Ret	RTS 								;C2/8451: 60           RTS 
%endsub()

%org($C28452)
;Check for Jump
%sub(CheckJump)
CheckJump:
	LDX AttackerOffset						;C2/8452: A6 32        LDX $32
	LDA CharStruct.CmdStatus,X					;C2/8454: BD 1E 20     LDA $201E,X 
	AND #$10				;Jumping		;C2/8457: 29 10        AND #$10
	BEQ .NoJump 							;C2/8459: F0 08        BEQ $8463    (If Attacker is Not Jumping)
	REP #$20							;C2/845B: C2 20        REP #$20
	ASL M    							;C2/845D: 06 52        ASL $52      (M = M * 2)
	TDC 								;C2/845F: 7B           TDC 
	SEP #$20							;C2/8460: E2 20        SEP #$20
	RTS 								;C2/8462: 60           RTS 
									;
.NoJump	JSR BackRowMod							;C2/8463: 20 9B 83     JSR $839B    (Check for Back Row Modifications)
	RTS 								;C2/8466: 60           RTS 
%endsub()

%org($C28467)
;Bonus to Attack, costing MP
%sub(RuneMod)
RuneMod:
	LDA Param3	;MP Cost				;C2/8467: A5 59        LDA $59
	TAX 							;C2/8469: AA           TAX 
	STX $12							;C2/846A: 86 12        STX $12
	LDA Param2	;Attack Boost				;C2/846C: A5 58        LDA $58
	TAX 							;C2/846E: AA           TAX 
	STX $10							;C2/846F: 86 10        STX $10
	REP #$20						;C2/8471: C2 20        REP #$20
	LDX AttackerOffset					;C2/8473: A6 32        LDX $32
	LDA CharStruct.CurMP,X					;C2/8475: BD 0A 20     LDA $200A,X
	CMP $12							;C2/8478: C5 12        CMP $12
	BCC .Abort   	;not enough MP				;C2/847A: 90 2F        BCC $84AB    (Check if enough MP)
	SEC 							;C2/847C: 38           SEC 
	SBC $12							;C2/847D: E5 12        SBC $12
	STA CharStruct.CurMP,X					;C2/847F: 9D 0A 20     STA $200A,X  (Subtract MP)
	CLC 							;C2/8482: 18           CLC 
	LDA Attack						;C2/8483: A5 50        LDA $50
	ADC $10							;C2/8485: 65 10        ADC $10
	STA Attack     						;C2/8487: 85 50        STA $50      (Bonus to Damage)
	TDC 							;C2/8489: 7B           TDC 
	SEP #$20						;C2/848A: E2 20        SEP #$20
	LDA Level   						;C2/848C: AD E5 7B     LDA $7BE5    (Level)
	STA $24							;C2/848F: 85 24        STA $24
	LDA MagicPower   					;C2/8491: AD E4 7B     LDA $7BE4    (Magic Power)
	STA $25 						;C2/8494: 85 25        STA $25 
	JSR Multiply_8bit   					;C2/8496: 20 F1 00     JSR $00F1    (Level * Magic Power)
	REP #$20						;C2/8499: C2 20        REP #$20
	LDA $26							;C2/849B: A5 26        LDA $26
	JSR ShiftDivide_128					;C2/849D: 20 BB 01     JSR $01BB    (Level * Magic Power)/128
	CLC 							;C2/84A0: 18           CLC 
	ADC M							;C2/84A1: 65 52        ADC $52
	STA M 							;C2/84A3: 85 52        STA $52      (M = M + (Level * Magic Power)/128)
	TDC 							;C2/84A5: 7B           TDC 
	SEP #$20						;C2/84A6: E2 20        SEP #$20
	INC Crit						;C2/84A8: E6 5F        INC $5F
	RTS 							;C2/84AA: 60           RTS 
								;
.Abort	TDC 							;C2/84AB: 7B           TDC 
	SEP #$20						;C2/84AC: E2 20        SEP #$20
	RTS 							;C2/84AE: 60           RTS 
%endsub()
	
%org($C284AF)
;Specialty Effect Modifier to Damage
SpecialtyMod:
	LDX AttackerOffset							;C2/84AF: A6 32        LDX $32
	LDA CharStruct.Specialty,X						;C2/84B1: BD 6E 20     LDA $206E,X
	BPL + 		  			;Autohit or ignore defense	;C2/84B4: 10 04        BPL $84BA       (Check for Autohit)
	STZ Defense   								;C2/84B6: 64 54        STZ $54         (Defense = 0)
	STZ Defense+1								;C2/84B8: 64 55        STZ $55
+
	LDA CharStruct.Specialty,X						;C2/84BA: BD 6E 20     LDA $206E,X
	AND #$01    				;1.5x damage			;C2/84BD: 29 01        AND #$01        (If 1.5 Damage)
	BEQ .Return								;C2/84BF: F0 0D        BEQ $84CE
	REP #$20								;C2/84C1: C2 20        REP #$20
	LDA Attack								;C2/84C3: A5 50        LDA $50
	LSR 									;C2/84C5: 4A           LSR 
	CLC 									;C2/84C6: 18           CLC 
	ADC Attack								;C2/84C7: 65 50        ADC $50
	STA Attack     								;C2/84C9: 85 50        STA $50        (Damage = Damage + (Damage/2))
	TDC 									;C2/84CB: 7B           TDC 
	SEP #$20								;C2/84CC: E2 20        SEP #$20
.Return
	RTS 									;C2/84CE: 60           RTS 

%org($C284CF)
;Medicine modifier to damage
MedicineMod:
	LDX AttackerOffset						;C2/84CF: A6 32        LDX $32
	LDA CharStruct.Passives2,X					;C2/84D1: BD 21 20     LDA $2021,X
	AND #$10   			;Medicine			;C2/84D4: 29 10        AND #$10     (Check if Attacker has Medicine)
	BEQ .Ret							;C2/84D6: F0 04        BEQ $84DC
	ASL M    							;C2/84D8: 06 52        ASL $52      M = M * 2
	ROL M+1								;C2/84DA: 26 53        ROL $53
.Ret	RTS 								;C2/84DC: 60           RTS 

%org($C284DD)
;Creature type modification to damage
CreatureMod:
	LDX TargetOffset						;C2/84DD: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/84DF: BD 65 20     LDA $2065,X  (Check target Creature Type vs Parameter 3)
	AND Param3							;C2/84E2: 25 59        AND $59
	BEQ .Ret							;C2/84E4: F0 0C        BEQ $84F2
	REP #$20							;C2/84E6: C2 20        REP #$20
	LDA Attack							;C2/84E8: A5 50        LDA $50
	JSR ShiftMultiply_8						;C2/84EA: 20 B6 01     JSR $01B6    (Damage = Damage * 8)
	STA Attack							;C2/84ED: 85 50        STA $50
	TDC 								;C2/84EF: 7B           TDC 
	SEP #$20							;C2/84F0: E2 20        SEP #$20
.Ret	RTS 								;C2/84F2: 60           RTS 

%org($C284F3)
;Target Status Effect Modifiers to Magical Damage
TargetStatusModMag:
	LDX TargetOffset						;C2/84F3: A6 49        LDX $49
	LDA CharStruct.Status3,X					;C2/84F5: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/84F8: 1D 72 20     ORA $2072,X
	AND #$20   		;shell					;C2/84FB: 29 20        AND #$20     (Target Status3 = Shell)
	BEQ +								;C2/84FD: F0 04        BEQ $8503
	LSR M+1							;C2/84FF: 46 53        LSR $53
	ROR M   							;C2/8501: 66 52        ROR $52      (M = M / 2)
+	LDA CharStruct.Status1,X					;C2/8503: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X					;C2/8506: 1D 70 20     ORA $2070,X
	AND #$20   		;toad					;C2/8509: 29 20        AND #$20     (Target Status1 = Toad)
	BEQ .Return							;C2/850B: F0 04        BEQ $8511
	STZ Defense   							;C2/850D: 64 54        STZ $54      (Magic Defense = 0)
	STZ Defense+1 							;C2/850F: 64 55        STZ $55      
.Return	RTS 								;C2/8511: 60           RTS 


%org($C28512)
;Target Status Effect Modifiers to Physical Damage
TargetStatusModPhys:
	LDX TargetOffset									;C2/8512: A6 49        LDX $49
	LDA CharStruct.Status1,X								;C2/8514: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X								;C2/8517: 1D 70 20     ORA $2070,X
	AND #$30      				;Toad or Mini					;C2/851A: 29 30        AND #$30      		(Target Status1 = Toad or Mini)
	BEQ +											;C2/851C: F0 04        BEQ $8522
	TDC 											;C2/851E: 7B           TDC 
	TAX 											;C2/851F: AA           TAX 
	STX Defense   										;C2/8520: 86 54        STX $54      		 (Defense = 0)
+
	LDA CharStruct.Status3,X								;C2/8522: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X								;C2/8525: 1D 72 20     ORA $2072,X
	AND #$40      				;Armor/Protect					;C2/8528: 29 40        AND #$40      		(Target Status3 = Armor)
	BEQ +											;C2/852A: F0 06        BEQ $8532
	REP #$20										;C2/852C: C2 20        REP #$20
	LSR M     										;C2/852E: 46 52        LSR $52     		  (M = M / 2)
	SEP #$20										;C2/8530: E2 20        SEP #$20
+
	RTS 											;C2/8532: 60           RTS 


%org($C28533)
;Attacker Status Effect Modifiers to Physical Damage
AttackerStatusModPhys:
	LDX AttackerOffset								;C2/8533: A6 32        LDX $32
	LDA CharStruct.Status1,X							;C2/8535: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X							;C2/8538: 1D 70 20     ORA $2070,X
	AND #$30      				;Toad or Mini				;C2/853B: 29 30        AND #$30      		 (Attacker Status1 = Toad or Mini)
	BEQ +										;C2/853D: F0 05        BEQ $8544		
	LDX #$0003									;C2/853F: A2 03 00     LDX #$0003		
	STX Attack   									;C2/8542: 86 50        STX $50  	 Damage = 3
+                                                                                      
	LDA CharStruct.Status2,X							;C2/8544: BD 1B 20     LDA $201B,X		
	ORA CharStruct.AlwaysStatus2,X							;C2/8547: 1D 71 20     ORA $2071,X		
	AND #$08      				;Berserk				;C2/854A: 29 08        AND #$08      		 (Attacker Status2 = Berserk)
	BEQ +										;C2/854C: F0 0E        BEQ $855C		
	REP #$20									;C2/854E: C2 20        REP #$20		
	LDA Attack									;C2/8550: A5 50        LDA $50		
	ASL           									;C2/8552: 0A           ASL           		 Damage = Damage * 2
	CLC 										;C2/8553: 18           CLC 		
	ADC Attack    									;C2/8554: 65 50        ADC $50       		 Damage = Damage + (Damage * 2)
	LSR           									;C2/8556: 4A           LSR           		 Damage = (Damage + (Damage * 2))/2
	STA Attack									;C2/8557: 85 50        STA $50
	TDC 										;C2/8559: 7B           TDC 
	SEP #$20									;C2/855A: E2 20        SEP #$20
+
	RTS 										;C2/855C: 60           RTS 

%org($C2855D)
;8x Bonus and Ignore Def if Equal Level
EqualLevelMod:
	LDX TargetOffset						;C2/855D: A6 49        LDX $49
	LDA CharStruct.Level,X						;C2/855F: BD 02 20     LDA $2002,X
	LDX AttackerOffset						;C2/8562: A6 32        LDX $32
	CMP CharStruct.Level,X						;C2/8564: DD 02 20     CMP $2002,X   (If Attacker Level = Target Level)
	BNE .Ret							;C2/8567: D0 0D        BNE $8576
	REP #$20							;C2/8569: C2 20        REP #$20
	ASL Attack							;C2/856B: 06 50        ASL $50
	ASL Attack							;C2/856D: 06 50        ASL $50
	ASL Attack    							;C2/856F: 06 50        ASL $50       (Damage = Damage * 8)
	TDC 								;C2/8571: 7B           TDC 
	STA Defense   							;C2/8572: 85 54        STA $54       (Defense = 0)
	SEP #$20							;C2/8574: E2 20        SEP #$20
.Ret	RTS 								;C2/8576: 60           RTS 	

;Brave Blade Damage formula
;Attack = Attack Power - Escapes (min 0)
;M = Level*Strength/128 + 2
;Defense = Target Defense
%sub(BraveDamage)
BraveDamage:
	LDA AttackerOffset2						;C2/8577: A5 39        LDA $39
	TAX 								;C2/8579: AA           TAX 
	SEC 								;C2/857A: 38           SEC 
	LDA AttackInfo.AtkPower,X					;C2/857B: BD 03 7A     LDA $7A03,X
	SBC BattleData.Escapes  					;C2/857E: ED 75 7C     SBC $7C75    (Attack = Attack - # times escaped)
	BCS +								;C2/8581: B0 01        BCS $8584
	TDC 			;min 0					;C2/8583: 7B           TDC 
+	TAX        							;C2/8584: AA           TAX          (Minimum Attack = 0)
	STX Attack							;C2/8585: 86 50        STX $50
	LDA Level  							;C2/8587: AD E5 7B     LDA $7BE5    (Level)
	STA $24								;C2/858A: 85 24        STA $24
	LDA Strength  							;C2/858C: AD E1 7B     LDA $7BE1    (Strength)
	STA $25								;C2/858F: 85 25        STA $25
	JSR Multiply_8bit						;C2/8591: 20 F1 00     JSR $00F1
	REP #$20							;C2/8594: C2 20        REP #$20
	LDA $26								;C2/8596: A5 26        LDA $26
	JSR ShiftDivide_128						;C2/8598: 20 BB 01     JSR $01BB
	CLC 								;C2/859B: 18           CLC 
	ADC #$0002							;C2/859C: 69 02 00     ADC #$0002
	STA M   							;C2/859F: 85 52        STA $52      (M = (Level * Strength)/128)
	TDC 								;C2/85A1: 7B           TDC 
	SEP #$20							;C2/85A2: E2 20        SEP #$20
	LDX TargetOffset						;C2/85A4: A6 49        LDX $49
	LDA CharStruct.Defense,X					;C2/85A6: BD 2D 20     LDA $202D,X  (Defense = target Defense)
	TAX 								;C2/85A9: AA           TAX 
	STX Defense							;C2/85AA: 86 54        STX $54
	RTS 								;C2/85AC: 60           RTS 
%endsub()
	
%org($C285AD)
;Goblin Punch Damage formula
;Attack = RH + LH Goblin Attack Power
;M = Level*Strength/128 + 2, or Monster Attack Modifier
;Defense = Target Defense
%sub(GoblinDamage)
GoblinDamage:
	LDX AttackerOffset						;C2/85AD: A6 32        LDX $32
	CLC 								;C2/85AF: 18           CLC 
	LDA CharStruct.MonsterAttack,X					;C2/85B0: BD 44 20     LDA $2044,X
	ADC CharStruct.MonsterAttackLH,X				;C2/85B3: 7D 45 20     ADC $2045,X
	STA Attack							;C2/85B6: 85 50        STA $50    (Damage = Right Attack + Left Attack)
	TDC 								;C2/85B8: 7B           TDC 
	ADC #$00							;C2/85B9: 69 00        ADC #$00
	STA Attack+1							;C2/85BB: 85 51        STA $51
	LDA AttackerIndex						;C2/85BD: A5 47        LDA $47
	CMP #$04							;C2/85BF: C9 04        CMP #$04
	BCC .Party  		;<4 means party				;C2/85C1: 90 08        BCC $85CB  (If target is a character)
	LDA CharStruct.MonsterM,X					;C2/85C3: BD 62 20     LDA $2062,X
	TAX 								;C2/85C6: AA           TAX 
	STX M    							;C2/85C7: 86 52        STX $52    (M = Monster Attack Multiplier)
	BRA .Finish							;C2/85C9: 80 1D        BRA $85E8
.Party	LDA Level 							;C2/85CB: AD E5 7B     LDA $7BE5  (Level)
	STA $24								;C2/85CE: 85 24        STA $24
	LDA Strength  							;C2/85D0: AD E1 7B     LDA $7BE1  (Strength)
	STA $25								;C2/85D3: 85 25        STA $25
	JSR Multiply_8bit  						;C2/85D5: 20 F1 00     JSR $00F1  (Level * Strength)
	REP #$20							;C2/85D8: C2 20        REP #$20
	LDA $26								;C2/85DA: A5 26        LDA $26
	JSR ShiftDivide_128  						;C2/85DC: 20 BB 01     JSR $01BB  (Level * Strength)/128
	CLC 								;C2/85DF: 18           CLC 
	ADC #$0002 							;C2/85E0: 69 02 00     ADC #$0002 
	STA M    							;C2/85E3: 85 52        STA $52    (M = (Level * Strength)/128 + 2)
	TDC 								;C2/85E5: 7B           TDC 
	SEP #$20							;C2/85E6: E2 20        SEP #$20
.Finish	LDX TargetOffset						;C2/85E8: A6 49        LDX $49
	LDA CharStruct.Defense,X 					;C2/85EA: BD 2D 20     LDA $202D,X (Defense = target Defense)
	TAX 								;C2/85ED: AA           TAX 
	STX Defense							;C2/85EE: 86 54        STX $54
	RTS 								;C2/85F0: 60           RTS 
%endsub()

%org($C285F1)
;Strong Fight Damage formula
;Attack = Monster Attack * 8 + 0..Monster Attack / 8
;M = Monster M
;Defense = Target Defense
%sub(StrongFightDamage)
StrongFightDamage:
	LDX AttackerOffset						;C2/85F1: A6 32        LDX $32
	CLC 								;C2/85F3: 18           CLC 
	LDA CharStruct.MonsterAttack,X					;C2/85F4: BD 44 20     LDA $2044,X
	PHA 								;C2/85F7: 48           PHA 
	REP #$20							;C2/85F8: C2 20        REP #$20
	JSR ShiftMultiply_8						;C2/85FA: 20 B6 01     JSR $01B6    
	STA Attack    							;C2/85FD: 85 50        STA $50      (Damage = Attack * 8)
	TDC 								;C2/85FF: 7B           TDC 
	SEP #$20							;C2/8600: E2 20        SEP #$20
	LDA CharStruct.MonsterM,X					;C2/8602: BD 62 20     LDA $2062,X
	TAX 								;C2/8605: AA           TAX 
	STX M    							;C2/8606: 86 52        STX $52      (M = Monster Multiplier)
	PLA 								;C2/8608: 68           PLA 
	JSR ShiftDivide_8						;C2/8609: 20 BF 01     JSR $01BF
	LDX #$0000							;C2/860C: A2 00 00     LDX #$0000
	JSR Random_X_A 							;C2/860F: 20 7C 00     JSR $007C    (0..(Attack/8))
	CLC 								;C2/8612: 18           CLC 
	ADC Attack 							;C2/8613: 65 50        ADC $50 
	STA Attack    							;C2/8615: 85 50        STA $50      (Damage = Attack * 8 + (0..(Attack/8)))
	LDA Attack+1							;C2/8617: A5 51        LDA $51
	ADC #$00							;C2/8619: 69 00        ADC #$00
	STA Attack+1							;C2/861B: 85 51        STA $51
	LDX TargetOffset						;C2/861D: A6 49        LDX $49
	LDA CharStruct.Defense,X					;C2/861F: BD 2D 20     LDA $202D,X  
	TAX 								;C2/8622: AA           TAX 
	STX Defense    						;C2/8623: 86 54        STX $54      (Defense = Target Defense)
	RTS 								;C2/8625: 60           RTS 
%endsub()

%org($C28626)
;Chicken Knife Damage Formula
;Attack = Escapes/2
;M = Level*Strength/128 + Level*Agility/128 + 2
;Defense = Target Defense
%sub(ChickenDamage)
ChickenDamage:
	LDA BattleData.Escapes				;C2/8626: AD 75 7C     LDA $7C75
	LSR 						;C2/8629: 4A           LSR 
	TAX 						;C2/862A: AA           TAX 
	STX Attack					;C2/862B: 86 50        STX $50
	LDA Level  					;C2/862D: AD E5 7B     LDA $7BE5    (Level)
	STA $24						;C2/8630: 85 24        STA $24
	LDA Strength					;C2/8632: AD E1 7B     LDA $7BE1    (Strength)
	STA $25						;C2/8635: 85 25        STA $25
	JSR Multiply_8bit				;C2/8637: 20 F1 00     JSR $00F1    (Level * Strength)
	LDX $26						;C2/863A: A6 26        LDX $26
	STX $0E						;C2/863C: 86 0E        STX $0E
	LDA Level  					;C2/863E: AD E5 7B     LDA $7BE5    (Level)
	STA $24						;C2/8641: 85 24        STA $24
	LDA Agility  					;C2/8643: AD E2 7B     LDA $7BE2    (Agility)
	STA $25						;C2/8646: 85 25        STA $25
	JSR Multiply_8bit				;C2/8648: 20 F1 00     JSR $00F1    (Level * Agility)
	REP #$20					;C2/864B: C2 20        REP #$20
	LDA $26						;C2/864D: A5 26        LDA $26
	JSR ShiftDivide_128 				;C2/864F: 20 BB 01     JSR $01BB    (Level * Agility)/128
	STA $10						;C2/8652: 85 10        STA $10
	LDA $0E						;C2/8654: A5 0E        LDA $0E
	JSR ShiftDivide_128				;C2/8656: 20 BB 01     JSR $01BB    (Level * Strength)/128
	CLC 						;C2/8659: 18           CLC 
	ADC $10						;C2/865A: 65 10        ADC $10
	ADC #$0002					;C2/865C: 69 02 00     ADC #$0002
	STA M  						;C2/865F: 85 52        STA $52      (M = (Level * Strength)/128 + (Level * Agility)/128) + 2)
	TDC 						;C2/8661: 7B           TDC 
	SEP #$20					;C2/8662: E2 20        SEP #$20
	LDX TargetOffset				;C2/8664: A6 49        LDX $49
	LDA CharStruct.Defense,X			;C2/8666: BD 2D 20     LDA $202D,X  (Defense = Target Defense)
	TAX 						;C2/8669: AA           TAX 
	STX Defense					;C2/866A: 86 54        STX $54
	RTS 						;C2/866C: 60           RTS 
%endsub()

%org($C2866D)
;Magic Element Up Modifier
ElementUpMod:
	LDX AttackerOffset					;C2/866D: A6 32        LDX $32
	LDA CharStruct.ElementUp,X				;C2/866F: BD 22 20     LDA $2022,X   (Check Attacker Magic Element Up)
	AND AtkElement						;C2/8672: 25 4D        AND $4D
	BEQ .Return						;C2/8674: F0 0D        BEQ $8683
	REP #$20						;C2/8676: C2 20        REP #$20
	LDA Attack						;C2/8678: A5 50        LDA $50
	LSR 							;C2/867A: 4A           LSR 
	CLC 							;C2/867B: 18           CLC 
	ADC Attack						;C2/867C: 65 50        ADC $50
	STA Attack    						;C2/867E: 85 50        STA $50       (Damage = Damage + (Damage/2))
	TDC 							;C2/8680: 7B           TDC 
	SEP #$20						;C2/8681: E2 20        SEP #$20
.Return	RTS 							;C2/8683: 60           RTS 


%org($C28684)
;Magic Sword Modifiers to Physical
MagicSwordMod:
	LDX AttackerOffset								;C2/8684: A6 32        LDX $32
	LDA CharStruct.MSwordElemental1,X  						;C2/8686: BD 50 20     LDA $2050,X  
	ORA CharStruct.MSwordElemental2,X						;C2/8689: 1D 51 20     ORA $2051,X
	ORA CharStruct.MSwordElemental3,X						;C2/868C: 1D 52 20     ORA $2052,X
	STA AtkElement     								;C2/868F: 85 4D        STA $4D     		 ($4D = Magic Sword Element)
	ORA CharStruct.MSwordStatus1,X							;C2/8691: 1D 53 20     ORA $2053,X		
	ORA CharStruct.MSwordStatus2,X							;C2/8694: 1D 54 20     ORA $2054,X		
	ORA CharStruct.MSwordStatusSpecial,X						;C2/8697: 1D 55 20     ORA $2055,X		
	BEQ +				;no MSword, could go to end but too far away 	;C2/869A: F0 02        BEQ $869E		
					;so it'll just fail all the checks
	INC MagicSword									;C2/869C: E6 60        INC $60
+	;Magic Sword Flare
	LDA CharStruct.MSwordStatusSpecial,X						;C2/869E: BD 55 20     LDA $2055,X		
	BPL +					;flare					;C2/86A1: 10 12        BPL $86B5		
	REP #$20									;C2/86A3: C2 20        REP #$20		
	CLC 										;C2/86A5: 18           CLC 		
	LDA Attack									;C2/86A6: A5 50        LDA $50		
	ADC #$0064  				;+100					;C2/86A8: 69 64 00     ADC #$0064  		 (Damage = Damage + 100)
	STA Attack									;C2/86AB: 85 50        STA $50		
	LSR Defense									;C2/86AD: 46 54        LSR $54		
	LSR Defense     								;C2/86AF: 46 54        LSR $54     		 (Defense = Defense / 4)
	TDC 										;C2/86B1: 7B           TDC 
	SEP #$20									;C2/86B2: E2 20        SEP #$20
	RTS 										;C2/86B4: 60           RTS 
+	;;Elemental Magic Sword vs Absorb
	LDX TargetOffset								;C2/86B5: A6 49        LDX $49
	LDA CharStruct.EAbsorb,X 							;C2/86B7: BD 30 20     LDA $2030,X 		 (Target has Elemental Absorb?)
	AND AtkElement									;C2/86BA: 25 4D        AND $4D		
	BEQ +										;C2/86BC: F0 07        BEQ $86C5		
	INC AtkHealed									;C2/86BE: E6 62        INC $62		
	STZ Defense									;C2/86C0: 64 54        STZ $54     		 (Defense = 0)
	STZ Defense+1									;C2/86C2: 64 55        STZ $55		
	RTS 										;C2/86C4: 60           RTS 		
+	;;Elemental Magic Sword vs Immune		
	LDA CharStruct.EImmune,X 							;C2/86C5: BD 32 20     LDA $2032,X 		 (Target has Elemental Immunity?)
	AND AtkElement									;C2/86C8: 25 4D        AND $4D		
	BEQ +										;C2/86CA: F0 03        BEQ $86CF		
	INC AtkMissed 									;C2/86CC: E6 56        INC $56     		 (Attack Misses)
	RTS 										;C2/86CE: 60           RTS 		
+	;Elemental Magic Sword vs Resist		
	LDA CharStruct.EHalf,X 								;C2/86CF: BD 33 20     LDA $2033,X 		 (Target has Elemental Half?)
	AND AtkElement									;C2/86D2: 25 4D        AND $4D		
	BEQ +										;C2/86D4: F0 05        BEQ $86DB		
	LSR M+1									;C2/86D6: 46 53        LSR $53		
	ROR M    									;C2/86D8: 66 52        ROR $52     		 (M = M / 2)
	RTS 										;C2/86DA: 60           RTS 
+	;;Elemental Magic Sword L3 vs Weakness
	LDA CharStruct.EWeak,X 								;C2/86DB: BD 34 20     LDA $2034,X 		(Target has Elemental Weakness)
	STA $0E										;C2/86DE: 85 0E        STA $0E		
	LDX AttackerOffset								;C2/86E0: A6 32        LDX $32		
	AND CharStruct.MSwordElemental3,X 						;C2/86E2: 3D 52 20     AND $2052,X 		 (Level 3 Magic Sword?)
	BEQ +										;C2/86E5: F0 26        BEQ $870D		
	LDX TargetOffset								;C2/86E7: A6 49        LDX $49		
	LDA CharStruct.CreatureType,X							;C2/86E9: BD 65 20     LDA $2065,X		
	AND #$20    				;heavy?					;C2/86EC: 29 20        AND #$20    		 (Target Creature type = Heavy?)
	BEQ ++										;C2/86EE: F0 0B        BEQ $86FB		
	REP #$20									;C2/86F0: C2 20        REP #$20		
	ASL Attack									;C2/86F2: 06 50        ASL $50		
	ASL Attack     								;C2/86F4: 06 50        ASL $50     		 (Damage = Damage * 4)
	STZ Defense     								;C2/86F6: 64 54        STZ $54     		 (Defense = 0)
	SEP #$20									;C2/86F8: E2 20        SEP #$20
	RTS 										;C2/86FA: 60           RTS 
++	;;Elemental Magic Sword L3 Instant Death
	LDA CharStruct.Status1,X		;X is still TargetOffset		;C2/86FB: BD 1A 20     LDA $201A,X
	AND #$02     				;zombie					;C2/86FE: 29 02        AND #$02     		 (Target Status1 = Zombie)
	BNE .Return									;C2/8700: D0 31        BNE $8733
	LDA CharStruct.Status1,X							;C2/8702: BD 1A 20     LDA $201A,X
	ORA #$80				;dead					;C2/8705: 09 80        ORA #$80
	STA CharStruct.Status1,X  							;C2/8707: 9D 1A 20     STA $201A,X   		(Inflict Dead Status on Target)
	INC TargetDead									;C2/870A: E6 61        INC $61
	RTS 										;C2/870C: 60           RTS 
+	;;Elemental Magic Sword L2 vs Weakness
	LDA $0E					;CharStruct.EWeak for Target		;C2/870D: A5 0E        LDA $0E
	AND CharStruct.MSwordElemental2,X  	;X is still TargetOffset		;C2/870F: 3D 51 20     AND $2051,X  		 (Level 2 Magic Sword?)
	BEQ +										;C2/8712: F0 10        BEQ $8724		
	REP #$20									;C2/8714: C2 20        REP #$20		
	LDA Attack									;C2/8716: A5 50        LDA $50		
	ASL         									;C2/8718: 0A           ASL          		 (Damage = Damage * 2)
	CLC 										;C2/8719: 18           CLC 		
	ADC Attack									;C2/871A: 65 50        ADC $50      		 Damage = Damage + Damage * 2
	STA Attack									;C2/871C: 85 50        STA $50		
	TDC 										;C2/871E: 7B           TDC 		
	STA Defense     								;C2/871F: 85 54        STA $54      		 Defense = 0
	SEP #$20									;C2/8721: E2 20        SEP #$20
	RTS 										;C2/8723: 60           RTS 
+	;;Elemental Magic Sword L1 vs Weakness
	LDA $0E					;CharStruct.EWeak for Target		;C2/8724: A5 0E        LDA $0E		
	AND CharStruct.MSwordElemental1,X  	;X is still TargetOffset		;C2/8726: 3D 50 20     AND $2050,X  		 (Level 1 Magic Sword?)
	BEQ .Return									;C2/8729: F0 08        BEQ $8733		
	REP #$20									;C2/872B: C2 20        REP #$20		
	ASL Attack      								;C2/872D: 06 50        ASL $50      		 (Damage = Damage * 2)
	STZ Defense      								;C2/872F: 64 54        STZ $54      		 Defense = 0
	SEP #$20									;C2/8731: E2 20        SEP #$20
.Return
	RTS 										;C2/8733: 60           RTS 

%org($C28734)
;Elemental Modifiers for Physical
;
%sub(ElementDamageModPhys)
ElementDamageModPhys:
	LDA MagicSword							;C2/8734: A5 60        LDA $60
	BNE .Ret		;Magic Sword Elements handled elsewhere	;C2/8736: D0 35        BNE $876D
	LDX TargetOffset						;C2/8738: A6 49        LDX $49
	LDA CharStruct.EAbsorb,X 					;C2/873A: BD 30 20     LDA $2030,X    (Check for Elemental Absorb)
	AND AtkElement							;C2/873D: 25 4D        AND $4D
	BEQ .CheckImmune						;C2/873F: F0 07        BEQ $8748
	INC AtkHealed							;C2/8741: E6 62        INC $62
	STZ Defense   							;C2/8743: 64 54        STZ $54        (Defense = 0)
	STZ Defense+1 							;C2/8745: 64 55        STZ $55        
	RTS 								;C2/8747: 60           RTS 
.CheckImmune								;
	LDA CharStruct.EImmune,X 					;C2/8748: BD 32 20     LDA $2032,X    (Check for Elemental Immunity)
	AND AtkElement							;C2/874B: 25 4D        AND $4D
	BEQ .CheckHalf							;C2/874D: F0 03        BEQ $8752
	INC AtkMissed   						;C2/874F: E6 56        INC $56        (Attack Misses)
	RTS 								;C2/8751: 60           RTS 
.CheckHalf								;
	LDA CharStruct.EHalf,X						;C2/8752: BD 33 20     LDA $2033,X    (Check for Elemental Half)
	AND AtkElement							;C2/8755: 25 4D        AND $4D
	BEQ .CheckWeak							;C2/8757: F0 05        BEQ $875E
	LSR Attack+1     						;C2/8759: 46 51        LSR $51        
	ROR Attack    							;C2/875B: 66 50        ROR $50        (Damage = Damage / 2)
	RTS 								;C2/875D: 60           RTS 
.CheckWeak								;
	LDA CharStruct.EWeak,X 						;C2/875E: BD 34 20     LDA $2034,X    (Check for Elemental Weakness)
	AND AtkElement							;C2/8761: 25 4D        AND $4D
	BEQ .Ret							;C2/8763: F0 08        BEQ $876D
	ASL Attack    							;C2/8765: 06 50        ASL $50        (Damage = Damage * 2)
	ROL Attack+1							;C2/8767: 26 51        ROL $51
	STZ Defense   							;C2/8769: 64 54        STZ $54        (Defense = 0)
	STZ Defense+1							;C2/876B: 64 55        STZ $55
.Ret	RTS 								;C2/876D: 60           RTS 
%endsub()	
	
%org($C2876E)
;Elemental Damage Modifiers for Magic
%sub(ElementDamageModMag)
ElementDamageModMag:
	LDA MagicSword		;shouldn't ever be set 			;C2/876E: A5 60        LDA $60
	BNE .Return		;because it's not loaded for magic	;C2/8770: D0 42        BNE $87B4
	LDX TargetOffset      						;C2/8772: A6 49        LDX $49        (Check for Elemental Absorb)
	LDA CharStruct.EAbsorb,X					;C2/8774: BD 30 20     LDA $2030,X
	AND AtkElement							;C2/8777: 25 4D        AND $4D
	BEQ +								;C2/8779: F0 07        BEQ $8782
	;Absorbed
	INC AtkHealed      						;C2/877B: E6 62        INC $62        (Heal)
	STZ Defense      						;C2/877D: 64 54        STZ $54        (Defense = 0)
	STZ Defense+1							;C2/877F: 64 55        STZ $55
	RTS 								;C2/8781: 60           RTS 
+							
	LDA CharStruct.EBlock,X						;C2/8782: BD 31 20     LDA $2031,X    
	AND AtkElement							;C2/8785: 25 4D        AND $4D
	BEQ +								;C2/8787: F0 03        BEQ $878C
	;Blocked (is this used?)
	INC AtkMissed      						;C2/8789: E6 56        INC $56        (Attack Misses)
	RTS 								;C2/878B: 60           RTS 
+						
	LDA CharStruct.EImmune,X  					;C2/878C: BD 32 20     LDA $2032,X    (Check for Elemental Immunity)
	AND AtkElement							;C2/878F: 25 4D        AND $4D
	BEQ +								;C2/8791: F0 06        BEQ $8799
	;Immune
	INC AtkMissed      						;C2/8793: E6 56        INC $56        (Attack Misses)
	INC MagicNull							;C2/8795: EE 97 7C     INC $7C97
	RTS 								;C2/8798: 60           RTS 
+							
	LDA CharStruct.EHalf,X  					;C2/8799: BD 33 20     LDA $2033,X    (Check for Elemental Half)
	AND AtkElement							;C2/879C: 25 4D        AND $4D
	BEQ +								;C2/879E: F0 05        BEQ $87A5
	;Half
	LSR Attack+1							;C2/87A0: 46 51        LSR $51
	ROR Attack      						;C2/87A2: 66 50        ROR $50        (Damage = Damage / 2)
	RTS 								;C2/87A4: 60           RTS 
+							
	LDA CharStruct.EWeak,X  					;C2/87A5: BD 34 20     LDA $2034,X    (Check for Elemental Weakness)
	AND AtkElement							;C2/87A8: 25 4D        AND $4D
	BEQ .Return							;C2/87AA: F0 08        BEQ $87B4
	ASL Attack      						;C2/87AC: 06 50        ASL $50        (Damage = Damage * 2)
	ROL Attack+1							;C2/87AE: 26 51        ROL $51
	STZ Defense      						;C2/87B0: 64 54        STZ $54        (Defense = 0)
	STZ Defense+1							;C2/87B2: 64 55        STZ $55
.Return	RTS 								;C2/87B4: 60           RTS 
%endsub()

%org($C287B5)
;Elemental Modifiers to Percent HP attacks
;
;Very similar to ElementDamageModMag ($876E)
;Will note differences with *
%sub(ElementDamageModPercent)
ElementDamageModPercent:
	LDX TargetOffset						;C2/87B5: A6 49        LDX $49
	;check absorb
	LDA CharStruct.EAbsorb,X					;C2/87B7: BD 30 20     LDA $2030,X    (Check for Elemental Absorb)
	AND AtkElement							;C2/87BA: 25 4D        AND $4D
	BEQ +								;C2/87BC: F0 03        BEQ $87C1
	INC AtkHealed 							;C2/87BE: E6 62        INC $62        (Heal)
	RTS 	;*does not 0 def on absorb like the other routine	;C2/87C0: 60           RTS 
		;*also doesn't check for Element "block"							
+	;check immunity
	LDA CharStruct.EImmune,X  					;C2/87C1: BD 32 20     LDA $2032,X    (Check for Elemental Immunity)	AND AtkElement							
	AND AtkElement							;C2/87C4: 25 4D        AND $4D
	BEQ +								;C2/87C6: F0 03        BEQ $87CB
	INC AtkMissed 							;C2/87C8: E6 56        INC $56        (Attack Misses)
	RTS 								;C2/87CA: 60           RTS 
+	;check half							
	LDA CharStruct.EHalf,X  					;C2/87CB: BD 33 20     LDA $2033,X    (Check for Elemental Half)
	AND AtkElement							;C2/87CE: 25 4D        AND $4D
	BEQ +								;C2/87D0: F0 03        BEQ $87D5
	LSR Param2    ;*halves param2 instead of Attack ($50)						;C2/87D2: 46 58        LSR $58        (Spell Power = Spell Power / 2)
	RTS 								;C2/87D4: 60           RTS 
+	;check weak								
	LDA CharStruct.EWeak,X  					;C2/87D5: BD 34 20     LDA $2034,X    (Check for Elemental Weakness)
	AND AtkElement							;C2/87D8: 25 4D        AND $4D
	BEQ .Ret							;C2/87DA: F0 02        BEQ $87DE
	ASL Param2    	;*doubles param2 instead of Attack		;C2/87DC: 06 58        ASL $58        (Spell Power = Spell Power * 2)
			;*also doesn't 0 def
.Ret	RTS 								;C2/87DE: 60           RTS 
%endsub()

%org($C287DF)
;Check for Critical Hit
;Param1: Crit%
%sub(CheckCrit)
CheckCrit:
	LDA MagicSword	;no crits with magic sword, 			;C2/87DF: A5 60        LDA $60
	BNE .Ret	;in vanilla FF5 no weapons support both anyway	;C2/87E1: D0 15        BNE $87F8
			
	JSR Random_0_99							;C2/87E3: 20 A2 02     JSR $02A2  (0..99)
	CMP Param1  							;C2/87E6: C5 57        CMP $57    (0..99) < Critical%
	BCS .Ret							;C2/87E8: B0 0E        BCS $87F8
	LDA #$01							;C2/87EA: A9 01        LDA #$01
	STA Crit							;C2/87EC: 85 5F        STA $5F
	REP #$20							;C2/87EE: C2 20        REP #$20
	ASL Attack							;C2/87F0: 06 50        ASL $50    (Damage = Damage * 2)
	SEP #$20							;C2/87F2: E2 20        SEP #$20
	TDC 								;C2/87F4: 7B           TDC 
	TAX 								;C2/87F5: AA           TAX 
	STX Defense  							;C2/87F6: 86 54        STX $54    (Defense = 0)
.Ret	RTS 								;C2/87F8: 60           RTS 
%endsub()

;Check Creature Type for Critical Hit
;Param1: Creature Type
%sub(CheckCreatureCrit)
CheckCreatureCrit:
	LDX TargetOffset						;C2/87F9: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/87FB: BD 65 20     LDA $2065,X  (Check Target Creature Type vs Hit)
	AND Param1    							;C2/87FE: 25 57        AND $57      (Compare Creature Type vs Weapon)
	BEQ .Ret							;C2/8800: F0 0E        BEQ $8810
	LDA #$01							;C2/8802: A9 01        LDA #$01
	STA Crit							;C2/8804: 85 5F        STA $5F
	REP #$20							;C2/8806: C2 20        REP #$20
	ASL M    							;C2/8808: 06 52        ASL $52      (M = M * 2)
	SEP #$20							;C2/880A: E2 20        SEP #$20
	TDC 								;C2/880C: 7B           TDC 
	TAX 								;C2/880D: AA           TAX 
	STX Defense    							;C2/880E: 86 54        STX $54      (Defense = 0)
.Ret	RTS 								;C2/8810: 60           RTS 
%endsub()

%org($C28811)
;Calculate Final Damage w/Magic Sword
;Damage is returned in different addresses depending on what happens
;DamageToAttacker = $7B6B		
;DamageToTarget = $7B6D		
;HealingToAttacker = $7B6F		
;HealingToTarget = $7B71
%sub(CalcFinalDamageMSword)	
CalcFinalDamageMSword:
	JSR CalcBaseDamage								;C2/8811: 20 F8 93     JSR $93F8    	Damage - Defense, Store in $7B69
	LDX BaseDamage									;C2/8814: AE 69 7B     LDX $7B69
	BNE .CheckCantEvade								;C2/8817: D0 04        BNE $881D	Branch if not 0
	STX DamageToTarget  								;C2/8819: 8E 6D 7B     STX $7B6D    	$7B6D = Final Damage = 0
	RTS 										;C2/881C: 60           RTS 

.CheckCantEvade										;
	LDA AttackerOffset2								;C2/881D: A5 39        LDA $39
	TAX 										;C2/881F: AA           TAX 
	LDA AttackInfo.Category,X							;C2/8820: BD FD 79     LDA $79FD,X	(likely related to target selection)
	LDX TargetOffset								;C2/8823: A6 49        LDX $49
	AND CharStruct.CantEvade,X							;C2/8825: 3D 64 20     AND $2064,X  (Check Target Can't Evade vs. Attack type)
	BEQ .CheckDrain									;C2/8828: F0 06        BEQ $8830
	REP #$20									;C2/882A: C2 20        REP #$20
	ASL M   									;C2/882C: 06 52        ASL $52      M = M * 2
	SEP #$20									;C2/882E: E2 20        SEP #$20

.CheckDrain
	LDX AttackerOffset								;C2/8830: A6 32        LDX $32
	LDA CharStruct.MSwordStatusSpecial,X						;C2/8832: BD 55 20     LDA $2055,X
	AND #$40   									;C2/8835: 29 40        AND #$40    (Check Magic Sword Drain)
	BEQ .CheckPsyche								;C2/8837: F0 03        BEQ $883C
	JMP DrainDamage									;C2/8839: 4C 26 89     JMP $8926   

.CheckPsyche
	LDA CharStruct.MSwordStatusSpecial,X						;C2/883C: BD 55 20     LDA $2055,X
	AND #$20   									;C2/883F: 29 20        AND #$20    (Check Magic Sword Psyche)
	BEQ .CheckHeal									;C2/8841: F0 03        BEQ $8846
	JMP MSwordPsyche								;C2/8843: 4C 4D 89     JMP $894D

.CheckHeal
	LDA AtkHealed 									;C2/8846: A5 62        LDA $62     Check if Healing?
	BEQ .CheckAttackerDamage							;C2/8848: F0 07        BEQ $8851
	LDX BaseDamage									;C2/884A: AE 69 7B     LDX $7B69
	STX HealingToTarget  								;C2/884D: 8E 71 7B     STX $7B71   $7B71 = Final Damage
	RTS 										;C2/8850: 60           RTS 

.CheckAttackerDamage	;Unsure what this section is for, attacker takes damage but no target healing	
	LDA AttackerDamaged								;C2/8851: A5 63        LDA $63
	BEQ .NormalDamage								;C2/8853: F0 18        BEQ $886D
	LDX AttackerOffset			;uses attacker's defense instead	;C2/8855: A6 32        LDX $32
	LDA CharStruct.Defense,X							;C2/8857: BD 2D 20     LDA $202D,X
	TAX 										;C2/885A: AA           TAX 
	STX Defense   									;C2/885B: 86 54        STX $54     Defense = Attacker Defense
	JSR CalcBaseDamage								;C2/885D: 20 F8 93     JSR $93F8   Calcaulate Final Damage, Store in $7B69
	LDX BaseDamage									;C2/8860: AE 69 7B     LDX $7B69
	BNE +										;C2/8863: D0 04        BNE $8869
	STX DamageToAttacker 								;C2/8865: 8E 6B 7B     STX $7B6B   $7B6B = Final Damage
	RTS 										;C2/8868: 60           RTS 
+											;
	STX DamageToAttacker 								;C2/8869: 8E 6B 7B     STX $7B6B
	RTS 										;C2/886C: 60           RTS 

.NormalDamage											;
	LDX BaseDamage									;C2/886D: AE 69 7B     LDX $7B69
	STX DamageToTarget  								;C2/8870: 8E 6D 7B     STX $7B6D  $7B6D = Final Damage
	RTS 										;C2/8873: 60           RTS 
%endsub()

%org($C28874)
;Gravity Attack Damage, Type 07h
;Damage is Param2($58) * Current HP of target / 16 unless target is Heavy
%sub(GravityDamage)
GravityDamage:
	LDX TargetOffset							;C2/8874: A6 49        LDX $49
	LDA CharStruct.CreatureType,X						;C2/8876: BD 65 20     LDA $2065,X
	AND #$20    			;heavy					;C2/8879: 29 20        AND #$20     	(Target Creature Type = Heavy?)
	BEQ .NotHeavy								;C2/887B: F0 09        BEQ $8886
	TDC 									;C2/887D: 7B           TDC 
	TAX 									;C2/887E: AA           TAX 
	STX BaseDamage   							;C2/887F: 8E 69 7B     STX $7B69    	(Final Damage = 0)
	STX DamageToTarget							;C2/8882: 8E 6D 7B     STX $7B6D
	RTS 									;C2/8885: 60           RTS 
.NotHeavy									;
	LDA CharStruct.CurHP,X							;C2/8886: BD 06 20     LDA $2006,X
	STA $2A									;C2/8889: 85 2A        STA $2A
	LDA CharStruct.CurHP+1,X 						;C2/888B: BD 07 20     LDA $2007,X  	(target current HP)
	STA $2B									;C2/888E: 85 2B        STA $2B
	LDA Param2						 		;C2/8890: A5 58        LDA $58		Param 2 (fraction numerator)
	TAX 									;C2/8892: AA           TAX 
	STX $2C									;C2/8893: 86 2C        STX $2C		
	JSR Multiply_16bit		;Multiply $2A by $2C and store in $2E	;C2/8895: 20 D2 00     JSR $00D2		Multiply $2A by $2C and store in $2E.
	REP #$20								;C2/8898: C2 20        REP #$20
	LSR $30				;divide 32 bit result by 16		;C2/889A: 46 30        LSR $30		;shifts perform division by 16 on 32 bit number
	ROR $2E									;C2/889C: 66 2E        ROR $2E		
	LSR $30									;C2/889E: 46 30        LSR $30
	ROR $2E									;C2/88A0: 66 2E        ROR $2E
	LSR $30									;C2/88A2: 46 30        LSR $30
	ROR $2E									;C2/88A4: 66 2E        ROR $2E
	LSR $30									;C2/88A6: 46 30        LSR $30
	ROR $2E									;C2/88A8: 66 2E        ROR $2E		
	SEP #$20								;C2/88AA: E2 20        SEP #$20
	LDX $30									;C2/88AC: A6 30        LDX $30		
	BNE +									;C2/88AE: D0 07        BNE $88B7		;if the result is still >65535 cap it
	LDX $2E									;C2/88B0: A6 2E        LDX $2E
	CPX #$270F								;C2/88B2: E0 0F 27     CPX #$270F	
	BCC ++									;C2/88B5: 90 03        BCC $88BA		;if result >9999 cap it
+	LDX #$270F  			;9999 if result was greater		;C2/88B7: A2 0F 27     LDX #$270F   	(Max Damage = 9999)
++	STX BaseDamage								;C2/88BA: 8E 69 7B     STX $7B69
	STX DamageToTarget							;C2/88BD: 8E 6D 7B     STX $7B6D
	RTS 									;C2/88C0: 60           RTS 
%endsub()

%org($C288C1)
;Cure, Damage if Undead
CureTarget:
	LDX TargetOffset					;C2/88C1: A6 49        LDX $49
	LDA CharStruct.CreatureType,X				;C2/88C3: BD 65 20     LDA $2065,X    (Target Creature Type = Undead?)
	AND #$01			;undead	creature	;C2/88C6: 29 01        AND #$01
	BNE +							;C2/88C8: D0 07        BNE $88D1
	LDA CharStruct.ArmorProperties,X			;C2/88CA: BD 39 20     LDA $2039,X    (Check Attacker Armour Special Effect Byte)
	AND #$02   			;undead armor		;C2/88CD: 29 02        AND #$02       (Check if Undead)
	BEQ ++							;C2/88CF: F0 03        BEQ $88D4
+	JMP CalcFinalDamageMSword				;C2/88D1: 4C 11 88     JMP $8811
++	JSR CalcBaseDamage					;C2/88D4: 20 F8 93     JSR $93F8      $7B69 = Damage - Defense
	LDX BaseDamage						;C2/88D7: AE 69 7B     LDX $7B69
	STX HealingToTarget					;C2/88DA: 8E 71 7B     STX $7B71
	RTS 							;C2/88DD: 60           RTS 

%org($C288DE)	
;Full Cure, Reduce HP to Critical if Undead
FullCureTarget:
	LDX TargetOffset					;C2/88DE: A6 49        LDX $49
	LDA CharStruct.CreatureType,X				;C2/88E0: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01			;undead	creature	;C2/88E3: 29 01        AND #$01
	BNE +							;C2/88E5: D0 07        BNE $88EE
	LDA CharStruct.ArmorProperties,X			;C2/88E7: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$02     			;undead armor		;C2/88EA: 29 02        AND #$02      (Check if Undead)
	BEQ ++							;C2/88EC: F0 03        BEQ $88F1
+	JMP SetHPCritical					;C2/88EE: 4C FD 88     JMP $88FD
++	REP #$20						;C2/88F1: C2 20        REP #$20
	LDA CharStruct.MaxHP,X					;C2/88F3: BD 08 20     LDA $2008,X
	STA CharStruct.CurHP,X 					;C2/88F6: 9D 06 20     STA $2006,X   (Fully Heal HP)
	TDC 							;C2/88F9: 7B           TDC 
	SEP #$20						;C2/88FA: E2 20        SEP #$20
	RTS 							;C2/88FC: 60           RTS 
	
%org($C288FD)
;Reduce HP to Critical
;Fails vs Heavy
SetHPCritical:
	LDX TargetOffset						;C2/88FD: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/88FF: BD 65 20     LDA $2065,X
	AND #$20   			;heavy				;C2/8902: 29 20        AND #$20     (Target Creature Type = Heavy?)
	BEQ .NotHeavy							;C2/8904: F0 03        BEQ $8909
	INC AtkMissed 							;C2/8906: E6 56        INC $56      (Attack Misses)
	RTS 								;C2/8908: 60           RTS 
.NotHeavy								;
	TDC 								;C2/8909: 7B           TDC 
	TAX 								;C2/890A: AA           TAX 
	LDA #$08							;C2/890B: A9 08        LDA #$08
	JSR Random_X_A 							;C2/890D: 20 7C 00     JSR $007C   (0..8)
	INC        							;C2/8910: 1A           INC         (1..9)
	TAX 								;C2/8911: AA           TAX 
	STX $0E								;C2/8912: 86 0E        STX $0E
	REP #$20							;C2/8914: C2 20        REP #$20
	LDX TargetOffset						;C2/8916: A6 49        LDX $49
	LDA $0E								;C2/8918: A5 0E        LDA $0E
	CMP CharStruct.CurHP,X						;C2/891A: DD 06 20     CMP $2006,X  if Current HP >= (1..9)
	BCS +								;C2/891D: B0 03        BCS $8922
	STA CharStruct.CurHP,X						;C2/891F: 9D 06 20     STA $2006,X  Current HP = (1..9)
+	TDC 								;C2/8922: 7B           TDC 
	SEP #$20							;C2/8923: E2 20        SEP #$20
	RTS 								;C2/8925: 60           RTS 


%org($C28926)
;Magic Sword Drain
DrainDamage:
	JSR CalcBaseDamage							;C2/8926: 20 F8 93     JSR $93F8     (Calculate $7B69 = Final Damage)
	LDX TargetOffset							;C2/8929: A6 49        LDX $49
	LDA CharStruct.CreatureType,X						;C2/892B: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01   				;undead	creature type		;C2/892E: 29 01        AND #$01   
	BNE .Undead								;C2/8930: D0 07        BNE $8939
	LDA CharStruct.ArmorProperties,X					;C2/8932: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$02   				;undead	armor			;C2/8935: 29 02        AND #$02      (Check if Undead)
	BEQ .NotUndead								;C2/8937: F0 0A        BEQ $8943
.Undead	
	LDX BaseDamage								;C2/8939: AE 69 7B     LDX $7B69
	STX DamageToAttacker							;C2/893C: 8E 6B 7B     STX $7B6B
	STX HealingToTarget  							;C2/893F: 8E 71 7B     STX $7B71     ($7B71 and $7B6B = Final Damage)
	RTS 									;C2/8942: 60           RTS 

.NotUndead
	LDX BaseDamage								;C2/8943: AE 69 7B     LDX $7B69
	STX DamageToTarget							;C2/8946: 8E 6D 7B     STX $7B6D     ($7B6D and $7B6F = Final Damage)
	STX HealingToAttacker							;C2/8949: 8E 6F 7B     STX $7B6F
	RTS 									;C2/894C: 60           RTS 

%org($C2894D)
;Magic Sword Psyche
MSwordPsyche:
	LDX TargetOffset							;C2/894D: A6 49        LDX $49
	LDA CharStruct.CreatureType,X						;C2/894F: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01				;undead	creature type		;C2/8952: 29 01        AND #$01
	BNE .Undead								;C2/8954: D0 07        BNE $895D
	LDA CharStruct.ArmorProperties,X					;C2/8956: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$02   				;undead	armor			;C2/8959: 29 02        AND #$02      (Check if Undead)
	BEQ .NotUndead								;C2/895B: F0 14        BEQ $8971
.Undead
	LDX AttackerOffset							;C2/895D: A6 32        LDX $32
	REP #$20								;C2/895F: C2 20        REP #$20
	LDA CharStruct.CurMP,X							;C2/8961: BD 0A 20     LDA $200A,X   (Attacker Current MP)
	JSR ShiftDivide_4  							;C2/8964: 20 C0 01     JSR $01C0     (Divide by 4)
	STA HealingToTargetMP  							;C2/8967: 8D 75 7B     STA $7B75     ($7B75 = Final Damage)
	STA DamageToAttackerMP  						;C2/896A: 8D 77 7B     STA $7B77     ($7B77 = Final Damage) 
	TDC 									;C2/896D: 7B           TDC 
	SEP #$20								;C2/896E: E2 20        SEP #$20
	RTS 									;C2/8970: 60           RTS 

.NotUndead					
	LDX TargetOffset							;C2/8971: A6 49        LDX $49
	REP #$20								;C2/8973: C2 20        REP #$20
	LDA CharStruct.CurMP,X							;C2/8975: BD 0A 20     LDA $200A,X   (Target Current MP)
	JSR ShiftDivide_4							;C2/8978: 20 C0 01     JSR $01C0     (Divide by 4)
	STA HealingToAttackerMP  						;C2/897B: 8D 73 7B     STA $7B73     ($7B73 = Final Damage)
	STA DamageToTargetMP  							;C2/897E: 8D 79 7B     STA $7B79     ($7B79 = Final Damage)
	TDC 									;C2/8981: 7B           TDC 
	SEP #$20								;C2/8982: E2 20        SEP #$20
	RTS 									;C2/8984: 60           RTS 

%org($C28985)
;Psyche Damage
PsycheDamage:
	REP #$20						;C2/8985: C2 20        REP #$20
	SEC 							;C2/8987: 38           SEC 
	LDA Attack						;C2/8988: A5 50        LDA $50
	SBC Defense						;C2/898A: E5 54        SBC $54      
	STA $2A    						;C2/898C: 85 2A        STA $2A      ($2A = Damage - Defense)
	LDA M							;C2/898E: A5 52        LDA $52
	STA $2C							;C2/8990: 85 2C        STA $2C
	TDC 							;C2/8992: 7B           TDC 
	SEP #$20						;C2/8993: E2 20        SEP #$20
	JSR Multiply_16bit					;C2/8995: 20 D2 00     JSR $00D2     $2E = (Damage - Defense) * M
	LDX TargetOffset					;C2/8998: A6 49        LDX $49
	LDA CharStruct.CreatureType,X				;C2/899A: BD 65 20     LDA $2065,X   (Target Creature Type = Undead?)
	AND #$01			;undead	creature	;C2/899D: 29 01        AND #$01
	BNE .Undead						;C2/899F: D0 07        BNE $89A8
	LDA CharStruct.ArmorProperties,X			;C2/89A1: BD 39 20     LDA $2039,X   (Check Attacker Armour Special Effect Byte)
	AND #$02   			;undead armor		;C2/89A4: 29 02        AND #$02      (Check if Undead)
	BEQ .NotUndead						;C2/89A6: F0 1A        BEQ $89C2
.Undead	REP #$20						;C2/89A8: C2 20        REP #$20
	LDX AttackerOffset					;C2/89AA: A6 32        LDX $32
	LDA $2E							;C2/89AC: A5 2E        LDA $2E
	CMP CharStruct.CurMP,X					;C2/89AE: DD 0A 20     CMP $200A,X
	BCC +							;C2/89B1: 90 05        BCC $89B8
	LDA CharStruct.CurMP,X					;C2/89B3: BD 0A 20     LDA $200A,X
	STA $2E    						;C2/89B6: 85 2E        STA $2E       (Max Damage = Attacker Current MP)
+	LDA $2E							;C2/89B8: A5 2E        LDA $2E
	STA HealingToTargetMP  					;C2/89BA: 8D 75 7B     STA $7B75     $7B75 = Final Damage
	STA DamageToAttackerMP  				;C2/89BD: 8D 77 7B     STA $7B77     $7B77 = Final Damage
	BRA .Finish						;C2/89C0: 80 18        BRA $89DA
.NotUndead
	REP #$20						;C2/89C2: C2 20        REP #$20
	LDX TargetOffset					;C2/89C4: A6 49        LDX $49
	LDA $2E							;C2/89C6: A5 2E        LDA $2E
	CMP CharStruct.CurMP,X					;C2/89C8: DD 0A 20     CMP $200A,X
	BCC +							;C2/89CB: 90 05        BCC $89D2
	LDA CharStruct.CurMP,X					;C2/89CD: BD 0A 20     LDA $200A,X
	STA $2E    						;C2/89D0: 85 2E        STA $2E       (Max Damage = Target Current MP)
+	LDA $2E							;C2/89D2: A5 2E        LDA $2E
	STA HealingToAttackerMP  				;C2/89D4: 8D 73 7B     STA $7B73     $7B73 = Final Damage
	STA DamageToTargetMP  					;C2/89D7: 8D 79 7B     STA $7B79     $7B79 = Final Damage
.Finish	TDC 							;C2/89DA: 7B           TDC 
	SEP #$20						;C2/89DB: E2 20        SEP #$20
	RTS							;C2/89DD: 60           RTS 

%org($C289DE)
;MP Heal
MPHeal:
	REP #$20						;C2/89DE: C2 20        REP #$20
	SEC 							;C2/89E0: 38           SEC 
	LDA Attack						;C2/89E1: A5 50        LDA $50
	SBC Defense						;C2/89E3: E5 54        SBC $54
	STA $2A							;C2/89E5: 85 2A        STA $2A
	LDA M							;C2/89E7: A5 52        LDA $52
	STA $2C							;C2/89E9: 85 2C        STA $2C
	TDC 							;C2/89EB: 7B           TDC 
	SEP #$20						;C2/89EC: E2 20        SEP #$20
	JSR Multiply_16bit					;C2/89EE: 20 D2 00     JSR $00D2
	LDX $2E							;C2/89F1: A6 2E        LDX $2E
	STX HealingToTargetMP					;C2/89F3: 8E 75 7B     STX $7B75
	RTS 							;C2/89F6: 60           RTS 

%org($C289F7)
;Fully Heal MP
FullMPHeal:
	REP #$20						;C2/89F7: C2 20        REP #$20
	LDX TargetOffset					;C2/89F9: A6 49        LDX $49
	LDA CharStruct.MaxMP,X					;C2/89FB: BD 0C 20     LDA $200C,X
	STA CharStruct.CurMP,X					;C2/89FE: 9D 0A 20     STA $200A,X   (Target fully heal MP)
	TDC 							;C2/8A01: 7B           TDC 
	SEP #$20						;C2/8A02: E2 20        SEP #$20
	RTS 							;C2/8A04: 60           RTS 
	
%org($C28A05)
;Calculate Final Damage 
;similar to $8811/CalcFinalDamageMSword but doesn't have Magic Sword checks
;DamageToAttacker = $7B6B		
;DamageToTarget = $7B6D		
;HealingToTarget = $7B71
;
;**bug: "can't evade" bit should also double damage	
%sub(CalcFinalDamage)	
CalcFinalDamage:
	JSR CalcBaseDamage						;C2/8A05: 20 F8 93     JSR $93F8    (Subtract Defense from Damage)
	LDX BaseDamage							;C2/8A08: AE 69 7B     LDX $7B69
	BEQ .Finish							;C2/8A0B: F0 3A        BEQ $8A47
	LDX M								;C2/8A0D: A6 52        LDX $52
	BNE +								;C2/8A0F: D0 15        BNE $8A26
	INC M     							;C2/8A11: E6 52        INC $52      (Minimum M = 1)
	;likely bug, the "can't evade"	check here is only hit if M was 0
	LDA AttackerOffset2						;C2/8A13: A5 39        LDA $39
	TAX 								;C2/8A15: AA           TAX 
	LDA AttackInfo.Category,X					;C2/8A16: BD FD 79     LDA $79FD,X
	LDX TargetOffset						;C2/8A19: A6 49        LDX $49
	AND CharStruct.CantEvade,X					;C2/8A1B: 3D 64 20     AND $2064,X  (Check Target Can't Evade vs. Attack type)
	BEQ +								;C2/8A1E: F0 06        BEQ $8A26
	REP #$20							;C2/8A20: C2 20        REP #$20
	ASL M      		;would have doubled damage		;C2/8A22: 06 52        ASL $52      M = M * 2
	SEP #$20							;C2/8A24: E2 20        SEP #$20
+	LDA AtkHealed      						;C2/8A26: A5 62        LDA $62      (Check for Heal)
	BEQ +								;C2/8A28: F0 07        BEQ $8A31
	LDX BaseDamage							;C2/8A2A: AE 69 7B     LDX $7B69
	STX HealingToTarget    						;C2/8A2D: 8E 71 7B     STX $7B71     ($7B71 = Final Damage)
	RTS 								;C2/8A30: 60           RTS 
							
+	LDA AttackerDamaged	;attacker damaged instead of target	;C2/8A31: A5 63        LDA $63
	BEQ .Finish							;C2/8A33: F0 12        BEQ $8A47
	LDX AttackerOffset						;C2/8A35: A6 32        LDX $32
	LDA CharStruct.Defense,X  	;attacker's defense		;C2/8A37: BD 2D 20     LDA $202D,X   Defense = Attacker Defense
	TAX 								;C2/8A3A: AA           TAX 
	STX Defense							;C2/8A3B: 86 54        STX $54
	JSR CalcBaseDamage						;C2/8A3D: 20 F8 93     JSR $93F8     (Subtract Defense from Damage)
	LDX BaseDamage							;C2/8A40: AE 69 7B     LDX $7B69
	STX DamageToAttacker  						;C2/8A43: 8E 6B 7B     STX $7B6B     ($7B6B = Final Damage)
	RTS 								;C2/8A46: 60           RTS 
							
.Finish	LDX BaseDamage    						;C2/8A47: AE 69 7B     LDX $7B69     ($7B6D = Final Damage)
	STX DamageToTarget						;C2/8A4A: 8E 6D 7B     STX $7B6D
	RTS 								;C2/8A4D: 60           RTS 
%endsub()

%org($C28A4E)
;Calculate Damage from % of Target Max HP
%sub(CalcDamageMaxHP)
CalcDamageMaxHP:
	LDA Param2						;C2/8A4E: A5 58        LDA $58
	TAX 							;C2/8A50: AA           TAX 
	STX $2C							;C2/8A51: 86 2C        STX $2C
	LDX TargetOffset					;C2/8A53: A6 49        LDX $49
	LDA CharStruct.MaxHP,X					;C2/8A55: BD 08 20     LDA $2008,X
	STA $2A							;C2/8A58: 85 2A        STA $2A
	LDA CharStruct.MaxHP+1,X				;C2/8A5A: BD 09 20     LDA $2009,X
	STA $2B							;C2/8A5D: 85 2B        STA $2B
	JSR Multiply_16bit					;C2/8A5F: 20 D2 00     JSR $00D2
	REP #$20						;C2/8A62: C2 20        REP #$20
	LSR $30		;divide result by 16 via shifts		;C2/8A64: 46 30        LSR $30
	ROR $2E							;C2/8A66: 66 2E        ROR $2E
	LSR $30							;C2/8A68: 46 30        LSR $30
	ROR $2E							;C2/8A6A: 66 2E        ROR $2E
	LSR $30							;C2/8A6C: 46 30        LSR $30
	ROR $2E							;C2/8A6E: 66 2E        ROR $2E
	LSR $30							;C2/8A70: 46 30        LSR $30
	ROR $2E							;C2/8A72: 66 2E        ROR $2E
	LDA $30							;C2/8A74: A5 30        LDA $30
	BNE .Cap						;C2/8A76: D0 07        BNE $8A7F
	LDA $2E							;C2/8A78: A5 2E        LDA $2E
	CMP #$270F	;9999					;C2/8A7A: C9 0F 27     CMP #$270F
	BCC +							;C2/8A7D: 90 05        BCC $8A84
.Cap	LDA #$270F	;cap at 9999				;C2/8A7F: A9 0F 27     LDA #$270F
	STA $2E							;C2/8A82: 85 2E        STA $2E
+	LDA $2E							;C2/8A84: A5 2E        LDA $2E
	ORA $30		;*unnecessary				;C2/8A86: 05 30        ORA $30
	BNE +							;C2/8A88: D0 02        BNE $8A8C
	INC $2E		;min 1					;C2/8A8A: E6 2E        INC $2E
+	TDC 							;C2/8A8C: 7B           TDC 
	SEP #$20						;C2/8A8D: E2 20        SEP #$20
	LDX $2E							;C2/8A8F: A6 2E        LDX $2E
	LDA AtkHealed						;C2/8A91: A5 62        LDA $62
	BNE .Heal						;C2/8A93: D0 04        BNE $8A99
	STX DamageToTarget					;C2/8A95: 8E 6D 7B     STX $7B6D
	RTS 							;C2/8A98: 60           RTS 
								;
.Heal	STX HealingToTarget					;C2/8A99: 8E 71 7B     STX $7B71
	RTS 							;C2/8A9C: 60           RTS 
%endsub()

%org($C28A9D)
;Calculate Damage from % of Attacker Current HP

%sub(CalcDamageAttackerCurHP)
CalcDamageAttackerCurHP:
	LDA Param2					;C2/8A9D: A5 58        LDA $58
	TAX 						;C2/8A9F: AA           TAX 
	STX $2C						;C2/8AA0: 86 2C        STX $2C
	LDX AttackerOffset				;C2/8AA2: A6 32        LDX $32
	LDA CharStruct.CurHP,X				;C2/8AA4: BD 06 20     LDA $2006,X
	STA $2A						;C2/8AA7: 85 2A        STA $2A
	LDA CharStruct.CurHP+1,X			;C2/8AA9: BD 07 20     LDA $2007,X
	STA $2B						;C2/8AAC: 85 2B        STA $2B
	JSR Multiply_16bit				;C2/8AAE: 20 D2 00     JSR $00D2
	REP #$20					;C2/8AB1: C2 20        REP #$20
	LSR $30		;divide result by 16 via shifts	;C2/8AB3: 46 30        LSR $30
	ROR $2E						;C2/8AB5: 66 2E        ROR $2E
	LSR $30						;C2/8AB7: 46 30        LSR $30
	ROR $2E						;C2/8AB9: 66 2E        ROR $2E
	LSR $30						;C2/8ABB: 46 30        LSR $30
	ROR $2E						;C2/8ABD: 66 2E        ROR $2E
	LSR $30						;C2/8ABF: 46 30        LSR $30
	ROR $2E						;C2/8AC1: 66 2E        ROR $2E
	LDA $30						;C2/8AC3: A5 30        LDA $30
	BNE .Cap					;C2/8AC5: D0 07        BNE $8ACE
	LDA $2E						;C2/8AC7: A5 2E        LDA $2E
	CMP #$270F	;9999				;C2/8AC9: C9 0F 27     CMP #$270F
	BCC +						;C2/8ACC: 90 05        BCC $8AD3
.Cap	LDA #$270F	;cap at 9999			;C2/8ACE: A9 0F 27     LDA #$270F
	STA $2E						;C2/8AD1: 85 2E        STA $2E
+	LDA $2E						;C2/8AD3: A5 2E        LDA $2E
	ORA $30		;*unnecessary			;C2/8AD5: 05 30        ORA $30
	BNE +						;C2/8AD7: D0 02        BNE $8ADB
	INC $2E		;min 1				;C2/8AD9: E6 2E        INC $2E
+	TDC 						;C2/8ADB: 7B           TDC 
	SEP #$20					;C2/8ADC: E2 20        SEP #$20
	LDX $2E						;C2/8ADE: A6 2E        LDX $2E
	LDA AtkHealed					;C2/8AE0: A5 62        LDA $62
	BNE .Heal					;C2/8AE2: D0 04        BNE $8AE8
	STX DamageToTarget				;C2/8AE4: 8E 6D 7B     STX $7B6D
	RTS 						;C2/8AE7: 60           RTS 
							;
.Heal	STX HealingToTarget				;C2/8AE8: 8E 71 7B     STX $7B71
	RTS 						;C2/8AEB: 60           RTS 	
%endsub()

%org($C28AEC)
;Calculate Damage from % of Target Current MP
%sub(CalcDamageTargetCurMP)
CalcDamageTargetCurMP:
	LDA Param2					;C2/8AEC: A5 58        LDA $58
	TAX 						;C2/8AEE: AA           TAX 
	STX $2C						;C2/8AEF: 86 2C        STX $2C
	LDX TargetOffset				;C2/8AF1: A6 49        LDX $49
	LDA CharStruct.CurMP,X				;C2/8AF3: BD 0A 20     LDA $200A,X
	STA $2A						;C2/8AF6: 85 2A        STA $2A
	LDA CharStruct.CurMP+1,X			;C2/8AF8: BD 0B 20     LDA $200B,X
	STA $2B						;C2/8AFB: 85 2B        STA $2B
	JSR Multiply_16bit				;C2/8AFD: 20 D2 00     JSR $00D2
	REP #$20					;C2/8B00: C2 20        REP #$20
	LSR $30						;C2/8B02: 46 30        LSR $30
	ROR $2E						;C2/8B04: 66 2E        ROR $2E
	LSR $30						;C2/8B06: 46 30        LSR $30
	ROR $2E						;C2/8B08: 66 2E        ROR $2E
	LSR $30						;C2/8B0A: 46 30        LSR $30
	ROR $2E						;C2/8B0C: 66 2E        ROR $2E
	LSR $30						;C2/8B0E: 46 30        LSR $30
	ROR $2E						;C2/8B10: 66 2E        ROR $2E
	LDA $30						;C2/8B12: A5 30        LDA $30
	BNE .Cap					;C2/8B14: D0 07        BNE $8B1D
	LDA $2E						;C2/8B16: A5 2E        LDA $2E
	CMP #$270F	;9999				;C2/8B18: C9 0F 27     CMP #$270F
	BCC +						;C2/8B1B: 90 05        BCC $8B22
.Cap	LDA #$270F 	;cap at 9999			;C2/8B1D: A9 0F 27     LDA #$270F   (Max damage = 9999)
	STA $2E						;C2/8B20: 85 2E        STA $2E
+	LDA $2E						;C2/8B22: A5 2E        LDA $2E
	ORA $30		;*unnecessary			;C2/8B24: 05 30        ORA $30
	BNE +						;C2/8B26: D0 02        BNE $8B2A
	INC $2E		;min 1				;C2/8B28: E6 2E        INC $2E
+	TDC 						;C2/8B2A: 7B           TDC 
	SEP #$20					;C2/8B2B: E2 20        SEP #$20
	LDX $2E						;C2/8B2D: A6 2E        LDX $2E
	STX DamageToTargetMP				;C2/8B2F: 8E 79 7B     STX $7B79
	RTS 						;C2/8B32: 60           RTS 
%endsub()

%org($C28B33)
;Calculate Damage = Attacker Max HP - Attacker Current HP
CalcDamageAttackerDiffHP:
	REP #$20					;C2/8B33: C2 20        REP #$20
	LDX AttackerOffset				;C2/8B35: A6 32        LDX $32
	SEC 						;C2/8B37: 38           SEC 
	LDA CharStruct.MaxHP,X				;C2/8B38: BD 08 20     LDA $2008,X
	SBC CharStruct.CurHP,X				;C2/8B3B: FD 06 20     SBC $2006,X
	CMP #$270F		;9999			;C2/8B3E: C9 0F 27     CMP #$270F		
	BCC +						;C2/8B41: 90 03        BCC $8B46
	LDA #$270F		;cap at 9999		;C2/8B43: A9 0F 27     LDA #$270F
+	STA DamageToTarget				;C2/8B46: 8D 6D 7B     STA $7B6D
	TDC 						;C2/8B49: 7B           TDC 
	SEP #$20					;C2/8B4A: E2 20        SEP #$20
	RTS 						;C2/8B4C: 60           RTS 
	
%org($C28B4D)						
;Heals HP and MP by half of their max
RestoreHalfMax:
	REP #$20							;C2/8B4D: C2 20        REP #$20
	LDX TargetOffset						;C2/8B4F: A6 49        LDX $49
	LDA CharStruct.MaxHP,X						;C2/8B51: BD 08 20     LDA $2008,X
	LSR 								;C2/8B54: 4A           LSR 
	CLC 								;C2/8B55: 18           CLC 
	ADC CharStruct.CurHP,X						;C2/8B56: 7D 06 20     ADC $2006,X
	BCS .Cap							;C2/8B59: B0 05        BCS $8B60
	CMP CharStruct.MaxHP,X						;C2/8B5B: DD 08 20     CMP $2008,X
	BCC +								;C2/8B5E: 90 03        BCC $8B63
.Cap	LDA CharStruct.MaxHP,X						;C2/8B60: BD 08 20     LDA $2008,X
+	STA CharStruct.CurHP,X						;C2/8B63: 9D 06 20     STA $2006,X
	LDA CharStruct.MaxMP,X						;C2/8B66: BD 0C 20     LDA $200C,X
	LSR 								;C2/8B69: 4A           LSR 
	CLC 								;C2/8B6A: 18           CLC 
	ADC CharStruct.CurMP,X						;C2/8B6B: 7D 0A 20     ADC $200A,X
	CMP CharStruct.MaxMP,X						;C2/8B6E: DD 0C 20     CMP $200C,X
	BCC +								;C2/8B71: 90 03        BCC $8B76
	LDA CharStruct.MaxMP,X						;C2/8B73: BD 0C 20     LDA $200C,X
+	STA CharStruct.CurMP,X						;C2/8B76: 9D 0A 20     STA $200A,X
	TDC 								;C2/8B79: 7B           TDC 
	SEP #$20							;C2/8B7A: E2 20        SEP #$20
	RTS 								;C2/8B7C: 60           RTS 
	
%org($C28B7D)
;Status Duration Determination
;Param2($58) is base duration with a flag in the high bit
;Result in StatusDuration ($3ED8)
;	if flag is set result is (2*base + level/4)
;	if no flag set result is (2*base + level/4 - targetlvl/4) or 30 if target is heavy
%sub(CalcStatusDuration)
CalcStatusDuration:
	STZ $0F									;C2/8B7D: 64 0F        STZ $0F
	LDA Param2								;C2/8B7F: A5 58        LDA $58
	AND #$7F			;strips high bit			;C2/8B81: 29 7F        AND #$7F
	ASL        			;shift left, high bit (0) into carry	;C2/8B83: 0A           ASL             
	ROL $0F				;shifts a 0 bit into a 0? why?		;C2/8B84: 26 0F        ROL $0F
	STA $0E    								;C2/8B86: 85 0E        STA $0E         $0E = (bits 0-6 of $58) * 2 
	LDA Level								;C2/8B88: AD E5 7B     LDA $7BE5
	JSR ShiftDivide_4  							;C2/8B8B: 20 C0 01     JSR $01C0       (Attacker Level / 4)
	CLC 									;C2/8B8E: 18           CLC 
	ADC $0E									;C2/8B8F: 65 0E        ADC $0E
	STA $0E    								;C2/8B91: 85 0E        STA $0E         $0E + (Attacker Level / 4)
	LDA $0F				;finish 16 bit result			;C2/8B93: A5 0F        LDA $0F
	ADC #$00								;C2/8B95: 69 00        ADC #$00
	BEQ +									;C2/8B97: F0 04        BEQ $8B9D
	LDA #$FF			;but we cap at 255 if overflowed	;C2/8B99: A9 FF        LDA #$FF
	STA $0E    			;so why did we finish computing it	;C2/8B9B: 85 0E        STA $0E         (Max $0E = 255)
+	LDA Param2								;C2/8B9D: A5 58        LDA $58
	BMI .Finish  								;C2/8B9F: 30 28        BMI $8BC9       (If $58 >= 80h, ignore target effects)
	LDX TargetOffset							;C2/8BA1: A6 49        LDX $49
	LDA CharStruct.CreatureType,X						;C2/8BA3: BD 65 20     LDA $2065,X
	AND #$20   			;heavy					;C2/8BA6: 29 20        AND #$20        (Target Creature Type = Heavy?)
	BEQ + 									;C2/8BA8: F0 06        BEQ $8BB0 
	LDA #$1E			;duration is 30 if target heavy		;C2/8BAA: A9 1E        LDA #$1E
	STA $0E    								;C2/8BAC: 85 0E        STA $0E         (If target is Heavy, $0E = 1Eh)
	BRA .Finish								;C2/8BAE: 80 19        BRA $8BC9
+	CLC 									;C2/8BB0: 18           CLC 
	LDA CharStruct.Level,X							;C2/8BB1: BD 02 20     LDA $2002,X
	ADC CharStruct.BonusLevel,X						;C2/8BB4: 7D 78 20     ADC $2078,X
	JSR ShiftDivide_4  							;C2/8BB7: 20 C0 01     JSR $01C0       (Target Level / 4)
	STA $0F				;target level /4			;C2/8BBA: 85 0F        STA $0F
	SEC 									;C2/8BBC: 38           SEC 
	LDA $0E				;duration				;C2/8BBD: A5 0E        LDA $0E
	SBC $0F    			;target level /4			;C2/8BBF: E5 0F        SBC $0F         ($58 * 2 + (Attacker Level / 4) - (Target Level / 4))
	BEQ +									;C2/8BC1: F0 02        BEQ $8BC5
	BCS ++									;C2/8BC3: B0 02        BCS $8BC7
+	LDA #$01   			;min duration 1				;C2/8BC5: A9 01        LDA #$01        (Minimum $0E = 1)
++	STA $0E									;C2/8BC7: 85 0E        STA $0E
.Finish	LDA $0E									;C2/8BC9: A5 0E        LDA $0E
	STA StatusDuration							;C2/8BCB: 8D D8 3E     STA $3ED8
	RTS 									;C2/8BCE: 60           RTS 
%endsub()
	
%org($C28BCF)
;Apply Magic Sword Status Effects
ApplyMSwordStatus:
	LDA Param3							;C2/8BCF: A5 59        LDA $59
	PHA 		;Save Param3 to restore later			;C2/8BD1: 48           PHA 
	LDX AttackerOffset						;C2/8BD2: A6 32        LDX $32
	LDA CharStruct.MSwordStatus1,X 					;C2/8BD4: BD 53 20     LDA $2053,X  (Check Magic Sword Status 1)
	STA Param3							;C2/8BD7: 85 59        STA $59
	LDA #$01							;C2/8BD9: A9 01        LDA #$01
	STA StatusFixedDur						;C2/8BDB: 8D D7 3E     STA $3ED7
	JSR ApplyStatus1						;C2/8BDE: 20 AC 8C     JSR $8CAC    (Apply Status Effect 1)
	LDX AttackerOffset						;C2/8BE1: A6 32        LDX $32
	LDA CharStruct.MSwordStatus2,X					;C2/8BE3: BD 54 20     LDA $2054,X  (Check Magic Sword Status 2)
	STA Param3							;C2/8BE6: 85 59        STA $59
	LDA #$01							;C2/8BE8: A9 01        LDA #$01
	STA StatusFixedDur						;C2/8BEA: 8D D7 3E     STA $3ED7
	JSR ApplyStatus2						;C2/8BED: 20 2E 8D     JSR $8D2E    (Apply Status Effect 2)
	STZ AtkMissed							;C2/8BF0: 64 56        STZ $56
	PLA 								;C2/8BF2: 68           PLA 
	STA Param3	;Restore Original Param3			;C2/8BF3: 85 59        STA $59
	STZ StatusFixedDur						;C2/8BF5: 9C D7 3E     STZ $3ED7
	RTS 								;C2/8BF8: 60           RTS 

%org($C28BF9)
;Apply Conditional Status Effects
;Status Hit% in Param2/$58
;High bit set means Status1, unset means Status2
;Status to apply in Param3/$59

ApplyConditionalStatus:
	LDA MagicSword		;don't think this is used.. 		;C2/8BF9: A5 60        LDA $60
	BNE .Miss		;with anything that works with MSword	;C2/8BFB: D0 2E        BNE $8C2B
	LDA Param2							;C2/8BFD: A5 58        LDA $58
	AND #$7F							;C2/8BFF: 29 7F        AND #$7F
	STA HitPercent							;C2/8C01: 85 4E        STA $4E
	JSR Random_0_99 						;C2/8C03: 20 A2 02     JSR $02A2 (0..99)
	CMP HitPercent   						;C2/8C06: C5 4E        CMP $4E   (0..99) < (Bits 0-6 of Parameter 2)
	BCS .Miss							;C2/8C08: B0 21        BCS $8C2B
	LDA Param2							;C2/8C0A: A5 58        LDA $58
	BPL +			;check which status byte to mod		;C2/8C0C: 10 13        BPL $8C21
	LDA #$01							;C2/8C0E: A9 01        LDA #$01
	STA StatusFixedDur						;C2/8C10: 8D D7 3E     STA $3ED7
	JSR ApplyStatus1						;C2/8C13: 20 AC 8C     JSR $8CAC  (Apply Status Effect 1 if Parameter 2 > 80h)
	LDX TargetOffset 						;C2/8C16: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/8C18: BD 1A 20     LDA $201A,X
	BPL ++			;check if target died			;C2/8C1B: 10 02        BPL $8C1F
	INC TargetDead							;C2/8C1D: E6 61        INC $61
++	BRA +++								;C2/8C1F: 80 08        BRA $8C29
+	LDA #$01							;C2/8C21: A9 01        LDA #$01
	STA StatusFixedDur						;C2/8C23: 8D D7 3E     STA $3ED7
	JSR ApplyStatus2						;C2/8C26: 20 2E 8D     JSR $8D2E  (Apply Status Effect 2 if Paramter 2 < 80h)
+++	STZ AtkMissed 							;C2/8C29: 64 56        STZ $56
.Miss	STZ StatusFixedDur						;C2/8C2B: 9C D7 3E     STZ $3ED7
	RTS 								;C2/8C2E: 60           RTS 
	
%org($C28C2F)
;Apply Monster Specialty Effects
ApplySpecialtyEffects:
	STZ Param3		;used for status here				;C2/8C2F: 64 59        STZ $59
	LDX AttackerOffset							;C2/8C31: A6 32        LDX $32
	LDA CharStruct.Specialty,X						;C2/8C33: BD 6E 20     LDA $206E,X
	AND #$20  		 	;Poison	Specialty			;C2/8C36: 29 20        AND #$20     (If Specialty Effect = Poison)
	BEQ +									;C2/8C38: F0 04        BEQ $8C3E
	LDA #$04			;Poison Status				;C2/8C3A: A9 04        LDA #$04
	STA Param3								;C2/8C3C: 85 59        STA $59
+
	LDA CharStruct.Specialty,X						;C2/8C3E: BD 6E 20     LDA $206E,X
	AND #$10   			;Blind Specialty			;C2/8C41: 29 10        AND #$10     (If Specialty Effect = Blind)
	BEQ +									;C2/8C43: F0 06        BEQ $8C4B
	LDA Param3								;C2/8C45: A5 59        LDA $59
	ORA #$01			;Blind Status				;C2/8C47: 09 01        ORA #$01
	STA Param3								;C2/8C49: 85 59        STA $59
+
	LDA #$01								;C2/8C4B: A9 01        LDA #$01
	STA StatusFixedDur							;C2/8C4D: 8D D7 3E     STA $3ED7
	JSR ApplyStatus1	  						;C2/8C50: 20 AC 8C     JSR $8CAC    (Apply Status Effect 1)
	STZ Param3								;C2/8C53: 64 59        STZ $59
	LDX AttackerOffset							;C2/8C55: A6 32        LDX $32
	LDA CharStruct.Specialty,X						;C2/8C57: BD 6E 20     LDA $206E,X
	AND #$40   			;Old Specialty				;C2/8C5A: 29 40        AND #$40     (If Specialty Effect = Aging)
	BEQ +									;C2/8C5C: F0 04        BEQ $8C62
	LDA #$80			;Old Status				;C2/8C5E: A9 80        LDA #$80
	STA Param3								;C2/8C60: 85 59        STA $59
+
	LDA CharStruct.Specialty,X						;C2/8C62: BD 6E 20     LDA $206E,X
	AND #$08   			;Paralyze Specialty			;C2/8C65: 29 08        AND #$08     (If Specialty Effect = Paralyze)
	BEQ +									;C2/8C67: F0 06        BEQ $8C6F
	LDA Param3					 			;C2/8C69: A5 59        LDA $59
	ORA #$20			;Paralyze Status			;C2/8C6B: 09 20        ORA #$20
	STA Param3								;C2/8C6D: 85 59        STA $59
+	
	LDA CharStruct.Specialty,X						;C2/8C6F: BD 6E 20     LDA $206E,X
	AND #$04   			;Charm Specialty			;C2/8C72: 29 04        AND #$04     (If Specialty Effect = Charm)
	BEQ +									;C2/8C74: F0 11        BEQ $8C87
	PHX 									;C2/8C76: DA           PHX 
	LDX TargetOffset							;C2/8C77: A6 49        LDX $49
	LDA CharStruct.Status4,X						;C2/8C79: BD 1D 20     LDA $201D,X
	PLX 									;C2/8C7C: FA           PLX 
	AND #$20   			;Target is Controlled			;C2/8C7D: 29 20        AND #$20    (If Target Status4 = Controlled, don't add Charm)
	BNE +									;C2/8C7F: D0 06        BNE $8C87
	LDA Param3								;C2/8C81: A5 59        LDA $59
	ORA #$10			;Charm Status				;C2/8C83: 09 10        ORA #$10
	STA Param3								;C2/8C85: 85 59        STA $59
+
	LDA #$01								;C2/8C87: A9 01        LDA #$01
	STA StatusFixedDur							;C2/8C89: 8D D7 3E     STA $3ED7
	JSR ApplyStatus2							;C2/8C8C: 20 2E 8D     JSR $8D2E   (Apply Status Effect 2)
	STZ Param3								;C2/8C8F: 64 59        STZ $59
	LDX AttackerOffset							;C2/8C91: A6 32        LDX $32
	LDA CharStruct.Specialty,X						;C2/8C93: BD 6E 20     LDA $206E,X
	AND #$02   			;HP Leak Specialty			;C2/8C96: 29 02        AND #$02    (If Specialty Effect = HP Leak)
	BEQ +									;C2/8C98: F0 0C        BEQ $8CA6
	LDA #$08			;HP Leak Status				;C2/8C9A: A9 08        LDA #$08
	STA Param3								;C2/8C9C: 85 59        STA $59
	LDA #$01								;C2/8C9E: A9 01        LDA #$01
	STA StatusFixedDur							;C2/8CA0: 8D D7 3E     STA $3ED7
	JSR ApplyStatus4  							;C2/8CA3: 20 05 8E     JSR $8E05   (Apply Status Effect 4)
+
	STZ StatusFixedDur							;C2/8CA6: 9C D7 3E     STZ $3ED7
	STZ AtkMissed								;C2/8CA9: 64 56        STZ $56
	RTS 									;C2/8CAB: 60           RTS 

%org($C28CAC)
;Apply Status Effect 1 after checking immunity
;Special cases for Zombie (players only) and Stone (kills monsters)
;Status in $59 / Param3
ApplyStatus1:
	LDX TargetOffset							;C2/8CAC: A6 49        LDX $49
	LDA CharStruct.StatusImmune1,X						;C2/8CAE: BD 35 20     LDA $2035,X
	AND Param3      							;C2/8CB1: 25 59        AND $59      		 (Check Status1 Immune)
	BNE .Miss			;Immune to a requested status		;C2/8CB3: D0 76        BNE $8D2B
	LDA TargetIndex							;C2/8CB5: A5 48        LDA $48
	CMP #$04     			;Slots 4 and up are monsters		;C2/8CB7: C9 04        CMP #$04     		 (Target = Monster?)
	BCS .NotZombie			;zombie doesn't apply to monsters	;C2/8CB9: B0 46        BCS $8D01
	LDA Param3								;C2/8CBB: A5 59        LDA $59
	AND #$02     			;Zombie					;C2/8CBD: 29 02        AND #$02     		 (Inflict Status1 = Zombie?)
	BEQ .NotZombie								;C2/8CBF: F0 40        BEQ $8D01
	LDA CharStruct.Status1,X	;Target Status				;C2/8CC1: BD 1A 20     LDA $201A,X
	ORA CharStruct.AlwaysStatus1,X						;C2/8CC4: 1D 70 20     ORA $2070,X
	AND #$42     			;Stone or Zombie			;C2/8CC7: 29 42        AND #$42     		 (Target Status1 = Stone or Zombie?)
	BNE .Miss    			;Miss if set				;C2/8CC9: D0 60        BNE $8D2B    		 Effect Misses
	;Now applying Zombie status
	LDX AttackerOffset							;C2/8CCB: A6 32        LDX $32
	PHX 									;C2/8CCD: DA           PHX 
	LDA TargetIndex								;C2/8CCE: A5 48        LDA $48
	JSR ResetATB								;C2/8CD0: 20 82 24     JSR $2482
	LDX AttackerOffset		;ResetATB actually puts target here	;C2/8CD3: A6 32        LDX $32
	LDA #$80								;C2/8CD5: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X						;C2/8CD7: 9D 56 20     STA $2056,X
	STZ CharStruct.Command,X						;C2/8CDA: 9E 57 20     STZ $2057,X
	LDA TargetIndex							;C2/8CDD: A5 48        LDA $48
	TAX 									;C2/8CDF: AA           TAX 
	LDA CurrentTimer.ATB,Y		;Y is a timer offset from ResetATB	;C2/8CE0: B9 7F 3D     LDA $3D7F,Y
	CMP #$7F								;C2/8CE3: C9 7F        CMP #$7F
	BCC ++									;C2/8CE5: 90 02        BCC $8CE9
	LDA #$7F			;Cap at 127				;C2/8CE7: A9 7F        LDA #$7F
++
	STA UncontrolledATB,X							;C2/8CE9: 9D 04 7C     STA $7C04,X
	TDC 									;C2/8CEC: 7B           TDC 
	STA EnableTimer.ATB,Y							;C2/8CED: 99 FB 3C     STA $3CFB,Y
	INC 									;C2/8CF0: 1A           INC 
	STA CurrentTimer.ATB,Y		;Reset ATB?				;C2/8CF1: 99 7F 3D     STA $3D7F,Y
	LDX TargetOffset							;C2/8CF4: A6 49        LDX $49
	STZ CharStruct.CurHP,X   	;HP = 0					;C2/8CF6: 9E 06 20     STZ $2006,X   HP = 0
	STZ CharStruct.CurHP+1,X						;C2/8CF9: 9E 07 20     STZ $2007,X
	PLX 				;Attacker Offset			;C2/8CFC: FA           PLX 
	STX AttackerOffset		;Restore original Attacker		;C2/8CFD: 86 32        STX $32
	BRA ++									;C2/8CFF: 80 16        BRA $8D17
.NotZombie	
	LDA TargetIndex							;C2/8D01: A5 48        LDA $48
	CMP #$04			;Slots 4 and up are monsters		;C2/8D03: C9 04        CMP #$04
	BCC ++    								;C2/8D05: 90 10        BCC $8D17    		 (Target = Monster?)
	LDA Param3								;C2/8D07: A5 59        LDA $59
	AND #$40     			;Stone					;C2/8D09: 29 40        AND #$40     		 (Target Status1 = Stone?)
	BEQ ++									;C2/8D0B: F0 0A        BEQ $8D17
	LDA CharStruct.Status1,X	;X is Target here, and is a monster	;C2/8D0D: BD 1A 20     LDA $201A,X
	ORA #$80     			;Set Wounded/Dead status 		;C2/8D10: 09 80        ORA #$80     		 (Add 80h to current status1)
	STA CharStruct.Status1,X	;instead of stone for monsters		;C2/8D12: 9D 1A 20     STA $201A,X
	BRA +									;C2/8D15: 80 11        BRA $8D28
++
	LDX TargetOffset							;C2/8D17: A6 49        LDX $49
	LDA CharStruct.Status1,X  						;C2/8D19: BD 1A 20     LDA $201A,X   
	AND #$02			;Zombie					;C2/8D1C: 29 02        AND #$02
	BNE .Miss								;C2/8D1E: D0 0B        BNE $8D2B
	LDA CharStruct.Status1,X						;C2/8D20: BD 1A 20     LDA $201A,X
	ORA Param3     		;Set any other status			;C2/8D23: 05 59        ORA $59      		 (Inflict Status Effect)
	STA CharStruct.Status1,X						;C2/8D25: 9D 1A 20     STA $201A,X
+
	JMP StartStatus1Timer							;C2/8D28: 4C A5 92     JMP $92A5
.Miss	
	INC AtkMissed     							;C2/8D2B: E6 56        INC $56     		  (Status Effect Misses)
	RTS 									;C2/8D2D: 60           RTS 

%org($C28D2E)
;Apply Status Effect 2
;Special case for charm/berserk (players only) and paralyze
;Status in $59 / Param3
ApplyStatus2:
	LDX TargetOffset							;C2/8D2E: A6 49        LDX $49
	LDA CharStruct.StatusImmune2,X 						;C2/8D30: BD 36 20     LDA $2036,X   (Check Status2 Immune)
	AND Param3								;C2/8D33: 25 59        AND $59
	BEQ +									;C2/8D35: F0 03        BEQ $8D3A
	JMP .Miss		;Miss if Immune					;C2/8D37: 4C C8 8D     JMP $8DC8
+	LDA Param3								;C2/8D3A: A5 59        LDA $59
	AND #$10		;Charm						;C2/8D3C: 29 10        AND #$10
	BNE .Charm	  							;C2/8D3E: D0 19        BNE $8D59     (If Status2 = charm?)
	LDA Param3								;C2/8D40: A5 59        LDA $59
	AND #$08		;Berserk					;C2/8D42: 29 08        AND #$08
	BEQ ++	   								;C2/8D44: F0 58        BEQ $8D9E     (If Status2 = Berserk?)
	LDA CharStruct.Status2,X						;C2/8D46: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/8D49: 1D 71 20     ORA $2071,X
	AND #$18		;Berserk or Charm				;C2/8D4C: 29 18        AND #$18
	BNE .Miss   		;Miss if have either				;C2/8D4E: D0 78        BNE $8DC8     (If Current Status2 = Charm or Berserk)
	LDA CharStruct.Status4,X						;C2/8D50: BD 1D 20     LDA $201D,X
	AND #$20		;Controlled					;C2/8D53: 29 20        AND #$20
	BNE .Miss		;Miss if have this status			;C2/8D55: D0 71        BNE $8DC8
	BRA +									;C2/8D57: 80 11        BRA $8D6A
.Charm	LDA CharStruct.Status2,X						;C2/8D59: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/8D5C: 1D 71 20     ORA $2071,X
	AND #$18		;Berserk or Charm				;C2/8D5F: 29 18        AND #$18
	BNE .Miss  		;Miss if have either				;C2/8D61: D0 65        BNE $8DC8     (If Current Status2 = Charm or Berserk)
	LDA CharStruct.Status4,X						;C2/8D63: BD 1D 20     LDA $201D,X
	AND #$20		;Controlled					;C2/8D66: 29 20        AND #$20
	BNE .Miss		;Miss if have this status			;C2/8D68: D0 5E        BNE $8DC8
+	LDA TargetIndex								;C2/8D6A: A5 48        LDA $48
	CMP #$04		;04h and up are monsters			;C2/8D6C: C9 04        CMP #$04
	BCS ++		   							;C2/8D6E: B0 2E        BCS $8D9E     (If Target is a Monster)
	;Berserk or Charm on a player char	
	LDX AttackerOffset							;C2/8D70: A6 32        LDX $32
	PHX 			;save attacker since it gets overwritten	;C2/8D72: DA           PHX 
	LDA TargetIndex								;C2/8D73: A5 48        LDA $48
	JSR ResetATB								;C2/8D75: 20 82 24     JSR $2482
	LDX AttackerOffset	;ResetATB actually puts target here		;C2/8D78: A6 32        LDX $32
	LDA #$80								;C2/8D7A: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X						;C2/8D7C: 9D 56 20     STA $2056,X
	STZ CharStruct.Command,X						;C2/8D7F: 9E 57 20     STZ $2057,X
	LDA TargetIndex								;C2/8D82: A5 48        LDA $48
	TAX 									;C2/8D84: AA           TAX 
	LDA CurrentTimer.ATB,Y	;Y is a timer offset from ResetATB		;C2/8D85: B9 7F 3D     LDA $3D7F,Y
	CMP #$7F								;C2/8D88: C9 7F        CMP #$7F
	BCC +									;C2/8D8A: 90 02        BCC $8D8E
	LDA #$7F		;cap at 127					;C2/8D8C: A9 7F        LDA #$7F
+	STA UncontrolledATB,X							;C2/8D8E: 9D 04 7C     STA $7C04,X
	TDC 									;C2/8D91: 7B           TDC 
	STA EnableTimer.ATB,Y							;C2/8D92: 99 FB 3C     STA $3CFB,Y
	INC 									;C2/8D95: 1A           INC 
	STA CurrentTimer.ATB,Y							;C2/8D96: 99 7F 3D     STA $3D7F,Y
	PLX 									;C2/8D99: FA           PLX 
	STX AttackerOffset	;Restore attacker variable			;C2/8D9A: 86 32        STX $32
	BRA +									;C2/8D9C: 80 1D        BRA $8DBB
++	;berserk or charm on monster, or other status
	LDA Param3								;C2/8D9E: A5 59        LDA $59
	AND #$20		;Paralyze					;C2/8DA0: 29 20        AND #$20
	BEQ +   								;C2/8DA2: F0 17        BEQ $8DBB      (If Status2 = Paralyze)
	LDA CharStruct.Status2,X						;C2/8DA4: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X						;C2/8DA7: 1D 71 20     ORA $2071,X
	AND #$20								;C2/8DAA: 29 20        AND #$20
	BNE .Miss   		;Miss if already Paralyzed			;C2/8DAC: D0 1A        BNE $8DC8      (If Current Status2 = Paralyze)
	LDA TargetIndex								;C2/8DAE: A5 48        LDA $48
	JSR GetTimerOffset	;Y and $36 = Timer Offset from ROM		;C2/8DB0: 20 07 02     JSR $0207
	TDC 									;C2/8DB3: 7B           TDC 
	STA EnableTimer.ATB,Y							;C2/8DB4: 99 FB 3C     STA $3CFB,Y
	INC 									;C2/8DB7: 1A           INC 
	STA CurrentTimer.ATB,Y							;C2/8DB8: 99 7F 3D     STA $3D7F,Y
+	LDX TargetOffset							;C2/8DBB: A6 49        LDX $49
	LDA CharStruct.Status2,X						;C2/8DBD: BD 1B 20     LDA $201B,X
	ORA Param3     							;C2/8DC0: 05 59        ORA $59        (Inflict Status2)
	STA CharStruct.Status2,X						;C2/8DC2: 9D 1B 20     STA $201B,X
	JMP StartStatus2Timer							;C2/8DC5: 4C 28 93     JMP $9328
.Miss	INC AtkMissed								;C2/8DC8: E6 56        INC $56
	RTS 									;C2/8DCA: 60           RTS 

%org($C28DCB)
;Apply Status Effect 3
;Status in $59 / Param3
ApplyStatus3:
	LDX TargetOffset							;C2/8DCB: A6 49        LDX $49
	LDA CharStruct.StatusImmune3,X 						;C2/8DCD: BD 37 20     LDA $2037,X   (Check Status3 Immune)
	AND Param3								;C2/8DD0: 25 59        AND $59
	BNE .Miss								;C2/8DD2: D0 2E        BNE $8E02
	LDA Param3								;C2/8DD4: A5 59        LDA $59
	AND #$10			;Stop					;C2/8DD6: 29 10        AND #$10
	BEQ +									;C2/8DD8: F0 1B        BEQ $8DF5
	;Stop status
	LDA CharStruct.Status2,X	;Checks Status2 instead of 3 		;C2/8DDA: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X	; likely a bug?				;C2/8DDD: 1D 71 20     ORA $2071,X
	AND #$10			;Charm					;C2/8DE0: 29 10        AND #$10
	BNE .Miss			;Stop misses if target is charmed	;C2/8DE2: D0 1E        BNE $8E02
	LDA TargetIndex							;C2/8DE4: A5 48        LDA $48
	JSR GetTimerOffset		;Y and $36 = Timer Offset from ROM	;C2/8DE6: 20 07 02     JSR $0207
	LDA EnableTimer.ATB,Y							;C2/8DE9: B9 FB 3C     LDA $3CFB,Y
	AND #$40								;C2/8DEC: 29 40        AND #$40
	BNE +									;C2/8DEE: D0 05        BNE $8DF5
	LDA #$01								;C2/8DF0: A9 01        LDA #$01
	STA EnableTimer.ATB,Y							;C2/8DF2: 99 FB 3C     STA $3CFB,Y
+	LDX TargetOffset							;C2/8DF5: A6 49        LDX $49
	LDA CharStruct.Status3,X						;C2/8DF7: BD 1C 20     LDA $201C,X
	ORA Param3								;C2/8DFA: 05 59        ORA $59
	STA CharStruct.Status3,X						;C2/8DFC: 9D 1C 20     STA $201C,X
	JMP StartStatus3Timer							;C2/8DFF: 4C 4D 93     JMP $934D
.Miss	INC AtkMissed								;C2/8E02: E6 56        INC $56
	RTS 									;C2/8E04: 60           RTS 

%org($C28E05)
;Apply Status Effect 4
ApplyStatus4:
	LDX TargetOffset					;C2/8E05: A6 49        LDX $49
	LDA Param3		;Status 			;C2/8E07: A5 59        LDA $59
	AND #$10		;Countdown			;C2/8E09: 29 10        AND #$10
	BEQ +							;C2/8E0B: F0 0A        BEQ $8E17
	LDA CharStruct.Status4,X				;C2/8E0D: BD 1D 20     LDA $201D,X
	ORA CharStruct.AlwaysStatus4,X				;C2/8E10: 1D 73 20     ORA $2073,X
	AND Param3						;C2/8E13: 25 59        AND $59
	BNE .Miss		;Miss if already have countdown	;C2/8E15: D0 0B        BNE $8E22
+	LDA CharStruct.Status4,X				;C2/8E17: BD 1D 20     LDA $201D,X
	ORA Param3						;C2/8E1A: 05 59        ORA $59
	STA CharStruct.Status4,X				;C2/8E1C: 9D 1D 20     STA $201D,X  (Apply Status Effect 4)
	JMP Status4Timer					;C2/8E1F: 4C 72 93     JMP $9372
.Miss	INC AtkMissed    					;C2/8E22: E6 56        INC $56      (Attack Misses)
	RTS 							;C2/8E24: 60           RTS 

%org($C28E25)
;Toggle Status 1
ToggleStatus1:
	LDX TargetOffset						;C2/8E25: A6 49        LDX $49
	LDA CharStruct.StatusImmune1,X					;C2/8E27: BD 35 20     LDA $2035,X  (Check Status Immune 1)
	AND Param3							;C2/8E2A: 25 59        AND $59
	BNE .Miss							;C2/8E2C: D0 09        BNE $8E37
	LDA CharStruct.Status1,X					;C2/8E2E: BD 1A 20     LDA $201A,X
	EOR Param3							;C2/8E31: 45 59        EOR $59
	STA CharStruct.Status1,X					;C2/8E33: 9D 1A 20     STA $201A,X  (Toggle Status 1)
	RTS 								;C2/8E36: 60           RTS 
.Miss									;
	INC AtkMissed    						;C2/8E37: E6 56        INC $56       (Attack Misses)
	RTS 								;C2/8E39: 60           RTS 

%org($C28E3A)
;Apply Flirt, miss if Heavy
ApplyFlirt:
	LDX TargetOffset						;C2/8E3A: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/8E3C: BD 65 20     LDA $2065,X
	AND #$20   		;heavy					;C2/8E3F: 29 20        AND #$20       (Target Creature TYpe = Heavy?)
	BEQ +								;C2/8E41: F0 03        BEQ $8E46
	INC AtkMissed    						;C2/8E43: E6 56        INC $56        (Attack Misses)
	RTS 								;C2/8E45: 60           RTS 
									;
+	LDX TargetOffset						;C2/8E46: A6 49        LDX $49
	LDA CharStruct.CmdStatus,X					;C2/8E48: BD 1E 20     LDA $201E,X
	ORA #$08		;flirted				;C2/8E4B: 09 08        ORA #$08 
	STA CharStruct.CmdStatus,X					;C2/8E4D: 9D 1E 20     STA $201E,X    (Flirt status)
	RTS 								;C2/8E50: 60           RTS 
	
%org($C28E51)
;Apply Status Effect 3, Mutually exclusive statuses
;also adjusts status timers for haste and slow
ApplyStatus3Exclusive:
	LDX TargetOffset						;C2/8E51: A6 49        LDX $49
	LDA CharStruct.StatusImmune3,X 					;C2/8E53: BD 37 20     LDA $2037,X  (Check Status Immune3)
	AND Param3							;C2/8E56: 25 59        AND $59
	BNE .Miss							;C2/8E58: D0 59        BNE $8EB3
	LDA CharStruct.Status3,X					;C2/8E5A: BD 1C 20     LDA $201C,X
	STA $0E								;C2/8E5D: 85 0E        STA $0E
	AND Param2							;C2/8E5F: 25 58        AND $58
	ORA Param3							;C2/8E61: 05 59        ORA $59
	STA CharStruct.Status3,X					;C2/8E63: 9D 1C 20     STA $201C,X
	LDA TargetIndex						;C2/8E66: A5 48        LDA $48
	JSR GetTimerOffset	;Y = $36 = timer offset			;C2/8E68: 20 07 02     JSR $0207
.CheckSlow	
	LDA CharStruct.Status3,X					;C2/8E6B: BD 1C 20     LDA $201C,X
	AND #$04		;slow					;C2/8E6E: 29 04        AND #$04
	BEQ .CheckHaste							;C2/8E70: F0 1E        BEQ $8E90
	LDA $0E			;original Status3			;C2/8E72: A5 0E        LDA $0E
	AND #$04		;slow					;C2/8E74: 29 04        AND #$04
	BNE .CheckHaste		;don't adjust timers if already	slow	;C2/8E76: D0 18        BNE $8E90
	TDC 								;C2/8E78: 7B           TDC 
	TAX 								;C2/8E79: AA           TAX 
.SlowTimerLoop
	LDA CurrentTimer.0,Y						;C2/8E7A: B9 75 3D     LDA $3D75,Y
	BEQ +			;is timer active?			;C2/8E7D: F0 08        BEQ $8E87
	ASL 			;double timer				;C2/8E7F: 0A           ASL 
	BCC ++								;C2/8E80: 90 02        BCC $8E84
	LDA #$FF		;cap at 255				;C2/8E82: A9 FF        LDA #$FF
++	STA CurrentTimer.0,Y						;C2/8E84: 99 75 3D     STA $3D75,Y
+	INY 								;C2/8E87: C8           INY 
	INX 								;C2/8E88: E8           INX 
	CPX #$000B		;10 timers, 11 is too far		;C2/8E89: E0 0B 00     CPX #$000B
	BNE .SlowTimerLoop						;C2/8E8C: D0 EC        BNE $8E7A
	BRA .Ret							;C2/8E8E: 80 22        BRA $8EB2
.CheckHaste	
	LDA CharStruct.Status3,X					;C2/8E90: BD 1C 20     LDA $201C,X
	AND #$08		;haste					;C2/8E93: 29 08        AND #$08
	BEQ .Ret							;C2/8E95: F0 1B        BEQ $8EB2
	LDA $0E			;original Status3			;C2/8E97: A5 0E        LDA $0E
	AND #$08		;haste					;C2/8E99: 29 08        AND #$08
	BNE .Ret		;don't adjust timers if already	hasted	;C2/8E9B: D0 15        BNE $8EB2
	TDC 								;C2/8E9D: 7B           TDC 
	TAX 								;C2/8E9E: AA           TAX 
.HasteTimerLoop
	LDA CurrentTimer.0,Y						;C2/8E9F: B9 75 3D     LDA $3D75,Y
	BEQ +			;is timer active?			;C2/8EA2: F0 07        BEQ $8EAB
	LSR 			;halve timer				;C2/8EA4: 4A           LSR 
	BNE ++								;C2/8EA5: D0 01        BNE $8EA8
	INC 			;min 1					;C2/8EA7: 1A           INC 
++	STA CurrentTimer.0,Y						;C2/8EA8: 99 75 3D     STA $3D75,Y
+	INY 								;C2/8EAB: C8           INY 
	INX 								;C2/8EAC: E8           INX 
	CPX #$000B		;10 timers, 11 is too far		;C2/8EAD: E0 0B 00     CPX #$000B
	BNE .HasteTimerLoop						;C2/8EB0: D0 ED        BNE $8E9F
.Ret	RTS 								;C2/8EB2: 60           RTS 
.Miss									;
	INC AtkMissed							;C2/8EB3: E6 56        INC $56
	RTS 								;C2/8EB5: 60           RTS 

%org($C28EB6)
;Remove Status 1
;Status in Param3, unset bits are to be cleared
RemoveStatus1:
	LDA Param3							;C2/8EB6: A5 59        LDA $59
	EOR #$FF		;Invert, set bits are status to clear	;C2/8EB8: 49 FF        EOR #$FF
	AND #$02		;Zombie					;C2/8EBA: 29 02        AND #$02
	BEQ .TestStone		;Clearing Zombie?			;C2/8EBC: F0 16        BEQ $8ED4
	LDX TargetOffset						;C2/8EBE: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/8EC0: BD 1A 20     LDA $201A,X
	AND #$02							;C2/8EC3: 29 02        AND #$02
	BEQ .TestStone		;Was Zombie set?			;C2/8EC5: F0 0D        BEQ $8ED4
.ResetATB			;need to update ATB if Zombie/Stone was set then cleared
	LDX AttackerOffset						;C2/8EC7: A6 32        LDX $32
	PHX 								;C2/8EC9: DA           PHX 
	LDA TargetIndex							;C2/8ECA: A5 48        LDA $48
	JSR ResetATB		;changes AttackerOffset			;C2/8ECC: 20 82 24     JSR $2482
	PLX 								;C2/8ECF: FA           PLX 
	STX AttackerOffset	;restore original			;C2/8ED0: 86 32        STX $32
	BRA .RemoveStatus						;C2/8ED2: 80 11        BRA $8EE5
.TestStone
	LDA Param3							;C2/8ED4: A5 59        LDA $59
	EOR #$FF							;C2/8ED6: 49 FF        EOR #$FF
	AND #$40		;Stone					;C2/8ED8: 29 40        AND #$40
	BEQ .RemoveStatus	;Clearing Stone?			;C2/8EDA: F0 09        BEQ $8EE5
	LDX TargetOffset						;C2/8EDC: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/8EDE: BD 1A 20     LDA $201A,X
	AND #$40							;C2/8EE1: 29 40        AND #$40
	BNE .ResetATB		;need ATB updated if clearing Stone	;C2/8EE3: D0 E2        BNE $8EC7
.RemoveStatus
	LDX TargetOffset						;C2/8EE5: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/8EE7: BD 1A 20     LDA $201A,X
	STA $0E			;original status			;C2/8EEA: 85 0E        STA $0E
	AND Param3							;C2/8EEC: 25 59        AND $59
	STA CharStruct.Status1,X					;C2/8EEE: 9D 1A 20     STA $201A,X
	LDA Param3							;C2/8EF1: A5 59        LDA $59
	STA $0F			;requested status clears		;C2/8EF3: 85 0F        STA $0F
	EOR #$FF		;Invert, set bits are status to clear	;C2/8EF5: 49 FF        EOR #$FF
	STA Param3							;C2/8EF7: 85 59        STA $59
	JSR StopStatus1Timer						;C2/8EF9: 20 B4 92     JSR $92B4
	LDA $0E			;original status			;C2/8EFC: A5 0E        LDA $0E
	AND #$40		;Stone					;C2/8EFE: 29 40        AND #$40
	STA $0E			;Stone bit if target was Stone		;C2/8F00: 85 0E        STA $0E
	LDA $0F			;unset bits are to be cleared		;C2/8F02: A5 0F        LDA $0F
	EOR #$FF		;Invert, set bits are status to clear	;C2/8F04: 49 FF        EOR #$FF
	AND $0E								;C2/8F06: 25 0E        AND $0E
	BEQ .Ret		;return if we didn't clear Stone	;C2/8F08: F0 06        BEQ $8F10
	LDA TargetIndex						;C2/8F0A: A5 48        LDA $48
	TAX 								;C2/8F0C: AA           TAX 
	INC ActiveParticipants,X	;target is now active		;C2/8F0D: FE C2 3E     INC $3EC2,X
.Ret	RTS 								;C2/8F10: 60           RTS 

%org($C28F11)
;Remove Status 2
;Status in Param3, unset bits are to be cleared
RemoveStatus2:
	LDX TargetOffset						;C2/8F11: A6 49        LDX $49
	LDA Param3							;C2/8F13: A5 59        LDA $59
	EOR #$FF		;Invert, set bits are status to clear	;C2/8F15: 49 FF        EOR #$FF
	AND #$10		;Charm					;C2/8F17: 29 10        AND #$10
	BEQ +								;C2/8F19: F0 07        BEQ $8F22
	LDA CharStruct.Status2,X					;C2/8F1B: BD 1B 20     LDA $201B,X
	AND #$10							;C2/8F1E: 29 10        AND #$10
	BNE .ResetATB							;C2/8F20: D0 2D        BNE $8F4F
+	LDA Param3							;C2/8F22: A5 59        LDA $59
	EOR #$FF		;Invert, set bits are status to clear	;C2/8F24: 49 FF        EOR #$FF
	AND #$08		;Berserk				;C2/8F26: 29 08        AND #$08
	BEQ +								;C2/8F28: F0 07        BEQ $8F31
	LDA CharStruct.Status2,X					;C2/8F2A: BD 1B 20     LDA $201B,X
	AND #$18		;Charm or Berserk			;C2/8F2D: 29 18        AND #$18
	BNE .ResetATB							;C2/8F2F: D0 1E        BNE $8F4F
+	LDA Param3							;C2/8F31: A5 59        LDA $59
	EOR #$FF		;Invert, set bits are status to clear	;C2/8F33: 49 FF        EOR #$FF
	AND #$20		;Paralyze				;C2/8F35: 29 20        AND #$20
	BEQ +								;C2/8F37: F0 07        BEQ $8F40
	LDA CharStruct.Status2,X					;C2/8F39: BD 1B 20     LDA $201B,X
	AND #$20							;C2/8F3C: 29 20        AND #$20
	BNE .ResetATB							;C2/8F3E: D0 0F        BNE $8F4F
+	LDA Param3							;C2/8F40: A5 59        LDA $59
	EOR #$FF		;Invert, set bits are status to clear	;C2/8F42: 49 FF        EOR #$FF
	AND #$40		;Sleep					;C2/8F44: 29 40        AND #$40
	BEQ .RemoveStatus						;C2/8F46: F0 12        BEQ $8F5A
	LDA CharStruct.Status2,X					;C2/8F48: BD 1B 20     LDA $201B,X
	AND #$40							;C2/8F4B: 29 40        AND #$40
	BEQ .RemoveStatus						;C2/8F4D: F0 0B        BEQ $8F5A
.ResetATB	;if we're clearing Charm/Berserk/Poison/Sleep we need to update ATB
	LDX AttackerOffset						;C2/8F4F: A6 32        LDX $32
	PHX 								;C2/8F51: DA           PHX 
	LDA TargetIndex							;C2/8F52: A5 48        LDA $48
	JSR ResetATB	;changes AttackerOffset				;C2/8F54: 20 82 24     JSR $2482
	PLX 								;C2/8F57: FA           PLX 
	STX AttackerOffset	;restore original			;C2/8F58: 86 32        STX $32
.RemoveStatus
	LDX TargetOffset						;C2/8F5A: A6 49        LDX $49
	LDA CharStruct.Status2,X					;C2/8F5C: BD 1B 20     LDA $201B,X
	AND Param3							;C2/8F5F: 25 59        AND $59
	STA CharStruct.Status2,X					;C2/8F61: 9D 1B 20     STA $201B,X
	LDA Param3							;C2/8F64: A5 59        LDA $59
	EOR #$FF		;Invert, set bits are status to clear	;C2/8F66: 49 FF        EOR #$FF
	STA Param3							;C2/8F68: 85 59        STA $59
	JSR StopStatus2Timer						;C2/8F6A: 20 C3 92     JSR $92C3
	RTS 								;C2/8F6D: 60           RTS 

%org($C28F6E)
;Remove Status 3
;Status in Param3, unset bits are to be cleared
RemoveStatus3:
	LDX TargetOffset							;C2/8F6E: A6 49        LDX $49
	LDA CharStruct.Status3,X						;C2/8F70: BD 1C 20     LDA $201C,X
	AND Param3								;C2/8F73: 25 59        AND $59
	STA CharStruct.Status3,X						;C2/8F75: 9D 1C 20     STA $201C,X
	LDA Param3								;C2/8F78: A5 59        LDA $59
	EOR #$FF			;Invert, set bits are status to clear	;C2/8F7A: 49 FF        EOR #$FF
	STA Param3								;C2/8F7C: 85 59        STA $59
	JSR StopStatus3Timer							;C2/8F7E: 20 EE 92     JSR $92EE
	RTS 									;C2/8F81: 60           RTS 


%org($C28F82)
;Kill target, miss if Heavy
KillNonHeavy:
	LDX TargetOffset						;C2/8F82: A6 49        LDX $49
	LDA CharStruct.CreatureType,X					;C2/8F84: BD 65 20     LDA $2065,X
	AND #$20    			;heavy				;C2/8F87: 29 20        AND #$20      (Target Creature Type = Heavy?)
	BEQ .NotHeavy							;C2/8F89: F0 03        BEQ $8F8E
	INC AtkMissed    						;C2/8F8B: E6 56        INC $56       (Attack Misses)
	RTS 								;C2/8F8D: 60           RTS 
.NotHeavy								;
	JSR HitMagicConditionalAutohit					;C2/8F8E: 20 81 7E     JSR $7E81     (Hit Determination for Magic, Autohit Party)
	LDA AtkMissed							;C2/8F91: A5 56        LDA $56
	BNE .Ret							;C2/8F93: D0 14        BNE $8FA9
	LDX TargetOffset						;C2/8F95: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/8F97: BD 1A 20     LDA $201A,X
	AND #$02    			;zombie status			;C2/8F9A: 29 02        AND #$02      (Target Status1 = Zombie)
	BNE .Miss							;C2/8F9C: D0 09        BNE $8FA7
	LDA CharStruct.Status1,X					;C2/8F9E: BD 1A 20     LDA $201A,X
	ORA #$80			;dead status			;C2/8FA1: 09 80        ORA #$80
	STA CharStruct.Status1,X 					;C2/8FA3: 9D 1A 20     STA $201A,X   (Apply Target Status1 = Dead)
	RTS 								;C2/8FA6: 60           RTS 
									;
.Miss	INC AtkMissed							;C2/8FA7: E6 56        INC $56
.Ret	RTS 								;C2/8FA9: 60           RTS 

%org($C28FAA)
;Revive Target
;Param3/$59 is fraction/16 of max hp to restore
%sub(ReviveTarget)
ReviveTarget:
	LDA TargetIndex						;C2/8FAA: A5 48        LDA $48
	CMP #$04							;C2/8FAC: C9 04        CMP #$04
	BCC .Revive			;<4 is party			;C2/8FAE: 90 0F        BCC $8FBF
	SEC 								;C2/8FB0: 38           SEC 
	SBC #$04							;C2/8FB1: E9 04        SBC #$04
	TAX 				;now monster index(0-7)		;C2/8FB3: AA           TAX 
	LDA InactiveMonsters						;C2/8FB4: AD 0A 7C     LDA $7C0A
	JSR SelectBit_X							;C2/8FB7: 20 DB 01     JSR $01DB
	BEQ .Revive			;check if monster is revivable	;C2/8FBA: F0 03        BEQ $8FBF
.Miss
	INC AtkMissed							;C2/8FBC: E6 56        INC $56
	RTS 								;C2/8FBE: 60           RTS 
.Revive									;
	LDX TargetOffset						;C2/8FBF: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/8FC1: BD 1A 20     LDA $201A,X
	AND #$02			;zombie				;C2/8FC4: 29 02        AND #$02
	BNE .Miss							;C2/8FC6: D0 F4        BNE $8FBC
	LDA CharStruct.Status1,X					;C2/8FC8: BD 1A 20     LDA $201A,X
	AND #$7F			;clear dead			;C2/8FCB: 29 7F        AND #$7F
	STA CharStruct.Status1,X					;C2/8FCD: 9D 1A 20     STA $201A,X
	LDA Param3							;C2/8FD0: A5 59        LDA $59
	TAX 								;C2/8FD2: AA           TAX 
	STX $2C								;C2/8FD3: 86 2C        STX $2C
	LDX TargetOffset						;C2/8FD5: A6 49        LDX $49
	LDA CharStruct.MaxHP,X						;C2/8FD7: BD 08 20     LDA $2008,X
	STA $2A								;C2/8FDA: 85 2A        STA $2A
	LDA CharStruct.MaxHP+1,X					;C2/8FDC: BD 09 20     LDA $2009,X
	STA $2B								;C2/8FDF: 85 2B        STA $2B
	JSR Multiply_16bit		;32 bit result in $2E		;C2/8FE1: 20 D2 00     JSR $00D2
	REP #$20							;C2/8FE4: C2 20        REP #$20
	LSR $30								;C2/8FE6: 46 30        LSR $30
	ROR $2E								;C2/8FE8: 66 2E        ROR $2E
	LSR $30								;C2/8FEA: 46 30        LSR $30
	ROR $2E								;C2/8FEC: 66 2E        ROR $2E
	LSR $30								;C2/8FEE: 46 30        LSR $30
	ROR $2E								;C2/8FF0: 66 2E        ROR $2E
	LSR $30								;C2/8FF2: 46 30        LSR $30
	ROR $2E				;divide by 16 via shifts	;C2/8FF4: 66 2E        ROR $2E
	LDA $30								;C2/8FF6: A5 30        LDA $30
	BNE .Cap			;cap at 9999 (high bytes)	;C2/8FF8: D0 07        BNE $9001
	LDA $2E								;C2/8FFA: A5 2E        LDA $2E
	CMP #$270F			;cap at 9999 (low bytes)	;C2/8FFC: C9 0F 27     CMP #$270F
	BCC +								;C2/8FFF: 90 05        BCC $9006
.Cap	LDA #$270F							;C2/9001: A9 0F 27     LDA #$270F
	STA $2E								;C2/9004: 85 2E        STA $2E
+	LDA $2E								;C2/9006: A5 2E        LDA $2E
	BNE +								;C2/9008: D0 02        BNE $900C
	INC $2E				;min 1				;C2/900A: E6 2E        INC $2E
+	LDX TargetOffset						;C2/900C: A6 49        LDX $49
	CLC 								;C2/900E: 18           CLC 
	LDA CharStruct.CurHP,X						;C2/900F: BD 06 20     LDA $2006,X
	ADC $2E								;C2/9012: 65 2E        ADC $2E
	BCS +				;check for overflow		;C2/9014: B0 05        BCS $901B
	CMP CharStruct.MaxHP,X		 				;C2/9016: DD 08 20     CMP $2008,X
	BCC ++								;C2/9019: 90 03        BCC $901E
+	LDA CharStruct.MaxHP,X						;C2/901B: BD 08 20     LDA $2008,X
++	STA CharStruct.CurHP,X		;set hp to max			;C2/901E: 9D 06 20     STA $2006,X
	TDC 								;C2/9021: 7B           TDC 
	SEP #$20							;C2/9022: E2 20        SEP #$20
	LDA TargetIndex							;C2/9024: A5 48        LDA $48
	TAX 								;C2/9026: AA           TAX 
	INC ActiveParticipants,X					;C2/9027: FE C2 3E     INC $3EC2,X
	RTS 								;C2/902A: 60           RTS 
%endsub()

%org($C2902B)	
;Apply Status 1 to target, bypass Status immunity
ApplyStatus1Bypass:
	LDX TargetOffset						;C2/902B: A6 49        LDX $49
	LDA CharStruct.Status1,X					;C2/902D: BD 1A 20     LDA $201A,X
	ORA Param3							;C2/9030: 05 59        ORA $59
	STA CharStruct.Status1,X					;C2/9032: 9D 1A 20     STA $201A,X
	JSR StartStatus1Timer						;C2/9035: 20 A5 92     JSR $92A5
	RTS 								;C2/9038: 60           RTS 

%org($C29039)
;Apply Status 2 to Target, bypasses Status Immunity
;Still respects mutually exclusive status
ApplyStatus2Bypass:
	LDX TargetOffset						;C2/9039: A6 49        LDX $49
	LDA Param3							;C2/903B: A5 59        LDA $59
	AND #$10   		;charm					;C2/903D: 29 10        AND #$10      (If Status to inflict = Charm)
	BNE .Charm							;C2/903F: D0 19        BNE $905A
	LDA Param3							;C2/9041: A5 59        LDA $59
	AND #$08   		;berserk				;C2/9043: 29 08        AND #$08      (If Status to inflict = Berserk)
	BEQ .CheckPara							;C2/9045: F0 58        BEQ $909F
	LDA CharStruct.Status2,X					;C2/9047: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/904A: 1D 71 20     ORA $2071,X
	AND #$18		;charm or berserk			;C2/904D: 29 18        AND #$18
	BNE .Miss  							;C2/904F: D0 78        BNE $90C9     (If Target is Charmed or Berserk)
	LDA CharStruct.Status4,X					;C2/9051: BD 1D 20     LDA $201D,X
	AND #$20   		;control				;C2/9054: 29 20        AND #$20      (If Target is Controlled)
	BNE .Miss							;C2/9056: D0 71        BNE $90C9
	BRA +								;C2/9058: 80 11        BRA $906B
.Charm	LDA CharStruct.Status2,X					;C2/905A: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/905D: 1D 71 20     ORA $2071,X
	AND #$18   		;charm or berserk			;C2/9060: 29 18        AND #$18     (If Target is Charmed or Berserk)
	BNE .Miss							;C2/9062: D0 65        BNE $90C9
	LDA CharStruct.Status4,X					;C2/9064: BD 1D 20     LDA $201D,X
	AND #$20   		;control				;C2/9067: 29 20        AND #$20     (If Target is Controlled)
	BNE .Miss							;C2/9069: D0 5E        BNE $90C9
+	LDA TargetIndex							;C2/906B: A5 48        LDA $48
	CMP #$04		;4+ is monster				;C2/906D: C9 04        CMP #$04
	BCS .CheckPara  						;C2/906F: B0 2E        BCS $909F    (If target = Monster)
	LDX AttackerOffset						;C2/9071: A6 32        LDX $32
	PHX 			;store attacker for later		;C2/9073: DA           PHX 
	LDA TargetIndex 						;C2/9074: A5 48        LDA $48
	JSR ResetATB		;Y=timer offset 			;C2/9076: 20 82 24     JSR $2482
	LDX AttackerOffset	;is now target after ResetATB		;C2/9079: A6 32        LDX $32
	LDA #$80							;C2/907B: A9 80        LDA #$80
	STA CharStruct.ActionFlag,X					;C2/907D: 9D 56 20     STA $2056,X
	STZ CharStruct.Command,X					;C2/9080: 9E 57 20     STZ $2057,X
	LDA TargetIndex 						;C2/9083: A5 48        LDA $48
	TAX 								;C2/9085: AA           TAX 
	LDA CurrentTimer.ATB,Y						;C2/9086: B9 7F 3D     LDA $3D7F,Y
	CMP #$7F		;caps at 127				;C2/9089: C9 7F        CMP #$7F
	BCC +								;C2/908B: 90 02        BCC $908F
	LDA #$7F							;C2/908D: A9 7F        LDA #$7F
+	STA UncontrolledATB,X						;C2/908F: 9D 04 7C     STA $7C04,X
	TDC 								;C2/9092: 7B           TDC 
	STA EnableTimer.ATB,Y						;C2/9093: 99 FB 3C     STA $3CFB,Y
	INC 								;C2/9096: 1A           INC 
	STA CurrentTimer.ATB,Y						;C2/9097: 99 7F 3D     STA $3D7F,Y
	PLX 			;restore original attacker		;C2/909A: FA           PLX 
	STX AttackerOffset						;C2/909B: 86 32        STX $32
	BRA .Finish							;C2/909D: 80 1D        BRA $90BC
.CheckPara	
	LDA Param3							;C2/909F: A5 59        LDA $59
	AND #$20   		;paralyze				;C2/90A1: 29 20        AND #$20      (If Status to inflict = Paralyze)
	BEQ .Finish							;C2/90A3: F0 17        BEQ $90BC
	LDA CharStruct.Status2,X					;C2/90A5: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/90A8: 1D 71 20     ORA $2071,X
	AND #$20   		;paralyze				;C2/90AB: 29 20        AND #$20      (If Attacker is Paralyzed)
	BNE .Miss							;C2/90AD: D0 1A        BNE $90C9
	LDA TargetIndex							;C2/90AF: A5 48        LDA $48
	JSR GetTimerOffset	;Y=timer offset 			;C2/90B1: 20 07 02     JSR $0207
	TDC 								;C2/90B4: 7B           TDC 
	STA EnableTimer.ATB,Y						;C2/90B5: 99 FB 3C     STA $3CFB,Y
	INC 								;C2/90B8: 1A           INC 
	STA CurrentTimer.ATB,Y						;C2/90B9: 99 7F 3D     STA $3D7F,Y
.Finish	LDX TargetOffset						;C2/90BC: A6 49        LDX $49
	LDA CharStruct.Status2,X					;C2/90BE: BD 1B 20     LDA $201B,X
	ORA Param3							;C2/90C1: 05 59        ORA $59
	STA CharStruct.Status2,X					;C2/90C3: 9D 1B 20     STA $201B,X   (Inflict status)
	JMP StartStatus2Timer						;C2/90C6: 4C 28 93     JMP $9328	
.Miss	INC.w AtkMissed							;C2/90C9: EE 56 00     INC $0056
	RTS 								;C2/90CC: 60           RTS 

%org($C290CD)
;Apply Status 3 to Target, bypasses Status Immunity
ApplyStatus3Bypass:
	LDX TargetOffset						;C2/90CD: A6 49        LDX $49
	LDA CharStruct.Status3,X					;C2/90CF: BD 1C 20     LDA $201C,X
	ORA Param3							;C2/90D2: 05 59        ORA $59
	STA CharStruct.Status3,X					;C2/90D4: 9D 1C 20     STA $201C,X
	JSR StartStatus3Timer						;C2/90D7: 20 4D 93     JSR $934D
	RTS 								;C2/90DA: 60           RTS 

%org($C290DB)
;Apply Status 1 to Attacker, bypasses Status Immunity
ApplyStatus1AttackerBypass:
	LDX AttackerOffset						;C2/90DB: A6 32        LDX $32
	LDA CharStruct.Status1,X					;C2/90DD: BD 1A 20     LDA $201A,X
	ORA Param3							;C2/90E0: 05 59        ORA $59
	STA CharStruct.Status1,X					;C2/90E2: 9D 1A 20     STA $201A,X
	JSR StartStatus1Timer						;C2/90E5: 20 A5 92     JSR $92A5
	RTS 								;C2/90E8: 60           RTS 

%org($C290E9)
;Remove Magic Sword Effects
RemoveMagicSword:
	LDX TargetOffset					;C2/90E9: A6 49        LDX $49
	STZ CharStruct.MSwordElemental1,X			;C2/90EB: 9E 50 20     STZ $2050,X
	STZ CharStruct.MSwordElemental2,X			;C2/90EE: 9E 51 20     STZ $2051,X
	STZ CharStruct.MSwordElemental3,X			;C2/90F1: 9E 52 20     STZ $2052,X
	STZ CharStruct.MSwordStatus1,X				;C2/90F4: 9E 53 20     STZ $2053,X
	STZ CharStruct.MSwordStatus2,X				;C2/90F7: 9E 54 20     STZ $2054,X
	STZ CharStruct.MSwordStatusSpecial,X			;C2/90FA: 9E 55 20     STZ $2055,X
	STZ CharStruct.MSwordAnim,X				;C2/90FD: 9E 7A 20     STZ $207A,X
	RTS 							;C2/9100: 60           RTS 

%org($C29101)	
;Change Target Row
TargetChangeRow:
	LDX TargetOffset					;C2/9101: A6 49        LDX $49
	LDA CharStruct.CharRow,X				;C2/9103: BD 00 20     LDA $2000,X
	AND #$80						;C2/9106: 29 80        AND #$80
	EOR #$80						;C2/9108: 49 80        EOR #$80
	STA $0E							;C2/910A: 85 0E        STA $0E
	LDA CharStruct.CharRow,X				;C2/910C: BD 00 20     LDA $2000,X
	AND #$7F						;C2/910F: 29 7F        AND #$7F
	ORA $0E							;C2/9111: 05 0E        ORA $0E
	STA CharStruct.CharRow,X				;C2/9113: 9D 00 20     STA $2000,X
	RTS 							;C2/9116: 60           RTS 
;       
%org($C29117)
;Move Target to Front Row
TargetFrontRow:
	LDX TargetOffset					;C2/9117: A6 49        LDX $49
	LDA CharStruct.CharRow,X				;C2/9119: BD 00 20     LDA $2000,X
	AND #$7F						;C2/911C: 29 7F        AND #$7F
	STA CharStruct.CharRow,X				;C2/911E: 9D 00 20     STA $2000,X
	RTS 							;C2/9121: 60           RTS 
;       
%org($C29122)
;Move Attacker to Back Row
AttackerBackRow:
	LDX AttackerOffset					;C2/9122: A6 32        LDX $32
	LDA CharStruct.CharRow,X				;C2/9124: BD 00 20     LDA $2000,X
	ORA #$80						;C2/9127: 09 80        ORA #$80
	STA CharStruct.CharRow,X				;C2/9129: 9D 00 20     STA $2000,X
	RTS 							;C2/912C: 60           RTS 

%org($C2912D)
;Defense & Magic Defense = Half
HalveDefenses:
	LDX TargetOffset					;C2/912D: A6 49        LDX $49
	LSR CharStruct.Defense,X				;C2/912F: 5E 2D 20     LSR $202D,X
	LSR CharStruct.MDefense,X				;C2/9132: 5E 2F 20     LSR $202F,X
	RTS 							;C2/9135: 60           RTS 

%org($C29136)
;Target Level = Half
HalveLevel:
	LDX TargetOffset					;C2/9136: A6 49        LDX $49
	LDA CharStruct.Level,X					;C2/9138: BD 02 20     LDA $2002,X
	LSR        						;C2/913B: 4A           LSR          (Level/2)
	BNE +							;C2/913C: D0 01        BNE $913F
	INC 			;min 1				;C2/913E: 1A           INC 
+	STA CharStruct.Level,X					;C2/913F: 9D 02 20     STA $2002,X  (Min Level = 1)
	RTS 							;C2/9142: 60           RTS 

%org($C29143)
;Add to Target Level
AddLevel:
	LDX TargetOffset				;C2/9143: A6 49        LDX $49
	CLC 						;C2/9145: 18           CLC 
	LDA CharStruct.Level,X				;C2/9146: BD 02 20     LDA $2002,X
	ADC Param3					;C2/9149: 65 59        ADC $59
	BCC +						;C2/914B: 90 02        BCC $914F
	LDA #$FF		;max 255		;C2/914D: A9 FF        LDA #$FF
+	STA CharStruct.Level,X				;C2/914F: 9D 02 20     STA $2002,X  (Max Level = 255)
	RTS 						;C2/9152: 60           RTS 
;
%org($C29153)
;Subtract from Target Level
SubtractLevel:
	LDX TargetOffset				;C2/9153: A6 49        LDX $49
	SEC 						;C2/9155: 38           SEC 
	LDA CharStruct.Level,X				;C2/9156: BD 02 20     LDA $2002,X
	SBC Param3					;C2/9159: E5 59        SBC $59
	BCS +						;C2/915B: B0 02        BCS $915F
	LDA #$01		;min 1			;C2/915D: A9 01        LDA #$01
+	STA CharStruct.Level,X				;C2/915F: 9D 02 20     STA $2002,X  (Min Level = 1)
	RTS 						;C2/9162: 60           RTS 
;
%org($C29163)
;Double Max HP
DoubleMaxHP:
	LDA TargetIndex						;C2/9163: A5 48        LDA $48
	CMP #$04		;<4 means party			;C2/9165: C9 04        CMP #$04
	BCC .Go  						;C2/9167: 90 03        BCC $916C  (If target is a party member)
	INC AtkMissed						;C2/9169: E6 56        INC $56
	RTS 							;C2/916B: 60           RTS 
							
.Go	ASL 							;C2/916C: 0A           ASL 
	TAY 							;C2/916D: A8           TAY 
	REP #$20						;C2/916E: C2 20        REP #$20
	LDX TargetOffset					;C2/9170: A6 49        LDX $49
	LDA CharStruct.MaxHP,X					;C2/9172: BD 08 20     LDA $2008,X
	STA OriginalMaxHP,Y					;C2/9175: 99 11 7C     STA $7C11,Y
	ASL        						;C2/9178: 0A           ASL          (Max HP = 2 * Max HP)
	CMP #$270F 		;9999				;C2/9179: C9 0F 27     CMP #$270F   (Max HP = 9999)
	BCC +							;C2/917C: 90 03        BCC $9181
	LDA #$270F		;cap at 9999			;C2/917E: A9 0F 27     LDA #$270F
+	STA CharStruct.MaxHP,X					;C2/9181: 9D 08 20     STA $2008,X  
	LDA CharStruct.CurHP,X					;C2/9184: BD 06 20     LDA $2006,X  (Current HP = 2 * Current HP)
	ASL 							;C2/9187: 0A           ASL 
	CMP #$270F 		;9999				;C2/9188: C9 0F 27     CMP #$270F   (Max Current HP = 9999)
	BCC +							;C2/918B: 90 03        BCC $9190
	LDA #$270F		;cap at 9999			;C2/918D: A9 0F 27     LDA #$270F
+	STA CharStruct.CurHP,X					;C2/9190: 9D 06 20     STA $2006,X
	TDC 							;C2/9193: 7B           TDC 
	SEP #$20						;C2/9194: E2 20        SEP #$20
	RTS 							;C2/9196: 60           RTS 
;
%org($C29197)
;Increase Attack 
;**bug: Only increases Attack for monsters and Goblin Punch
%sub(AddAttack)
AddAttack:
	LDX TargetOffset				;C2/9197: A6 49        LDX $49
	CLC 						;C2/9199: 18           CLC 
	LDA CharStruct.MonsterAttack,X			;C2/919A: BD 44 20     LDA $2044,X
	ADC Param3					;C2/919D: 65 59        ADC $59
	BCC +						;C2/919F: 90 02        BCC $91A3
	LDA #$FF 		;max 255		;C2/91A1: A9 FF        LDA #$FF    (Max Attack = 255)
+	STA CharStruct.MonsterAttack,X			;C2/91A3: 9D 44 20     STA $2044,X
	CLC 						;C2/91A6: 18           CLC 
	LDA CharStruct.MonsterAttackLH,X		;C2/91A7: BD 45 20     LDA $2045,X
	ADC Param3					;C2/91AA: 65 59        ADC $59
	BCC +						;C2/91AC: 90 02        BCC $91B0
	LDA #$FF		;max 255		;C2/91AE: A9 FF        LDA #$FF
+	STA CharStruct.MonsterAttackLH,X		;C2/91B0: 9D 45 20     STA $2045,X
	RTS 						;C2/91B3: 60           RTS 
%endsub()

%org($C291B4)
;Increase Target Defense and Magic Defense
AddDefenses:
	LDX TargetOffset				;C2/91B4: A6 49        LDX $49
	CLC 						;C2/91B6: 18           CLC 
	LDA CharStruct.Defense,X			;C2/91B7: BD 2D 20     LDA $202D,X
	ADC Param3					;C2/91BA: 65 59        ADC $59
	BCC +						;C2/91BC: 90 02        BCC $91C0
	LDA #$FF   		;max 255		;C2/91BE: A9 FF        LDA #$FF   (Max Defense = 255)
+	STA CharStruct.Defense,X			;C2/91C0: 9D 2D 20     STA $202D,X
	CLC 						;C2/91C3: 18           CLC 
	LDA CharStruct.MDefense,X			;C2/91C4: BD 2F 20     LDA $202F,X
	ADC Param3					;C2/91C7: 65 59        ADC $59
	BCC +						;C2/91C9: 90 02        BCC $91CD
	LDA #$FF   		;max 255		;C2/91CB: A9 FF        LDA #$FF   (Max Magic Defense = 255)
+	STA CharStruct.MDefense,X			;C2/91CD: 9D 2F 20     STA $202F,X
	RTS 						;C2/91D0: 60           RTS 

%org($C291D1)
;Toggle Status 4 on target
;(only called in unused attack type 56, so effectively unused)
ToggleStatus4:
	LDX TargetOffset				;C2/91D1: A6 49        LDX $49
	LDA CharStruct.Status4,X			;C2/91D3: BD 1D 20     LDA $201D,X
	EOR Param3					;C2/91D6: 45 59        EOR $59
	STA CharStruct.Status4,X			;C2/91D8: 9D 1D 20     STA $201D,X
	RTS 						;C2/91DB: 60           RTS 

%org($C291DC)
;(seems to be unused)
AddSomethingUnused:
	LDX AttackerOffset				;C2/91DC: A6 32        LDX $32
	LDA CharStruct.Unused3,X	;unused byte	;C2/91DE: BD 79 20     LDA $2079,X
	ORA Param3					;C2/91E1: 05 59        ORA $59
	STA CharStruct.Unused3,X			;C2/91E3: 9D 79 20     STA $2079,X
	RTS 						;C2/91E6: 60           RTS 

%org($C291E7)
;Add Creature Type
AddCreatureType:
	LDX TargetOffset				;C2/91E7: A6 49        LDX $49
	LDA CharStruct.CreatureType,X			;C2/91E9: BD 65 20     LDA $2065,X
	ORA Param3					;C2/91EC: 05 59        ORA $59
	STA CharStruct.CreatureType,X			;C2/91EE: 9D 65 20     STA $2065,X   Add Creature Type $59 to target
	RTS 						;C2/91F1: 60           RTS 

%org($C291F2)							;
;Add Status 1 Immunity
AddStatus1Immunity:
	LDX TargetOffset				;C2/91F2: A6 49        LDX $49
	LDA CharStruct.StatusImmune1,X			;C2/91F4: BD 35 20     LDA $2035,X
	ORA Param3					;C2/91F7: 05 59        ORA $59
	STA CharStruct.StatusImmune1,X			;C2/91F9: 9D 35 20     STA $2035,X
	RTS 						;C2/91FC: 60           RTS 

%org($C291FD)							;
;Add Magic Element Up
AddElementUp:
	LDX TargetOffset				;C2/91FD: A6 49        LDX $49
	LDA CharStruct.ElementUp,X			;C2/91FF: BD 22 20     LDA $2022,X
	ORA Param3					;C2/9202: 05 59        ORA $59
	STA CharStruct.ElementUp,X			;C2/9204: 9D 22 20     STA $2022,X
	RTS 						;C2/9207: 60           RTS 
	
%org($C29208)	
;Steal Subroutine
StealItem:
	LDA TargetIndex					;C2/9208: A5 48        LDA $48
	CMP #$04  						;C2/920A: C9 04        CMP #$04  
	BCS +							;C2/920C: B0 03        BCS $9211   (If target is a Monster)
	JMP .Miss						;C2/920E: 4C A2 92     JMP $92A2
+	TDC 							;C2/9211: 7B           TDC 
	TAX 							;C2/9212: AA           TAX 
	LDA #$FF						;C2/9213: A9 FF        LDA #$FF
	JSR Random_X_A  					;C2/9215: 20 7C 00     JSR $007C  (0..255)
	STA $0E			;0..255				;C2/9218: 85 0E        STA $0E
	SEC 							;C2/921A: 38           SEC 
	LDA TargetIndex					;C2/921B: A5 48        LDA $48
	SBC #$04		;now monster 0-7		;C2/921D: E9 04        SBC #$04
	ASL 							;C2/921F: 0A           ASL 
	TAX 							;C2/9220: AA           TAX 
	REP #$20						;C2/9221: C2 20        REP #$20
	LDA BattleMonsterID,X					;C2/9223: BD 20 40     LDA $4020,X
	JSR ShiftMultiply_4 					;C2/9226: 20 B7 01     JSR $01B7  (x4)
	TAX 			;index into steal/drop table	;C2/9229: AA           TAX 
	TDC 							;C2/922A: 7B           TDC 
	SEP #$20						;C2/922B: E2 20        SEP #$20
	LDA $0E							;C2/922D: A5 0E        LDA $0E
	CMP #$0A  		;10 out of 255			;C2/922F: C9 0A        CMP #$0A   If (0..255) < 10, Steal Rare
	BCC .Rare						;C2/9231: 90 01        BCC $9234
	INX 			;next item is common steal	;C2/9233: E8           INX 
.Rare	LDA ROMLoot.RareSteal,X					;C2/9234: BF 00 50 D0  LDA $D05000,X
	BEQ .Miss		;nothing in this steal slot	;C2/9238: F0 68        BEQ $92A2
	STA $0E							;C2/923A: 85 0E        STA $0E
	LDY #$00FF		;last item slot			;C2/923C: A0 FF 00     LDY #$00FF
.SearchItemLoop
	LDA InventoryItems,Y					;C2/923F: B9 34 27     LDA $2734,Y
	CMP $0E							;C2/9242: C5 0E        CMP $0E
	BEQ .Found		;found matching item		;C2/9244: F0 12        BEQ $9258
	DEY 							;C2/9246: 88           DEY 
	BPL .SearchItemLoop					;C2/9247: 10 F6        BPL $923F
	TDC 							;C2/9249: 7B           TDC 
	TAY 							;C2/924A: A8           TAY 
.SearchEmptyLoop
	LDA InventoryItems,Y					;C2/924B: B9 34 27     LDA $2734,Y
	BEQ .Found		;found empty slot		;C2/924E: F0 08        BEQ $9258
	INY 							;C2/9250: C8           INY 
	CPY #$0100						;C2/9251: C0 00 01     CPY #$0100
	BNE .SearchEmptyLoop					;C2/9254: D0 F5        BNE $924B
	BRA .Miss		;no empty slots (impossible?)	;C2/9256: 80 4A        BRA $92A2
.Found	LDA $0E							;C2/9258: A5 0E        LDA $0E
	STA InventoryItems,Y					;C2/925A: 99 34 27     STA $2734,Y
	LDA Temp,Y	;save this to restore later		;C2/925D: B9 20 26     LDA $2620,Y
	PHA 							;C2/9260: 48           PHA 
	PHY 							;C2/9261: 5A           PHY 
	LDA $0E							;C2/9262: A5 0E        LDA $0E
	JSR SetupInventoryInfo					;C2/9264: 20 FA 03     JSR $03FA
	JSR GetItemUsableY					;C2/9267: 20 69 03     JSR $0369
	PLY 							;C2/926A: 7A           PLY 
	STA InventoryUsable,Y					;C2/926B: 99 34 2C     STA $2C34,Y
	PLA 							;C2/926E: 68           PLA 
	STA Temp,Y	;restores value that setup overwrote	;C2/926F: 99 20 26     STA $2620,Y
	CLC 							;C2/9272: 18           CLC 
	LDA InventoryQuantities,Y				;C2/9273: B9 34 28     LDA $2834,Y
	INC 							;C2/9276: 1A           INC 
	CMP #$64			;check for 100		;C2/9277: C9 64        CMP #$64
	BCC +							;C2/9279: 90 02        BCC $927D
	LDA #$63			;cap at 99		;C2/927B: A9 63        LDA #$63
+	STA InventoryQuantities,Y				;C2/927D: 99 34 28     STA $2834,Y
	LDX TargetOffset					;C2/9280: A6 49        LDX $49
	LDA InventoryItems,Y					;C2/9282: B9 34 27     LDA $2734,Y
	STA CharStruct.StolenItem,X				;C2/9285: 9D 6B 20     STA $206B,X
	PHY 							;C2/9288: 5A           PHY 
	JSR SetupMsgBoxIndexes					;C2/9289: 20 65 99     JSR $9965
	TYX 							;C2/928C: BB           TYX 
	PLY 							;C2/928D: 7A           PLY 
	LDA CurrentCommand.ID			 		;C2/928E: AD 46 47     LDA $4746
	CMP #$0B	;steal					;C2/9291: C9 0B        CMP #$0B
	BEQ +							;C2/9293: F0 04        BEQ $9299
	CMP #$33	;command $33 is White Magic L2, so ?? 	;C2/9295: C9 33        CMP #$33
	BNE ++							;C2/9297: D0 02        BNE $929B
+	TDC 							;C2/9299: 7B           TDC 
	TAX 							;C2/929A: AA           TAX 
++	LDA InventoryItems,Y					;C2/929B: B9 34 27     LDA $2734,Y
	STA MessageBoxData.0,X					;C2/929E: 9D BF 3C     STA $3CBF,X
	RTS 							;C2/92A1: 60           RTS 
								;
.Miss	INC AtkMissed						;C2/92A2: E6 56        INC $56
	RTS 							;C2/92A4: 60           RTS 

%org($C292A5)
;Status 1 Effect Timer
;Poison is the only Status 1 effect that has one
;Starts timer if Param3 poison bit is set
StartStatus1Timer:
	LDA Param3		;Status1 here			;C2/92A5: A5 59        LDA $59
	AND #$04		;Poison				;C2/92A7: 29 04        AND #$04
	BEQ .Return						;C2/92A9: F0 08        BEQ $92B3
	LDA #$01						;C2/92AB: A9 01        LDA #$01
	TAX							;C2/92AD: AA           TAX
	LDA TargetIndex						;C2/92AE: A5 48        LDA $48
	JSR StartTimer 						;C2/92B0: 20 FD 24     JSR $24FD
.Return
	RTS 							;C2/92B3: 60           RTS 

%org($C292B4)
;Stops timer if Param3 poison bit is set
StopStatus1Timer:
	LDA Param3							;C2/92B4: A5 59        LDA $59
	AND #$04		;Poison					;C2/92B6: 29 04        AND #$04
	BEQ .Ret							;C2/92B8: F0 08        BEQ $92C2
	LDA #$01		;Poison Timer				;C2/92BA: A9 01        LDA #$01
	TAX 								;C2/92BC: AA           TAX 
	LDA TargetIndex							;C2/92BD: A5 48        LDA $48
	JSR StopTimer 							;C2/92BF: 20 F0 24     JSR $24F0
.Ret	RTS 								;C2/92C2: 60           RTS 

%org($C292C3)
StopStatus2Timer:
	LDA Param3						;C2/92C3: A5 59        LDA $59
	AND #$80		;Old				;C2/92C5: 29 80        AND #$80
	BEQ +							;C2/92C7: F0 08        BEQ $92D1
	LDA #$06		;Old Timer			;C2/92C9: A9 06        LDA #$06
	TAX 							;C2/92CB: AA           TAX 
	LDA TargetIndex						;C2/92CC: A5 48        LDA $48
	JSR StopTimer 						;C2/92CE: 20 F0 24     JSR $24F0
+	LDA Param3						;C2/92D1: A5 59        LDA $59
	AND #$20		;Paralyze			;C2/92D3: 29 20        AND #$20
	BEQ +							;C2/92D5: F0 08        BEQ $92DF
	LDA #$09		;Paralyze Timer			;C2/92D7: A9 09        LDA #$09
	TAX 							;C2/92D9: AA           TAX 
	LDA TargetIndex						;C2/92DA: A5 48        LDA $48
	JSR StopTimer 						;C2/92DC: 20 F0 24     JSR $24F0
+	LDA Param3						;C2/92DF: A5 59        LDA $59
	AND #$04		;Mute				;C2/92E1: 29 04        AND #$04
	BEQ .Ret						;C2/92E3: F0 08        BEQ $92ED
	LDA #$04		;Mute Timer			;C2/92E5: A9 04        LDA #$04
	TAX 							;C2/92E7: AA           TAX 
	LDA TargetIndex						;C2/92E8: A5 48        LDA $48
	JSR StopTimer 						;C2/92EA: 20 F0 24     JSR $24F0
.Ret	RTS 							;C2/92ED: 60           RTS 

%org($C292EE)
StopStatus3Timer:
	LDA Param3							;C2/92EE: A5 59        LDA $59
	AND #$80		;Reflect				;C2/92F0: 29 80        AND #$80
	BEQ +								;C2/92F2: F0 08        BEQ $92FC
	LDA #$02		;Reflect Timer				;C2/92F4: A9 02        LDA #$02
	TAX 								;C2/92F6: AA           TAX 
	LDA TargetIndex							;C2/92F7: A5 48        LDA $48
	JSR StopTimer 							;C2/92F9: 20 F0 24     JSR $24F0
+	LDA Param3		;Stop					;C2/92FC: A5 59        LDA $59
	AND #$10							;C2/92FE: 29 10        AND #$10
	BEQ +								;C2/9300: F0 08        BEQ $930A
	LDA #$00		;Stop Timer				;C2/9302: A9 00        LDA #$00
	TAX 								;C2/9304: AA           TAX 
	LDA TargetIndex							;C2/9305: A5 48        LDA $48
	JSR StopTimer 							;C2/9307: 20 F0 24     JSR $24F0
+	LDA Param3							;C2/930A: A5 59        LDA $59
	AND #$01		;Regen					;C2/930C: 29 01        AND #$01
	BEQ .Ret							;C2/930E: F0 08        BEQ $9318
	LDA #$07		;Regen Timer				;C2/9310: A9 07        LDA #$07
	TAX 								;C2/9312: AA           TAX 
	LDA TargetIndex							;C2/9313: A5 48        LDA $48
	JSR StopTimer 							;C2/9315: 20 F0 24     JSR $24F0
.Ret	RTS 								;C2/9318: 60           RTS 

%org($C29319)
;This routine is completely unused, as far as I can tell
;**optimize: delete it
StopStatus4Timer:
	LDA Param3							;C2/9319: A5 59        LDA $59
	AND #$08	;HP Leak Status					;C2/931B: 29 08        AND #$08
	BEQ +								;C2/931D: F0 08        BEQ $9327
	LDA #$05	;HP Leak Timer					;C2/931F: A9 05        LDA #$05
	TAX 								;C2/9321: AA           TAX 
	LDA TargetIndex							;C2/9322: A5 48        LDA $48
	JSR StopTimer 							;C2/9324: 20 F0 24     JSR $24F0
+	RTS 								;C2/9327: 60           RTS 

%org($C29328)
;Status 2 Effect Timers (Old/Paralyze/Mute)
;Status in Param3/$59
StartStatus2Timer:
	LDA Param3						;C2/9328: A5 59        LDA $59		Status Bitmask
	AND #$80		;Old				;C2/932A: 29 80        AND #$80		if 80h set
	BEQ +							;C2/932C: F0 05        BEQ $9333		
	LDA #$06						;C2/932E: A9 06        LDA #$06		
	TAX 							;C2/9330: AA           TAX 		Put 6 in X
	BRA .Finish						;C2/9331: 80 14        BRA $9347		and skip rest
+	LDA Param3						;C2/9333: A5 59        LDA $59
	AND #$20		;Paralyze			;C2/9335: 29 20        AND #$20		if 20h set
	BEQ +							;C2/9337: F0 05        BEQ $933E
	LDA #$09						;C2/9339: A9 09        LDA #$09		
	TAX 							;C2/933B: AA           TAX 		put 9 in X
	BRA .Finish						;C2/933C: 80 09        BRA $9347		and skip rest
+	LDA Param3						;C2/933E: A5 59        LDA $59		
	AND #$04		;Mute				;C2/9340: 29 04        AND #$04		if 04h set
	BEQ .Return						;C2/9342: F0 08        BEQ $934C
	LDA #$04						;C2/9344: A9 04        LDA #$04		
	TAX							;C2/9346: AA           TAX		put 4 in X
.Finish	LDA TargetIndex						;C2/9347: A5 48        LDA $48		
	JSR StartTimer 						;C2/9349: 20 FD 24     JSR $24FD		Start Timer (A: #timer, $7B7B: character index)
.Return	RTS 							;C2/934C: 60           RTS 		no timer is started for other values of bitmask

%org($C2934D)
;Status 3 Effect Timers
;Status in $59 / Param3
StartStatus3Timer:
	LDA Param3							;C2/934D: A5 59        LDA $59
	AND #$80		;Reflect				;C2/934F: 29 80        AND #$80
	BEQ +								;C2/9351: F0 05        BEQ $9358
	LDA #$02							;C2/9353: A9 02        LDA #$02
	TAX 								;C2/9355: AA           TAX 
	BRA .Finish							;C2/9356: 80 14        BRA $936C
+	LDA Param3							;C2/9358: A5 59        LDA $59
	AND #$10		;Stop					;C2/935A: 29 10        AND #$10
	BEQ +								;C2/935C: F0 05        BEQ $9363
	LDA #$00							;C2/935E: A9 00        LDA #$00
	TAX 								;C2/9360: AA           TAX 
	BRA .Finish							;C2/9361: 80 09        BRA $936C
+	LDA Param3							;C2/9363: A5 59        LDA $59
	AND #$01		;Regen					;C2/9365: 29 01        AND #$01
	BEQ .Return							;C2/9367: F0 08        BEQ $9371
	LDA #$07							;C2/9369: A9 07        LDA #$07
	TAX 								;C2/936B: AA           TAX 
.Finish	LDA $48								;C2/936C: A5 48        LDA $48
	JSR StartTimer 							;C2/936E: 20 FD 24     JSR $24FD
.Return	RTS 								;C2/9371: 60           RTS 
	
%org($C29372)
;Status 4 Effect Timers (HP Leak and Countdown)
Status4Timer:	
	LDA Param3						;C2/9372: A5 59        LDA $59
	AND #$08		;HP Leak			;C2/9374: 29 08        AND #$08
	BEQ +							;C2/9376: F0 08        BEQ $9380
	LDA #$05						;C2/9378: A9 05        LDA #$05
	TAX							;C2/937A: AA           TAX
	LDA TargetIndex						;C2/937B: A5 48        LDA $48
	JMP StartTimer 						;C2/937D: 4C FD 24     JMP $24FD
	
+	LDA Param3						;C2/9380: A5 59        LDA $59
	AND #$10		;Countdown			;C2/9382: 29 10        AND #$10
	BEQ .Return						;C2/9384: F0 08        BEQ $938E
	LDA #$03						;C2/9386: A9 03        LDA #$03
	TAX 							;C2/9388: AA           TAX 
	LDA TargetIndex						;C2/9389: A5 48        LDA $48
	JSR StartTimer 						;C2/938B: 20 FD 24     JSR $24FD
.Return	RTS 							;C2/938E: 60           RTS 
	
%org($C2938F)	
;Lose one Image
LoseOneImage:
	LDX TargetOffset							;C2/938F: A6 49        LDX $49
	LDA CharStruct.Status2,X						;C2/9391: BD 1B 20     LDA $201B,X
	PHA 									;C2/9394: 48           PHA 
	AND #$03   		;images						;C2/9395: 29 03        AND #$03      (Target Status2 = Image(2) or Image(1))
	SEC 									;C2/9397: 38           SEC 
	SBC #$01								;C2/9398: E9 01        SBC #$01
	STA $0E									;C2/939A: 85 0E        STA $0E
	PLA 									;C2/939C: 68           PLA 
	AND #$FC								;C2/939D: 29 FC        AND #$FC
	ORA $0E									;C2/939F: 05 0E        ORA $0E
	STA CharStruct.Status2,X						;C2/93A1: 9D 1B 20     STA $201B,X   (Lose one Image)
	RTS 									;C2/93A4: 60           RTS 

%org($C293A5)
CatchMonster:
	SEC 							;C2/93A5: 38           SEC 
	LDA TargetIndex						;C2/93A6: A5 48        LDA $48
	SBC #$04						;C2/93A8: E9 04        SBC #$04
	TAX 							;C2/93AA: AA           TAX 
	STX $0E			;monster index 0-7		;C2/93AB: 86 0E        STX $0E
	LDA EncounterInfo.MonsterID,X				;C2/93AD: BD F3 3E     LDA $3EF3,X
	LDX AttackerOffset					;C2/93B0: A6 32        LDX $32
	STA CharStruct.CaughtMonster,X				;C2/93B2: 9D 15 20     STA $2015,X
	LDA AttackerIndex					;C2/93B5: A5 47        LDA $47
	STA $24							;C2/93B7: 85 24        STA $24
	LDA #$14		;20, CharCommand structure size	;C2/93B9: A9 14        LDA #$14
	STA $25							;C2/93BB: 85 25        STA $25
	JSR Multiply_8bit	;Attacker Index * 20		;C2/93BD: 20 F1 00     JSR $00F1
	TDC 							;C2/93C0: 7B           TDC 
	TAY 							;C2/93C1: A8           TAY 
	LDX $26							;C2/93C2: A6 26        LDX $26
-	LDA CharCommands.ID,X					;C2/93C4: BD 5C 37     LDA $375C,X
	CMP #$1D		;Catch				;C2/93C7: C9 1D        CMP #$1D
	BEQ .Found						;C2/93C9: F0 09        BEQ $93D4
	INX 							;C2/93CB: E8           INX 
	INY 							;C2/93CC: C8           INY 
	CPY #$0004						;C2/93CD: C0 04 00     CPY #$0004	;manual dissassembly
	BNE -							;C2/93D0: D0 F2        BNE $93C4	;manual dissassembly
	BEQ .Done						;C2/93D2: F0 0E	       BEQ $93E2	;manual dissassembly
.Found	LDA #$1E		;Release			;C2/93D4: A9 1E        LDA #$1E		;manual dissassembly
	STA CharCommands.ID,X					;C2/93D6: 9D 5C 37     STA $375C,X
	LDA #$08		;enemy by default		;C2/93D9: A9 08        LDA #$08
	STA CharCommands.Targetting,X				;C2/93DB: 9D 68 37     STA $3768,X
	INX 							;C2/93DE: E8           INX 
	INY 							;C2/93DF: C8           INY 
	BRA -							;C2/93E0: 80 E2        BRA $93C4
.Done   LDX TargetOffset                                       	;C2/93E2: A6 49	       LDX $49							
	LDA CharStruct.Status1,X				;C2/93E4: BD 1A 20     LDA $201A,X
	ORA #$80		;"dead"				;C2/93E7: 09 80        ORA #$80
	STA CharStruct.Status1,X				;C2/93E9: 9D 1A 20     STA $201A,X
	LDX $0E			;monster index 0-7		;C2/93EC: A6 0E        LDX $0E
	LDA InactiveMonsters					;C2/93EE: AD 0A 7C     LDA $7C0A
	JSR SetBit_X						;C2/93F1: 20 D6 01     JSR $01D6
	STA InactiveMonsters	;can't be revived		;C2/93F4: 8D 0A 7C     STA $7C0A
	RTS 							;C2/93F7: 60           RTS 
                                                                
%org($C293F8)
;Subtract Defense from Damage and multiply by M
;Attack in $50
;M in $52
;Defense in $54
;result returned in $7B69
CalcBaseDamage:
	REP #$20							;C2/93F8: C2 20        REP #$20
	SEC 								;C2/93FA: 38           SEC 
	LDA Attack							;C2/93FB: A5 50        LDA $50
	SBC Defense  							;C2/93FD: E5 54        SBC $54     Damage = Damage - Defense
	BEQ +								;C2/93FF: F0 02        BEQ $9403
	BCS .ApplyM							;C2/9401: B0 07        BCS $940A
+
	TDC 								;C2/9403: 7B           TDC 
	STA BaseDamage							;C2/9404: 8D 69 7B     STA $7B69   $7B69 = Final Damage = 0 if Defense > Damage
	SEP #$20							;C2/9407: E2 20        SEP #$20
	RTS 								;C2/9409: 60           RTS 

;Multiply Net Damage by M
.ApplyM
	STA $2A								;C2/940A: 85 2A        STA $2A
	LDA M								;C2/940C: A5 52        LDA $52
	BNE +								;C2/940E: D0 01        BNE $9411
	INC       							;C2/9410: 1A           INC         Minimum M = 1
+
	STA $2C								;C2/9411: 85 2C        STA $2C
	TDC 								;C2/9413: 7B           TDC 
	SEP #$20		;unnecessary, Multiply_16bit does this	;C2/9414: E2 20        SEP #$20
	JSR Multiply_16bit 	;$2A*$2C into $2E			;C2/9416: 20 D2 00     JSR $00D2  (Multiply Net Damage * M)
	LDX $2E			;Attack * M				;C2/9419: A6 2E        LDX $2E
	CPX #$270F		;9999					;C2/941B: E0 0F 27     CPX #$270F
	BCC +								;C2/941E: 90 03        BCC $9423
	LDX #$270F							;C2/9420: A2 0F 27     LDX #$270F  Max Damage = 9999
+
	STX BaseDamage							;C2/9423: 8E 69 7B     STX $7B69   $7B69 = Final Damage
	RTS 								;C2/9426: 60           RTS 

%org($C29427)
ProcessCommands:
	LDX #$0006							;C2/9427: A2 06 00     LDX #$0006
-	STZ !CurrentCommand,X		;Clear 7 bytes			;C2/942A: 9E 46 47     STZ $4746,X
	DEX 								;C2/942D: CA           DEX 
	BPL -								;C2/942E: 10 FA        BPL $942A
	LDX #$001F							;C2/9430: A2 1F 00     LDX #$001F
-	STZ BlockType,X			;Clear $20 (32) bytes		;C2/9433: 9E 3C 3C     STZ $3C3C,X
	DEX 				;..includes AegisBlockTarget	;C2/9436: CA           DEX 
	BPL -								;C2/9437: 10 FA        BPL $9433

.ProcessCommand
	LDA AttackerIndex						;C2/9439: A5 47        LDA $47
	JSR CalculateCharOffset						;C2/943B: 20 EC 01     JSR $01EC
	LDA MultiCommand						;C2/943E: AD 2C 7B     LDA $7B2C
	TAX 								;C2/9441: AA           TAX 
	LDA ROMTimes12,X						;C2/9442: BF 55 EE D0  LDA $D0EE55,X
	STA AttackerOffset2						;C2/9446: 85 39        STA $39
	LDA AtkType,X							;C2/9448: BD 2D 7B     LDA $7B2D,X
	BPL .ValidAtkType						;C2/944B: 10 29        BPL $9476
	CMP #$FF							;C2/944D: C9 FF        CMP #$FF
	BNE .TypeFF							;C2/944F: D0 1F        BNE $9470
	LDA MultiCommand						;C2/9451: AD 2C 7B     LDA $7B2C
	BNE .Multi							;C2/9454: D0 17        BNE $946D
	LDA AttackerIndex						;C2/9456: A5 47        LDA $47
	STA ActionAnim.OrigAttacker					;C2/9458: 8D CD 3B     STA $3BCD
	STZ ActionAnim.Flags						;C2/945B: 9C CC 3B     STZ $3BCC
	STZ ActionAnim.OrigTargetBits					;C2/945E: 9C CE 3B     STZ $3BCE
	STZ ActionAnim.TargetBits					;C2/9461: 9C CF 3B     STZ $3BCF
	STZ ActionAnim.ReflectorBits					;C2/9464: 9C D0 3B     STZ $3BD0
	STZ ActionAnim.ReflecteeBits					;C2/9467: 9C D1 3B     STZ $3BD1
	STZ ActionAnim.CoveredBits					;C2/946A: 9C D2 3B     STZ $3BD2
.Multi	JMP .Ret							;C2/946D: 4C FE 94     JMP $94FE

.TypeFF
	INC MultiCommand						;C2/9470: EE 2C 7B     INC $7B2C
	JMP .GoProcessCommand						;C2/9473: 4C FB 94     JMP $94FB
	
.ValidAtkType
	LDA TargetType,X						;C2/9476: BD CC 7A     LDA $7ACC,X
	AND #$10		;weapon proc				;C2/9479: 29 10        AND #$10
	BEQ .NoProc							;C2/947B: F0 0A        BEQ $9487
	LDA AtkMissed							;C2/947D: A5 56        LDA $56
	BEQ .NoProc							;C2/947F: F0 06        BEQ $9487
	JSR DeleteCommand						;C2/9481: 20 80 99     JSR $9980
	JMP .ProcessCommand						;C2/9484: 4C 39 94     JMP $9439
	
.NoProc
	LDA TargetType,X						;C2/9487: BD CC 7A     LDA $7ACC,X
	AND #$EF		;bits other than weapon proc		;C2/948A: 29 EF        AND #$EF
	BNE .TargetTypeBits						;C2/948C: D0 24        BNE $94B2
	LDA MultiCommand						;C2/948E: AD 2C 7B     LDA $7B2C
	ASL 								;C2/9491: 0A           ASL 
	TAX 								;C2/9492: AA           TAX 
	LDA CommandTargetBitmask,X					;C2/9493: BD DC 7A     LDA $7ADC,X
	ORA CommandTargetBitmask+1,X					;C2/9496: 1D DD 7A     ORA $7ADD,X
	BNE .FindTarget		;no targets means target self		;C2/9499: D0 09        BNE $94A4
	LDA AttackerIndex						;C2/949B: A5 47        LDA $47
	STA TargetIndex							;C2/949D: 85 48        STA $48
	STA AnotherTargetIndex						;C2/949F: 8D 45 7B     STA $7B45
	BRA .CollectMP							;C2/94A2: 80 09        BRA $94AD

.FindTarget	
	JSR FindFirstTargetPlus1					;C2/94A4: 20 FF 94     JSR $94FF
	DEC 								;C2/94A7: 3A           DEC 
	STA TargetIndex							;C2/94A8: 85 48        STA $48
	STA AnotherTargetIndex						;C2/94AA: 8D 45 7B     STA $7B45
	
.CollectMP
	JSR CollectMPCost						;C2/94AD: 20 08 9A     JSR $9A08
	BRA .Finish							;C2/94B0: 80 17        BRA $94C9

.TargetTypeBits		;I think this is where a multi target attack is split up 
			;.. into individual calls on an attack type
			;.. but I can't understand how it works
	LDA TargetAdjust						;C2/94B2: AD BC 7A     LDA $7ABC
	BNE +								;C2/94B5: D0 04        BNE $94BB
	LDA #$FF		;-1					;C2/94B7: A9 FF        LDA #$FF
	STA TargetIndex							;C2/94B9: 85 48        STA $48
+	JSR FindFirstTargetPlus1					;C2/94BB: 20 FF 94     JSR $94FF
	CLC 								;C2/94BE: 18           CLC 
	ADC TargetIndex		;dunno where it's set if not -1 	;C2/94BF: 65 48        ADC $48
	STA TargetIndex							;C2/94C1: 85 48        STA $48
	STA AnotherTargetIndex						;C2/94C3: 8D 45 7B     STA $7B45
	JSR CollectMPCost						;C2/94C6: 20 08 9A     JSR $9A08

.Finish
	LDA TargetIndex							;C2/94C9: A5 48        LDA $48
	REP #$20							;C2/94CB: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/94CD: 20 B2 01     JSR $01B2
	STA TargetOffset						;C2/94D0: 85 49        STA $49
	TDC 								;C2/94D2: 7B           TDC 
	SEP #$20							;C2/94D3: E2 20        SEP #$20
	STZ Crit							;C2/94D5: 64 5F        STZ $5F
	STZ FightFlag							;C2/94D7: 9C 40 7B     STZ $7B40
	STZ TargetBitMaskSmall						;C2/94DA: 9C 41 7B     STZ $7B41
	STZ ReflectorBitmask						;C2/94DD: 9C 42 7B     STZ $7B42
	STZ ReflecteeBitmask						;C2/94E0: 9C 43 7B     STZ $7B43
	STZ CoveredBitmask						;C2/94E3: 9C 44 7B     STZ $7B44
	STZ Reflected							;C2/94E6: 9C 46 7B     STZ $7B46
	STZ SpiritFlag							;C2/94E9: 9C 5D 7C     STZ $7C5D
	STZ MagicNull							;C2/94EC: 9C 97 7C     STZ $7C97
	JSR CheckTargetRedirect						;C2/94EF: 20 61 95     JSR $9561
	JSR GetCharStructActionData					;C2/94F2: 20 1A 95     JSR $951A
	JSR SetupAndLaunchAttack	;leads to attack type calcs	;C2/94F5: 20 08 64     JSR $6408
	JSR SetupReactionsAnims						;C2/94F8: 20 61 97     JSR $9761
.GoProcessCommand
	JMP .ProcessCommand						;C2/94FB: 4C 39 94     JMP $9439
.Ret	RTS 								;C2/94FE: 60           RTS 

%org($C294FF)
;This awkward routine finds the first set bit in CommandTargetBitmask
;then returns its index +1
;or the attacker index if none are set (or only the last monster is set, which might be a **bug?)
FindFirstTargetPlus1:
	LDA MultiCommand						;C2/94FF: AD 2C 7B     LDA $7B2C
	ASL 								;C2/9502: 0A           ASL 
	TAX 								;C2/9503: AA           TAX 
	TDC 								;C2/9504: 7B           TDC 
	TAY 								;C2/9505: A8           TAY 
	INY 		;starts at index 1				;C2/9506: C8           INY 
.FindTargetLoop
	ASL CommandTargetBitmask+1,X					;C2/9507: 1E DD 7A     ASL $7ADD,X
	ROL CommandTargetBitmask,X					;C2/950A: 3E DC 7A     ROL $7ADC,X
	BCS .Found							;C2/950D: B0 09        BCS $9518
	INY 								;C2/950F: C8           INY 
	CPY #$000C	;only checks 11 bits due to starting at 1	;C2/9510: C0 0C 00     CPY #$000C
	BNE .FindTargetLoop						;C2/9513: D0 F2        BNE $9507
	LDA AttackerIndex 	;defaults to attacker 			;C2/9515: A5 47        LDA $47
	TAY								;C2/9517: A8           TAY
.Found	TYA 								;C2/9518: 98           TYA 
	RTS 								;C2/9519: 60           RTS 

%org($C2951A)
GetCharStructActionData:
	LDX AttackerOffset						;C2/951A: A6 32        LDX $32
	LDA MultiCommand						;C2/951C: AD 2C 7B     LDA $7B2C
	BEQ +								;C2/951F: F0 0B        BEQ $952C
	REP #$20	;increment X by 5 if Multicommand non-zero	;C2/9521: C2 20        REP #$20
	TXA 		;this uses second set of command data		;C2/9523: 8A           TXA 
	CLC 		;in CharStruct later 				;C2/9524: 18           CLC 
	ADC #$0005							;C2/9525: 69 05 00     ADC #$0005
	TAX 								;C2/9528: AA           TAX 
	TDC 								;C2/9529: 7B           TDC 
	SEP #$20							;C2/952A: E2 20        SEP #$20
+	LDA AttackerOffset2						;C2/952C: A5 39        LDA $39
	TAY 								;C2/952E: A8           TAY 
	LDA CommandOffset						;C2/952F: AD 4D 47     LDA $474D
	STA CurrentCommand.ID						;C2/9532: 8D 46 47     STA $4746
	LDA CharStruct.ActionFlag,X	;or .SecondActionFlag		;C2/9535: BD 56 20     LDA $2056,X
	AND #$20							;C2/9538: 29 20        AND #$20
	BEQ +								;C2/953A: F0 08        BEQ $9544
	LDA CharStruct.SelectedItem,X	;or .SecondSelectedItem		;C2/953C: BD 5A 20     LDA $205A,X
	STA CurrentCommand.Magic					;C2/953F: 8D 47 47     STA $4747
	BRA ++								;C2/9542: 80 0D        BRA $9551
+	LDA CharStruct.ActionFlag,X	;or .SecondActionFlag		;C2/9544: BD 56 20     LDA $2056,X
	AND #$40							;C2/9547: 29 40        AND #$40
	BEQ ++								;C2/9549: F0 06        BEQ $9551
	LDA CharStruct.SelectedItem,X	;or .SecondSelectedItem		;C2/954B: BD 5A 20     LDA $205A,X
	STA CurrentCommand.Item						;C2/954E: 8D 48 47     STA $4748
++	LDA AttackInfo.Category,Y					;C2/9551: B9 FD 79     LDA $79FD,Y
	STA CurrentCommand.Category					;C2/9554: 8D 4A 47     STA $474A
	LDA CharStruct.MonsterTargets,X	; or .Second...			;C2/9557: BD 58 20     LDA $2058,X
	ORA CharStruct.PartyTargets,X					;C2/955A: 1D 59 20     ORA $2059,X
	STA CurrentCommand.Targets					;C2/955D: 8D 4B 47     STA $474B
	RTS 								;C2/9560: 60           RTS 

%org($C29561)
;Checks for Reflect and Cover and changes target if needed
%sub(CheckTargetRedirect)
CheckTargetRedirect:
	LDA AttackerOffset2						;C2/9561: A5 39        LDA $39
	TAX 								;C2/9563: AA           TAX 
	LDA AttackInfo.Category,X					;C2/9564: BD FD 79     LDA $79FD,X
	AND #$0F		;Time/Black/White/Blue Magic		;C2/9567: 29 0F        AND #$0F
	BNE .Magic							;C2/9569: D0 02        BNE $956D
	BRA .Bypass							;C2/956B: 80 11        BRA $957E

.Magic	LDA AttackInfo.MPCost,X	;high bit is reflect			;C2/956D: BD FF 79     LDA $79FF,X
	BPL .CheckReflect						;C2/9570: 10 02        BPL $9574
	BRA .Bypass							;C2/9572: 80 0A        BRA $957E

.CheckReflect
	LDX TargetOffset						;C2/9574: A6 49        LDX $49
	LDA CharStruct.Status3,X					;C2/9576: BD 1C 20     LDA $201C,X
	ORA CharStruct.AlwaysStatus3,X					;C2/9579: 1D 72 20     ORA $2072,X
	BMI .Reflected							;C2/957C: 30 03        BMI $9581
.Bypass	JMP .DoneReflect						;C2/957E: 4C 14 96     JMP $9614

.Reflected
	LDA CharStruct.CharRow,X					;C2/9581: BD 00 20     LDA $2000,X
	AND #$40		;not on the team? 			;C2/9584: 29 40        AND #$40
	BNE .Bypass							;C2/9586: D0 F6        BNE $957E
	LDA CharStruct.Status4,X					;C2/9588: BD 1D 20     LDA $201D,X
	AND #$C1		;Erased/False Image/Hidden		;C2/958B: 29 C1        AND #$C1
	BNE .Bypass							;C2/958D: D0 EF        BNE $957E
	LDA CharStruct.CmdStatus,X					;C2/958F: BD 1E 20     LDA $201E,X
	AND #$10		;Jumping				;C2/9592: 29 10        AND #$10
	BNE .Bypass							;C2/9594: D0 E8        BNE $957E
	INC Reflected							;C2/9596: EE 46 7B     INC $7B46
	STZ $0E			;0					;C2/9599: 64 0E        STZ $0E
	LDA #$03							;C2/959B: A9 03        LDA #$03
	STA $0F			;3 by default reflecting to party 0-3	;C2/959D: 85 0F        STA $0F
	LDA TargetIndex							;C2/959F: A5 48        LDA $48
	STA $10			;Target Index				;C2/95A1: 85 10        STA $10
	CMP #$04		;monster check				;C2/95A3: C9 04        CMP #$04
	BCS +								;C2/95A5: B0 08        BCS $95AF
	LDA #$04							;C2/95A7: A9 04        LDA #$04
	STA $0E			;4					;C2/95A9: 85 0E        STA $0E
	LDA #$0B							;C2/95AB: A9 0B        LDA #$0B
	STA $0F			;11	reflecting to monsters 4-11	;C2/95AD: 85 0F        STA $0F

+	LDA $10			;Target Index				;C2/95AF: A5 10        LDA $10
	CMP #$04							;C2/95B1: C9 04        CMP #$04
	BCC +								;C2/95B3: 90 03        BCC $95B8
	SEC 								;C2/95B5: 38           SEC 
	SBC #$04							;C2/95B6: E9 04        SBC #$04
+	TAX 			;now either party or monster index	;C2/95B8: AA           TAX 
	TDC 								;C2/95B9: 7B           TDC 
	JSR SetBit_X							;C2/95BA: 20 D6 01     JSR $01D6
	STA ReflectorBitmask						;C2/95BD: 8D 42 7B     STA $7B42
	JSR CheckValidTargetsExist2					;C2/95C0: 20 28 97     JSR $9728
	LDA $11			;no valid targets if set		;C2/95C3: A5 11        LDA $11
	BEQ .PickRandomTarget						;C2/95C5: F0 08        BEQ $95CF
	TDC 								;C2/95C7: 7B           TDC 
	STA TargetIndex							;C2/95C8: 85 48        STA $48
	TAX 								;C2/95CA: AA           TAX 
	STX TargetOffset	;give up and zap the first party member	;C2/95CB: 86 49        STX $49
	BRA .DoneReflect						;C2/95CD: 80 45        BRA $9614

.PickRandomTarget
	LDA $0E			;min target index			;C2/95CF: A5 0E        LDA $0E
	TAX 								;C2/95D1: AA           TAX 
	LDA $0F			;max target index			;C2/95D2: A5 0F        LDA $0F
	JSR Random_X_A							;C2/95D4: 20 7C 00     JSR $007C
	STA $10			;new target index			;C2/95D7: 85 10        STA $10
	TAY 								;C2/95D9: A8           TAY 
	LDA ActiveParticipants,Y					;C2/95DA: B9 C2 3E     LDA $3EC2,Y
	BEQ .PickRandomTarget						;C2/95DD: F0 F0        BEQ $95CF
	LDA $10								;C2/95DF: A5 10        LDA $10
	REP #$20							;C2/95E1: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/95E3: 20 B2 01     JSR $01B2
	TAX 								;C2/95E6: AA           TAX 
	STX TargetOffset						;C2/95E7: 86 49        STX $49
	TDC 								;C2/95E9: 7B           TDC 
	SEP #$20							;C2/95EA: E2 20        SEP #$20
	LDA CharStruct.Status1,X					;C2/95EC: BD 1A 20     LDA $201A,X
	AND #$C0		;Stone or Dead				;C2/95EF: 29 C0        AND #$C0
	BNE .PickRandomTarget						;C2/95F1: D0 DC        BNE $95CF
	LDA CharStruct.Status4,X					;C2/95F3: BD 1D 20     LDA $201D,X
	AND #$81		;Erased or Hidden			;C2/95F6: 29 81        AND #$81
	BNE .PickRandomTarget						;C2/95F8: D0 D5        BNE $95CF
	LDA CharStruct.CmdStatus,X					;C2/95FA: BD 1E 20     LDA $201E,X
	AND #$10		;Jumping				;C2/95FD: 29 10        AND #$10
	BNE .PickRandomTarget						;C2/95FF: D0 CE        BNE $95CF
	LDA $10								;C2/9601: A5 10        LDA $10
	STA TargetIndex	;new target index				;C2/9603: 85 48        STA $48
	CMP #$04		;monster check				;C2/9605: C9 04        CMP #$04
	BCC +								;C2/9607: 90 03        BCC $960C
	SEC 								;C2/9609: 38           SEC 
	SBC #$04		;now party or monster index		;C2/960A: E9 04        SBC #$04
+	TAX 								;C2/960C: AA           TAX 
	TDC 								;C2/960D: 7B           TDC 
	JSR SetBit_X							;C2/960E: 20 D6 01     JSR $01D6
	STA ReflecteeBitmask						;C2/9611: 8D 43 7B     STA $7B43

.DoneReflect
	LDA AttackerIndex						;C2/9614: A5 47        LDA $47
	CMP #$04		;monster check				;C2/9616: C9 04        CMP #$04
	BCS .MonAttacker						;C2/9618: B0 01        BCS $961B
	RTS 								;C2/961A: 60           RTS 
									;
.MonAttacker								
	LDA TargetIndex							;C2/961B: A5 48        LDA $48
	CMP #$04		;monster check				;C2/961D: C9 04        CMP #$04
	BCC .MonVsParty							;C2/961F: 90 01        BCC $9622
	RTS 								;C2/9621: 60           RTS 

.MonVsParty
	LDA MultiCommand						;C2/9622: AD 2C 7B     LDA $7B2C
	TAX 								;C2/9625: AA           TAX 
	LDA AtkType,X							;C2/9626: BD 2D 7B     LDA $7B2D,X
	CMP #$01		;Monster Fight				;C2/9629: C9 01        CMP #$01
	BEQ .CheckCoverTarget						;C2/962B: F0 05        BEQ $9632
	CMP #$02		;Monster Specialty			;C2/962D: C9 02        CMP #$02
	BEQ .CheckCoverTarget						;C2/962F: F0 01        BEQ $9632
	RTS 								;C2/9631: 60           RTS 

.CheckCoverTarget
	LDX TargetOffset						;C2/9632: A6 49        LDX $49
	LDA CharStruct.CmdStatus,X					;C2/9634: BD 1E 20     LDA $201E,X
	AND #$10		;Jumping				;C2/9637: 29 10        AND #$10
	BNE .EarlyRet		;don't cover jumpers			;C2/9639: D0 11        BNE $964C
	LDA CharStruct.Status4,X					;C2/963B: BD 1D 20     LDA $201D,X
	AND #$02		;Critical (return if not)		;C2/963E: 29 02        AND #$02
	BEQ .EarlyRet		;only cover critical health		;C2/9640: F0 0A        BEQ $964C
	LDA CharStruct.Status2,X					;C2/9642: BD 1B 20     LDA $201B,X
	ORA CharStruct.Status2,X	;**bug:should be .AlwaysStatus2 ;C2/9645: 1D 1B 20     ORA $201B,X
	AND #$10		;Charm					;C2/9648: 29 10        AND #$10
	BEQ .Cover		;don't cover charmed targets		;C2/964A: F0 01        BEQ $964D
.EarlyRet
	RTS 								;C2/964C: 60           RTS 

.Cover
	LDA EarthWallHP							;C2/964D: AD 1E 7C     LDA $7C1E
	ORA EarthWallHP+1						;C2/9650: 0D 1F 7C     ORA $7C1F
	BNE .EarlyRet		;don't cover if earth wall is doing it	;C2/9653: D0 F7        BNE $964C
	TDC 								;C2/9655: 7B           TDC 
	TAX 								;C2/9656: AA           TAX 
	STX $0E			;index for search loop			;C2/9657: 86 0E        STX $0E
	STX $10			;number of found members that can cover	;C2/9659: 86 10        STX $10

.FindCoverLoop	;searches for party members that can cover, stores their indexes at $2620
	LDY $0E								;C2/965B: A4 0E        LDY $0E
	LDA ActiveParticipants,Y					;C2/965D: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next							;C2/9660: F0 3B        BEQ $969D
	LDA CharStruct.Passives2,X					;C2/9662: BD 21 20     LDA $2021,X
	BPL .Next  		;80h is Cover 				;C2/9665: 10 36        BPL $969D    
	LDA CharStruct.Status1,X					;C2/9667: BD 1A 20     LDA $201A,X  
	ORA CharStruct.AlwaysStatus1,X					;C2/966A: 1D 70 20     ORA $2070,X
	AND #$42		;Stone or Zombie			;C2/966D: 29 42        AND #$42
	BNE .Next							;C2/966F: D0 2C        BNE $969D
	LDA CharStruct.Status2,X					;C2/9671: BD 1B 20     LDA $201B,X
	ORA CharStruct.AlwaysStatus2,X					;C2/9674: 1D 71 20     ORA $2071,X
	AND #$78   		;Sleep/Paralyze/Charm/Berserk		;C2/9677: 29 78        AND #$78     
	BNE .Next							;C2/9679: D0 22        BNE $969D
	LDA CharStruct.Status3,X					;C2/967B: BD 1C 20     LDA $201C,X  
	AND #$10   		;Stop					;C2/967E: 29 10        AND #$10     
	BNE .Next							;C2/9680: D0 1B        BNE $969D
	LDA CharStruct.Status4,X					;C2/9682: BD 1D 20     LDA $201D,X
	AND #$81   		;Erased or Hidden			;C2/9685: 29 81        AND #$81     
	BNE .Next							;C2/9687: D0 14        BNE $969D
	LDA CharStruct.CmdStatus,X					;C2/9689: BD 1E 20     LDA $201E,X
	AND #$10   		;Jumping				;C2/968C: 29 10        AND #$10     
	BNE .Next							;C2/968E: D0 0D        BNE $969D
	LDY $10								;C2/9690: A4 10        LDY $10
	LDA $0E								;C2/9692: A5 0E        LDA $0E
	CMP TargetIndex		;can't cover yourself			;C2/9694: C5 48        CMP $48
	BEQ .Next							;C2/9696: F0 05        BEQ $969D
	STA Temp,Y		;temp area, store coverer's index	;C2/9698: 99 20 26     STA $2620,Y
	INC $10								;C2/969B: E6 10        INC $10
.Next	JSR NextCharOffset						;C2/969D: 20 E0 01     JSR $01E0
	INC $0E								;C2/96A0: E6 0E        INC $0E
	LDA $0E								;C2/96A2: A5 0E        LDA $0E
	CMP #$04							;C2/96A4: C9 04        CMP #$04
	BNE .FindCoverLoop						;C2/96A6: D0 B3        BNE $965B

	LDA $10			;number of found members that can cover	;C2/96A8: A5 10        LDA $10
	BEQ .Ret							;C2/96AA: F0 7B        BEQ $9727
	LDX AttackerOffset						;C2/96AC: A6 32        LDX $32
	PHX 								;C2/96AE: DA           PHX 
	TDC 								;C2/96AF: 7B           TDC 
	TAX 								;C2/96B0: AA           TAX 
	STX $0E			;loop index, 				;C2/96B1: 86 0E        STX $0E
	STX $12			;offset into health storage		;C2/96B3: 86 12        STX $12

.CopyCoverHP
	LDX $0E								;C2/96B5: A6 0E        LDX $0E
	LDA Temp,X		;coverer's index			;C2/96B7: BD 20 26     LDA $2620,X
	JSR CalculateCharOffset						;C2/96BA: 20 EC 01     JSR $01EC
	LDY $12								;C2/96BD: A4 12        LDY $12
	REP #$20							;C2/96BF: C2 20        REP #$20
	LDA CharStruct.CurHP,X						;C2/96C1: BD 06 20     LDA $2006,X
	STA $262A,Y		;temp area, now holds current hp	;C2/96C4: 99 2A 26     STA $262A,Y
	TDC 								;C2/96C7: 7B           TDC 
	SEP #$20							;C2/96C8: E2 20        SEP #$20
	INC $12								;C2/96CA: E6 12        INC $12
	INC $12								;C2/96CC: E6 12        INC $12
	INC $0E								;C2/96CE: E6 0E        INC $0E
	LDA $0E								;C2/96D0: A5 0E        LDA $0E
	CMP $10			;number of members that can cover	;C2/96D2: C5 10        CMP $10
	BNE .CopyCoverHP						;C2/96D4: D0 DF        BNE $96B5
	
	ASL $10			;number of members that can cover * 2	;C2/96D6: 06 10        ASL $10
	TDC 								;C2/96D8: 7B           TDC 
	TAX 								;C2/96D9: AA           TAX 
	STX $0E			;offset into temp health storage	;C2/96DA: 86 0E        STX $0E
	STX $12			;highest found hp 			;C2/96DC: 86 12        STX $12
	STX $14			;index of coverer with highest found hp	;C2/96DE: 86 14        STX $14

.FindHighestHP	;finds the covering party member with the highest health, stores their index in $14
	REP #$20							;C2/96E0: C2 20        REP #$20
	LDX $0E								;C2/96E2: A6 0E        LDX $0E
	LDA $262A,X		;current hp				;C2/96E4: BD 2A 26     LDA $262A,X
	CMP $12			;highest found hp 			;C2/96E7: C5 12        CMP $12
	BCC .NextHP							;C2/96E9: 90 10        BCC $96FB
	STA $12			;highest found hp 			;C2/96EB: 85 12        STA $12
	TDC 								;C2/96ED: 7B           TDC 
	SEP #$20							;C2/96EE: E2 20        SEP #$20
	LDA $0E								;C2/96F0: A5 0E        LDA $0E
	LSR 								;C2/96F2: 4A           LSR 
	TAX 								;C2/96F3: AA           TAX 
	LDA Temp,X		;coverer's index			;C2/96F4: BD 20 26     LDA $2620,X
	STA $14			;index of coverer with highest found hp	;C2/96F7: 85 14        STA $14
	BRA .NextHP8b							;C2/96F9: 80 03        BRA $96FE
.NextHP
	TDC 								;C2/96FB: 7B           TDC 
	SEP #$20							;C2/96FC: E2 20        SEP #$20
.NextHP8b
	INC $0E								;C2/96FE: E6 0E        INC $0E
	INC $0E								;C2/9700: E6 0E        INC $0E
	LDA $0E								;C2/9702: A5 0E        LDA $0E
	CMP $10			;number of members that can cover * 2	;C2/9704: C5 10        CMP $10
	BNE .FindHighestHP						;C2/9706: D0 D8        BNE $96E0

	LDA TargetIndex							;C2/9708: A5 48        LDA $48
	TAX 								;C2/970A: AA           TAX 
	TDC 								;C2/970B: 7B           TDC 
	JSR SetBit_X							;C2/970C: 20 D6 01     JSR $01D6
	STA CoveredBitmask						;C2/970F: 8D 44 7B     STA $7B44
	LDA $14			;index of coverer with highest found hp	;C2/9712: A5 14        LDA $14
	STA TargetIndex	;now the new target				;C2/9714: 85 48        STA $48
	STA AnotherTargetIndex						;C2/9716: 8D 45 7B     STA $7B45
	REP #$20							;C2/9719: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/971B: 20 B2 01     JSR $01B2
	TAX 								;C2/971E: AA           TAX 
	STX TargetOffset						;C2/971F: 86 49        STX $49
	TDC 								;C2/9721: 7B           TDC 
	SEP #$20							;C2/9722: E2 20        SEP #$20
	PLX 			;Restore attacker offset, though	;C2/9724: FA           PLX 
	STX AttackerOffset	; not sure if it was ever changed?	;C2/9725: 86 32        STX $32
.Ret	RTS 								;C2/9727: 60           RTS 
%endsub()

%org($C29728)
;Makes sure there is a valid target available
;near duplicate of $4BD7 routine, just uses different memory locations to pass info
%sub(CheckValidTargetsExist2)
CheckValidTargetsExist2:
	LDA $0F			;Ending Target Index			;C2/9728: A5 0F        LDA $0F
	TAY 								;C2/972A: A8           TAY 
	INY 								;C2/972B: C8           INY 
	STY $10			;Ending Target Index+1 (now 16-bit)	;C2/972C: 84 10        STY $10
	STZ $11								;C2/972E: 64 11        STZ $11
	LDA $0E			;Starting Target Index			;C2/9730: A5 0E        LDA $0E
	TAY 								;C2/9732: A8           TAY 
	REP #$20							;C2/9733: C2 20        REP #$20
	JSR ShiftMultiply_128						;C2/9735: 20 B2 01     JSR $01B2
	TAX 			;Target Offset				;C2/9738: AA           TAX 
	TDC 								;C2/9739: 7B           TDC 
	SEP #$20							;C2/973A: E2 20        SEP #$20
	
.FindValidTargetLoop
	LDA ActiveParticipants,Y					;C2/973C: B9 C2 3E     LDA $3EC2,Y
	BEQ .Next							;C2/973F: F0 15        BEQ $9756
	LDA CharStruct.Status1,X					;C2/9741: BD 1A 20     LDA $201A,X
	AND #$C0		;Stone/Dead				;C2/9744: 29 C0        AND #$C0
	BNE .Next							;C2/9746: D0 0E        BNE $9756
	LDA CharStruct.Status4,X					;C2/9748: BD 1D 20     LDA $201D,X
	AND #$81		;Erased/Hidden				;C2/974B: 29 81        AND #$81
	BNE .Next							;C2/974D: D0 07        BNE $9756
	LDA CharStruct.CmdStatus,X					;C2/974F: BD 1E 20     LDA $201E,X
	AND #$10		;Jumping				;C2/9752: 29 10        AND #$10
	BEQ .Ret							;C2/9754: F0 0A        BEQ $9760
.Next	JSR NextCharOffset	;X+128 for next character offset	;C2/9756: 20 E0 01     JSR $01E0
	INY 								;C2/9759: C8           INY 
	CPY $10								;C2/975A: C4 10        CPY $10
	BNE .FindValidTargetLoop					;C2/975C: D0 DE        BNE $973C
	INC $11								;C2/975E: E6 11        INC $11
.Ret	RTS 								;C2/9760: 60           RTS 
%endsub()

%org($C29761)
;saves action data so reactions can be checked later
;also sets up animation flags, and anim targetting changes when redirected by cover or reflect
SetupReactionsAnims:
	JSR CopyReactionInfo							;C2/9761: 20 85 98     JSR $9885
	LDA MultiCommand							;C2/9764: AD 2C 7B     LDA $7B2C
	STA $24									;C2/9767: 85 24        STA $24
	LDA #$07								;C2/9769: A9 07        LDA #$07
	STA $25									;C2/976B: 85 25        STA $25
	JSR Multiply_8bit							;C2/976D: 20 F1 00     JSR $00F1
	LDY $26				;MultiCommand * 7			;C2/9770: A4 26        LDY $26
	LDA CurrentCommand.Magic						;C2/9772: AD 47 47     LDA $4747
	CMP #$81			;Monster Specialty			;C2/9775: C9 81        CMP #$81
	BNE +									;C2/9777: D0 08        BNE $9781
	LDA ActionAnim.Flags,Y							;C2/9779: B9 CC 3B     LDA $3BCC,Y
	ORA #$01								;C2/977C: 09 01        ORA #$01
	STA ActionAnim.Flags,Y							;C2/977E: 99 CC 3B     STA $3BCC,Y
+	LDA UnknownReaction		;set by lots of things			;C2/9781: AD FB 7B     LDA $7BFB
	BEQ +									;C2/9784: F0 08        BEQ $978E
	LDA ActionAnim.Flags,Y							;C2/9786: B9 CC 3B     LDA $3BCC,Y
	ORA #$20								;C2/9789: 09 20        ORA #$20
	STA ActionAnim.Flags,Y							;C2/978B: 99 CC 3B     STA $3BCC,Y
+	LDA SpiritFlag								;C2/978E: AD 5D 7C     LDA $7C5D
	BEQ +									;C2/9791: F0 08        BEQ $979B
	LDA ActionAnim.Flags,Y							;C2/9793: B9 CC 3B     LDA $3BCC,Y
	ORA #$02								;C2/9796: 09 02        ORA #$02
	STA ActionAnim.Flags,Y							;C2/9798: 99 CC 3B     STA $3BCC,Y
+	LDA AttackerIndex							;C2/979B: A5 47        LDA $47
	CMP #$04			;monster check				;C2/979D: C9 04        CMP #$04
	BCC +									;C2/979F: 90 0D        BCC $97AE
	LDA ActionAnim.Flags,Y							;C2/97A1: B9 CC 3B     LDA $3BCC,Y
	ORA #$80								;C2/97A4: 09 80        ORA #$80
	STA ActionAnim.Flags,Y							;C2/97A6: 99 CC 3B     STA $3BCC,Y
	SEC 									;C2/97A9: 38           SEC 
	LDA AttackerIndex							;C2/97AA: A5 47        LDA $47
	SBC #$04								;C2/97AC: E9 04        SBC #$04
+	STA ActionAnim.OrigAttacker,Y	;party or monster index			;C2/97AE: 99 CD 3B     STA $3BCD,Y
	LDA AnotherTargetIndex							;C2/97B1: AD 45 7B     LDA $7B45
	CMP #$04			;monster check				;C2/97B4: C9 04        CMP #$04
	BCC +									;C2/97B6: 90 0E        BCC $97C6
	LDA ActionAnim.Flags,Y							;C2/97B8: B9 CC 3B     LDA $3BCC,Y
	ORA #$40								;C2/97BB: 09 40        ORA #$40
	STA ActionAnim.Flags,Y							;C2/97BD: 99 CC 3B     STA $3BCC,Y
	SEC 									;C2/97C0: 38           SEC 
	LDA AnotherTargetIndex							;C2/97C1: AD 45 7B     LDA $7B45
	SBC #$04								;C2/97C4: E9 04        SBC #$04
+	TAX 									;C2/97C6: AA           TAX 
	LDA ActionAnim.OrigTargetBits,Y						;C2/97C7: B9 CE 3B     LDA $3BCE,Y
	JSR SetBit_X								;C2/97CA: 20 D6 01     JSR $01D6
	STA ActionAnim.OrigTargetBits,Y						;C2/97CD: 99 CE 3B     STA $3BCE,Y
	LDA Crit								;C2/97D0: A5 5F        LDA $5F
	ORA TargetDead								;C2/97D2: 05 61        ORA $61
	BEQ +									;C2/97D4: F0 08        BEQ $97DE
	LDA ActionAnim.Flags,Y							;C2/97D6: B9 CC 3B     LDA $3BCC,Y
	ORA #$10								;C2/97D9: 09 10        ORA #$10
	STA ActionAnim.Flags,Y							;C2/97DB: 99 CC 3B     STA $3BCC,Y
+	LDA FightFlag								;C2/97DE: AD 40 7B     LDA $7B40
	BEQ +									;C2/97E1: F0 08        BEQ $97EB
	LDA ActionAnim.Flags,Y							;C2/97E3: B9 CC 3B     LDA $3BCC,Y
	ORA #$08								;C2/97E6: 09 08        ORA #$08
	STA ActionAnim.Flags,Y							;C2/97E8: 99 CC 3B     STA $3BCC,Y
+	LDA Reflected								;C2/97EB: AD 46 7B     LDA $7B46
	BNE .Reflect								;C2/97EE: D0 0B        BNE $97FB
	LDA ActionAnim.TargetBits,Y						;C2/97F0: B9 CF 3B     LDA $3BCF,Y
	ORA TargetBitMaskSmall							;C2/97F3: 0D 41 7B     ORA $7B41
	STA ActionAnim.TargetBits,Y						;C2/97F6: 99 CF 3B     STA $3BCF,Y
	BRA .DoneReflect							;C2/97F9: 80 37        BRA $9832
.Reflect
	LDA AnotherTargetIndex							;C2/97FB: AD 45 7B     LDA $7B45
	STA TargetIndex								;C2/97FE: 85 48        STA $48
	LDA ActionAnim.ReflectorBits,Y						;C2/9800: B9 D0 3B     LDA $3BD0,Y
	ORA ReflectorBitmask							;C2/9803: 0D 42 7B     ORA $7B42
	STA ActionAnim.ReflectorBits,Y						;C2/9806: 99 D0 3B     STA $3BD0,Y
	LDA TargetBitMaskSmall							;C2/9809: AD 41 7B     LDA $7B41
	BEQ .DoneReflect							;C2/980C: F0 24        BEQ $9832
	LDA MultiCommand							;C2/980E: AD 2C 7B     LDA $7B2C
	JSR ShiftMultiply_8							;C2/9811: 20 B6 01     JSR $01B6
	STA $0F			;MultiCommand*8					;C2/9814: 85 0F        STA $0F
	LDA TargetIndex								;C2/9816: A5 48        LDA $48
	CMP #$04		;monster check					;C2/9818: C9 04        CMP #$04
	BCC +									;C2/981A: 90 03        BCC $981F
	SEC 									;C2/981C: 38           SEC 
	SBC #$04		;monster or party index				;C2/981D: E9 04        SBC #$04
+	CLC 									;C2/981F: 18           CLC 
	ADC $0F									;C2/9820: 65 0F        ADC $0F
	TAX 			;Multicommand*8 + party/monster index		;C2/9822: AA           TAX 
	LDA ReflecteeBitmask							;C2/9823: AD 43 7B     LDA $7B43
	STA CounterReflecteeTable,X						;C2/9826: 9D 49 7B     STA $7B49,X
	LDA ActionAnim.ReflecteeBits,Y						;C2/9829: B9 D1 3B     LDA $3BD1,Y
	ORA ReflecteeBitmask							;C2/982C: 0D 43 7B     ORA $7B43
	STA ActionAnim.ReflecteeBits,Y						;C2/982F: 99 D1 3B     STA $3BD1,Y
.DoneReflect
	LDA CoveredBitmask							;C2/9832: AD 44 7B     LDA $7B44
	STA ActionAnim.CoveredBits,Y						;C2/9835: 99 D2 3B     STA $3BD2,Y
	LDA MultiCommand							;C2/9838: AD 2C 7B     LDA $7B2C
	TAX 									;C2/983B: AA           TAX 
	LDA MultiTarget,X							;C2/983C: BD 1C 7B     LDA $7B1C,X
	BEQ .SingleTarget							;C2/983F: F0 08        BEQ $9849
	INC TargetAdjust							;C2/9841: EE BC 7A     INC $7ABC
	CMP TargetAdjust							;C2/9844: CD BC 7A     CMP $7ABC
	BNE .Ret								;C2/9847: D0 3B        BNE $9884

.SingleTarget
	LDA ActionAnim.TargetBits,Y						;C2/9849: B9 CF 3B     LDA $3BCF,Y
	BNE .Finish								;C2/984C: D0 2A        BNE $9878

	;this section is used when there's no target data
	;I think it hides the message box with the ability name when there is no target
	;but only for certain messages which are checked in a rom table
	JSR SetupMsgBoxIndexes							;C2/984E: 20 65 99     JSR $9965
	STZ $0E									;C2/9851: 64 0E        STZ $0E
	LDA MessageBoxes,X							;C2/9853: BD 5F 3C     LDA $3C5F,X
	LSR 									;C2/9856: 4A           LSR 
	ROR $0E									;C2/9857: 66 0E        ROR $0E
	LSR 									;C2/9859: 4A           LSR 
	ROR $0E									;C2/985A: 66 0E        ROR $0E
	LSR 									;C2/985C: 4A           LSR 
	ROR $0E			;low 3 bits of message box in high 3 of this	;C2/985D: 66 0E        ROR $0E
	TAX 			;message box data/8 (selects byte in table)	;C2/985F: AA           TAX 
	LDA ROMHideMessages,X							;C2/9860: BF F6 EE D0  LDA $D0EEF6,X
	PHA 									;C2/9864: 48           PHA 
	LDA $0E									;C2/9865: A5 0E        LDA $0E
	JSR ShiftDivide_32	;5 LSRs, now bit selection for table byte	;C2/9867: 20 BD 01     JSR $01BD
	TAX 									;C2/986A: AA           TAX 
	PLA 									;C2/986B: 68           PLA 
	JSR SelectBit_X								;C2/986C: 20 DB 01     JSR $01DB
	BNE .Finish								;C2/986F: D0 07        BNE $9878
	JSR SetupMsgBoxIndexes							;C2/9871: 20 65 99     JSR $9965
	TDC 									;C2/9874: 7B           TDC 
	STA MessageBoxes,X							;C2/9875: 9D 5F 3C     STA $3C5F,X

.Finish	INC MultiCommand							;C2/9878: EE 2C 7B     INC $7B2C
	INC MultiDamage								;C2/987B: EE FB 79     INC $79FB
	STZ TargetAdjust							;C2/987E: 9C BC 7A     STZ $7ABC
	STZ MPTaken								;C2/9881: 9C 08 7C     STZ $7C08
.Ret	RTS 									;C2/9884: 60           RTS 

%org($C29885)
;Copies information about the last attack to the character structure
;for use for reactions afterward
;there's only space for the first 2 actions to be countered
%sub(CopyReactionInfo)
CopyReactionInfo:
	LDX TargetOffset							;C2/9885: A6 49        LDX $49
	LDA MultiCommand							;C2/9887: AD 2C 7B     LDA $7B2C
	BNE .Multi								;C2/988A: D0 2C        BNE $98B8
	LDA CurrentCommand.ID							;C2/988C: AD 46 47     LDA $4746
	STA CharStruct.Reaction1Command,X					;C2/988F: 9D 46 20     STA $2046,X
	LDA CurrentCommand.Magic						;C2/9892: AD 47 47     LDA $4747
	STA CharStruct.Reaction1Magic,X						;C2/9895: 9D 47 20     STA $2047,X
	LDA CurrentCommand.Item							;C2/9898: AD 48 47     LDA $4748
	STA CharStruct.Reaction1Item,X						;C2/989B: 9D 48 20     STA $2048,X
	LDA CurrentCommand.Element						;C2/989E: AD 49 47     LDA $4749
	STA CharStruct.Reaction1Element,X					;C2/98A1: 9D 49 20     STA $2049,X
	LDA CurrentCommand.Category						;C2/98A4: AD 4A 47     LDA $474A
	STA CharStruct.Reaction1Category,X					;C2/98A7: 9D 4A 20     STA $204A,X
	LDA CurrentCommand.Targets						;C2/98AA: AD 4B 47     LDA $474B
	STA CharStruct.Reaction1Targets,X					;C2/98AD: 9D 4B 20     STA $204B,X
	LDA CurrentCommand.Damage						;C2/98B0: AD 4C 47     LDA $474C
	STA CharStruct.Reaction1Damage,X					;C2/98B3: 9D 4C 20     STA $204C,X
	BRA .Ret								;C2/98B6: 80 2A        BRA $98E2
.Multi	
	LDA CurrentCommand.ID							;C2/98B8: AD 46 47     LDA $4746
	STA CharStruct.Reaction2Command,X					;C2/98BB: 9D 4D 20     STA $204D,X
	LDA CurrentCommand.Magic						;C2/98BE: AD 47 47     LDA $4747
	STA CharStruct.Reaction2Magic,X						;C2/98C1: 9D 4E 20     STA $204E,X
	LDA CurrentCommand.Item							;C2/98C4: AD 48 47     LDA $4748
	STA CharStruct.Reaction2Item,X						;C2/98C7: 9D 4F 20     STA $204F,X
	LDA CurrentCommand.Element						;C2/98CA: AD 49 47     LDA $4749
	STA CharStruct.Reaction2Element,X					;C2/98CD: 9D 7B 20     STA $207B,X
	LDA CurrentCommand.Category						;C2/98D0: AD 4A 47     LDA $474A
	STA CharStruct.Reaction2Category,X					;C2/98D3: 9D 7C 20     STA $207C,X
	LDA CurrentCommand.Targets						;C2/98D6: AD 4B 47     LDA $474B
	STA CharStruct.Reaction2Targets,X					;C2/98D9: 9D 7D 20     STA $207D,X
	LDA CurrentCommand.Damage						;C2/98DC: AD 4C 47     LDA $474C
	STA CharStruct.Reaction2Damage,X					;C2/98DF: 9D 7E 20     STA $207E,X
.Ret	RTS 									;C2/98E2: 60           RTS 
%endsub()

%org($C298E3)
;creates GFX command $00,FC,06,00,00
;(called at the end of a lot of commands)
GFXCmdDamageNumbers:
	JSR FindOpenGFXQueueSlot						;C2/98E3: 20 FA 98     JSR $98FA
	STZ GFXQueue.Flag,X							;C2/98E6: 9E 4C 38     STZ $384C,X
	LDA #$FC								;C2/98E9: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X							;C2/98EB: 9D 4D 38     STA $384D,X
	LDA #$06								;C2/98EE: A9 06        LDA #$06
	STA GFXQueue.Type,X							;C2/98F0: 9D 4E 38     STA $384E,X
	STZ GFXQueue.Data1,X							;C2/98F3: 9E 4F 38     STZ $384F,X
	STZ GFXQueue.Data2,X							;C2/98F6: 9E 50 38     STZ $3850,X
	RTS 									;C2/98F9: 60           RTS 

;Either uses NextGFXQueueSlot, or searches for the first $FF entry, depending on SearchGFXQueue
;Returns slot offset in X
%org($C298FA)
FindOpenGFXQueueSlot:
	LDA SearchGFXQueue							;C2/98FA: AD 03 7C     LDA $7C03	
	BNE .SearchGFXSlots							;C2/98FD: D0 13        BNE $9912	
	LDA NextGFXQueueSlot							;C2/98FF: AD F9 79     LDA $79F9	
	ASL 									;C2/9902: 0A           ASL 		
	TAX 									;C2/9903: AA           TAX 		
	REP #$20								;C2/9904: C2 20        REP #$20		
	LDA ROMTimes5w,X							;C2/9906: BF 89 ED D0  LDA $D0ED89,X	
	TAX 									;C2/990A: AA           TAX 		
	TDC 									;C2/990B: 7B           TDC 		
	SEP #$20								;C2/990C: E2 20        SEP #$20		
	INC NextGFXQueueSlot							;C2/990E: EE F9 79     INC $79F9	
	RTS 			;return with X as the GFXQueue offset		;C2/9911: 60           RTS 

;Finds first queued command with value $FF (empty slot?)
.SearchGFXSlots
	TDC 									;C2/9912: 7B           TDC 		
	TAX 									;C2/9913: AA           TAX 		
.NextCommand	
	LDA GFXQueue.Flag,X							;C2/9914: BD 4C 38     LDA $384C,X	
	CMP #$FF								;C2/9917: C9 FF        CMP #$FF		
	BEQ .Ret								;C2/9919: F0 07        BEQ $9922	
	INX 			;GFXQueue entries are 5 bytes long		;C2/991B: E8           INX 		
	INX 									;C2/991C: E8           INX 
	INX 									;C2/991D: E8           INX 
	INX 									;C2/991E: E8           INX 
	INX 									;C2/991F: E8           INX 
	BRA .NextCommand							;C2/9920: 80 F2        BRA $9914	
.Ret	RTS			;return with X as the GFXQueue offset		;C2/9922: 60           RTS		

%org($C29923)
SelectCurrentProcSequence:
	LDA ProcSequence						;C2/9923: AD FA 79     LDA $79FA
	TAX 								;C2/9926: AA           TAX 
	LDA ROMTimes12,X						;C2/9927: BF 55 EE D0  LDA $D0EE55,X
	TAY 								;C2/992B: A8           TAY 
	STY $0C								;C2/992C: 84 0C        STY $0C
	RTS 								;C2/992E: 60           RTS 

%org($C2992F)
;Displays an attack's name
;Params: $2620: String Table
;	 $2621: String ID
;creates GFX command 00,FC,04,<$2620>,<$2621>
GFXCmdAttackNameFromTemp:
	JSR FindOpenGFXQueueSlot						;C2/992F: 20 FA 98     JSR $98FA
	STZ GFXQueue.Flag,X							;C2/9932: 9E 4C 38     STZ $384C,X
	LDA #$FC	;exec graphics command					;C2/9935: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X							;C2/9937: 9D 4D 38     STA $384D,X
	LDA #$04	;display attack name					;C2/993A: A9 04        LDA #$04
	STA GFXQueue.Type,X							;C2/993C: 9D 4E 38     STA $384E,X
	LDA Temp	;string table						;C2/993F: AD 20 26     LDA $2620
	STA GFXQueue.Data1,X							;C2/9942: 9D 4F 38     STA $384F,X
	LDA Temp+1	;string id						;C2/9945: AD 21 26     LDA $2621
	STA GFXQueue.Data2,X							;C2/9948: 9D 50 38     STA $3850,X
	RTS 									;C2/994B: 60           RTS 

%org($C2994C)
;Displays a battle message
;also advances message box structure to the next set of message boxes
GFXCmdMessage:
	JSR FindOpenGFXQueueSlot  					;C2/994C: 20 FA 98     JSR $98FA   
	STZ GFXQueue.Flag,X						;C2/994F: 9E 4C 38     STZ $384C,X
	LDA #$FC	;exec graphics command				;C2/9952: A9 FC        LDA #$FC
	STA GFXQueue.Cmd,X						;C2/9954: 9D 4D 38     STA $384D,X
	LDA #$05	;						;C2/9957: A9 05        LDA #$05
	STA GFXQueue.Type,X						;C2/9959: 9D 4E 38     STA $384E,X
	STZ GFXQueue.Data1,X						;C2/995C: 9E 4F 38     STZ $384F,X
	STZ GFXQueue.Data2,X						;C2/995F: 9E 50 38     STZ $3850,X
	JMP NextMessageBoxSet						;C2/9962: 4C 56 03     JMP $0356

%org($C29965)
;(returns Y=$7B2C*12 and X=$7B2C*24)
;sets up the indexes into the table of messages to be displayed
;this offsets them into the correct table for each command of x-magic type multi-commands
SetupMsgBoxIndexes:
	LDA MultiCommand							;C2/9965: AD 2C 7B     LDA $7B2C	(??) (index of some sort)
	JSR ShiftMultiply_4							;C2/9968: 20 B7 01     JSR $01B7	(multiply by 4)
	STA $0E									;C2/996B: 85 0E        STA $0E		(store to $0E)
	ASL 									;C2/996D: 0A           ASL 		(multiply by 2)
	CLC 									;C2/996E: 18           CLC 		.
	ADC $0E									;C2/996F: 65 0E        ADC $0E		.
	TAY 									;C2/9971: A8           TAY 		(Y is now $7B2C*4 + $7B2C*8)
	LDA MultiCommand							;C2/9972: AD 2C 7B     LDA $7B2C		
	JSR ShiftMultiply_8							;C2/9975: 20 B6 01     JSR $01B6	(multiply by 8)
	STA $0E									;C2/9978: 85 0E        STA $0E		($0E is now $7B2C*8)
	ASL 									;C2/997A: 0A           ASL 		(multiply by 2)
	CLC 									;C2/997B: 18           CLC 
	ADC $0E									;C2/997C: 65 0E        ADC $0E		
	TAX 									;C2/997E: AA           TAX 		(X is now $7B2C*16+$7B2C*8)
	RTS 									;C2/997F: 60           RTS

%org($C29980)
DeleteCommand:
	LDA MultiCommand							;C2/9980: AD 2C 7B     LDA $7B2C
	TAX 									;C2/9983: AA           TAX 
	LDA ROMTimes12,X							;C2/9984: BF 55 EE D0  LDA $D0EE55,X
	TAY 									;C2/9988: A8           TAY 
	LDA MultiCommand							;C2/9989: AD 2C 7B     LDA $7B2C
	INC 									;C2/998C: 1A           INC 
	TAX 									;C2/998D: AA           TAX 
	LDA ROMTimes12,X							;C2/998E: BF 55 EE D0  LDA $D0EE55,X
	TAX 									;C2/9992: AA           TAX 

.AttackInfoCopyLoop		;shifts all of the AttackInfo Structs down, deleting the one indexed by Multicommand 						
	LDA !AttackInfo,X							;C2/9993: BD FC 79     LDA $79FC,X
	STA !AttackInfo,Y							;C2/9996: 99 FC 79     STA $79FC,Y
	INX 									;C2/9999: E8           INX 
	INY 									;C2/999A: C8           INY 
	CPX #$00C0		;192, 16 * 12 byte AttackInfo structs		;C2/999B: E0 C0 00     CPX #$00C0
	BNE .AttackInfoCopyLoop							;C2/999E: D0 F3        BNE $9993
	
	LDA MultiCommand							;C2/99A0: AD 2C 7B     LDA $7B2C
	TAY 									;C2/99A3: A8           TAY 
	TYX 									;C2/99A4: BB           TYX 
	INX 									;C2/99A5: E8           INX 

.CopyTypeInfoLoop		;shifts down, deleting the one indexed by Multicommand
	LDA AtkType,X								;C2/99A6: BD 2D 7B     LDA $7B2D,X
	STA AtkType,Y								;C2/99A9: 99 2D 7B     STA $7B2D,Y
	LDA MultiTarget,X							;C2/99AC: BD 1C 7B     LDA $7B1C,X
	STA MultiTarget,Y							;C2/99AF: 99 1C 7B     STA $7B1C,Y
	LDA TargetType,X							;C2/99B2: BD CC 7A     LDA $7ACC,X
	STA TargetType,Y							;C2/99B5: 99 CC 7A     STA $7ACC,Y
	INX 									;C2/99B8: E8           INX 
	INY 									;C2/99B9: C8           INY 
	CPX #$0010								;C2/99BA: E0 10 00     CPX #$0010
	BNE .CopyTypeInfoLoop							;C2/99BD: D0 E7        BNE $99A6
	
	LDA MultiCommand							;C2/99BF: AD 2C 7B     LDA $7B2C
	ASL 									;C2/99C2: 0A           ASL 
	TAY 									;C2/99C3: A8           TAY 
	TYX 									;C2/99C4: BB           TYX 
	INX 									;C2/99C5: E8           INX 
	INX 									;C2/99C6: E8           INX 

.CopyTargetBitmaskLoop		;shifts down, deleting the one indexed by Multicommand
	LDA CommandTargetBitmask,X						;C2/99C7: BD DC 7A     LDA $7ADC,X
	STA CommandTargetBitmask,Y						;C2/99CA: 99 DC 7A     STA $7ADC,Y
	LDA CommandTargetBitmask+1,X						;C2/99CD: BD DD 7A     LDA $7ADD,X
	STA CommandTargetBitmask+1,Y						;C2/99D0: 99 DD 7A     STA $7ADD,Y
	INX 									;C2/99D3: E8           INX 
	INX 									;C2/99D4: E8           INX 
	INY 									;C2/99D5: C8           INY 
	INY 									;C2/99D6: C8           INY 
	CPX #$0020								;C2/99D7: E0 20 00     CPX #$0020
	BNE .CopyTargetBitmaskLoop						;C2/99DA: D0 EB        BNE $99C7

				;wtf
				;shifts the entire action queue down by 10 bytes (which is 2 actions)
				;starting position depends on MultiCommand value but only seems valid for 1-3
	LDA MultiCommand							;C2/99DC: AD 2C 7B     LDA $7B2C
	DEC 									;C2/99DF: 3A           DEC 
	BNE +									;C2/99E0: D0 08        BNE $99EA
	LDY #$000A		;10						;C2/99E2: A0 0A 00     LDY #$000A
	LDX #$0014		;20						;C2/99E5: A2 14 00     LDX #$0014
	BRA .CopyActionLoop	;MultiCommand was 1				;C2/99E8: 80 11        BRA $99FB
+	DEC 									;C2/99EA: 3A           DEC 
	BNE +++									;C2/99EB: D0 08        BNE $99F5
	LDY #$0014		;20						;C2/99ED: A0 14 00     LDY #$0014
	LDX #$001E		;30						;C2/99F0: A2 1E 00     LDX #$001E
	BRA .CopyActionLoop	;MultiCommand was 2				;C2/99F3: 80 06        BRA $99FB
+++	LDY #$001E		;30						;C2/99F5: A0 1E 00     LDY #$001E
	LDX #$0028		;40						;C2/99F8: A2 28 00     LDX #$0028
	;MultiCommand was something else, code seems to assume 3
.CopyActionLoop
	LDA !GFXQueue,X								;C2/99FB: BD 4C 38     LDA $384C,X
	STA !GFXQueue,Y								;C2/99FE: 99 4C 38     STA $384C,Y
	INX 									;C2/9A01: E8           INX 
	INY 									;C2/9A02: C8           INY 
	CMP #$FF		;first byte of an empty command slot		;C2/9A03: C9 FF        CMP #$FF
	BNE .CopyActionLoop							;C2/9A05: D0 F4        BNE $99FB
	RTS 									;C2/9A07: 60           RTS 


%org($C29A08)
CollectMPCost:
	LDA AttackerOffset2							;C2/9A08: A5 39        LDA $39
	TAX 									;C2/9A0A: AA           TAX 
	LDA AttackInfo.Misc,X							;C2/9A0B: BD FE 79     LDA $79FE,X
	AND #$07		;Meteo number of hits?				;C2/9A0E: 29 07        AND #$07
	BNE .Ret								;C2/9A10: D0 4B        BNE $9A5D
	LDA AttackInfo.MPCost,X							;C2/9A12: BD FF 79     LDA $79FF,X
	AND #$7F		;just MP cost					;C2/9A15: 29 7F        AND #$7F
	TAX 									;C2/9A17: AA           TAX 
	STX $0E			;MP Cost					;C2/9A18: 86 0E        STX $0E
	LDX AttackerOffset							;C2/9A1A: A6 32        LDX $32
	LDA CharStruct.ArmorProperties,X					;C2/9A1C: BD 39 20     LDA $2039,X   
	AND #$08   		;Half MP					;C2/9A1F: 29 08        AND #$08      
	BEQ +									;C2/9A21: F0 06        BEQ $9A29
	LSR $0E    		;Halved MP cost					;C2/9A23: 46 0E        LSR $0E       
	BCC +									;C2/9A25: 90 02        BCC $9A29
	INC $0E    		;Min 1						;C2/9A27: E6 0E        INC $0E       
+	LDA CharStruct.ActionFlag,X						;C2/9A29: BD 56 20     LDA $2056,X
	AND #$01		;costs mp					;C2/9A2C: 29 01        AND #$01
	BEQ .Ret								;C2/9A2E: F0 2D        BEQ $9A5D
	LDA MPTaken								;C2/9A30: AD 08 7C     LDA $7C08
	BNE .Ret								;C2/9A33: D0 28        BNE $9A5D
	INC MPTaken								;C2/9A35: EE 08 7C     INC $7C08
	REP #$20								;C2/9A38: C2 20        REP #$20
	SEC 									;C2/9A3A: 38           SEC 
	LDA CharStruct.CurMP,X							;C2/9A3B: BD 0A 20     LDA $200A,X
	SBC $0E    		;Final MP cost					;C2/9A3E: E5 0E        SBC $0E       
	BCC .NotEnoughMP							;C2/9A40: 90 07        BCC $9A49
	STA CharStruct.CurMP,X							;C2/9A42: 9D 0A 20     STA $200A,X
	TDC 									;C2/9A45: 7B           TDC 
	SEP #$20								;C2/9A46: E2 20        SEP #$20
	RTS 									;C2/9A48: 60           RTS 

.NotEnoughMP
	TDC 									;C2/9A49: 7B           TDC 
	SEP #$20								;C2/9A4A: E2 20        SEP #$20
	LDA MultiCommand							;C2/9A4C: AD 2C 7B     LDA $7B2C
	TAX 									;C2/9A4F: AA           TAX 
	LDA #$7E		;Attack Type Miss				;C2/9A50: A9 7E        LDA #$7E
	STA AtkType,X								;C2/9A52: 9D 2D 7B     STA $7B2D,X
	JSR SetupMsgBoxIndexes							;C2/9A55: 20 65 99     JSR $9965
	LDA #$1E		;Not enough MP message				;C2/9A58: A9 1E        LDA #$1E
	STA MessageBoxes,X							;C2/9A5A: 9D 5F 3C     STA $3C5F,X
.Ret	RTS 									;C2/9A5D: 60           RTS 

%org($C29A5E)
;Apply Stats and Status from gear for all 4 characters
ApplyPartyGear:
	 STZ CurrentChar						;C2/9A5E: 9C 7B 7B     STZ $7B7B	
-	 JSR ApplyGear							;C2/9A61: 20 6F 9A     JSR $9A6F	
	 INC CurrentChar						;C2/9A64: EE 7B 7B     INC $7B7B	
	 LDA CurrentChar						;C2/9A67: AD 7B 7B     LDA $7B7B	
	 CMP #$04							;C2/9A6A: C9 04        CMP #$04	
	 BNE -								;C2/9A6C: D0 F3        BNE $9A61	
	 RTS 								;C2/9A6E: 60           RTS 

%org($C29A6F)
;Apply Stats and Status from gear ($7B7B: Character index 0-3)
%sub(ApplyGear)
ApplyGear:
	LDA CurrentChar								;C2/9A6F: AD 7B 7B     LDA $7B7B	
	JSR CalculateCharOffset							;C2/9A72: 20 EC 01     JSR $01EC	
	REP #$20								;C2/9A75: C2 20        REP #$20		
	TXA 									;C2/9A77: 8A           TXA 
	CLC 									;C2/9A78: 18           CLC 
	ADC #CharStruct.Headgear						;C2/9A79: 69 0E 20     ADC #$200E	
	STA $0E			;pointer to equipment slot			;C2/9A7C: 85 0E        STA $0E		
	TDC 									;C2/9A7E: 7B           TDC 
	SEP #$20								;C2/9A7F: E2 20        SEP #$20		
	LDA CurrentChar								;C2/9A81: AD 7B 7B     LDA $7B7B	
	TAX 									;C2/9A84: AA           TAX 
	LDA ROMTimes84,X	;*84,  7*12 byte equipment slots		;C2/9A85: BF 85 ED D0  LDA $D0ED85,X	
	TAX 									;C2/9A89: AA           TAX 
	STX $10			;GearStats character offset			;C2/9A8A: 86 10        STX $10		
	STX $0A			;GearStats character offset			;C2/9A8C: 86 0A        STX $0A		
	TDC 									;C2/9A8E: 7B           TDC 		
	TAY 									;C2/9A8F: A8           TAY 		
	STY $14			;equipment slot index (0-6)			;C2/9A90: 84 14        STY $14		

.CopySevenItemsData:		;copy data for all 7 item slots from ROM
	LDY $14									;C2/9A92: A4 14        LDY $14		
	LDA ($0E),Y		;current equipment slot				;C2/9A94: B1 0E        LDA ($0E),Y	
	REP #$20								;C2/9A96: C2 20        REP #$20		
	JSR ShiftMultiply_4							;C2/9A98: 20 B7 01     JSR $01B7	
	STA $16			;current equipment *4				;C2/9A9B: 85 16        STA $16		
	ASL 			;current equipment *8				;C2/9A9D: 0A           ASL 		
	CLC 									;C2/9A9E: 18           CLC 
	ADC $16									;C2/9A9F: 65 16        ADC $16		
	TAX 			;equipment *12, offset into ROMItems data	;C2/9AA1: AA           TAX 		
	TDC 									;C2/9AA2: 7B           TDC 		
	SEP #$20								;C2/9AA3: E2 20        SEP #$20		
	STZ $18									;C2/9AA5: 64 18        STZ $18		
	LDY $10									;C2/9AA7: A4 10        LDY $10		

.CopyOneItemData		;copy 12 bytes of data for current item							
	LDA !ROMItems,X								;C2/9AA9: BF 00 00 D1  LDA $D10000,X	
	STA !GearStats,Y							;C2/9AAD: 99 49 40     STA $4049,Y	
	INX 									;C2/9AB0: E8           INX 		
	INY 									;C2/9AB1: C8           INY 
	INC $18									;C2/9AB2: E6 18        INC $18
	LDA $18									;C2/9AB4: A5 18        LDA $18
	CMP #$0C		;12 bytes per item				;C2/9AB6: C9 0C        CMP #$0C		
	BNE .CopyOneItemData							;C2/9AB8: D0 EF        BNE $9AA9
															
	REP #$20								;C2/9ABA: C2 20        REP #$20		
	CLC 									;C2/9ABC: 18           CLC 
	LDA $10									;C2/9ABD: A5 10        LDA $10		
	ADC #$000C		;next item in GearStats				;C2/9ABF: 69 0C 00     ADC #$000C
	STA $10									;C2/9AC2: 85 10        STA $10		
	TDC 									;C2/9AC4: 7B           TDC 
	SEP #$20								;C2/9AC5: E2 20        SEP #$20		
	INC $14			;next equipment slot index 			;C2/9AC7: E6 14        INC $14
	LDA $14									;C2/9AC9: A5 14        LDA $14
	CMP #$07		;7 slots					;C2/9ACB: C9 07        CMP #$07		
	BNE .CopySevenItemsData							;C2/9ACD: D0 C3        BNE $9A92
															
	TDC 									;C2/9ACF: 7B           TDC 		
	TAX 									;C2/9AD0: AA           TAX 		
	STX Temp		;scratch area					;C2/9AD1: 8E 20 26     STX $2620	
	STX TempStats								;C2/9AD4: 8E 22 26     STX $2622	
	STX TempStats+2								;C2/9AD7: 8E 24 26     STX $2624
	STX TempStats+4								;C2/9ADA: 8E 26 26     STX $2626
	STX TempStats+6								;C2/9ADD: 8E 28 26     STX $2628
	STX $12									;C2/9AE0: 86 12        STX $12		
	TAY 									;C2/9AE2: A8           TAY 		
	LDX AttackerOffset							;C2/9AE3: A6 32        LDX $32		
															
.Add1000ToStats		;copies stats to a 16-bit temp area and adds 1000 
			;likely an attempt to handle negative numbers better, but they completely fail anyway
	LDA CharStruct.BaseStr,X						;C2/9AE5: BD 24 20     LDA $2024,X	
	REP #$20								;C2/9AE8: C2 20        REP #$20		
	CLC 									;C2/9AEA: 18           CLC 
	ADC #$03E8		;+1000						;C2/9AEB: 69 E8 03     ADC #$03E8	
	STA TempStats,Y								;C2/9AEE: 99 22 26     STA $2622,Y	
	TDC 									;C2/9AF1: 7B           TDC 		
	SEP #$20								;C2/9AF2: E2 20        SEP #$20		
	INX 									;C2/9AF4: E8           INX 
	INY 									;C2/9AF5: C8           INY 
	INY 									;C2/9AF6: C8           INY 
	INC $12									;C2/9AF7: E6 12        INC $12		
	LDA $12									;C2/9AF9: A5 12        LDA $12		
	CMP #$04		;4 stats, Str/Agi/Vit/Mag			;C2/9AFB: C9 04        CMP #$04		
	BNE .Add1000ToStats							;C2/9AFD: D0 E6        BNE $9AE5		
															
	LDY $0A			;GearStats character offset			;C2/9AFF: A4 0A        LDY $0A

.ApplyStatsElementUp		;adds stat and element up bonuses for all 7 item slots
	LDA GearStats.ElementOrStatsUp,Y					;C2/9B01: B9 4C 40     LDA $404C,Y	
	BMI .Stats								;C2/9B04: 30 0A        BMI $9B10	
	ORA Temp								;C2/9B06: 0D 20 26     ORA $2620	
	STA Temp								;C2/9B09: 8D 20 26     STA $2620	
	REP #$20								;C2/9B0C: C2 20        REP #$20		
	BRA .NextItemStats							;C2/9B0E: 80 35        BRA $9B45	
	
.Stats									
	PHA 									;C2/9B10: 48           PHA 		
	AND #$07		;stat bonus bits				;C2/9B11: 29 07	       AND #$07	
	ASL									;C2/9B13: 0A	       ASL		
	TAX 									;C2/9B14: AA           TAX 		
	LDA ROMStatBonuses,X							;C2/9B15: BF 80 28 D1  LDA $D12880,X	
	STA $14			;stat bonus 1					;C2/9B19: 85 14        STA $14		
	LDA ROMStatBonuses+1,X							;C2/9B1B: BF 81 28 D1  LDA $D12881,X	
	STA $16			;stat bonus 2					;C2/9B1F: 85 16        STA $16		
	PLA 									;C2/9B21: 68           PLA 		
	ASL 									;C2/9B22: 0A           ASL 		
	STA $19			;stats to change				;C2/9B23: 85 19        STA $19		
	TDC 									;C2/9B25: 7B           TDC 		
	TAX 									;C2/9B26: AA           TAX 		
	STZ $15			;high byte of stat bonus 1			;C2/9B27: 64 15        STZ $15		
	STZ $17		;**bug: these should be sign-extended if negative	;C2/9B29: 64 17        STZ $17		
	REP #$20	;	or otherwise handled differently later		;C2/9B2B: C2 20        REP #$20		
.AddBonusStats
	ASL $18			;shift stat bit into carry			;C2/9B2D: 06 18        ASL $18		
	BCS .Bonus2								;C2/9B2F: B0 04        BCS $9B35	
	LDA $14			;bonus 1 if bit unset				;C2/9B31: A5 14        LDA $14		
	BRA +									;C2/9B33: 80 02        BRA $9B37	
.Bonus2	LDA $16			;bonus 2 if bit set				;C2/9B35: A5 16        LDA $16
+	CLC 									;C2/9B37: 18           CLC 
	ADC TempStats,X		;adds Bonus					;C2/9B38: 7D 22 26     ADC $2622,X	
	STA TempStats,X		;will now be near 1255 if negative bonus 	;C2/9B3B: 9D 22 26     STA $2622,X	
	INX 									;C2/9B3E: E8           INX 
	INX 									;C2/9B3F: E8           INX 
	CPX #$0008		;4 stats					;C2/9B40: E0 08 00     CPX #$0008	
	BNE .AddBonusStats							;C2/9B43: D0 E8        BNE $9B2D
															
.NextItemStats
	TYA 									;C2/9B45: 98           TYA 
	CLC 									;C2/9B46: 18           CLC 
	ADC #$000C		;next item slot in GearStats table		;C2/9B47: 69 0C 00     ADC #$000C	
	TAY 									;C2/9B4A: A8           TAY 		
	TDC 									;C2/9B4B: 7B           TDC 		
	SEP #$20								;C2/9B4C: E2 20        SEP #$20	
	INC $13			;item slot index				;C2/9B4E: E6 13        INC $13		
	LDA $13									;C2/9B50: A5 13        LDA $13		
	CMP #$07		;7 item slots					;C2/9B52: C9 07        CMP #$07	
	BNE .ApplyStatsElementUp						;C2/9B54: D0 AB        BNE $9B01	
															
	TDC 									;C2/9B56: 7B           TDC 		
	TAX 									;C2/9B57: AA           TAX 
	REP #$20								;C2/9B58: C2 20        REP #$20	
.Sub1000FromStats															
	SEC 									;C2/9B5A: 38           SEC 		
	LDA TempStats,X								;C2/9B5B: BD 22 26     LDA $2622,X	
	SBC #$03E8	;-1000							;C2/9B5E: E9 E8 03     SBC #$03E8	
	BCS +	;attempts detect and to 0 out negative numbers			;C2/9B61: B0 01        BCS $9B64	
	TDC 	;but due to the earlier bug this check always passes		;C2/9B63: 7B           TDC 		
+	STA TempStats,X								;C2/9B64: 9D 22 26     STA $2622,X	
	INX 									;C2/9B67: E8           INX 
	INX 									;C2/9B68: E8           INX 
	CPX #$0008								;C2/9B69: E0 08 00     CPX #$0008
	BNE .Sub1000FromStats							;C2/9B6C: D0 EC        BNE $9B5A
																
	TDC 		;copying just low bytes 				;C2/9B6E: 7B           TDC 
	SEP #$20	;this fixes negative bonuses unless they underflowed	;C2/9B6F: E2 20        SEP #$20	
	LDY $0A			;GearStats character offset			;C2/9B71: A4 0A        LDY $0A		
	LDX AttackerOffset							;C2/9B73: A6 32        LDX $32		
	LDA Temp	;element up						;C2/9B75: AD 20 26     LDA $2620	
	AND #$7F	;high bit used as stats flag, can't have +water on gear ;C2/9B78: 29 7F        AND #$7F	
	STA CharStruct.ElementUp,X						;C2/9B7A: 9D 22 20     STA $2022,X	
	LDA TempStats								;C2/9B7D: AD 22 26     LDA $2622
	STA CharStruct.EquippedStr,X						;C2/9B80: 9D 28 20     STA $2028,X	
	LDA TempStats+2								;C2/9B83: AD 24 26     LDA $2624
	STA CharStruct.EquippedAgi,X						;C2/9B86: 9D 29 20     STA $2029,X	
	LDA TempStats+4								;C2/9B89: AD 26 26     LDA $2626
	STA CharStruct.EquippedVit,X						;C2/9B8C: 9D 2A 20     STA $202A,X	
	LDA TempStats+6								;C2/9B8F: AD 28 26     LDA $2628
	STA CharStruct.EquippedMag,X						;C2/9B92: 9D 2B 20     STA $202B,X	
	STZ CharStruct.MSwordElemental1,X					;C2/9B95: 9E 50 20     STZ $2050,X	
	STZ CharStruct.MSwordElemental2,X					;C2/9B98: 9E 51 20     STZ $2051,X	
	STZ CharStruct.MSwordElemental3,X					;C2/9B9B: 9E 52 20     STZ $2052,X	
	STZ CharStruct.MSwordStatus1,X						;C2/9B9E: 9E 53 20     STZ $2053,X	
	STZ CharStruct.MSwordStatus2,X						;C2/9BA1: 9E 54 20     STZ $2054,X	
	STZ CharStruct.MSwordStatusSpecial,X					;C2/9BA4: 9E 55 20     STZ $2055,X	
	STZ CharStruct.MSwordAnim,X						;C2/9BA7: 9E 7A 20     STZ $207A,X	
	LDA RHWeapon.Category,Y							;C2/9BAA: B9 86 40     LDA $4086,Y	
	STA CharStruct.RHCategory,X						;C2/9BAD: 9D 6C 20     STA $206C,X
	LDA LHWeapon.Category,Y							;C2/9BB0: B9 92 40     LDA $4092,Y	
	STA CharStruct.LHCategory,X						;C2/9BB3: 9D 6D 20     STA $206D,X
	LDA RHWeapon.AtkPower,Y							;C2/9BB6: B9 8C 40     LDA $408C,Y	
	STA CharStruct.MonsterAttack,X						;C2/9BB9: 9D 44 20     STA $2044,X
	LDA LHWeapon.AtkPower,Y							;C2/9BBC: B9 98 40     LDA $4098,Y	
	STA CharStruct.MonsterAttackLH,X					;C2/9BBF: 9D 45 20     STA $2045,X
	LDA RHWeapon.Properties,Y						;C2/9BC2: B9 8A 40     LDA $408A,Y	
	ORA LHWeapon.Properties,Y						;C2/9BC5: 19 96 40     ORA $4096,Y	
	STA CharStruct.WeaponProperties,X					;C2/9BC8: 9D 38 20     STA $2038,X
	CLC 									;C2/9BCB: 18           CLC 
	LDA RHShield.ShieldEvade,Y						;C2/9BCC: B9 73 40     LDA $4073,Y	
	ADC LHShield.ShieldEvade,Y						;C2/9BCF: 79 7F 40     ADC $407F,Y	
	CMP #$63								;C2/9BD2: C9 63        CMP #$63		
	BCC +									;C2/9BD4: 90 02        BCC $9BD8	
	LDA #$63	;99 cap	for Evade					;C2/9BD6: A9 63        LDA #$63		
+	STA CharStruct.Evade,X							;C2/9BD8: 9D 2C 20     STA $202C,X	
	CLC 									;C2/9BDB: 18           CLC 
	LDA Headgear.Defense,Y							;C2/9BDC: B9 50 40     LDA $4050,Y	
	ADC Bodywear.Defense,Y							;C2/9BDF: 79 5C 40     ADC $405C,Y	
	BCS +									;C2/9BE2: B0 0F        BCS $9BF3	
	ADC Accessory.Defense,Y							;C2/9BE4: 79 68 40     ADC $4068,Y	
	BCS +									;C2/9BE7: B0 0A        BCS $9BF3	
	ADC RHShield.Defense,Y							;C2/9BE9: 79 74 40     ADC $4074,Y	
	BCS +									;C2/9BEC: B0 05        BCS $9BF3	
	ADC LHShield.Defense,Y							;C2/9BEE: 79 80 40     ADC $4080,Y	
	BCC ++									;C2/9BF1: 90 02        BCC $9BF5	
+	LDA #$FF	;255 cap for Defense					;C2/9BF3: A9 FF        LDA #$FF		
++	STA CharStruct.Defense,X						;C2/9BF5: 9D 2D 20     STA $202D,X	
	CLC 									;C2/9BF8: 18           CLC 
	LDA Headgear.MEvade,Y							;C2/9BF9: B9 51 40     LDA $4051,Y	
	ADC Bodywear.MEvade,Y							;C2/9BFC: 79 5D 40     ADC $405D,Y	
	ADC Accessory.MEvade,Y							;C2/9BFF: 79 69 40     ADC $4069,Y	
	ADC RHShield.MEvade,Y							;C2/9C02: 79 75 40     ADC $4075,Y	
	ADC LHShield.MEvade,Y							;C2/9C05: 79 81 40     ADC $4081,Y	
	CMP #$63								;C2/9C08: C9 63        CMP #$63		
	BCC +									;C2/9C0A: 90 02        BCC $9C0E	
	LDA #$63	;99 cap	for MEvade					;C2/9C0C: A9 63        LDA #$63		
+	STA CharStruct.MEvade,X							;C2/9C0E: 9D 2E 20     STA $202E,X	
	CLC 									;C2/9C11: 18           CLC 
	LDA Headgear.MDefense,Y							;C2/9C12: B9 52 40     LDA $4052,Y	
	ADC Bodywear.MDefense,Y      						;C2/9C15: 79 5E 40     ADC $405E,Y      
	BCS +       								;C2/9C18: B0 0F        BCS $9C29        
	ADC Accessory.MDefense,Y      						;C2/9C1A: 79 6A 40     ADC $406A,Y      
	BCS +        								;C2/9C1D: B0 0A        BCS $9C29        
	ADC RHShield.MDefense,Y      						;C2/9C1F: 79 76 40     ADC $4076,Y      
	BCS +        								;C2/9C22: B0 05        BCS $9C29        
	ADC LHShield.MDefense,Y      						;C2/9C24: 79 82 40     ADC $4082,Y      
	BCC ++       								;C2/9C27: 90 02        BCC $9C2B        
+	LDA #$FF        ;255 cap for MDef					;C2/9C29: A9 FF        LDA #$FF         
++	STA CharStruct.MDefense,X						;C2/9C2B: 9D 2F 20     STA $202F,X
	LDA Headgear.Properties,Y						;C2/9C2E: B9 4E 40     LDA $404E,Y	
	ORA Bodywear.Properties,Y						;C2/9C31: 19 5A 40     ORA $405A,Y	
	ORA Accessory.Properties,Y						;C2/9C34: 19 66 40     ORA $4066,Y	
	ORA RHShield.Properties,Y						;C2/9C37: 19 72 40     ORA $4072,Y	
	ORA LHShield.Properties,Y						;C2/9C3A: 19 7E 40     ORA $407E,Y	
	STA CharStruct.ArmorProperties,X					;C2/9C3D: 9D 39 20     STA $2039,X	
	TDC 									;C2/9C40: 7B           TDC 		
	TAX 									;C2/9C41: AA           TAX 		
	STX Temp								;C2/9C42: 8E 20 26     STX $2620	
	STX Temp+2		;reusing memory that was TempStats		;C2/9C45: 8E 22 26     STX $2622	
	STX Temp+4								;C2/9C48: 8E 24 26     STX $2624	
	STX $0E			;armor slot index				;C2/9C4B: 86 0E        STX $0E		
	LDY $0A			;GearStats character offset			;C2/9C4D: A4 0A        LDY $0A		
	STY $10									;C2/9C4F: 84 10        STY $10

.CopyArmorElementDef													
	LDY $10			;item offset					;C2/9C51: A4 10        LDY $10		
	LDA GearStats.ElementDef,Y						;C2/9C53: B9 53 40     LDA $4053,Y	
	REP #$20								;C2/9C56: C2 20        REP #$20		
	STA $12									;C2/9C58: 85 12        STA $12		
	JSR ShiftMultiply_4							;C2/9C5A: 20 B7 01     JSR $01B7	
	CLC 									;C2/9C5D: 18           CLC 
	ADC $12			;ROMElementDef offset (ElementDef*5)		;C2/9C5E: 65 12        ADC $12		
	TAX 									;C2/9C60: AA           TAX 		
	TDC 									;C2/9C61: 7B           TDC 		
	SEP #$20								;C2/9C62: E2 20        SEP #$20		
	TAY 									;C2/9C64: A8           TAY 		

.CopyROMElementDef													
	LDA !ROMElementDef,X							;C2/9C65: BF 80 25 D1  LDA $D12580,X	
	ORA Temp,Y								;C2/9C69: 19 20 26     ORA $2620,Y	
	STA Temp,Y								;C2/9C6C: 99 20 26     STA $2620,Y	
	INX 									;C2/9C6F: E8           INX 		
	INY									;C2/9C70: C8           INY		
	CPY #$0005	;5 bytes absorb, evade, immunity, half, weakness	;C2/9C71: C0 05 00     CPY #$0005	
	BNE .CopyROMElementDef							;C2/9C74: D0 EF        BNE $9C65	

	REP #$20								;C2/9C76: C2 20        REP #$20	
	LDA $10		;item offset						;C2/9C78: A5 10        LDA $10		
	CLC									;C2/9C7A: 18           CLC
	ADC #$000C	;next item						;C2/9C7B: 69 0C 00     ADC #$000C	
	STA $10									;C2/9C7E: 85 10        STA $10		
	TDC									;C2/9C80: 7B           TDC
	SEP #$20								;C2/9C81: E2 20        SEP #$20		
	INC $0E		;armor slot index, next slot				;C2/9C83: E6 0E        INC $0E		
	LDA $0E									;C2/9C85: A5 0E        LDA $0E		
	CMP #$05	;5 armor slots						;C2/9C87: C9 05        CMP #$05		
	BNE .CopyArmorElementDef						;C2/9C89: D0 C6        BNE $9C51	
															
	TDC 									;C2/9C8B: 7B           TDC 
	TAY 									;C2/9C8C: A8           TAY 
	LDX AttackerOffset							;C2/9C8D: A6 32        LDX $32		

.ApplyElementDef													
	LDA Temp,Y								;C2/9C8F: B9 20 26     LDA $2620,Y	
	STA CharStruct.EAbsorb,X						;C2/9C92: 9D 30 20     STA $2030,X	
	INX 									;C2/9C95: E8           INX 		
	INY 									;C2/9C96: C8           INY 		
	CPY #$0005	;5 bytes absorb, evade, immunity, half, weakness	;C2/9C97: C0 05 00     CPY #$0005	
	BNE .ApplyElementDef							;C2/9C9A: D0 F3        BNE $9C8F	
															
	STZ Temp								;C2/9C9C: 9C 20 26     STZ $2620	
	STZ Temp+1								;C2/9C9F: 9C 21 26     STZ $2621	
	STZ Temp+2								;C2/9CA2: 9C 22 26     STZ $2622	
	STZ $0E									;C2/9CA5: 64 0E        STZ $0E		
	LDX $0A									;C2/9CA7: A6 0A        LDX $0A		
	STX $10		;GearStats character offset				;C2/9CA9: 86 10        STX $10		

.CopyROMStatusImmunities:												
	LDY $10									;C2/9CAB: A4 10        LDY $10
	LDA GearStats.Status,Y							;C2/9CAD: B9 54 40     LDA $4054,Y	
	STA $24									;C2/9CB0: 85 24        STA $24		
	LDA #$07								;C2/9CB2: A9 07        LDA #$07		
	STA $25									;C2/9CB4: 85 25        STA $25
	JSR Multiply_8bit							;C2/9CB6: 20 F1 00     JSR $00F1	
	TDC 									;C2/9CB9: 7B           TDC 		
	TAY 									;C2/9CBA: A8           TAY 		
	LDX $26		;ROMArmorStatus offset (GearStats.Status*7)		;C2/9CBB: A6 26        LDX $26		

.CopyROMImmunities													
	LDA ROMArmorStatus.Immune1,X						;C2/9CBD: BF C4 26 D1  LDA $D126C4,X	
	ORA Temp,Y								;C2/9CC1: 19 20 26     ORA $2620,Y	
	STA Temp,Y								;C2/9CC4: 99 20 26     STA $2620,Y	
	INX 									;C2/9CC7: E8           INX 		
	INY 									;C2/9CC8: C8           INY 		
	CPY #$0003	;3 bytes of immunities					;C2/9CC9: C0 03 00     CPY #$0003	
	BNE .CopyROMImmunities							;C2/9CCC: D0 EF        BNE $9CBD	
															
	LDA $0E		;armor slot index					;C2/9CCE: A5 0E        LDA $0E		
	PHA									;C2/9CD0: 48           PHA
	JSR ApplyEquipmentStatus						;C2/9CD1: 20 01 9D     JSR $9D01	
	PLA 									;C2/9CD4: 68           PLA 
	STA $0E									;C2/9CD5: 85 0E        STA $0E		
	REP #$20								;C2/9CD7: C2 20        REP #$20		
	LDA $10		;GearStats offset					;C2/9CD9: A5 10        LDA $10		
	CLC 									;C2/9CDB: 18           CLC 		
	ADC #$000C	;next item						;C2/9CDC: 69 0C 00     ADC #$000C	
	STA $10									;C2/9CDF: 85 10        STA $10		
	TDC 									;C2/9CE1: 7B           TDC 		
	SEP #$20								;C2/9CE2: E2 20        SEP #$20		
	INC $0E		;armor slot index, next slot				;C2/9CE4: E6 0E        INC $0E		
	LDA $0E									;C2/9CE6: A5 0E        LDA $0E		
	CMP #$05	;5 armor slots						;C2/9CE8: C9 05        CMP #$05		
	BNE .CopyROMStatusImmunities						;C2/9CEA: D0 BF        BNE $9CAB	
															
	TDC 									;C2/9CEC: 7B           TDC 		
	TAY 									;C2/9CED: A8           TAY 		
	LDX AttackerOffset							;C2/9CEE: A6 32        LDX $32		

.ApplyImmunities													
	LDA CharStruct.StatusImmune1,X						;C2/9CF0: BD 35 20     LDA $2035,X	
	ORA Temp,Y								;C2/9CF3: 19 20 26     ORA $2620,Y	
	STA CharStruct.StatusImmune1,X						;C2/9CF6: 9D 35 20     STA $2035,X	

	INX 									;C2/9CF9: E8           INX 		
	INY 									;C2/9CFA: C8           INY 		
	CPY #$0003	;Status 1-3 immunity					;C2/9CFB: C0 03 00     CPY #$0003	
	BNE .ApplyImmunities							;C2/9CFE: D0 F0        BNE $9CF0	
															
	RTS									;C2/9D00: 60           RTS
%endsub()

%org($C29D01)
;Apply status from equipment 
;uses $26 as offset into ROMArmorStatus table
;due to design or possibly a **bug, only the last piece of a gear with always status will apply (for each type)
;zombie from equipment is also bugged, but doesn't exist in vanilla ff5
%sub(ApplyEquipmentStatus)
ApplyEquipmentStatus:
	STZ $13		;set to 1 for always status, 0 for initial		;C2/9D01: 64 13        STZ $13		
	LDY AttackerOffset							;C2/9D03: A4 32        LDY $32		
	LDX $26		;ROMArmorStatus Offset					;C2/9D05: A6 26        LDX $26		
	LDA ROMArmorStatus.Status1,X						;C2/9D07: BF C0 26 D1  LDA $D126C0,X	
	BEQ .CheckUncontrolled							;C2/9D0B: F0 3C        BEQ $9D49	
	STA $12		;Status 1 to apply					;C2/9D0D: 85 12        STA $12		
	BMI .AlwaysS1								;C2/9D0F: 30 23        BMI $9D34	
	AND #$04	;poison							;C2/9D11: 29 04        AND #$04		
	BEQ .ApplyS1	;only poison needs a timer				;C2/9D13: F0 2A        BEQ $9D3F	
	LDA $12									;C2/9D15: A5 12        LDA $12		
	AND #$FB	;statuses except poison					;C2/9D17: 29 FB        AND #$FB		
	STA $12									;C2/9D19: 85 12        STA $12		
	LDA CharStruct.Status1,Y						;C2/9D1B: B9 1A 20     LDA $201A,Y	
	ORA CharStruct.AlwaysStatus1,Y						;C2/9D1E: 19 70 20     ORA $2070,Y	
	AND #$04	;poison							;C2/9D21: 29 04        AND #$04		
	BNE .ApplyS1	;already poisoned, don't need a new timer		;C2/9D23: D0 1A        BNE $9D3F	
	LDA CharStruct.Status1,Y						;C2/9D25: B9 1A 20     LDA $201A,Y	
	ORA #$04	;set poison						;C2/9D28: 09 04        ORA #$04		
	STA CharStruct.Status1,Y						;C2/9D2A: 99 1A 20     STA $201A,Y	
	LDA #$01	;poison timer						;C2/9D2D: A9 01        LDA #$01		
	JSR StartTimerCurrentChar						;C2/9D2F: 20 2E 9F     JSR $9F2E	
	BRA .ApplyS1								;C2/9D32: 80 0B        BRA $9D3F
.AlwaysS1		;high bit indicates always status instead of just initial
	INC $13		;always status instead of initial (for later statuses)	;C2/9D34: E6 13        INC $13
	LDA $12		;Status 1 to apply					;C2/9D36: A5 12        LDA $12		
	AND #$7F	;clear always bit because it also means dead		;C2/9D38: 29 7F        AND #$7F		
	STA CharStruct.AlwaysStatus1,Y						;C2/9D3A: 99 70 20     STA $2070,Y	
	BRA .CheckUncontrolled							;C2/9D3D: 80 0A        BRA $9D49
.ApplyS1									;:
	LDY AttackerOffset							;C2/9D3F: A4 32        LDY $32		
	LDA CharStruct.Status1,Y						;C2/9D41: B9 1A 20     LDA $201A,Y	
	ORA $12									;C2/9D44: 05 12        ORA $12		
	STA CharStruct.Status1,Y						;C2/9D46: 99 1A 20     STA $201A,Y	

.CheckUncontrolled									
	LDY AttackerOffset							;C2/9D49: A4 32        LDY $32		
	LDX $26		;ROMArmorStatus Offset					;C2/9D4B: A6 26        LDX $26		
	LDA ROMArmorStatus.Status2,X						;C2/9D4D: BF C1 26 D1  LDA $D126C1,X	
	STA $12		;Status 2 to apply					;C2/9D51: 85 12        STA $12		
	LDA CharStruct.Job,Y							;C2/9D53: B9 01 20     LDA $2001,Y	
	CMP #$06	;Berserker						;C2/9D56: C9 06        CMP #$06		
	BEQ .Berserker								;C2/9D58: F0 0C        BEQ $9D66	
	LDA CharStruct.Status1,Y						;C2/9D5A: B9 1A 20     LDA $201A,Y
	ORA CharStruct.AlwaysStatus1,Y						;C2/9D5D: 19 70 20     ORA $2070,Y	
	AND #$02	;Zombie							;C2/9D60: 29 02        AND #$02		
	BNE .Uncontrolled							;C2/9D62: D0 0C        BNE $9D70	
	BEQ .Status2								;C2/9D64: F0 25        BEQ $9D8B	
.Berserker	
	LDA EncounterInfo.IntroFX						;C2/9D66: AD EF 3E     LDA $3EEF	
	BMI .Uncontrolled	;don't berserk during the credits demo battles	;C2/9D69: 30 05        BMI $9D70	
	LDA #$08	;Berserk						;C2/9D6B: A9 08        LDA #$08		
	STA CharStruct.AlwaysStatus2,Y						;C2/9D6D: 99 71 20     STA $2071,Y	
.Uncontrolled						
	LDA CurrentChar								;C2/9D70: AD 7B 7B     LDA $7B7B	
	TAX 									;C2/9D73: AA           TAX 
	LDA #$3C								;C2/9D74: A9 3C        LDA #$3C		
	STA UncontrolledATB,X							;C2/9D76: 9D 04 7C     STA $7C04,X	
	LDA CurrentChar								;C2/9D79: AD 7B 7B     LDA $7B7B	
	ASL 									;C2/9D7C: 0A           ASL 		
	TAX 									;C2/9D7D: AA           TAX 
	LDA ROMTimes11w,X							;C2/9D7E: BF 61 ED D0  LDA $D0ED61,X	
	TAX 									;C2/9D82: AA           TAX 
	TDC 									;C2/9D83: 7B           TDC 		
	STA EnableTimer.ATB,X	;disable normal ATB				;C2/9D84: 9D FB 3C     STA $3CFB,X	
	INC 									;C2/9D87: 1A           INC 
	STA CurrentTimer.ATB,X	;normal ATB timer set at 1			;C2/9D88: 9D 7F 3D     STA $3D7F,X	

.Status2								
	LDA $12		;Status 2 to apply					;C2/9D8B: A5 12        LDA $12		
	BNE +									;C2/9D8D: D0 03        BNE $9D92	
	JMP .Status3	;Nothing to apply					;C2/9D8F: 4C 26 9E     JMP $9E26	
+	STA $12									;C2/9D92: 85 12        STA $12		
	LDA $13		;always status						;C2/9D94: A5 13        LDA $13		
	BNE .AlwaysS2								;C2/9D96: D0 7D        BNE $9E15	
	LDA $12		;Status 2 to apply					;C2/9D98: A5 12        LDA $12
	AND #$A4	;old, paralyze, mute					;C2/9D9A: 29 A4        AND #$A4		
	BEQ .ApplyS2	;only those need timers					;C2/9D9C: F0 7E        BEQ $9E1C	
	LDA $12		;Status 2 to apply					;C2/9D9E: A5 12        LDA $12
	AND #$80	;old							;C2/9DA0: 29 80        AND #$80		
	BEQ .CheckPara								;C2/9DA2: F0 1D        BEQ $9DC1	
	LDA $12									;C2/9DA4: A5 12        LDA $12		
	AND #$7F	;-old							;C2/9DA6: 29 7F        AND #$7F		
	STA $12		;Status 2 to apply, without old				;C2/9DA8: 85 12        STA $12		
	LDA CharStruct.Status2,Y						;C2/9DAA: B9 1B 20     LDA $201B,Y	
	ORA CharStruct.AlwaysStatus2,Y						;C2/9DAD: 19 71 20     ORA $2071,Y	
	AND #$80	;old							;C2/9DB0: 29 80        AND #$80		
	BNE .CheckPara	;already old						;C2/9DB2: D0 0D        BNE $9DC1	
	LDA CharStruct.Status2,Y						;C2/9DB4: B9 1B 20     LDA $201B,Y	
	ORA #$80	;+old							;C2/9DB7: 09 80        ORA #$80		
	STA CharStruct.Status2,Y						;C2/9DB9: 99 1B 20     STA $201B,Y	
	LDA #$06	;old timer						;C2/9DBC: A9 06        LDA #$06		
	JSR StartTimerCurrentChar						;C2/9DBE: 20 2E 9F     JSR $9F2E	
.CheckPara		;oddly inefficient compared to the other statuses
	LDA $12									;C2/9DC1: A5 12        LDA $12		
	AND #$20	;paralyze						;C2/9DC3: 29 20        AND #$20		
	BEQ .CheckMute								;C2/9DC5: F0 27        BEQ $9DEE	
	LDA $12		;Status 2 to apply					;C2/9DC7: A5 12        LDA $12		
	STA $14									;C2/9DC9: 85 14        STA $14		
	AND #$DF	;without paralyze					;C2/9DCB: 29 DF        AND #$DF		
	STA $12		;Status 2 to apply without paralyze			;C2/9DCD: 85 12        STA $12		
	LDY AttackerOffset							;C2/9DCF: A4 32        LDY $32		
	LDA CharStruct.Status2,Y						;C2/9DD1: B9 1B 20     LDA $201B,Y	
	ORA CharStruct.AlwaysStatus2,Y						;C2/9DD4: 19 71 20     ORA $2071,Y	
	AND #$20	;paralyze						;C2/9DD7: 29 20        AND #$20		
	BNE .CheckMute	;already paralyzed					;C2/9DD9: D0 13        BNE $9DEE	
	LDA $14		;Status 2 to apply					;C2/9DDB: A5 14        LDA $14		
	AND #$20								;C2/9DDD: 29 20        AND #$20		
	STA $14		;only paralyze						;C2/9DDF: 85 14        STA $14		
	LDA CharStruct.Status2,Y						;C2/9DE1: B9 1B 20     LDA $201B,Y	
	ORA $14		;+paralyze						;C2/9DE4: 05 14        ORA $14		
	STA CharStruct.Status2,Y						;C2/9DE6: 99 1B 20     STA $201B,Y	
	LDA #$09	;paralyze timer						;C2/9DE9: A9 09        LDA #$09		
	JSR StartTimerCurrentChar						;C2/9DEB: 20 2E 9F     JSR $9F2E	
.CheckMute
	LDA $12		;Status 2 to apply					;C2/9DEE: A5 12        LDA $12		
	AND #$04	;mute							;C2/9DF0: 29 04        AND #$04		
	BEQ .GoApplyS2								;C2/9DF2: F0 1F        BEQ $9E13	
	LDA $12									;C2/9DF4: A5 12        LDA $12		
	AND #$FB								;C2/9DF6: 29 FB        AND #$FB		
	STA $12		;Status 2 to apply without mute				;C2/9DF8: 85 12        STA $12		
	LDY AttackerOffset							;C2/9DFA: A4 32        LDY $32		
	LDA CharStruct.Status2,Y						;C2/9DFC: B9 1B 20     LDA $201B,Y	
	ORA CharStruct.AlwaysStatus2,Y						;C2/9DFF: 19 71 20     ORA $2071,Y	
	AND #$04	;mute							;C2/9E02: 29 04        AND #$04		
	BNE .GoApplyS2	;already mute						;C2/9E04: D0 0D        BNE $9E13	
	LDA CharStruct.Status2,Y						;C2/9E06: B9 1B 20     LDA $201B,Y	
	ORA #$04	;+mute							;C2/9E09: 09 04        ORA #$04		
	STA CharStruct.Status2,Y						;C2/9E0B: 99 1B 20     STA $201B,Y	
	LDA #$04	;mute timer						;C2/9E0E: A9 04        LDA #$04		
	JSR StartTimerCurrentChar						;C2/9E10: 20 2E 9F     JSR $9F2E	
.GoApplyS2								
	BRA .ApplyS2								;C2/9E13: 80 07        BRA $9E1C	
.AlwaysS2
	LDA $12		;Status 2 to apply					;C2/9E15: A5 12        LDA $12		
	STA CharStruct.AlwaysStatus2,Y						;C2/9E17: 99 71 20     STA $2071,Y	
	BRA .Status3								;C2/9E1A: 80 0A        BRA $9E26	
.ApplyS2
	LDY AttackerOffset							;C2/9E1C: A4 32        LDY $32		
	LDA CharStruct.Status2,Y						;C2/9E1E: B9 1B 20     LDA $201B,Y	
	ORA $12		;+Status 2						;C2/9E21: 05 12        ORA $12		
	STA CharStruct.Status2,Y						;C2/9E23: 99 1B 20     STA $201B,Y
	
.Status3
	LDY AttackerOffset							;C2/9E26: A4 32        LDY $32		
	LDX $26		;ROMArmorStatus Offset					;C2/9E28: A6 26        LDX $26		
	LDA ROMArmorStatus.Status3,X						;C2/9E2A: BF C2 26 D1  LDA $D126C2,X	
	BNE +									;C2/9E2E: D0 03        BNE $9E33	
	JMP .Status4	;no status 3 to apply					;C2/9E30: 4C BC 9E     JMP $9EBC	
+	STA $12		;status 3 to apply					;C2/9E33: 85 12        STA $12		
	LDA $13		;always status						;C2/9E35: A5 13        LDA $13		
	BNE .AlwaysS3								;C2/9E37: D0 72        BNE $9EAB	
	LDA $12		;status 3 to apply					;C2/9E39: A5 12        LDA $12		
	AND #$91	;reflect/stop/regen					;C2/9E3B: 29 91        AND #$91	
	BEQ .ApplyS3	;only those need timers					;C2/9E3D: F0 73        BEQ $9EB2	
	LDA $12									;C2/9E3F: A5 12        LDA $12		
	AND #$80	;Reflect						;C2/9E41: 29 80        AND #$80	
	BEQ .CheckStop								;C2/9E43: F0 1D        BEQ $9E62	
	LDA $12									;C2/9E45: A5 12        LDA $12		
	AND #$7F	;status 3 to apply without reflect			;C2/9E47: 29 7F        AND #$7F	
	STA $12									;C2/9E49: 85 12        STA $12		
	LDA CharStruct.Status3,Y						;C2/9E4B: B9 1C 20     LDA $201C,Y	
	ORA CharStruct.AlwaysStatus3,Y						;C2/9E4E: 19 72 20     ORA $2072,Y	
	AND #$80	;reflect						;C2/9E51: 29 80        AND #$80	
	BNE .CheckStop	;already reflected					;C2/9E53: D0 0D        BNE $9E62	
	LDA CharStruct.Status3,Y						;C2/9E55: B9 1C 20     LDA $201C,Y	
	ORA #$80	;+reflect						;C2/9E58: 09 80        ORA #$80	
	STA CharStruct.Status3,Y						;C2/9E5A: 99 1C 20     STA $201C,Y	
	LDA #$02	;reflect timer						;C2/9E5D: A9 02        LDA #$02	
	JSR StartTimerCurrentChar						;C2/9E5F: 20 2E 9F     JSR $9F2E	
.CheckStop					
	LDA $12		;status 3 to apply					;C2/9E62: A5 12        LDA $12		
	AND #$10	;Stop							;C2/9E64: 29 10        AND #$10	
	BEQ .CheckRegen								;C2/9E66: F0 1C        BEQ $9E84	
	LDA $12									;C2/9E68: A5 12        LDA $12		
	AND #$EF	;status 3 to apply without stop				;C2/9E6A: 29 EF        AND #$EF	
	STA $12									;C2/9E6C: 85 12        STA $12		
	LDY AttackerOffset							;C2/9E6E: A4 32        LDY $32		
	LDA CharStruct.Status3,Y	;always stop isn't a thing, apparently	;C2/9E70: B9 1C 20     LDA $201C,Y	
	AND #$10	;stop							;C2/9E73: 29 10        AND #$10	
	BNE .CheckRegen	;already stopped					;C2/9E75: D0 0D        BNE $9E84	
	LDA CharStruct.Status3,Y						;C2/9E77: B9 1C 20     LDA $201C,Y	
	ORA #$10	;+stop							;C2/9E7A: 09 10        ORA #$10	
	STA CharStruct.Status3,Y						;C2/9E7C: 99 1C 20     STA $201C,Y	
	LDA #$00	;timer for stop status					;C2/9E7F: A9 00        LDA #$00	
	JSR StartTimerCurrentChar						;C2/9E81: 20 2E 9F     JSR $9F2E	
.CheckRegen								
	LDA $12		;status 3 to apply					;C2/9E84: A5 12        LDA $12		
	AND #$01	;regen							;C2/9E86: 29 01        AND #$01	
	BEQ .GoApplyS3								;C2/9E88: F0 1F        BEQ $9EA9	
	LDA $12									;C2/9E8A: A5 12        LDA $12		
	AND #$FE	;status 3 to apply without regen			;C2/9E8C: 29 FE        AND #$FE	
	STA $12									;C2/9E8E: 85 12        STA $12		
	LDY AttackerOffset							;C2/9E90: A4 32        LDY $32		
	LDA CharStruct.Status3,Y						;C2/9E92: B9 1C 20     LDA $201C,Y	
	ORA CharStruct.AlwaysStatus3,Y						;C2/9E95: 19 72 20     ORA $2072,Y	
	AND #$01	;regen							;C2/9E98: 29 01        AND #$01	
	BNE .GoApplyS3	;already regen						;C2/9E9A: D0 0D        BNE $9EA9	
	LDA CharStruct.Status3,Y						;C2/9E9C: B9 1C 20     LDA $201C,Y	
	ORA #$01	;+regen							;C2/9E9F: 09 01        ORA #$01	
	STA CharStruct.Status3,Y						;C2/9EA1: 99 1C 20     STA $201C,Y	
	LDA #$07	;regen timer						;C2/9EA4: A9 07        LDA #$07	
	JSR StartTimerCurrentChar						;C2/9EA6: 20 2E 9F     JSR $9F2E	
.GoApplyS3
	BRA .ApplyS3								;C2/9EA9: 80 07        BRA $9EB2	
.AlwaysS3
	LDA $12		;status 3 to apply					;C2/9EAB: A5 12        LDA $12		
	STA CharStruct.AlwaysStatus3,Y						;C2/9EAD: 99 72 20     STA $2072,Y	
	BRA .Status4								;C2/9EB0: 80 0A        BRA $9EBC	
.ApplyS3
	LDY AttackerOffset							;C2/9EB2: A4 32        LDY $32		
	LDA CharStruct.Status3,Y						;C2/9EB4: B9 1C 20     LDA $201C,Y	
	ORA $12		;+status 3 						;C2/9EB7: 05 12        ORA $12		
	STA CharStruct.Status3,Y						;C2/9EB9: 99 1C 20     STA $201C,Y	

.Status4
	LDY AttackerOffset							;C2/9EBC: A4 32        LDY $32		
	LDX $26		;ROMArmorStatus Offse					;C2/9EBE: A6 26        LDX $26		
	LDA ROMArmorStatus.Status4,X						;C2/9EC0: BF C3 26 D1  LDA $D126C3,X	
	BEQ .Ret								;C2/9EC4: F0 67        BEQ $9F2D	
	STA $12		;Status 4 to apply					;C2/9EC6: 85 12        STA $12		
	LDA $13		;always status						;C2/9EC8: A5 13        LDA $13		
	BNE .AlwaysS4								;C2/9ECA: D0 50        BNE $9F1C	
	LDA $12									;C2/9ECC: A5 12        LDA $12		
	AND #$18	;Countdown and HP Leak					;C2/9ECE: 29 18        AND #$18	
	BEQ .ApplyS4	;only those need timers					;C2/9ED0: F0 51        BEQ $9F23	
	LDA $12									;C2/9ED2: A5 12        LDA $12		
	AND #$10	;countdown						;C2/9ED4: 29 10        AND #$10	
	BEQ .CheckLeak								;C2/9ED6: F0 1D        BEQ $9EF5	
	LDA $12									;C2/9ED8: A5 12        LDA $12		
	AND #$EF								;C2/9EDA: 29 EF        AND #$EF	
	STA $12		;Status 4 to apply without countdown			;C2/9EDC: 85 12        STA $12		
	LDA CharStruct.Status4,Y						;C2/9EDE: B9 1D 20     LDA $201D,Y	
	ORA CharStruct.AlwaysStatus4,Y						;C2/9EE1: 19 73 20     ORA $2073,Y	
	AND #$10	;countdown						;C2/9EE4: 29 10        AND #$10	
	BNE .CheckLeak	;already countdown					;C2/9EE6: D0 0D        BNE $9EF5	
	LDA CharStruct.Status4,Y						;C2/9EE8: B9 1D 20     LDA $201D,Y	
	ORA #$10	;+countdown						;C2/9EEB: 09 10        ORA #$10	
	STA CharStruct.Status4,Y						;C2/9EED: 99 1D 20     STA $201D,Y	
	LDA #$03	;timer for countdown status				;C2/9EF0: A9 03        LDA #$03	
	JSR StartTimerCurrentChar						;C2/9EF2: 20 2E 9F     JSR $9F2E	
.CheckLeak								
	LDA $12		;Status 4 to apply					;C2/9EF5: A5 12        LDA $12		
	AND #$08	;HP Leak						;C2/9EF7: 29 08        AND #$08	
	BEQ .GoApplyS4								;C2/9EF9: F0 1F        BEQ $9F1A	
	LDA $12									;C2/9EFB: A5 12        LDA $12		
	AND #$F7	;Status 4 to apply without HP Leak			;C2/9EFD: 29 F7        AND #$F7	
	STA $12									;C2/9EFF: 85 12        STA $12		
	LDY AttackerOffset							;C2/9F01: A4 32        LDY $32		
	LDA CharStruct.Status4,Y						;C2/9F03: B9 1D 20     LDA $201D,Y	
	ORA CharStruct.AlwaysStatus4,Y						;C2/9F06: 19 73 20     ORA $2073,Y	
	AND #$08	;hp leak						;C2/9F09: 29 08        AND #$08	
	BNE .CheckLeak	;**bug: wrong target here, fortunately harmless 	;C2/9F0B: D0 E8        BNE $9EF5	
	LDA CharStruct.Status4,Y						;C2/9F0D: B9 1D 20     LDA $201D,Y	
	ORA #$08	;+hp leak						;C2/9F10: 09 08        ORA #$08	
	STA CharStruct.Status4,Y						;C2/9F12: 99 1D 20     STA $201D,Y	
	LDA #$05	;hp leak timer						;C2/9F15: A9 05        LDA #$05	
	JSR StartTimerCurrentChar						;C2/9F17: 20 2E 9F     JSR $9F2E	
.GoApplyS4								
	BRA .ApplyS4								;C2/9F1A: 80 07        BRA $9F23	
.AlwaysS4
	LDA $12		;Status 4 to apply					;C2/9F1C: A5 12        LDA $12		
	STA CharStruct.AlwaysStatus4,Y						;C2/9F1E: 99 73 20     STA $2073,Y	
	BRA .Ret								;C2/9F21: 80 0A        BRA $9F2D	
.ApplyS4
	LDY AttackerOffset							;C2/9F23: A4 32        LDY $32		
	LDA CharStruct.Status4,Y						;C2/9F25: B9 1D 20     LDA $201D,Y	
	ORA $12		;+Status 4 						;C2/9F28: 05 12        ORA $12		
	STA CharStruct.Status4,Y						;C2/9F2A: 99 1D 20     STA $201D,Y	
.Ret	RTS 									;C2/9F2D: 60           RTS 
%endsub()

%org($C29F2E)
;Start Timer for currently processed character (CurrentChar)
;(A: #timer, $7B7B: character index)
StartTimerCurrentChar:
	TAX							;C2/9F2E: AA           TAX
	LDA #$01						;C2/9F2F: A9 01        LDA #$01
	STA StatusFixedDur					;C2/9F31: 8D D7 3E     STA $3ED7		
	LDA CurrentChar						;C2/9F34: AD 7B 7B     LDA $7B7B		
	JMP StartTimer						;C2/9F37: 4C FD 24     JMP $24FD


%org($C29F3A)
;Replaces the items in CharStruct hand fields with the items from HandItems
;presumably for when they're changed in the item menu
ReplaceHands:
	STZ $12							;C2/9F3A: 64 12        STZ $12
	LDA DisplayInfo.CurrentChar				;C2/9F3C: AD CC 41     LDA $41CC
	JSR CalculateCharOffset					;C2/9F3F: 20 EC 01     JSR $01EC
	LDA DisplayInfo.CurrentChar				;C2/9F42: AD CC 41     LDA $41CC
	JSR ShiftMultiply_4					;C2/9F45: 20 B7 01     JSR $01B7
	STA $0E							;C2/9F48: 85 0E        STA $0E
	ASL 							;C2/9F4A: 0A           ASL 
	CLC 							;C2/9F4B: 18           CLC 
	ADC $0E							;C2/9F4C: 65 0E        ADC $0E
	TAY 		;current char*12			;C2/9F4E: A8           TAY 
	LDA HandItems.ID,Y					;C2/9F4F: B9 AC 37     LDA $37AC,Y
	STA $10		;first hand item id			;C2/9F52: 85 10        STA $10
	LDA HandItems.ID+1,Y					;C2/9F54: B9 AD 37     LDA $37AD,Y
	STA $11		;second hand item id			;C2/9F57: 85 11        STA $11
	CMP $10							;C2/9F59: C5 10        CMP $10
	BCS .HandsOrdered					;C2/9F5B: B0 0A        BCS $9F67
	PHA 		;swapping hands	so they're in order	;C2/9F5D: 48           PHA 
	LDA $10							;C2/9F5E: A5 10        LDA $10
	STA $11							;C2/9F60: 85 11        STA $11
	PLA 							;C2/9F62: 68           PLA 
	STA $10							;C2/9F63: 85 10        STA $10
	INC $12		;flag that hands swapped, to fix at end	;C2/9F65: E6 12        INC $12

.HandsOrdered
	LDA $10							;C2/9F67: A5 10        LDA $10
	ORA $11							;C2/9F69: 05 11        ORA $11
	BNE .NotEmpty						;C2/9F6B: D0 0A        BNE $9F77
	TAY 		;empty hands				;C2/9F6D: A8           TAY 
	STY $16							;C2/9F6E: 84 16        STY $16
	INC 							;C2/9F70: 1A           INC 
	STA $14							;C2/9F71: 85 14        STA $14
	STA $15							;C2/9F73: 85 15        STA $15
	BRA .Finish						;C2/9F75: 80 58        BRA $9FCF

.NotEmpty
	LDA $10							;C2/9F77: A5 10        LDA $10
	BNE .FirstOccupied					;C2/9F79: D0 20        BNE $9F9B
	LDA $11		;other hand is empty			;C2/9F7B: A5 11        LDA $11
	CMP #$80	;armor					;C2/9F7D: C9 80        CMP #$80
	BCS .OnlyShield						;C2/9F7F: B0 0C        BCS $9F8D
	STZ $14		;only weapon				;C2/9F81: 64 14        STZ $14
	LDA $11							;C2/9F83: A5 11        LDA $11
	STA $15							;C2/9F85: 85 15        STA $15
	STZ $16							;C2/9F87: 64 16        STZ $16
	STZ $17							;C2/9F89: 64 17        STZ $17
	BRA .Finish						;C2/9F8B: 80 42        BRA $9FCF
.OnlyShield		;only shield
	TDC 							;C2/9F8D: 7B           TDC 
	INC 							;C2/9F8E: 1A           INC 
	STA $14							;C2/9F8F: 85 14        STA $14
	STZ $15							;C2/9F91: 64 15        STZ $15
	STZ $16							;C2/9F93: 64 16        STZ $16
	LDA $11							;C2/9F95: A5 11        LDA $11
	STA $17							;C2/9F97: 85 17        STA $17
	BRA .Finish						;C2/9F99: 80 34        BRA $9FCF

.FirstOccupied
	LDA $10							;C2/9F9B: A5 10        LDA $10
	CMP #$80	;armor					;C2/9F9D: C9 80        CMP #$80
	BCC .Weapon						;C2/9F9F: 90 0E        BCC $9FAF
	STZ $14		;two shields				;C2/9FA1: 64 14        STZ $14
	STZ $15							;C2/9FA3: 64 15        STZ $15
	LDA $10							;C2/9FA5: A5 10        LDA $10
	STA $16							;C2/9FA7: 85 16        STA $16
	LDA $11							;C2/9FA9: A5 11        LDA $11
	STA $17							;C2/9FAB: 85 17        STA $17
	BRA .Finish						;C2/9FAD: 80 20        BRA $9FCF
.Weapon			;weapon and something
	LDA $11							;C2/9FAF: A5 11        LDA $11
	CMP #$80	;armor					;C2/9FB1: C9 80        CMP #$80
	BCC .TwoWeapons						;C2/9FB3: 90 0E        BCC $9FC3
	LDA $10		;weapon and shield			;C2/9FB5: A5 10        LDA $10
	STA $14							;C2/9FB7: 85 14        STA $14
	STZ $15							;C2/9FB9: 64 15        STZ $15
	STZ $16							;C2/9FBB: 64 16        STZ $16
	LDA $11							;C2/9FBD: A5 11        LDA $11
	STA $17							;C2/9FBF: 85 17        STA $17
	BRA .Finish						;C2/9FC1: 80 0C        BRA $9FCF
.TwoWeapons		;two weapons
	LDA $10							;C2/9FC3: A5 10        LDA $10
	STA $14							;C2/9FC5: 85 14        STA $14
	LDA $11							;C2/9FC7: A5 11        LDA $11
	STA $15							;C2/9FC9: 85 15        STA $15
	STZ $16							;C2/9FCB: 64 16        STZ $16
	STZ $17							;C2/9FCD: 64 17        STZ $17
.Finish
	JSR SwapHands						;C2/9FCF: 20 E7 9F     JSR $9FE7
	LDA $14							;C2/9FD2: A5 14        LDA $14
	STA CharStruct.RHWeapon,X				;C2/9FD4: 9D 13 20     STA $2013,X
	LDA $15							;C2/9FD7: A5 15        LDA $15
	STA CharStruct.LHWeapon,X				;C2/9FD9: 9D 14 20     STA $2014,X
	LDA $16							;C2/9FDC: A5 16        LDA $16
	STA CharStruct.RHShield,X				;C2/9FDE: 9D 11 20     STA $2011,X
	LDA $17							;C2/9FE1: A5 17        LDA $17
	STA CharStruct.LHShield,X				;C2/9FE3: 9D 12 20     STA $2012,X
	RTS 							;C2/9FE6: 60           RTS 

%org($C29FE7)
;swaps some temp variables if $12 is Set
;utility code for ReplaceHands routine
;$14 <-> $15
;$16 <-> $17
SwapHands:
	LDA $12		;flag that hands were swapped		;C2/9FE7: A5 12        LDA $12
	BEQ .Ret	;if not, don't do anything		;C2/9FE9: F0 14        BEQ $9FFF
	LDA $14							;C2/9FEB: A5 14        LDA $14
	PHA 							;C2/9FED: 48           PHA 
	LDA $15							;C2/9FEE: A5 15        LDA $15
	STA $14							;C2/9FF0: 85 14        STA $14
	PLA 							;C2/9FF2: 68           PLA 
	STA $15							;C2/9FF3: 85 15        STA $15
	LDA $16							;C2/9FF5: A5 16        LDA $16
	PHA 							;C2/9FF7: 48           PHA 
	LDA $17							;C2/9FF8: A5 17        LDA $17
	STA $16							;C2/9FFA: 85 16        STA $16
	PLA 							;C2/9FFC: 68           PLA 
	STA $17							;C2/9FFD: 85 17        STA $17
.Ret	RTS 							;C2/9FFF: 60           RTS 


print "C2 bank combat code ended one byte before ",pc
;print "Free space before start of menu code: ",$C2A000-pc," bytes"	;doesnt work, can't do math with pc here

warnpc $C2A000	;make sure code hasn't grown beyond available space
pad $C2A000	;$C2A000 is the start of the menu code
		;fortunately it is programmed as if it is in its own bank, so does not call any code from the battle portion of C2
		
